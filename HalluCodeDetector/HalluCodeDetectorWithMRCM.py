import json
import numpy as np
from utils.Similarity import final_similarity

def Calculate_SimilarityScore(codes, weights):
    scores = []
    for i in range(0, len(codes)):
        score = 0
        for j in range(0, len(codes)):
            if j == i:
                continue
            score += final_similarity(codes[i], codes[j], weights)/(len(codes)-1)
        scores.append(score)
    return scores

def build_similarity_matrix(codes, weights):
    n = len(codes)
    sim_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i <= j:
                sim = final_similarity(codes[i], codes[j], weights)
                sim_matrix[i][j] = sim
                sim_matrix[j][i] = sim
    return sim_matrix

def compute_feature_weights(codes):
    ast_sim_scores = Calculate_SimilarityScore(codes, weights=[1, 0, 0, 0])
    dataflow_sim_scores = Calculate_SimilarityScore(codes, weights=[0, 1, 0, 0])
    jaccard_sim_scores = Calculate_SimilarityScore(codes, weights=[0, 0, 1, 0])
    lev_ratio_scores = Calculate_SimilarityScore(codes, weights=[0, 0, 0, 1])

    original_weights = []
    original_weights.append(np.var(ast_sim_scores))
    original_weights.append(np.var(dataflow_sim_scores))
    original_weights.append(np.var(jaccard_sim_scores))
    original_weights.append(np.var(lev_ratio_scores))
    sum = np.sum(original_weights)

    ast_sim_matrix = build_similarity_matrix(codes, weights=[1, 0, 0, 0])
    dataflow_sim_matrix = build_similarity_matrix(codes, weights=[0, 1, 0, 0])
    jaccard_sim_matrix = build_similarity_matrix(codes, weights=[0, 0, 1, 0])
    lev_sim_matrix = build_similarity_matrix(codes, weights=[0, 0, 0, 1])

    if sum < 1e-6:
        return [0.25] * 4, 0.25*ast_sim_matrix + 0.25*dataflow_sim_matrix + 0.25*jaccard_sim_matrix + 0.25*lev_sim_matrix

    weights = []
    for i in range(0, len(original_weights)):
        weights.append(0.25*1.2 - original_weights[i]/sum*0.2)

    return weights, weights[0]*ast_sim_matrix + weights[1]*dataflow_sim_matrix + weights[2]*jaccard_sim_matrix + weights[3]*lev_sim_matrix

def getMRCMScores(filepath, size_per_question):
    # In the following annotated section, humaneval_scores and mbpp_scores are our experimental results.

    # humaneval_scores = [1, np.float64(0.6221297627583441), 1, 1, np.float64(0.0), np.float64(0.8850293894672643), 1, 1, 1, np.float64(0.0), np.float64(0.0), np.float64(0.9910575409141842), 1, np.float64(0.9999999999999998), 1, np.float64(0.9635056248099726), np.float64(0.804014255683936), 1, 1, np.float64(0.0), np.float64(0.6186592523274113), 1, np.float64(0.9882328636453181), 1, np.float64(0.8999514178138611), np.float64(0.999024484773187), 1, np.float64(0.9971541501976283), 1, 1, np.float64(0.9837837837837837), np.float64(0.0), np.float64(0.8086144311288168), np.float64(0.9754418093710925), np.float64(0.9723579073292943), np.float64(0.7353031451522545), 1, np.float64(0.9849481125019042), 1, np.float64(0.0), 1, np.float64(0.740780240429232), 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), 1, 1, np.float64(0.9999999999999998), 1, np.float64(0.9168806812259799), np.float64(0.9999999999999998), np.float64(0.945058396054922), 1, np.float64(0.971285799894298), 1, np.float64(0.7946675777754433), np.float64(0.9855965974245002), np.float64(0.9684203331025725), 1, np.float64(0.9074941258715408), np.float64(0.33779086474588604), np.float64(0.9890468865507112), 1, 1, np.float64(0.7499186869480068), np.float64(0.7342846214082277), 1, np.float64(0.9001644329213772), 1, np.float64(0.0), np.float64(0.7904030221641642), np.float64(0.9999999999999998), np.float64(0.9255377489103536), 1, 1, np.float64(0.0), np.float64(0.9363283915361024), np.float64(0.764741751583235), 1, np.float64(0.994838709677419), 1, np.float64(0.9970217640320731), 1, np.float64(0.6329698663156648), np.float64(0.9999999999999998), np.float64(0.9663476871932181), np.float64(0.8463047277430074), 1, np.float64(0.8019847072396521), np.float64(0.9987906437458907), np.float64(0.855859801799633), np.float64(0.9189058778874537), np.float64(0.725784187714223), np.float64(0.8292135237361083), np.float64(0.0), np.float64(0.9323905715656868), np.float64(0.0), 1, np.float64(0.9480082735430825), np.float64(0.0), 1, np.float64(0.6982381868190899), np.float64(0.9999999999999998), np.float64(0.8028831662710131), 1, np.float64(0.9950638093579064), np.float64(0.9979177275405146), 1, np.float64(0.8133285788248685), np.float64(0.8081841728036239), np.float64(0.8103548744337982), np.float64(0.9645128514232149), 1, np.float64(0.9668161817029997), np.float64(0.92358384267053), 1, np.float64(0.0), np.float64(0.992720468031167), np.float64(0.9871049802750704), np.float64(0.477141012262826), np.float64(0.9999999999999998), 1, np.float64(0.8148463396524285), np.float64(0.9065697992602961), np.float64(0.6732205521739829), np.float64(0.9988535031847132), np.float64(0.0), np.float64(0.0), 1, np.float64(0.0), np.float64(0.403630858794038), 1, np.float64(0.8644373718022473), np.float64(0.6722826584857302), np.float64(0.9707305793895695), 1, np.float64(0.9999999999999998), np.float64(0.0), 1, np.float64(0.7428463051600849), np.float64(0.9801346214408424), np.float64(0.8845719338017908), 1, np.float64(0.0), np.float64(0.9227457433912033), np.float64(0.6924215848418229), np.float64(0.5875017313044466), np.float64(0.0), np.float64(0.0), np.float64(0.9978798586572436), 1, np.float64(0.9562578458394773), np.float64(0.7139864475297852), np.float64(0.9974117127520767), np.float64(0.9966271027490995), np.float64(0.9790248793161928), np.float64(0.7383471368612888), np.float64(0.9999999999999998), np.float64(0.8894121284731089), 1, np.float64(0.9996718538437485), 1, 1, np.float64(0.8624461102166648)]
    # return humaneval_scores

    # mbpp_scores = [np.float64(0.9885151277931928), np.float64(0.8159290051603462), np.float64(0.9502834157864303), np.float64(0.9557089323156983), np.float64(0.9127405109554305), np.float64(0.9999999999999998), 1, np.float64(0.9975438596491226), np.float64(0.914003129484992), np.float64(0.9999999999999998), 1, 1, np.float64(0.8065151804648668), np.float64(0.9999999999999998), np.float64(0.8283963247055999), 1, 1, 1, 1, np.float64(0.9958372649155336), 1, 1, 1, 1, np.float64(0.9965455673009803), np.float64(0.9999999999999998), 1, np.float64(0.8713361904644584), 1, 1, np.float64(0.8559741289902026), 1, np.float64(0.9999999999999998), 1, 1, np.float64(0.9737796448941405), 1, np.float64(0.9981151832460732), np.float64(0.9539814347214334), 1, 1, 1, 1, np.float64(0.7750504551541394), 1, np.float64(0.9999999999999998), np.float64(0.9931159190541505), np.float64(0.6541659264900832), np.float64(0.9962749599300709), np.float64(0.9977494096771133), 1, 1, 1, 1, 1, np.float64(0.9977366829359674), np.float64(0.9945299145299143), np.float64(0.9970909090909089), np.float64(0.8445268261365996), 1, 1, 1, np.float64(0.8584808300540818), 1, 1, np.float64(0.9952709406685557), np.float64(0.9999999999999998), 1, np.float64(0.9507264946410997), np.float64(0.88077358184411), np.float64(0.7633298742151908), np.float64(0.8187106375809842), 1, np.float64(0.9736931533293124), np.float64(0.9999999999999998), np.float64(0.9147419241897294), np.float64(0.9576498335131953), np.float64(0.9999999999999998), 1, np.float64(0.996878487436962), np.float64(0.9916332630433896), 1, np.float64(0.9731639526843091), 1, 1, 1, 1, 1, 1, 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), 1, np.float64(0.9999999999999998), np.float64(0.9133856326507566), np.float64(0.9604678681844965), 1, 1, np.float64(0.8233427544023277), np.float64(0.929578761150317), 1, 1, np.float64(0.9975614727711652), 1, np.float64(0.9714941451990633), np.float64(0.9999999999999998), np.float64(0.819783944775228), np.float64(0.9834025575364699), 1, np.float64(0.9146614488203394), np.float64(0.999075785582255), np.float64(0.8928746350828621), np.float64(0.9112157528986398), np.float64(0.9997951946263182), 1, np.float64(0.9463587914620595), np.float64(0.997456188945707), np.float64(0.9898148148148149), np.float64(0.9999999999999998), np.float64(0.9983999999999998), np.float64(0.8376013927791727), np.float64(0.7544147708877265), np.float64(0.9438824356505302), np.float64(0.8924801464675213), 1, np.float64(0.9461367518249872), np.float64(0.9711184648922166), np.float64(0.991743119266055), np.float64(0.8630966805251434), np.float64(0.8762409769374961), 1, 1, np.float64(0.9999999999999998), np.float64(0.8370657576439516), np.float64(0.9578619553695278), np.float64(0.9999999999999998), np.float64(0.9999999999999998), np.float64(0.8493793766956923), np.float64(0.8038278295754244), np.float64(0.8276439333022004), 1, np.float64(0.9999999999999998), 1, np.float64(0.9992405063291138), 1, np.float64(0.9999999999999998), np.float64(0.6616663687243677), np.float64(0.895150063370871), np.float64(0.8631402014317624), 1, 1, np.float64(0.9987230046948357), np.float64(0.9586830637658623), np.float64(0.9980711883352372), 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), np.float64(0.911534051629612), np.float64(0.9943503491073905), 1, np.float64(0.9999999999999998), 1, np.float64(0.8319082156805179), 1, 1, np.float64(0.9999999999999998), np.float64(0.959053368845943), np.float64(0.9999999999999998), np.float64(0.9996476505905696), 1, np.float64(0.9949999999999999), 1, np.float64(0.6729616594480781), 1, np.float64(0.976197309484912), 1, np.float64(0.9894260119992426), np.float64(0.9844575780214313), np.float64(0.7889728193509333), np.float64(0.9528798762177114), np.float64(0.8589997904648289), np.float64(0.9999999999999998), 1, 1, np.float64(0.9695164460104927), np.float64(0.9777433450230202), np.float64(0.9984900884780952), np.float64(0.8710255191567899), np.float64(0.7526253435068084), np.float64(0.679890550867577), 1, 1, np.float64(0.993856857509013), 1, np.float64(0.9974915960358871), np.float64(0.9999999999999998), 1, np.float64(0.9775585110429083), 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), 1, np.float64(0.9999999999999998), 1, 1, 1, 1, 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), np.float64(0.9737469309527469), 1, 1, 1, np.float64(0.9996168582375479), np.float64(0.9600099456804017), 1, np.float64(0.9160488538656424), np.float64(0.9769908164118091), 1, 1, 1, np.float64(0.9988499100861015), 1, np.float64(0.998258756612796), 1, 1, np.float64(0.9999999999999998), 1, 1, np.float64(0.9932525985501496), np.float64(0.9973889268109126), np.float64(0.9902856839335318), 1, np.float64(0.9954929577464787), np.float64(0.8231405456486186), np.float64(0.8239788965030576), 1, np.float64(0.9399818918654352), np.float64(0.9686167302769825), 1, 1, np.float64(0.8968296112374562), np.float64(0.9999999999999998), np.float64(0.95130417275795), np.float64(0.8798289180682299), np.float64(0.9757452580709675), np.float64(0.9690794809407948), 1, 1, 1, np.float64(0.7489764604836073), 1, 1, 1, np.float64(0.9955555555555554), np.float64(0.9999999999999998), 1, np.float64(0.826164303642409), np.float64(0.9794600424278073), np.float64(0.9999999999999998), 1, 1, np.float64(0.9999999999999998), 1, np.float64(0.9805525269088982), 1, np.float64(0.9999999999999998), np.float64(0.7692284339125116), 1, np.float64(0.9999999999999998), 1, 1, np.float64(0.881904784552653), np.float64(0.9042703239573783), 1, 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), 1, 1, np.float64(0.9999999999999998), np.float64(0.9979746597154762), np.float64(0.9999999999999998), 1, np.float64(0.8598765276609551), np.float64(0.792274159527207), np.float64(0.9999999999999998), 1, np.float64(0.9479458407970969), 1, 1, np.float64(0.9148650031594933), 1, np.float64(0.9979220779220779), 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), 1, np.float64(0.9852744297671723), 1, 1, np.float64(0.8101546559068744), np.float64(0.9307450248100351), np.float64(0.9438400743838467), np.float64(0.9888683863892881), np.float64(0.9278681694458996), 1, 1, 1, np.float64(0.9208680112869997), np.float64(0.980483656688223), 1, np.float64(0.9339320801085507), np.float64(0.9852084004527363), 1, 1, 1, np.float64(0.9999999999999998), 1, np.float64(0.9966201933644445), 1, 1, np.float64(0.9974117647058822), 1, np.float64(0.9683007268940361), np.float64(0.9522494606366644), np.float64(0.9500238872801067), 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), np.float64(0.9999999999999998), 1, 1, np.float64(0.7751598701021687), np.float64(0.9999999999999998), np.float64(0.9735144931328638), 1, np.float64(0.9605853902388833), np.float64(0.9971695874161458), 1, np.float64(0.97226644602863), 1, np.float64(0.9960380713765558), 1, np.float64(0.9787739002132259), np.float64(0.9603571434285344), np.float64(0.9999999999999998), np.float64(0.8301210636862333), np.float64(0.9839594434221052), np.float64(0.9750844280455343), 1, np.float64(0.9951384944951316), np.float64(0.9999999999999998), np.float64(0.826292510231319), np.float64(0.9911111111111109), np.float64(0.8890332224770472), 1, np.float64(0.9766796894168046), 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), 1, 1, np.float64(0.9999999999999998), np.float64(0.9993834253191934), np.float64(0.9674946010156432), 1, np.float64(0.9999999999999998), 1, np.float64(0.9999999999999998), 1, 1, np.float64(0.9630229707946706), 1, np.float64(0.9041116440686332), np.float64(0.9999999999999998), np.float64(0.9424539956795851), np.float64(0.9994366197183098), np.float64(0.9999999999999998), 1, np.float64(0.675955519909236), np.float64(0.9999999999999998), 1, 1, 1, 1, 1, 1, np.float64(0.9920987654320987), np.float64(0.9999999999999998), 1, np.float64(0.8118628740681821), 1, np.float64(0.8060312183681002), np.float64(0.9999999999999998), 1, np.float64(0.9999999999999998), 1, np.float64(0.9988372093023254), np.float64(0.7791849293204732), np.float64(0.9999999999999998), 1, 1, 1, 1, np.float64(0.8787650086445288), np.float64(0.924007373704612), np.float64(0.9999999999999998), 1, 1, np.float64(0.9999999999999998), 1, np.float64(0.9999999999999998), np.float64(0.9908825851057437), np.float64(0.9303962077425206), np.float64(0.86438798796401), 1, np.float64(0.9874913107435732), np.float64(0.9996050527472817), np.float64(0.9999999999999998), np.float64(0.7457282489682278), np.float64(0.9910418517098669), np.float64(0.9999999999999998), 1, np.float64(0.9957333333333331), 1, 1, 1, np.float64(0.9999999999999998), np.float64(0.7610917693938628), np.float64(0.8597846506888475), np.float64(0.6431685642937632), np.float64(0.9999999999999998), 1, np.float64(0.9090392355921612), np.float64(0.7998261984763347), 1, np.float64(0.9928349214144255), np.float64(0.8388756842796858), 1, np.float64(0.9999999999999998), 1, np.float64(0.7820067223090602), 1, 1, np.float64(0.9999999999999998), np.float64(0.9959076939357339), np.float64(0.9989243798215659), 1, 1, np.float64(0.9462251462788419), np.float64(0.9999999999999998), np.float64(0.9875412541254125), np.float64(0.9999999999999998), 1, np.float64(0.9983302989519316), np.float64(0.916438596491228), 1, 1, 1, np.float64(0.9962854030501088), np.float64(0.9953703330885272), 1, np.float64(0.9999999999999998), np.float64(0.7990642068978495), np.float64(0.9852888913552942), np.float64(0.8553793442554103), 1, np.float64(0.538470504407385), np.float64(0.8949703373205475), np.float64(0.9001777153519696), np.float64(0.6113406034692442), 1, 1, 1, 1, 1, 1, np.float64(0.7969769208614725), 1, np.float64(0.9878074614685322), 1, 1, np.float64(0.9571407419545739), np.float64(0.999430073591672), 1, np.float64(0.9858065883537483), 1, 1, np.float64(0.9999999999999998), np.float64(0.8901930322051843), np.float64(0.8349228152825777), np.float64(0.9768877035079934), np.float64(0.9999999999999998), np.float64(0.9464707151296159), np.float64(0.9681593460147953), 1, 1, 1, 1, np.float64(0.8088640191078424), np.float64(0.9990311442716017), np.float64(0.9999999999999998), np.float64(0.8809521343982174), 1, 1, np.float64(0.9846891101435717), 1, np.float64(0.9094118405498028), np.float64(0.852108504198241), np.float64(0.9993510240337191), np.float64(0.9966362552814683), np.float64(0.9999999999999998), np.float64(0.9590074765060226), np.float64(0.9682867227335388), 1, np.float64(0.9281514313564596), np.float64(0.9999999999999998), np.float64(0.9752841417745547), np.float64(0.8770802289451762), np.float64(0.9999999999999998), np.float64(0.9999999999999998), 1, np.float64(0.9397488098788884), np.float64(0.8872418131776817), np.float64(0.9999999999999998), np.float64(0.9946915010780228), np.float64(0.9363207282183399), np.float64(0.9581885894019596), 1, np.float64(0.9999999999999998), 1, np.float64(0.9999999999999998), 1, 1, 1, 1, 1, np.float64(0.9900544634499028), 1, 1, 1, 1, np.float64(0.9156510881614082), np.float64(0.7046568195243783), 1, 1, np.float64(0.9999999999999998), 1, 1, 1, 1, np.float64(0.9072483636607334), 1, np.float64(0.9880880368689781), np.float64(0.9881866409239846), np.float64(0.9999999999999998), np.float64(0.9931040181834577), 1, np.float64(0.9963616471046643), 1, np.float64(0.9933333333333332), 1, 1, 1, np.float64(0.9999999999999998), 1, 1, np.float64(0.9084398565268023), np.float64(0.9840920354377601), np.float64(0.9701869329007022), 1, np.float64(0.9999999999999998), np.float64(0.9265140923633), np.float64(0.9945205479452053), np.float64(0.9768562630871578), 1, 1, np.float64(0.9960093259594324), np.float64(0.9758516185996624), 1, 1, np.float64(0.9812180493620202), np.float64(0.8442814604581088), np.float64(0.8554381134330049), 1, 1, np.float64(0.9688952031821494), np.float64(0.809252804373506), np.float64(0.9999999999999998), np.float64(0.8067872973853669), 1, np.float64(0.9659326487868466), np.float64(0.825517078620355), 1, 1, np.float64(0.9968727272727271), 1, 1, np.float64(0.9963881541726337), 1, np.float64(0.966001545377621), 1, 1, 1, 1, np.float64(0.9999999999999998), np.float64(0.7442376098412321), np.float64(0.9999999999999998), np.float64(0.8550023569714937), 1, np.float64(0.4906610244055497), 1, np.float64(0.9999999999999998), np.float64(0.7567845320223835), np.float64(0.9338224198488059), np.float64(0.9945762711864405), np.float64(0.9966039482422071), np.float64(0.9486343938274645), 1, np.float64(0.9738199539154605), 1, 1, 1, 1, np.float64(0.9993103448275861), 1, 1, np.float64(0.9871907005463265), np.float64(0.9966818688557819), np.float64(0.9248782238759224), 1, np.float64(0.9999999999999998), np.float64(0.9918194452010252), np.float64(0.882333114319934), np.float64(0.9813506493506493), np.float64(0.9956731468491), np.float64(0.9389782192563668), np.float64(0.9168251896931073), 1, np.float64(0.9577199760575308), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, np.float64(0.9999999999999998), np.float64(0.9944859132251755), 1, np.float64(0.9999999999999998), np.float64(0.9195599631729451), np.float64(0.7271917296018312), np.float64(0.9961631087102638), 1, np.float64(0.48106791487546374), np.float64(0.9369448362516204), np.float64(0.8723328549879474), 1, 1, np.float64(0.9926301283197325), 1, 1, np.float64(0.8948503664865683), 1, 1, 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), np.float64(0.8702941362506416), 1, 1, np.float64(0.9838101427513507), np.float64(0.8363674826692163), 1, np.float64(0.9473178029468657), np.float64(0.7908484783615046), np.float64(0.9134355766793976), np.float64(0.9972413793103447), np.float64(0.964765786649561), np.float64(0.9935999999999998), np.float64(0.9999999999999998), np.float64(0.9997348084702571), 1, np.float64(0.9907905442231764), np.float64(0.9999999999999998), np.float64(0.9929965207970344), 1, np.float64(0.9896030377584852), 1, np.float64(0.7884420680103912), np.float64(0.8523652483350819), np.float64(0.9999999999999998), np.float64(0.8864598273870132), np.float64(0.919320604859483), 1, 1, 1, np.float64(0.640106271066913), np.float64(0.7518881436095574), 1, np.float64(0.9819559819675663), 1, np.float64(0.8700761784332206), 1, 1, 1, np.float64(0.9999999999999998), 1, 1, 1, 1, np.float64(0.975252747252747), np.float64(0.934527523646825), np.float64(0.9920861060650481), 1, 1, np.float64(0.9999999999999998), 1, 1, 1, 1, 1, 1, np.float64(0.8739219196041222), np.float64(0.9999999999999998), np.float64(0.9999999999999998), np.float64(0.6471868401570401), np.float64(0.9999999999999998), 1, np.float64(0.8549042356345506), np.float64(0.9041933392825822), np.float64(0.7253843642533944), np.float64(0.9764681349425344), np.float64(0.8563444419017434), np.float64(0.8821214082780534), np.float64(0.9980487804878047), np.float64(0.8158660125472773), 1, 1, np.float64(0.9965517241379309), 1, np.float64(0.9960784313725488), np.float64(0.9914575986686767), 1, 1, np.float64(0.9999999999999998), np.float64(0.9482526159938999), 1, np.float64(0.9909909909909909), 1, np.float64(0.9296987483676297), np.float64(0.9999999999999998), np.float64(0.9451971910487622), 1, np.float64(0.9912773726539781), 1, np.float64(0.9328359286673932), 1, 1, np.float64(0.9551236353560946), np.float64(0.9327618079719461), np.float64(0.9757134331072862), np.float64(0.9968800302659246), 1, np.float64(0.977587681608545), np.float64(0.9999999999999998), 1, np.float64(0.943138921860052), np.float64(0.9500615466223445), np.float64(0.992941556249404), np.float64(0.9999999999999998), np.float64(0.9846716004240376), np.float64(0.8658367399707358), np.float64(0.9999999999999998), np.float64(0.9019278632862442), np.float64(0.9999999999999998), np.float64(0.7167154324666185), np.float64(0.9999999999999998), np.float64(0.9871540312876054), 1, 1, 1, np.float64(0.7155373505856423), np.float64(0.9871860109050388), np.float64(0.9995816571667582), 1, np.float64(0.9487201154519258), 1, 1, 1, np.float64(0.9830122933666736), np.float64(0.9999999999999998), np.float64(0.9999999999999998), np.float64(0.9999999999999998), np.float64(0.9999999999999998), np.float64(0.7765348058393277), np.float64(0.9625290334436272), np.float64(0.9999999999999998), 1, np.float64(0.9939024390243902), 1, np.float64(0.6669740875918537), 1, np.float64(0.9999999999999998), 1, 1, 1, 1, 1, 1, np.float64(0.9993990881652255), 1, 1, np.float64(0.7380423377530463), 1, 1, 1, np.float64(0.9996363636363634), np.float64(0.9574634346779494), np.float64(0.9987012987012985), np.float64(0.9999999999999998), np.float64(0.7864910299466249), np.float64(0.9643847150162077), np.float64(0.995866478638135), np.float64(0.991), np.float64(0.9461461079063541), 1, np.float64(0.8586311227452308), np.float64(0.8969442151153506), np.float64(0.702928366533808), 1, np.float64(0.9896567886958483), 1, 1, np.float64(0.9221836846141416), 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), np.float64(0.7658782116024236), 1, np.float64(0.8283169095473092), 1, np.float64(0.9722857923953354), 1, 1, 1, 1, np.float64(0.9999999999999998), 1, 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), np.float64(0.9999999999999998), np.float64(0.9999999999999998), 1, 1, 1, np.float64(0.9839286236609125), np.float64(0.9999999999999998), np.float64(0.9678776428250112), 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), 1, 1, np.float64(0.8893537110409406), np.float64(0.9979989306790145), np.float64(0.9999999999999998), 1, np.float64(0.655280656073074), np.float64(0.9999999999999998), np.float64(0.9999999999999998), 1, 1, np.float64(0.7418031491849975), np.float64(0.9405360993395215), np.float64(0.9999999999999998), 1, np.float64(0.9865626911314985), np.float64(0.9963636363636363), 1, np.float64(0.9999999999999998), 1, np.float64(0.803453802988861), 1, np.float64(0.7290217628772642), np.float64(0.7717432693778215), 1, 1, np.float64(0.683506508672262), 1, np.float64(0.6401932647563726), np.float64(0.9999999999999998), np.float64(0.8868668313154636), np.float64(0.9773715723754319), np.float64(0.905740460156897), np.float64(0.9987499999999997), 1, np.float64(0.8538342572712295), 1, np.float64(0.9840361019802616), 1, 1, np.float64(0.785763623448833), np.float64(0.9999999999999998), 1, np.float64(0.9999999999999998), np.float64(0.9923639787555516), 1, np.float64(0.9999999999999998), np.float64(0.9963869582364854), 1, np.float64(0.9999999999999998), np.float64(0.977157061575922), 1, 1, np.float64(0.9969999999999999), np.float64(0.8240555661629092), 1, np.float64(0.8764066137832242), np.float64(0.9999999999999998), np.float64(0.9999999999999998), 1, 1, np.float64(0.9675262718826485), np.float64(0.9999999999999998), 1, np.float64(0.7947188552473256), np.float64(0.908137458479857), np.float64(0.9560979752981769), np.float64(0.8854899996182072), 1, np.float64(0.9981081081081079), 1, 1, np.float64(0.8772878458481179), 1, 1, np.float64(0.9877551020408163), 1, np.float64(0.9999999999999998), np.float64(0.9209844221230673), np.float64(0.9745013899522519), np.float64(0.9998215890341914), np.float64(0.9999999999999998), 1, 1, 1, 1, 1, 1, np.float64(0.9999999999999998), np.float64(0.9999999999999998), 1, np.float64(0.9994413407821228), 1, 1, 1, np.float64(0.9810780964961641), np.float64(0.8226063947737418), np.float64(0.8162079654915002), 1, np.float64(0.9534813417433134), 1, np.float64(0.9999999999999998), np.float64(0.9225742019023858)]
    # return mbpp_scores

    with open(filepath, 'r', encoding='utf-8') as file:
        data = json.load(file)

    y_score = []

    for question_id in range(0, int(len(data)/size_per_question)):
        codes = []
        for generation_index in range(0, size_per_question):
            codes.append(data[str(question_id * size_per_question + generation_index)]["generation_code"])

        dynamic_weights, sim_matrix_final = compute_feature_weights(codes)
        scores = []
        for i in range(0, len(codes)):
            if i == 0:
                continue
            scores.append(final_similarity(codes[0], codes[i], dynamic_weights))

        ordered_scores = sorted(scores)
        ordered_scores = np.flip(ordered_scores)
        score = sum(ordered_scores[:int(size_per_question/2)]) / int(size_per_question/2)

        if score >= 1:
            y_score.append(1)
        else:
            y_score.append(score)

        print(f"question_id: {question_id}")
        print(f"dynamic_weights: " + str(dynamic_weights))
        print(f"Score: {str(score)}")

    return y_score