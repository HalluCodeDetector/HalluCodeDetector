{
  "0": {
    "question_id": "mbpp/0",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_cost(cost, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1": {
    "question_id": "mbpp/0",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_cost(cost, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2": {
    "question_id": "mbpp/0",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_cost(cost, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[m][n]",
    "test_output": "FAILED: expect 8,in fact 11",
    "test_result": "False"
  },
  "3": {
    "question_id": "mbpp/0",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_cost(cost, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[m][n]",
    "test_output": "FAILED: expect 8,in fact 11",
    "test_result": "False"
  },
  "4": {
    "question_id": "mbpp/0",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_cost(cost, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[m][n]",
    "test_output": "FAILED: expect 8,in fact 11",
    "test_result": "False"
  },
  "5": {
    "question_id": "mbpp/0",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_cost(cost, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[m][n]",
    "test_output": "FAILED: expect 8,in fact 11",
    "test_result": "False"
  },
  "6": {
    "question_id": "mbpp/0",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_cost(cost, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7": {
    "question_id": "mbpp/0",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_cost(cost, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8": {
    "question_id": "mbpp/0",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_cost(cost, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[m][n]",
    "test_output": "FAILED: expect 8,in fact 11",
    "test_result": "False"
  },
  "9": {
    "question_id": "mbpp/0",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_cost(cost, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "10": {
    "question_id": "mbpp/1",
    "model": "deepseek-v3-250324",
    "generation_code": "def similar_elements(tuple1, tuple2):\n    common_elements = tuple(sorted(set(tuple1) & set(tuple2)))\n    return common_elements",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "11": {
    "question_id": "mbpp/1",
    "model": "deepseek-v3-250324",
    "generation_code": "def similar_elements(tuple1, tuple2):\n    common_elements = tuple(sorted(set(tuple1) & set(tuple2)))\n    return common_elements",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "12": {
    "question_id": "mbpp/1",
    "model": "deepseek-v3-250324",
    "generation_code": "def similar_elements(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    common_elements = set1.intersection(set2)\n    return tuple(sorted(common_elements))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "13": {
    "question_id": "mbpp/1",
    "model": "deepseek-v3-250324",
    "generation_code": "def similar_elements(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    common_elements = set1.intersection(set2)\n    return tuple(sorted(common_elements))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "14": {
    "question_id": "mbpp/1",
    "model": "deepseek-v3-250324",
    "generation_code": "def similar_elements(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    common_elements = set1.intersection(set2)\n    return tuple(sorted(common_elements))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "15": {
    "question_id": "mbpp/1",
    "model": "deepseek-v3-250324",
    "generation_code": "def similar_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1) & set(tuple2)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "16": {
    "question_id": "mbpp/1",
    "model": "deepseek-v3-250324",
    "generation_code": "def similar_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1) & set(tuple2)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "17": {
    "question_id": "mbpp/1",
    "model": "deepseek-v3-250324",
    "generation_code": "def similar_elements(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    common_elements = set1.intersection(set2)\n    return tuple(sorted(common_elements))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "18": {
    "question_id": "mbpp/1",
    "model": "deepseek-v3-250324",
    "generation_code": "def similar_elements(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    common_elements = set1.intersection(set2)\n    return tuple(sorted(common_elements))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "19": {
    "question_id": "mbpp/1",
    "model": "deepseek-v3-250324",
    "generation_code": "def similar_elements(tuple1, tuple2):\n    common_elements = tuple(sorted(set(tuple1) & set(tuple2)))\n    return common_elements",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "20": {
    "question_id": "mbpp/2",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "21": {
    "question_id": "mbpp/2",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "22": {
    "question_id": "mbpp/2",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "23": {
    "question_id": "mbpp/2",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "24": {
    "question_id": "mbpp/2",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "25": {
    "question_id": "mbpp/2",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += w\n        w = 6 - w\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "26": {
    "question_id": "mbpp/2",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "27": {
    "question_id": "mbpp/2",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "28": {
    "question_id": "mbpp/2",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "29": {
    "question_id": "mbpp/2",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "30": {
    "question_id": "mbpp/3",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_largest(nums, k):\n    if k <= 0:\n        return []\n    return heapq.nlargest(k, nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "31": {
    "question_id": "mbpp/3",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_largest(nums, k):\n    if k <= 0:\n        return []\n    heapq.heapify(nums)\n    largest = heapq.nlargest(k, nums)\n    return largest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "32": {
    "question_id": "mbpp/3",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_largest(nums, k):\n    if k <= 0 or not nums:\n        return []\n    return heapq.nlargest(k, nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "33": {
    "question_id": "mbpp/3",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_largest(nums, k):\n    if k <= 0:\n        return []\n    return heapq.nlargest(k, nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "34": {
    "question_id": "mbpp/3",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_largest(nums, k):\n    if k <= 0 or not nums:\n        return []\n    return heapq.nlargest(k, nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "35": {
    "question_id": "mbpp/3",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_largest(nums, k):\n    if not nums or k <= 0:\n        return []\n    if k >= len(nums):\n        return sorted(nums, reverse=True)\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return sorted(heap, reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "36": {
    "question_id": "mbpp/3",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_largest(nums, k):\n    if k <= 0 or not nums:\n        return []\n    return heapq.nlargest(k, nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "37": {
    "question_id": "mbpp/3",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_largest(nums, k):\n    if k <= 0 or not nums:\n        return []\n    return heapq.nlargest(k, nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "38": {
    "question_id": "mbpp/3",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_largest(nums, k):\n    if k <= 0:\n        return []\n    return heapq.nlargest(k, nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "39": {
    "question_id": "mbpp/3",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_largest(nums, k):\n    if k <= 0:\n        return []\n    return heapq.nlargest(k, nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "40": {
    "question_id": "mbpp/4",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_ways(n):\n    if n % 2 != 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(2, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4] if i >= 4 else 3 * dp[i - 2]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "41": {
    "question_id": "mbpp/4",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_ways(n):\n    if n % 2 != 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(2, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4] if i >= 4 else 3 * dp[i - 2]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "42": {
    "question_id": "mbpp/4",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_ways(n):\n    if n % 2 != 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(2, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 4",
    "test_result": "False"
  },
  "43": {
    "question_id": "mbpp/4",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_ways(n):\n    if n % 2 != 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    if n >= 2:\n        dp[2] = 3\n    for i in range(4, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "44": {
    "question_id": "mbpp/4",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_ways(n):\n    if n % 2 != 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(2, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 4",
    "test_result": "False"
  },
  "45": {
    "question_id": "mbpp/4",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_ways(n):\n    if n % 2 != 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(2, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 4",
    "test_result": "False"
  },
  "46": {
    "question_id": "mbpp/4",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_ways(n):\n    if n % 2 != 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(2, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 4",
    "test_result": "False"
  },
  "47": {
    "question_id": "mbpp/4",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_ways(n):\n    if n % 2 != 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(2, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 4",
    "test_result": "False"
  },
  "48": {
    "question_id": "mbpp/4",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_ways(n):\n    if n % 2 != 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(2, n + 1, 2):\n        dp[i] = 3 * dp[i - 2]\n        for j in range(4, i + 1, 2):\n            dp[i] += 2 * dp[i - j]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "49": {
    "question_id": "mbpp/4",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_ways(n):\n    if n % 2 != 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(2, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4] if i >= 4 else 3 * dp[i - 2]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "50": {
    "question_id": "mbpp/5",
    "model": "deepseek-v3-250324",
    "generation_code": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "51": {
    "question_id": "mbpp/5",
    "model": "deepseek-v3-250324",
    "generation_code": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "52": {
    "question_id": "mbpp/5",
    "model": "deepseek-v3-250324",
    "generation_code": "def differ_At_One_Bit_Pos(num1, num2):\n    xor_result = num1 ^ num2\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "53": {
    "question_id": "mbpp/5",
    "model": "deepseek-v3-250324",
    "generation_code": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "54": {
    "question_id": "mbpp/5",
    "model": "deepseek-v3-250324",
    "generation_code": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "55": {
    "question_id": "mbpp/5",
    "model": "deepseek-v3-250324",
    "generation_code": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "56": {
    "question_id": "mbpp/5",
    "model": "deepseek-v3-250324",
    "generation_code": "def differ_At_One_Bit_Pos(num1, num2):\n    xor_result = num1 ^ num2\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "57": {
    "question_id": "mbpp/5",
    "model": "deepseek-v3-250324",
    "generation_code": "def differ_At_One_Bit_Pos(num1, num2):\n    xor_result = num1 ^ num2\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "58": {
    "question_id": "mbpp/5",
    "model": "deepseek-v3-250324",
    "generation_code": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "59": {
    "question_id": "mbpp/5",
    "model": "deepseek-v3-250324",
    "generation_code": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "60": {
    "question_id": "mbpp/6",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "61": {
    "question_id": "mbpp/6",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "62": {
    "question_id": "mbpp/6",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "63": {
    "question_id": "mbpp/6",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "64": {
    "question_id": "mbpp/6",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "65": {
    "question_id": "mbpp/6",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "66": {
    "question_id": "mbpp/6",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "67": {
    "question_id": "mbpp/6",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "68": {
    "question_id": "mbpp/6",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "69": {
    "question_id": "mbpp/6",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "70": {
    "question_id": "mbpp/7",
    "model": "deepseek-v3-250324",
    "generation_code": "square_nums = lambda lst: list(map(lambda x: x**2, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "71": {
    "question_id": "mbpp/7",
    "model": "deepseek-v3-250324",
    "generation_code": "square_nums = lambda lst: list(map(lambda x: x ** 2, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "72": {
    "question_id": "mbpp/7",
    "model": "deepseek-v3-250324",
    "generation_code": "square_nums = lambda nums: list(map(lambda x: x ** 2, nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "73": {
    "question_id": "mbpp/7",
    "model": "deepseek-v3-250324",
    "generation_code": "square_nums = lambda lst: list(map(lambda x: x**2, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "74": {
    "question_id": "mbpp/7",
    "model": "deepseek-v3-250324",
    "generation_code": "square_nums = lambda lst: list(map(lambda x: x ** 2, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "75": {
    "question_id": "mbpp/7",
    "model": "deepseek-v3-250324",
    "generation_code": "square_nums = lambda nums: list(map(lambda x: x ** 2, nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "76": {
    "question_id": "mbpp/7",
    "model": "deepseek-v3-250324",
    "generation_code": "square_nums = lambda nums: list(map(lambda x: x ** 2, nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "77": {
    "question_id": "mbpp/7",
    "model": "deepseek-v3-250324",
    "generation_code": "square_nums = lambda nums: list(map(lambda x: x**2, nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "78": {
    "question_id": "mbpp/7",
    "model": "deepseek-v3-250324",
    "generation_code": "square_nums = lambda lst: list(map(lambda x: x**2, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "79": {
    "question_id": "mbpp/7",
    "model": "deepseek-v3-250324",
    "generation_code": "square_nums = lambda nums: list(map(lambda x: x ** 2, nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "80": {
    "question_id": "mbpp/8",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Rotations(s):\n    if not s:\n        return 0\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == (s[i:] + s[:i]):\n            return i\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "81": {
    "question_id": "mbpp/8",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Rotations(s):\n    if not s:\n        return 0\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return n // i\n    return n",
    "test_output": "FAILED: expect 1,in fact 4",
    "test_result": "False"
  },
  "82": {
    "question_id": "mbpp/8",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Rotations(s):\n    if not s:\n        return 0\n    n = len(s)\n    for i in range(1, n + 1):\n        rotated = s[i:] + s[:i]\n        if rotated == s:\n            return i\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "83": {
    "question_id": "mbpp/8",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Rotations(s):\n    if not s:\n        return 0\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return n // i\n    return n",
    "test_output": "FAILED: expect 1,in fact 4",
    "test_result": "False"
  },
  "84": {
    "question_id": "mbpp/8",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Rotations(s):\n    if not s:\n        return 0\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            rotated = s[i:] + s[:i]\n            if rotated == s:\n                return n // i\n    return n",
    "test_output": "FAILED: expect 1,in fact 4",
    "test_result": "False"
  },
  "85": {
    "question_id": "mbpp/8",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Rotations(s):\n    if not s:\n        return 0\n    n = len(s)\n    for i in range(1, n + 1):\n        rotated = s[i:] + s[:i]\n        if rotated == s:\n            return i\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "86": {
    "question_id": "mbpp/8",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Rotations(s):\n    if not s:\n        return 0\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if s[:i] * (n // i) == s:\n                return i\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "87": {
    "question_id": "mbpp/8",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Rotations(s):\n    if not s:\n        return 0\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            rotated = s[i:] + s[:i]\n            if rotated == s:\n                return n // i\n    return 1",
    "test_output": "FAILED: expect 1,in fact 4",
    "test_result": "False"
  },
  "88": {
    "question_id": "mbpp/8",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Rotations(s):\n    if not s:\n        return 0\n    n = len(s)\n    for i in range(1, n + 1):\n        rotated = s[i:] + s[:i]\n        if rotated == s:\n            return i\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "89": {
    "question_id": "mbpp/8",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Rotations(s):\n    if not s:\n        return 0\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "90": {
    "question_id": "mbpp/9",
    "model": "deepseek-v3-250324",
    "generation_code": "def small_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "91": {
    "question_id": "mbpp/9",
    "model": "deepseek-v3-250324",
    "generation_code": "def small_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset)\n    return sorted_data[:min(n, len(sorted_data))]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "92": {
    "question_id": "mbpp/9",
    "model": "deepseek-v3-250324",
    "generation_code": "def small_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "93": {
    "question_id": "mbpp/9",
    "model": "deepseek-v3-250324",
    "generation_code": "def small_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "94": {
    "question_id": "mbpp/9",
    "model": "deepseek-v3-250324",
    "generation_code": "def small_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "95": {
    "question_id": "mbpp/9",
    "model": "deepseek-v3-250324",
    "generation_code": "def small_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "96": {
    "question_id": "mbpp/9",
    "model": "deepseek-v3-250324",
    "generation_code": "def small_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "97": {
    "question_id": "mbpp/9",
    "model": "deepseek-v3-250324",
    "generation_code": "def small_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "98": {
    "question_id": "mbpp/9",
    "model": "deepseek-v3-250324",
    "generation_code": "def small_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "99": {
    "question_id": "mbpp/9",
    "model": "deepseek-v3-250324",
    "generation_code": "def small_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "100": {
    "question_id": "mbpp/10",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Occ(s, ch):\n    if not s or ch not in s:\n        return s\n    first = s.find(ch)\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "101": {
    "question_id": "mbpp/10",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Occ(s, ch):\n    if not s or ch not in s:\n        return s\n    first = s.find(ch)\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "102": {
    "question_id": "mbpp/10",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Occ(s, ch):\n    if not s or ch not in s:\n        return s\n    first = s.find(ch)\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "103": {
    "question_id": "mbpp/10",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Occ(s, ch):\n    if not s or ch not in s:\n        return s\n    first = s.find(ch)\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "104": {
    "question_id": "mbpp/10",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Occ(s, ch):\n    if not s or ch not in s:\n        return s\n    first = s.find(ch)\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "105": {
    "question_id": "mbpp/10",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Occ(s, ch):\n    if not s or ch not in s:\n        return s\n    first = s.find(ch)\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "106": {
    "question_id": "mbpp/10",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Occ(s, ch):\n    if not s or ch not in s:\n        return s\n    first = s.find(ch)\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "107": {
    "question_id": "mbpp/10",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Occ(s, ch):\n    if not s or ch not in s:\n        return s\n    \n    first = s.find(ch)\n    if first == -1:\n        return s\n    \n    last = s.rfind(ch)\n    \n    if first == last:\n        return s[:first] + s[first+1:]\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "108": {
    "question_id": "mbpp/10",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Occ(s, ch):\n    if not s or ch not in s:\n        return s\n    \n    first = s.find(ch)\n    if first == -1:\n        return s\n    \n    last = s.rfind(ch)\n    \n    if first == last:\n        return s[:first] + s[first+1:]\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "109": {
    "question_id": "mbpp/10",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Occ(s, ch):\n    if not s or ch not in s:\n        return s\n    first = s.find(ch)\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "110": {
    "question_id": "mbpp/11",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "111": {
    "question_id": "mbpp/11",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "112": {
    "question_id": "mbpp/11",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "113": {
    "question_id": "mbpp/11",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "114": {
    "question_id": "mbpp/11",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "115": {
    "question_id": "mbpp/11",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "116": {
    "question_id": "mbpp/11",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "117": {
    "question_id": "mbpp/11",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "118": {
    "question_id": "mbpp/11",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "119": {
    "question_id": "mbpp/11",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_matrix(matrix):\n    if not matrix:\n        return []\n    return sorted(matrix, key=lambda row: sum(row))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "120": {
    "question_id": "mbpp/12",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_common(words):\n    from collections import Counter\n    word_counts = Counter(words)\n    most_common = word_counts.most_common()\n    return most_common",
    "test_output": "FAILED: expect [('pink', 6), ('black', 5), ('white', 5), ('red', 4)],in fact [('pink', 6), ('black', 5), ('white', 5), ('red', 4), ('green', 4), ('orange', 4), ('eyes', 1)]",
    "test_result": "False"
  },
  "121": {
    "question_id": "mbpp/12",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_common(words):\n    if not words:\n        return []\n    \n    freq = {}\n    for word in words:\n        freq[word] = freq.get(word, 0) + 1\n    \n    sorted_items = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    \n    return sorted_items",
    "test_output": "FAILED: expect [('pink', 6), ('black', 5), ('white', 5), ('red', 4)],in fact [('pink', 6), ('black', 5), ('white', 5), ('green', 4), ('orange', 4), ('red', 4), ('eyes', 1)]",
    "test_result": "False"
  },
  "122": {
    "question_id": "mbpp/12",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_common(words):\n    if not words:\n        return []\n    \n    freq = {}\n    for word in words:\n        freq[word] = freq.get(word, 0) + 1\n    \n    sorted_items = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    \n    return sorted_items",
    "test_output": "FAILED: expect [('pink', 6), ('black', 5), ('white', 5), ('red', 4)],in fact [('pink', 6), ('black', 5), ('white', 5), ('green', 4), ('orange', 4), ('red', 4), ('eyes', 1)]",
    "test_result": "False"
  },
  "123": {
    "question_id": "mbpp/12",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_common(words):\n    if not words:\n        return []\n    \n    freq = {}\n    for word in words:\n        freq[word] = freq.get(word, 0) + 1\n    \n    sorted_items = sorted(freq.items(), key=lambda item: (-item[1], item[0]))\n    \n    return sorted_items",
    "test_output": "FAILED: expect [('pink', 6), ('black', 5), ('white', 5), ('red', 4)],in fact [('pink', 6), ('black', 5), ('white', 5), ('green', 4), ('orange', 4), ('red', 4), ('eyes', 1)]",
    "test_result": "False"
  },
  "124": {
    "question_id": "mbpp/12",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\n\ndef count_common(words):\n    if not words:\n        return []\n    word_counts = Counter(words)\n    most_common = word_counts.most_common()\n    return most_common",
    "test_output": "FAILED: expect [('pink', 6), ('black', 5), ('white', 5), ('red', 4)],in fact [('pink', 6), ('black', 5), ('white', 5), ('red', 4), ('green', 4), ('orange', 4), ('eyes', 1)]",
    "test_result": "False"
  },
  "125": {
    "question_id": "mbpp/12",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_common(words):\n    if not words:\n        return []\n    \n    freq = {}\n    for word in words:\n        freq[word] = freq.get(word, 0) + 1\n    \n    sorted_items = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    \n    return sorted_items",
    "test_output": "FAILED: expect [('pink', 6), ('black', 5), ('white', 5), ('red', 4)],in fact [('pink', 6), ('black', 5), ('white', 5), ('green', 4), ('orange', 4), ('red', 4), ('eyes', 1)]",
    "test_result": "False"
  },
  "126": {
    "question_id": "mbpp/12",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_common(words):\n    from collections import defaultdict\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n    sorted_counts = sorted(word_counts.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_counts",
    "test_output": "FAILED: expect [('pink', 6), ('black', 5), ('white', 5), ('red', 4)],in fact [('pink', 6), ('black', 5), ('white', 5), ('green', 4), ('orange', 4), ('red', 4), ('eyes', 1)]",
    "test_result": "False"
  },
  "127": {
    "question_id": "mbpp/12",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_common(words):\n    from collections import Counter\n    word_counts = Counter(words)\n    most_common = word_counts.most_common()\n    return most_common",
    "test_output": "FAILED: expect [('pink', 6), ('black', 5), ('white', 5), ('red', 4)],in fact [('pink', 6), ('black', 5), ('white', 5), ('red', 4), ('green', 4), ('orange', 4), ('eyes', 1)]",
    "test_result": "False"
  },
  "128": {
    "question_id": "mbpp/12",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_common(words):\n    from collections import defaultdict\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n    sorted_counts = sorted(word_counts.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_counts",
    "test_output": "FAILED: expect [('pink', 6), ('black', 5), ('white', 5), ('red', 4)],in fact [('pink', 6), ('black', 5), ('white', 5), ('green', 4), ('orange', 4), ('red', 4), ('eyes', 1)]",
    "test_result": "False"
  },
  "129": {
    "question_id": "mbpp/12",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_common(words):\n    from collections import Counter\n    word_counts = Counter(words)\n    most_common = word_counts.most_common()\n    return most_common",
    "test_output": "FAILED: expect [('pink', 6), ('black', 5), ('white', 5), ('red', 4)],in fact [('pink', 6), ('black', 5), ('white', 5), ('red', 4), ('green', 4), ('orange', 4), ('eyes', 1)]",
    "test_result": "False"
  },
  "130": {
    "question_id": "mbpp/13",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Volume(length, base, height):\n    return 0.5 * base * height * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "131": {
    "question_id": "mbpp/13",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Volume(length, base, height):\n    return 0.5 * base * height * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "132": {
    "question_id": "mbpp/13",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Volume(length, width, height):\n    return (length * width * height) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "133": {
    "question_id": "mbpp/13",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Volume(length, base, height):\n    return 0.5 * base * height * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "134": {
    "question_id": "mbpp/13",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Volume(length, base, height):\n    return 0.5 * base * height * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "135": {
    "question_id": "mbpp/13",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Volume(length, base, height):\n    return 0.5 * base * height * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "136": {
    "question_id": "mbpp/13",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Volume(length, base, height):\n    return 0.5 * base * height * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "137": {
    "question_id": "mbpp/13",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Volume(length, base, height):\n    return 0.5 * base * height * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "138": {
    "question_id": "mbpp/13",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Volume(length, base, height):\n    return 0.5 * base * height * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "139": {
    "question_id": "mbpp/13",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Volume(length, base, height):\n    return 0.5 * base * height * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "140": {
    "question_id": "mbpp/14",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_lowerstring(s):\n    result = []\n    current = \"\"\n    for char in s:\n        if char.islower():\n            if current:\n                result.append(current)\n            current = \"\"\n        else:\n            current += char\n    if current:\n        result.append(current)\n    return result",
    "test_output": "FAILED: expect ['bC', 'd'],in fact ['A', 'C']",
    "test_result": "False"
  },
  "141": {
    "question_id": "mbpp/14",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_lowerstring(s):\n    result = []\n    current = []\n    for char in s:\n        if char.islower():\n            if current:\n                result.append(''.join(current))\n                current = []\n        else:\n            current.append(char)\n    if current:\n        result.append(''.join(current))\n    return result",
    "test_output": "FAILED: expect ['bC', 'd'],in fact ['A', 'C']",
    "test_result": "False"
  },
  "142": {
    "question_id": "mbpp/14",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_lowerstring(s):\n    parts = []\n    current = []\n    for char in s:\n        if char.islower():\n            if current:\n                parts.append(''.join(current))\n                current = []\n        else:\n            current.append(char)\n    if current:\n        parts.append(''.join(current))\n    return parts",
    "test_output": "FAILED: expect ['bC', 'd'],in fact ['A', 'C']",
    "test_result": "False"
  },
  "143": {
    "question_id": "mbpp/14",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_lowerstring(s):\n    result = []\n    current = []\n    for char in s:\n        if char.islower():\n            if current:\n                result.append(''.join(current))\n                current = []\n        else:\n            current.append(char)\n    if current:\n        result.append(''.join(current))\n    return result",
    "test_output": "FAILED: expect ['bC', 'd'],in fact ['A', 'C']",
    "test_result": "False"
  },
  "144": {
    "question_id": "mbpp/14",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_lowerstring(s):\n    result = []\n    current = []\n    for char in s:\n        if char.islower():\n            if current:\n                result.append(''.join(current))\n                current = []\n        else:\n            current.append(char)\n    if current:\n        result.append(''.join(current))\n    return result",
    "test_output": "FAILED: expect ['bC', 'd'],in fact ['A', 'C']",
    "test_result": "False"
  },
  "145": {
    "question_id": "mbpp/14",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_lowerstring(s):\n    result = []\n    current = []\n    for char in s:\n        if char.islower():\n            if current:\n                result.append(''.join(current))\n                current = []\n        else:\n            current.append(char)\n    if current:\n        result.append(''.join(current))\n    return result",
    "test_output": "FAILED: expect ['bC', 'd'],in fact ['A', 'C']",
    "test_result": "False"
  },
  "146": {
    "question_id": "mbpp/14",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_lowerstring(s):\n    result = []\n    current = []\n    for char in s:\n        if char.islower():\n            if current:\n                result.append(''.join(current))\n                current = []\n        else:\n            current.append(char)\n    if current:\n        result.append(''.join(current))\n    return result",
    "test_output": "FAILED: expect ['bC', 'd'],in fact ['A', 'C']",
    "test_result": "False"
  },
  "147": {
    "question_id": "mbpp/14",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_lowerstring(s):\n    result = []\n    current = []\n    for char in s:\n        if char.islower():\n            if current:\n                result.append(''.join(current))\n                current = []\n        else:\n            current.append(char)\n    if current:\n        result.append(''.join(current))\n    return result",
    "test_output": "FAILED: expect ['bC', 'd'],in fact ['A', 'C']",
    "test_result": "False"
  },
  "148": {
    "question_id": "mbpp/14",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_lowerstring(s):\n    result = []\n    current = \"\"\n    for char in s:\n        if char.islower():\n            if current:\n                result.append(current)\n            current = \"\"\n        else:\n            current += char\n    if current:\n        result.append(current)\n    return result",
    "test_output": "FAILED: expect ['bC', 'd'],in fact ['A', 'C']",
    "test_result": "False"
  },
  "149": {
    "question_id": "mbpp/14",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_lowerstring(s):\n    parts = []\n    current_part = []\n    for char in s:\n        if char.islower():\n            if current_part:\n                parts.append(''.join(current_part))\n                current_part = []\n        else:\n            current_part.append(char)\n    if current_part:\n        parts.append(''.join(current_part))\n    return parts",
    "test_output": "FAILED: expect ['bC', 'd'],in fact ['A', 'C']",
    "test_result": "False"
  },
  "150": {
    "question_id": "mbpp/15",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "151": {
    "question_id": "mbpp/15",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "152": {
    "question_id": "mbpp/15",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "153": {
    "question_id": "mbpp/15",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "154": {
    "question_id": "mbpp/15",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "155": {
    "question_id": "mbpp/15",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search('^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "156": {
    "question_id": "mbpp/15",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "157": {
    "question_id": "mbpp/15",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search('^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "158": {
    "question_id": "mbpp/15",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "159": {
    "question_id": "mbpp/15",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search('^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "160": {
    "question_id": "mbpp/16",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "161": {
    "question_id": "mbpp/16",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "162": {
    "question_id": "mbpp/16",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "163": {
    "question_id": "mbpp/16",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "164": {
    "question_id": "mbpp/16",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "165": {
    "question_id": "mbpp/16",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "166": {
    "question_id": "mbpp/16",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "167": {
    "question_id": "mbpp/16",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "168": {
    "question_id": "mbpp/16",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "169": {
    "question_id": "mbpp/16",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "170": {
    "question_id": "mbpp/17",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_dirty_chars(first_string, second_string):\n    result = []\n    second_set = set(second_string)\n    for char in first_string:\n        if char not in second_set:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "171": {
    "question_id": "mbpp/17",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_dirty_chars(first_string, second_string):\n    result = []\n    second_set = set(second_string)\n    for char in first_string:\n        if char not in second_set:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "172": {
    "question_id": "mbpp/17",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_dirty_chars(first_string, second_string):\n    result = []\n    second_set = set(second_string)\n    for char in first_string:\n        if char not in second_set:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "173": {
    "question_id": "mbpp/17",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_dirty_chars(first_string, second_string):\n    result = []\n    second_set = set(second_string)\n    for char in first_string:\n        if char not in second_set:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "174": {
    "question_id": "mbpp/17",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_dirty_chars(first_string, second_string):\n    result = []\n    second_set = set(second_string)\n    for char in first_string:\n        if char not in second_set:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "175": {
    "question_id": "mbpp/17",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_dirty_chars(first_string, second_string):\n    result = []\n    second_set = set(second_string)\n    for char in first_string:\n        if char not in second_set:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "176": {
    "question_id": "mbpp/17",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_dirty_chars(first_string, second_string):\n    result = []\n    second_set = set(second_string)\n    for char in first_string:\n        if char not in second_set:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "177": {
    "question_id": "mbpp/17",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_dirty_chars(first_string, second_string):\n    result = []\n    second_set = set(second_string)\n    for char in first_string:\n        if char not in second_set:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "178": {
    "question_id": "mbpp/17",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_dirty_chars(first_string, second_string):\n    result = []\n    second_set = set(second_string)\n    for char in first_string:\n        if char not in second_set:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "179": {
    "question_id": "mbpp/17",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_dirty_chars(first_string, second_string):\n    result = []\n    second_set = set(second_string)\n    for char in first_string:\n        if char not in second_set:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "180": {
    "question_id": "mbpp/18",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "181": {
    "question_id": "mbpp/18",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "182": {
    "question_id": "mbpp/18",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "183": {
    "question_id": "mbpp/18",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "184": {
    "question_id": "mbpp/18",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "185": {
    "question_id": "mbpp/18",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "186": {
    "question_id": "mbpp/18",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "187": {
    "question_id": "mbpp/18",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "188": {
    "question_id": "mbpp/18",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "189": {
    "question_id": "mbpp/18",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "190": {
    "question_id": "mbpp/19",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_woodall(n):\n    if n <= 0:\n        return False\n    k = 1\n    while True:\n        woodall = k * (2 ** k) - 1\n        if woodall == n:\n            return True\n        if woodall > n:\n            return False\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "191": {
    "question_id": "mbpp/19",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_woodall(n):\n    if n < 1:\n        return False\n    k = 1\n    while True:\n        woodall = k * (2 ** k) - 1\n        if woodall == n:\n            return True\n        if woodall > n:\n            return False\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "192": {
    "question_id": "mbpp/19",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_woodall(n):\n    if n <= 0:\n        return False\n    k = 1\n    while True:\n        woodall = k * (2 ** k) - 1\n        if woodall == n:\n            return True\n        if woodall > n:\n            return False\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "193": {
    "question_id": "mbpp/19",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_woodall(n):\n    if n <= 0:\n        return False\n    k = 1\n    while True:\n        woodall = k * (2 ** k) - 1\n        if woodall == n:\n            return True\n        if woodall > n:\n            return False\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "194": {
    "question_id": "mbpp/19",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_woodall(n):\n    if n < 1:\n        return False\n    k = 1\n    while True:\n        woodall = k * (2 ** k) - 1\n        if woodall == n:\n            return True\n        if woodall > n:\n            return False\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "195": {
    "question_id": "mbpp/19",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_woodall(n):\n    if n < 1:\n        return False\n    k = 1\n    while True:\n        woodall = k * (2 ** k) - 1\n        if woodall == n:\n            return True\n        if woodall > n:\n            return False\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "196": {
    "question_id": "mbpp/19",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_woodall(n):\n    if n < 1:\n        return False\n    k = 1\n    while True:\n        woodall = k * (2 ** k) - 1\n        if woodall == n:\n            return True\n        if woodall > n:\n            return False\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "197": {
    "question_id": "mbpp/19",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_woodall(n):\n    if n < 1:\n        return False\n    k = 1\n    while True:\n        woodall = k * (2 ** k) - 1\n        if woodall == n:\n            return True\n        if woodall > n:\n            return False\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "198": {
    "question_id": "mbpp/19",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_woodall(n):\n    if n < 1:\n        return False\n    k = 1\n    while True:\n        woodall = k * (2 ** k) - 1\n        if woodall == n:\n            return True\n        if woodall > n:\n            return False\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "199": {
    "question_id": "mbpp/19",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_woodall(n):\n    if n <= 0:\n        return False\n    k = 1\n    while True:\n        woodall = k * (2 ** k) - 1\n        if woodall == n:\n            return True\n        if woodall > n:\n            return False\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "200": {
    "question_id": "mbpp/20",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiples_of_num(m, n):\n    return [n * (i + 1) for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "201": {
    "question_id": "mbpp/20",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiples_of_num(m, n):\n    return [n * (i + 1) for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "202": {
    "question_id": "mbpp/20",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiples_of_num(m, n):\n    return [n * (i + 1) for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "203": {
    "question_id": "mbpp/20",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiples_of_num(m, n):\n    return [n * (i + 1) for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "204": {
    "question_id": "mbpp/20",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiples_of_num(m, n):\n    return [n * (i + 1) for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "205": {
    "question_id": "mbpp/20",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiples_of_num(m, n):\n    return [n * (i + 1) for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "206": {
    "question_id": "mbpp/20",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiples_of_num(m, n):\n    return [n * (i + 1) for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "207": {
    "question_id": "mbpp/20",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiples_of_num(m, n):\n    return [n * (i + 1) for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "208": {
    "question_id": "mbpp/20",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiples_of_num(m, n):\n    return [n * (i + 1) for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "209": {
    "question_id": "mbpp/20",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiples_of_num(m, n):\n    return [n * (i + 1) for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "210": {
    "question_id": "mbpp/21",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None",
    "test_output": "FAILED: expect -1,in fact None",
    "test_result": "False"
  },
  "211": {
    "question_id": "mbpp/21",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None",
    "test_output": "FAILED: expect -1,in fact None",
    "test_result": "False"
  },
  "212": {
    "question_id": "mbpp/21",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None",
    "test_output": "FAILED: expect -1,in fact None",
    "test_result": "False"
  },
  "213": {
    "question_id": "mbpp/21",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None",
    "test_output": "FAILED: expect -1,in fact None",
    "test_result": "False"
  },
  "214": {
    "question_id": "mbpp/21",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None",
    "test_output": "FAILED: expect -1,in fact None",
    "test_result": "False"
  },
  "215": {
    "question_id": "mbpp/21",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None",
    "test_output": "FAILED: expect -1,in fact None",
    "test_result": "False"
  },
  "216": {
    "question_id": "mbpp/21",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None",
    "test_output": "FAILED: expect -1,in fact None",
    "test_result": "False"
  },
  "217": {
    "question_id": "mbpp/21",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None",
    "test_output": "FAILED: expect -1,in fact None",
    "test_result": "False"
  },
  "218": {
    "question_id": "mbpp/21",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None",
    "test_output": "FAILED: expect -1,in fact None",
    "test_result": "False"
  },
  "219": {
    "question_id": "mbpp/21",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None",
    "test_output": "FAILED: expect -1,in fact None",
    "test_result": "False"
  },
  "220": {
    "question_id": "mbpp/22",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_Sum(lists):\n    if not lists:\n        return 0\n    return max(sum(sublist) for sublist in lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "221": {
    "question_id": "mbpp/22",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_Sum(lists):\n    if not lists:\n        return 0\n    return max(sum(sublist) for sublist in lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "222": {
    "question_id": "mbpp/22",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_Sum(lists):\n    if not lists:\n        return 0\n    return max(sum(sublist) for sublist in lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "223": {
    "question_id": "mbpp/22",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_Sum(lists):\n    if not lists:\n        return 0\n    return max(sum(sublist) for sublist in lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "224": {
    "question_id": "mbpp/22",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_Sum(lists):\n    if not lists:\n        return 0\n    return max(sum(sublist) for sublist in lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "225": {
    "question_id": "mbpp/22",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_Sum(lists):\n    if not lists:\n        return 0\n    return max(sum(sublist) for sublist in lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "226": {
    "question_id": "mbpp/22",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_Sum(lists):\n    if not lists:\n        return 0\n    return max(sum(sublist) for sublist in lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "227": {
    "question_id": "mbpp/22",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_Sum(lists):\n    if not lists:\n        return 0\n    return max(sum(sublist) for sublist in lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "228": {
    "question_id": "mbpp/22",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_Sum(lists):\n    if not lists:\n        return 0\n    return max(sum(sublist) for sublist in lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "229": {
    "question_id": "mbpp/22",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_Sum(lists):\n    if not lists:\n        return 0\n    return max(sum(sublist) for sublist in lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "230": {
    "question_id": "mbpp/23",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_decimal(binary):\n    decimal = 0\n    binary_str = str(binary)\n    length = len(binary_str)\n    for i in range(length):\n        digit = int(binary_str[i])\n        decimal += digit * (2 ** (length - 1 - i))\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "231": {
    "question_id": "mbpp/23",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_decimal(binary):\n    decimal = 0\n    power = 0\n    while binary > 0:\n        remainder = binary % 10\n        decimal += remainder * (2 ** power)\n        binary = binary // 10\n        power += 1\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "232": {
    "question_id": "mbpp/23",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_decimal(binary):\n    decimal = 0\n    binary_str = str(binary)\n    length = len(binary_str)\n    for i in range(length):\n        digit = int(binary_str[i])\n        decimal += digit * (2 ** (length - 1 - i))\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "233": {
    "question_id": "mbpp/23",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_decimal(binary):\n    decimal = 0\n    binary_str = str(binary)\n    length = len(binary_str)\n    for i in range(length):\n        digit = int(binary_str[i])\n        decimal += digit * (2 ** (length - 1 - i))\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "234": {
    "question_id": "mbpp/23",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_decimal(binary):\n    decimal = 0\n    binary_str = str(binary)\n    length = len(binary_str)\n    for i in range(length):\n        digit = int(binary_str[i])\n        decimal += digit * (2 ** (length - 1 - i))\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "235": {
    "question_id": "mbpp/23",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_decimal(binary):\n    decimal = 0\n    power = 0\n    while binary != 0:\n        remainder = binary % 10\n        decimal += remainder * (2 ** power)\n        binary = binary // 10\n        power += 1\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "236": {
    "question_id": "mbpp/23",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_decimal(binary):\n    decimal = 0\n    binary_str = str(binary)\n    length = len(binary_str)\n    for i in range(length):\n        digit = int(binary_str[i])\n        decimal += digit * (2 ** (length - 1 - i))\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "237": {
    "question_id": "mbpp/23",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_decimal(binary):\n    decimal = 0\n    binary_str = str(binary)\n    length = len(binary_str)\n    for i in range(length):\n        digit = int(binary_str[i])\n        decimal += digit * (2 ** (length - 1 - i))\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "238": {
    "question_id": "mbpp/23",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_decimal(binary):\n    decimal = 0\n    binary_str = str(binary)\n    length = len(binary_str)\n    for i in range(length):\n        digit = int(binary_str[i])\n        decimal += digit * (2 ** (length - 1 - i))\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "239": {
    "question_id": "mbpp/23",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_decimal(binary):\n    decimal = 0\n    binary_str = str(binary)\n    length = len(binary_str)\n    for i in range(length):\n        digit = int(binary_str[i])\n        decimal += digit * (2 ** (length - 1 - i))\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "240": {
    "question_id": "mbpp/24",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Product(arr, n):\n    from collections import defaultdict\n    \n    freq = defaultdict(int)\n    for num in arr:\n        freq[num] += 1\n    \n    product = 1\n    for num in arr:\n        if freq[num] == 1:\n            product *= num\n    \n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "241": {
    "question_id": "mbpp/24",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Product(arr, n):\n    from collections import defaultdict\n    freq = defaultdict(int)\n    for num in arr:\n        freq[num] += 1\n    product = 1\n    has_non_repeated = False\n    for num in freq:\n        if freq[num] == 1:\n            product *= num\n            has_non_repeated = True\n    return product if has_non_repeated else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "242": {
    "question_id": "mbpp/24",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Product(arr, n):\n    from collections import defaultdict\n    freq = defaultdict(int)\n    for num in arr:\n        freq[num] += 1\n    product = 1\n    for num in freq:\n        if freq[num] == 1:\n            product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "243": {
    "question_id": "mbpp/24",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Product(arr, n):\n    from collections import defaultdict\n    \n    freq = defaultdict(int)\n    for num in arr:\n        freq[num] += 1\n    \n    product = 1\n    for num in arr:\n        if freq[num] == 1:\n            product *= num\n    \n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "244": {
    "question_id": "mbpp/24",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Product(arr, n):\n    from collections import defaultdict\n    freq = defaultdict(int)\n    for num in arr:\n        freq[num] += 1\n    product = 1\n    for num in arr:\n        if freq[num] == 1:\n            product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "245": {
    "question_id": "mbpp/24",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Product(arr, n):\n    from collections import defaultdict\n    \n    freq = defaultdict(int)\n    for num in arr:\n        freq[num] += 1\n    \n    product = 1\n    for num in arr:\n        if freq[num] == 1:\n            product *= num\n    \n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "246": {
    "question_id": "mbpp/24",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Product(arr, n):\n    from collections import defaultdict\n    \n    freq = defaultdict(int)\n    for num in arr:\n        freq[num] += 1\n    \n    product = 1\n    has_non_repeated = False\n    \n    for num in arr:\n        if freq[num] == 1:\n            product *= num\n            has_non_repeated = True\n    \n    return product if has_non_repeated else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "247": {
    "question_id": "mbpp/24",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Product(arr, n):\n    from collections import defaultdict\n    freq = defaultdict(int)\n    for num in arr:\n        freq[num] += 1\n    product = 1\n    for num in arr:\n        if freq[num] == 1:\n            product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "248": {
    "question_id": "mbpp/24",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Product(arr, n):\n    from collections import defaultdict\n    freq = defaultdict(int)\n    product = 1\n    has_non_repeated = False\n    \n    for num in arr:\n        freq[num] += 1\n    \n    for num in arr:\n        if freq[num] == 1:\n            product *= num\n            has_non_repeated = True\n    \n    return product if has_non_repeated else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "249": {
    "question_id": "mbpp/24",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Product(arr, n):\n    from collections import defaultdict\n    \n    freq = defaultdict(int)\n    for num in arr:\n        freq[num] += 1\n    \n    product = 1\n    for num in arr:\n        if freq[num] == 1:\n            product *= num\n    \n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "250": {
    "question_id": "mbpp/25",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_k_elements(tuple_list, k):\n    if not tuple_list:\n        return False\n    for t in tuple_list:\n        if not all(element == k for element in t):\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "251": {
    "question_id": "mbpp/25",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_k_elements(tuple_list, k):\n    if not tuple_list:\n        return False\n    for t in tuple_list:\n        if not all(element == k for element in t):\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "252": {
    "question_id": "mbpp/25",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_k_elements(tuple_list, k):\n    if not tuple_list:\n        return False\n    for t in tuple_list:\n        if len(t) != k:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "253": {
    "question_id": "mbpp/25",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_k_elements(tuple_list, k):\n    if not tuple_list:\n        return False\n    for t in tuple_list:\n        if not all(element == k for element in t):\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "254": {
    "question_id": "mbpp/25",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_k_elements(tuple_list, k):\n    if not tuple_list:\n        return False\n    for t in tuple_list:\n        if not all(element == k for element in t):\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "255": {
    "question_id": "mbpp/25",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_k_elements(tuple_list, k):\n    for t in tuple_list:\n        if len(t) != k:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "256": {
    "question_id": "mbpp/25",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_k_elements(tuple_list, k):\n    if not tuple_list:\n        return False\n    for t in tuple_list:\n        if not all(element == k for element in t):\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "257": {
    "question_id": "mbpp/25",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_k_elements(tuple_list, k):\n    if not tuple_list:\n        return False\n    for t in tuple_list:\n        if not all(element == k for element in t):\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "258": {
    "question_id": "mbpp/25",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_k_elements(tuple_list, k):\n    if not tuple_list:\n        return False\n    for t in tuple_list:\n        if not all(element == k for element in t):\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "259": {
    "question_id": "mbpp/25",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_k_elements(tuple_list, k):\n    if not tuple_list:\n        return False\n    for t in tuple_list:\n        if len(t) != k:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "260": {
    "question_id": "mbpp/26",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove(lst):\n    return [''.join([c for c in s if not c.isdigit()]) for s in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "261": {
    "question_id": "mbpp/26",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove(lst):\n    return [''.join([c for c in s if not c.isdigit()]) for s in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "262": {
    "question_id": "mbpp/26",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove(lst):\n    return [''.join([c for c in s if not c.isdigit()]) for s in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "263": {
    "question_id": "mbpp/26",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove(lst):\n    return [''.join([c for c in s if not c.isdigit()]) for s in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "264": {
    "question_id": "mbpp/26",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove(lst):\n    return [''.join([c for c in s if not c.isdigit()]) for s in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "265": {
    "question_id": "mbpp/26",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove(lst):\n    return [''.join([c for c in s if not c.isdigit()]) for s in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "266": {
    "question_id": "mbpp/26",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove(lst):\n    return [''.join([c for c in s if not c.isdigit()]) for s in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "267": {
    "question_id": "mbpp/26",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove(lst):\n    return [''.join([c for c in s if not c.isdigit()]) for s in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "268": {
    "question_id": "mbpp/26",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove(lst):\n    return [''.join([c for c in s if not c.isdigit()]) for s in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "269": {
    "question_id": "mbpp/26",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove(lst):\n    return [''.join([c for c in s if not c.isdigit()]) for s in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "270": {
    "question_id": "mbpp/27",
    "model": "deepseek-v3-250324",
    "generation_code": "def binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res = res * (n - i) // (i + 1)\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "271": {
    "question_id": "mbpp/27",
    "model": "deepseek-v3-250324",
    "generation_code": "def binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "272": {
    "question_id": "mbpp/27",
    "model": "deepseek-v3-250324",
    "generation_code": "def binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "273": {
    "question_id": "mbpp/27",
    "model": "deepseek-v3-250324",
    "generation_code": "def binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "274": {
    "question_id": "mbpp/27",
    "model": "deepseek-v3-250324",
    "generation_code": "def binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "275": {
    "question_id": "mbpp/27",
    "model": "deepseek-v3-250324",
    "generation_code": "def binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "276": {
    "question_id": "mbpp/27",
    "model": "deepseek-v3-250324",
    "generation_code": "def binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "277": {
    "question_id": "mbpp/27",
    "model": "deepseek-v3-250324",
    "generation_code": "def binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "278": {
    "question_id": "mbpp/27",
    "model": "deepseek-v3-250324",
    "generation_code": "def binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "279": {
    "question_id": "mbpp/27",
    "model": "deepseek-v3-250324",
    "generation_code": "def binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    res = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "280": {
    "question_id": "mbpp/28",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Odd_Occurrence(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "281": {
    "question_id": "mbpp/28",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Odd_Occurrence(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "282": {
    "question_id": "mbpp/28",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "283": {
    "question_id": "mbpp/28",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Odd_Occurrence(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "284": {
    "question_id": "mbpp/28",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "285": {
    "question_id": "mbpp/28",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Odd_Occurrence(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "286": {
    "question_id": "mbpp/28",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Odd_Occurrence(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "287": {
    "question_id": "mbpp/28",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Odd_Occurrence(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "288": {
    "question_id": "mbpp/28",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Odd_Occurrence(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "289": {
    "question_id": "mbpp/28",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Odd_Occurrence(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "290": {
    "question_id": "mbpp/29",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "291": {
    "question_id": "mbpp/29",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "292": {
    "question_id": "mbpp/29",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "293": {
    "question_id": "mbpp/29",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "294": {
    "question_id": "mbpp/29",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "295": {
    "question_id": "mbpp/29",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "296": {
    "question_id": "mbpp/29",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "297": {
    "question_id": "mbpp/29",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "298": {
    "question_id": "mbpp/29",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "299": {
    "question_id": "mbpp/29",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "300": {
    "question_id": "mbpp/30",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    frequency = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    heap = []\n    for num, count in frequency.items():\n        heapq.heappush(heap, (count, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    result = [item[1] for item in heap]\n    result.sort(reverse=True)\n    return result",
    "test_output": "FAILED: expect [5, 7, 1],in fact [8, 7, 1]",
    "test_result": "False"
  },
  "301": {
    "question_id": "mbpp/30",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    frequency = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    heap = []\n    for num, count in frequency.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (count, num))\n    \n    result = [item[1] for item in sorted(heap, key=lambda x: (-x[0], x[1]))]\n    return result",
    "test_output": "FAILED: expect [5, 7, 1],in fact [1, 5, 7]",
    "test_result": "False"
  },
  "302": {
    "question_id": "mbpp/30",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    frequency = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    heap = []\n    for num, count in frequency.items():\n        heapq.heappush(heap, (count, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result[::-1]",
    "test_output": "FAILED: expect [5, 7, 1],in fact [1, 8, 7]",
    "test_result": "False"
  },
  "303": {
    "question_id": "mbpp/30",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    frequency = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    heap = []\n    for num, count in frequency.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (count, num))\n    \n    result = [item[1] for item in sorted(heap, key=lambda x: (-x[0], x[1]))]\n    return result",
    "test_output": "FAILED: expect [5, 7, 1],in fact [1, 5, 7]",
    "test_result": "False"
  },
  "304": {
    "question_id": "mbpp/30",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    frequency = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    heap = []\n    for num, count in frequency.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (count, num))\n    \n    result = [item[1] for item in sorted(heap, key=lambda x: (-x[0], x[1]))]\n    return result",
    "test_output": "FAILED: expect [5, 7, 1],in fact [1, 5, 7]",
    "test_result": "False"
  },
  "305": {
    "question_id": "mbpp/30",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    frequency = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    heap = []\n    for num, count in frequency.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (count, num))\n    \n    result = [item[1] for item in sorted(heap, key=lambda x: (-x[0], x[1]))]\n    return result",
    "test_output": "FAILED: expect [5, 7, 1],in fact [1, 5, 7]",
    "test_result": "False"
  },
  "306": {
    "question_id": "mbpp/30",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    frequency = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    heap = []\n    for num, count in frequency.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (count, num))\n    \n    result = [item[1] for item in heap]\n    result.sort(reverse=True)\n    return result",
    "test_output": "FAILED: expect [5, 7, 1],in fact [7, 5, 1]",
    "test_result": "False"
  },
  "307": {
    "question_id": "mbpp/30",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    frequency = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    heap = []\n    for num, count in frequency.items():\n        heapq.heappush(heap, (count, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result[::-1]",
    "test_output": "FAILED: expect [5, 7, 1],in fact [1, 8, 7]",
    "test_result": "False"
  },
  "308": {
    "question_id": "mbpp/30",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    frequency = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    heap = []\n    for num, count in frequency.items():\n        heapq.heappush(heap, (count, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    \n    return result[::-1]",
    "test_output": "FAILED: expect [5, 7, 1],in fact [1, 8, 7]",
    "test_result": "False"
  },
  "309": {
    "question_id": "mbpp/30",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    frequency = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    heap = []\n    for num, count in frequency.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (count, num))\n    \n    result = [item[1] for item in sorted(heap, key=lambda x: (-x[0], x[1]))]\n    return result",
    "test_output": "FAILED: expect [5, 7, 1],in fact [1, 5, 7]",
    "test_result": "False"
  },
  "310": {
    "question_id": "mbpp/31",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Prime_Factors(n):\n    if n <= 1:\n        return None\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    if n > 2:\n        largest_prime = n\n    return largest_prime",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "311": {
    "question_id": "mbpp/31",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Prime_Factors(n):\n    if n <= 1:\n        return None\n    largest_prime = -1\n    # Handle even numbers\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    # Check for odd divisors up to sqrt(n)\n    i = 3\n    max_factor = int(n**0.5) + 1\n    while i <= max_factor:\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n            max_factor = int(n**0.5) + 1\n        i += 2\n    if n > 2:\n        largest_prime = n\n    return largest_prime",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "312": {
    "question_id": "mbpp/31",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Prime_Factors(n):\n    if n <= 1:\n        return None\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    if n > 2:\n        largest_prime = n\n    return largest_prime",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "313": {
    "question_id": "mbpp/31",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Prime_Factors(n):\n    if n <= 1:\n        return None\n    largest_prime = -1\n    # Handle even numbers\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    # Check for odd divisors up to sqrt(n)\n    i = 3\n    max_factor = int(n**0.5) + 1\n    while i <= max_factor:\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n            max_factor = int(n**0.5) + 1\n        i += 2\n    if n > 2:\n        largest_prime = n\n    return largest_prime",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "314": {
    "question_id": "mbpp/31",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Prime_Factors(n):\n    if n <= 1:\n        return None\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    if n > 2:\n        largest_prime = n\n    return largest_prime",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "315": {
    "question_id": "mbpp/31",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Prime_Factors(n):\n    if n <= 1:\n        return None\n    largest_prime = -1\n    # Handle even numbers\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    # Check for odd divisors up to sqrt(n)\n    i = 3\n    max_factor = int(n**0.5) + 1\n    while i <= max_factor:\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n            max_factor = int(n**0.5) + 1\n        i += 2\n    if n > 2:\n        largest_prime = n\n    return largest_prime",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "316": {
    "question_id": "mbpp/31",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Prime_Factors(n):\n    if n <= 1:\n        return None\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    if n > 2:\n        largest_prime = n\n    return largest_prime",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "317": {
    "question_id": "mbpp/31",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Prime_Factors(n):\n    if n <= 1:\n        return None\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    if n > 2:\n        largest_prime = n\n    return largest_prime",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "318": {
    "question_id": "mbpp/31",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Prime_Factors(n):\n    if n <= 1:\n        return None\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    if n > 2:\n        largest_prime = n\n    return largest_prime",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "319": {
    "question_id": "mbpp/31",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Prime_Factors(n):\n    if n <= 1:\n        return None\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    if n > 2:\n        largest_prime = n\n    return largest_prime",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "320": {
    "question_id": "mbpp/32",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return int(binary)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "321": {
    "question_id": "mbpp/32",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return int(binary)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "322": {
    "question_id": "mbpp/32",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return int(binary)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "323": {
    "question_id": "mbpp/32",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return int(binary)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "324": {
    "question_id": "mbpp/32",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = \"\"\n    num = abs(n)\n    while num > 0:\n        binary = str(num % 2) + binary\n        num = num // 2\n    return int(binary) if n > 0 else -int(binary)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "325": {
    "question_id": "mbpp/32",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return int(binary)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "326": {
    "question_id": "mbpp/32",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return int(binary) if binary else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "327": {
    "question_id": "mbpp/32",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return int(binary)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "328": {
    "question_id": "mbpp/32",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return int(binary)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "329": {
    "question_id": "mbpp/32",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return int(binary)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "330": {
    "question_id": "mbpp/33",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_missing(arr, n):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "331": {
    "question_id": "mbpp/33",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_missing(arr, n):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "332": {
    "question_id": "mbpp/33",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_missing(arr, n):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "333": {
    "question_id": "mbpp/33",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_missing(arr, n):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "334": {
    "question_id": "mbpp/33",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_missing(arr, n):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "335": {
    "question_id": "mbpp/33",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_missing(arr, n):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "336": {
    "question_id": "mbpp/33",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_missing(arr, n):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "337": {
    "question_id": "mbpp/33",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_missing(arr, n):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "338": {
    "question_id": "mbpp/33",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_missing(arr, n):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "339": {
    "question_id": "mbpp/33",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_missing(arr, n):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "340": {
    "question_id": "mbpp/34",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rect_num(n):\n    return n * (n + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "341": {
    "question_id": "mbpp/34",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rect_num(n):\n    return n * (n + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "342": {
    "question_id": "mbpp/34",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rect_num(n):\n    return n * (n + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "343": {
    "question_id": "mbpp/34",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rect_num(n):\n    return n * (n + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "344": {
    "question_id": "mbpp/34",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rect_num(n):\n    return n * (n + 1) * (2 * n + 1) // 2",
    "test_output": "FAILED: expect 20,in fact 90",
    "test_result": "False"
  },
  "345": {
    "question_id": "mbpp/34",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rect_num(n):\n    return n * (n + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "346": {
    "question_id": "mbpp/34",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rect_num(n):\n    return n * (n + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "347": {
    "question_id": "mbpp/34",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rect_num(n):\n    return n * (n + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "348": {
    "question_id": "mbpp/34",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rect_num(n):\n    return n * (n + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "349": {
    "question_id": "mbpp/34",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rect_num(n):\n    return n * (n + 1) * (2 * n + 1) // 2",
    "test_output": "FAILED: expect 20,in fact 90",
    "test_result": "False"
  },
  "350": {
    "question_id": "mbpp/35",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Nth_Digit(a, b, n):\n    if b == 0:\n        return None\n    fraction = str(a / b).split('.')\n    if len(fraction) == 1:\n        return 0\n    decimal_part = fraction[1]\n    if n > len(decimal_part):\n        return 0\n    return int(decimal_part[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "351": {
    "question_id": "mbpp/35",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Nth_Digit(a, b, n):\n    if b == 0:\n        return None\n    fraction = str(a / b).split('.')\n    if len(fraction) == 1:\n        return 0\n    decimal_part = fraction[1]\n    if n > len(decimal_part):\n        return 0\n    return int(decimal_part[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "352": {
    "question_id": "mbpp/35",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Nth_Digit(a, b, n):\n    if b == 0:\n        return None\n    fraction = str(a / b).split('.')\n    if len(fraction) == 1:\n        decimal_part = '0'\n    else:\n        decimal_part = fraction[1]\n    if n > len(decimal_part):\n        return 0\n    return int(decimal_part[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "353": {
    "question_id": "mbpp/35",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Nth_Digit(a, b, n):\n    if b == 0:\n        return None\n    fraction = str(a / b).split('.')\n    if len(fraction) == 1:\n        decimal_part = '0'\n    else:\n        decimal_part = fraction[1]\n    if n > len(decimal_part):\n        return 0\n    return int(decimal_part[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "354": {
    "question_id": "mbpp/35",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Nth_Digit(a, b, n):\n    if b == 0:\n        return None\n    fraction = str(a / b).split('.')\n    if len(fraction) == 1:\n        decimal_part = '0'\n    else:\n        decimal_part = fraction[1]\n    if n > len(decimal_part):\n        return 0\n    return int(decimal_part[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "355": {
    "question_id": "mbpp/35",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Nth_Digit(a, b, n):\n    if b == 0:\n        return None\n    fraction = str(a / b).split('.')\n    if len(fraction) == 1:\n        decimal_part = '0'\n    else:\n        decimal_part = fraction[1]\n    if n > len(decimal_part):\n        return 0\n    return int(decimal_part[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "356": {
    "question_id": "mbpp/35",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Nth_Digit(a, b, n):\n    if b == 0:\n        return None\n    fraction = a / b\n    decimal_part = str(fraction).split('.')[1] if '.' in str(fraction) else '0'\n    if n <= len(decimal_part):\n        return int(decimal_part[n-1])\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "357": {
    "question_id": "mbpp/35",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Nth_Digit(a, b, n):\n    if b == 0:\n        return None\n    fraction = str(a / b).split('.')\n    if len(fraction) == 1:\n        return 0\n    decimal_part = fraction[1]\n    if n > len(decimal_part):\n        return 0\n    return int(decimal_part[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "358": {
    "question_id": "mbpp/35",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Nth_Digit(a, b, n):\n    if b == 0:\n        return None\n    fraction = a / b\n    decimal_part = str(fraction).split('.')[1] if '.' in str(fraction) else '0'\n    if n <= len(decimal_part):\n        return int(decimal_part[n-1])\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "359": {
    "question_id": "mbpp/35",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Nth_Digit(a, b, N):\n    if b == 0:\n        return None\n    fraction = str(a / b).split('.')\n    if len(fraction) == 1:\n        return 0\n    decimal_part = fraction[1]\n    if N > len(decimal_part):\n        return 0\n    return int(decimal_part[N-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "360": {
    "question_id": "mbpp/36",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_mixed_list(lst):\n    numbers = sorted([x for x in lst if isinstance(x, int)])\n    strings = sorted([x for x in lst if isinstance(x, str)])\n    return numbers + strings",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "361": {
    "question_id": "mbpp/36",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_mixed_list(lst):\n    numbers = sorted([x for x in lst if isinstance(x, int)])\n    strings = sorted([x for x in lst if isinstance(x, str)])\n    return numbers + strings",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "362": {
    "question_id": "mbpp/36",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_mixed_list(lst):\n    numbers = sorted([x for x in lst if isinstance(x, int)])\n    strings = sorted([x for x in lst if isinstance(x, str)])\n    return numbers + strings",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "363": {
    "question_id": "mbpp/36",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_mixed_list(lst):\n    numbers = sorted([x for x in lst if isinstance(x, int)])\n    strings = sorted([x for x in lst if isinstance(x, str)])\n    return numbers + strings",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "364": {
    "question_id": "mbpp/36",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_mixed_list(lst):\n    numbers = sorted([x for x in lst if isinstance(x, int)])\n    strings = sorted([x for x in lst if isinstance(x, str)])\n    return numbers + strings",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "365": {
    "question_id": "mbpp/36",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_mixed_list(lst):\n    numbers = sorted([x for x in lst if isinstance(x, int)])\n    strings = sorted([x for x in lst if isinstance(x, str)])\n    return numbers + strings",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "366": {
    "question_id": "mbpp/36",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_mixed_list(lst):\n    numbers = sorted([x for x in lst if isinstance(x, int)])\n    strings = sorted([x for x in lst if isinstance(x, str)])\n    return numbers + strings",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "367": {
    "question_id": "mbpp/36",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_mixed_list(lst):\n    numbers = sorted([x for x in lst if isinstance(x, int)])\n    strings = sorted([x for x in lst if isinstance(x, str)])\n    return numbers + strings",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "368": {
    "question_id": "mbpp/36",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_mixed_list(lst):\n    numbers = sorted([x for x in lst if isinstance(x, int)])\n    strings = sorted([x for x in lst if isinstance(x, str)])\n    return numbers + strings",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "369": {
    "question_id": "mbpp/36",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_mixed_list(lst):\n    numbers = sorted([x for x in lst if isinstance(x, int)])\n    strings = sorted([x for x in lst if isinstance(x, str)])\n    return numbers + strings",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "370": {
    "question_id": "mbpp/37",
    "model": "deepseek-v3-250324",
    "generation_code": "def div_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return None\n    return first_even / first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "371": {
    "question_id": "mbpp/37",
    "model": "deepseek-v3-250324",
    "generation_code": "def div_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return None\n    return first_even / first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "372": {
    "question_id": "mbpp/37",
    "model": "deepseek-v3-250324",
    "generation_code": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return None\n    return even / odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "373": {
    "question_id": "mbpp/37",
    "model": "deepseek-v3-250324",
    "generation_code": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return None\n    return even / odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "374": {
    "question_id": "mbpp/37",
    "model": "deepseek-v3-250324",
    "generation_code": "def div_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return None\n    return first_even / first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "375": {
    "question_id": "mbpp/37",
    "model": "deepseek-v3-250324",
    "generation_code": "def div_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return None\n    return first_even / first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "376": {
    "question_id": "mbpp/37",
    "model": "deepseek-v3-250324",
    "generation_code": "def div_even_odd(nums):\n    even_num = None\n    odd_num = None\n    \n    for num in nums:\n        if even_num is None and num % 2 == 0:\n            even_num = num\n        if odd_num is None and num % 2 != 0:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    \n    if even_num is None or odd_num is None:\n        return None\n    \n    return even_num / odd_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "377": {
    "question_id": "mbpp/37",
    "model": "deepseek-v3-250324",
    "generation_code": "def div_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return None\n    return first_even / first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "378": {
    "question_id": "mbpp/37",
    "model": "deepseek-v3-250324",
    "generation_code": "def div_even_odd(lst):\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if even_num is None and num % 2 == 0:\n            even_num = num\n        if odd_num is None and num % 2 != 0:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    if even_num is None or odd_num is None:\n        return None\n    return even_num / odd_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "379": {
    "question_id": "mbpp/37",
    "model": "deepseek-v3-250324",
    "generation_code": "def div_even_odd(lst):\n    even_num = None\n    odd_num = None\n    \n    for num in lst:\n        if even_num is None and num % 2 == 0:\n            even_num = num\n        if odd_num is None and num % 2 != 0:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    \n    if even_num is None or odd_num is None:\n        return None\n    \n    return even_num / odd_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "380": {
    "question_id": "mbpp/38",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport heapq\n\ndef rearange_string(s):\n    if not s:\n        return \"\"\n    \n    count = Counter(s)\n    max_heap = [(-freq, char) for char, freq in count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    prev_freq, prev_char = 0, ''\n    \n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        prev_freq, prev_char = freq + 1, char\n    \n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "381": {
    "question_id": "mbpp/38",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport heapq\n\ndef rearange_string(s):\n    if not s:\n        return \"\"\n    \n    count = Counter(s)\n    max_heap = [(-cnt, char) for char, cnt in count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    prev_cnt, prev_char = 0, ''\n    \n    while max_heap:\n        cnt, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        if prev_cnt < 0:\n            heapq.heappush(max_heap, (prev_cnt, prev_char))\n        \n        prev_cnt = cnt + 1\n        prev_char = char\n    \n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "382": {
    "question_id": "mbpp/38",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport heapq\n\ndef rearange_string(s):\n    if not s:\n        return \"\"\n    \n    count = Counter(s)\n    max_heap = [(-cnt, char) for char, cnt in count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    prev_cnt, prev_char = 0, ''\n    \n    while max_heap:\n        cnt, char = heapq.heappop(max_heap)\n        result.append(char)\n        cnt += 1  # because it's stored as negative\n        \n        if prev_cnt < 0:\n            heapq.heappush(max_heap, (prev_cnt, prev_char))\n        \n        prev_cnt, prev_char = cnt, char\n    \n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "383": {
    "question_id": "mbpp/38",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport heapq\n\ndef rearange_string(s):\n    if not s:\n        return \"\"\n    \n    count = Counter(s)\n    max_heap = [(-cnt, char) for char, cnt in count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    prev_cnt, prev_char = 0, ''\n    \n    while max_heap:\n        cnt, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        if prev_cnt < 0:\n            heapq.heappush(max_heap, (prev_cnt, prev_char))\n        \n        prev_cnt, prev_char = cnt + 1, char\n    \n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "384": {
    "question_id": "mbpp/38",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport heapq\n\ndef rearange_string(s):\n    if not s:\n        return \"\"\n    \n    count = Counter(s)\n    max_heap = [(-cnt, char) for char, cnt in count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    prev_cnt, prev_char = 0, ''\n    \n    while max_heap:\n        cnt, char = heapq.heappop(max_heap)\n        result.append(char)\n        cnt += 1  # since we stored negative counts\n        \n        if prev_cnt < 0:\n            heapq.heappush(max_heap, (prev_cnt, prev_char))\n        \n        prev_cnt, prev_char = cnt, char\n    \n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "385": {
    "question_id": "mbpp/38",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport heapq\n\ndef rearange_string(s):\n    if not s:\n        return \"\"\n    \n    count = Counter(s)\n    max_heap = [(-cnt, char) for char, cnt in count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    prev_cnt, prev_char = 0, ''\n    \n    while max_heap:\n        cnt, char = heapq.heappop(max_heap)\n        result.append(char)\n        cnt += 1  # because stored as negative\n        \n        if prev_cnt < 0:\n            heapq.heappush(max_heap, (prev_cnt, prev_char))\n        \n        prev_cnt, prev_char = cnt, char\n    \n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "386": {
    "question_id": "mbpp/38",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport heapq\n\ndef rearange_string(s):\n    if not s:\n        return \"\"\n    \n    count = Counter(s)\n    max_heap = [(-cnt, char) for char, cnt in count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    prev_cnt, prev_char = 0, ''\n    \n    while max_heap:\n        cnt, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        if prev_cnt < 0:\n            heapq.heappush(max_heap, (prev_cnt, prev_char))\n        \n        prev_cnt, prev_char = cnt + 1, char\n    \n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "387": {
    "question_id": "mbpp/38",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport heapq\n\ndef rearange_string(s):\n    if not s:\n        return \"\"\n    \n    count = Counter(s)\n    max_heap = [(-freq, char) for char, freq in count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    prev_char = None\n    prev_freq = 0\n    \n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        freq = -freq\n        \n        result.append(char)\n        freq -= 1\n        \n        if prev_freq > 0:\n            heapq.heappush(max_heap, (-prev_freq, prev_char))\n        \n        prev_char = char\n        prev_freq = freq\n    \n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "388": {
    "question_id": "mbpp/38",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport heapq\n\ndef rearange_string(s):\n    if not s:\n        return \"\"\n    \n    count = Counter(s)\n    max_heap = [(-cnt, char) for char, cnt in count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    prev_cnt, prev_char = 0, ''\n    \n    while max_heap:\n        cnt, char = heapq.heappop(max_heap)\n        result.append(char)\n        cnt += 1  # because stored as negative\n        \n        if prev_cnt < 0:\n            heapq.heappush(max_heap, (prev_cnt, prev_char))\n        \n        prev_cnt, prev_char = cnt, char\n    \n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "389": {
    "question_id": "mbpp/38",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\nfrom collections import defaultdict\n\ndef rearange_string(s):\n    if not s:\n        return \"\"\n    \n    freq = defaultdict(int)\n    for char in s:\n        freq[char] += 1\n    \n    max_heap = []\n    for char, count in freq.items():\n        heapq.heappush(max_heap, (-count, char))\n    \n    result = []\n    prev_count, prev_char = 0, ''\n    \n    while max_heap:\n        current = heapq.heappop(max_heap)\n        current_count, current_char = -current[0], current[1]\n        result.append(current_char)\n        \n        if prev_count > 0:\n            heapq.heappush(max_heap, (-prev_count, prev_char))\n        \n        prev_count = current_count - 1\n        prev_char = current_char\n    \n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "390": {
    "question_id": "mbpp/39",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef freq_element(lst):\n    frequency = defaultdict(int)\n    for sublist in lst:\n        for element in sublist:\n            frequency[element] += 1\n    return dict(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "391": {
    "question_id": "mbpp/39",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef freq_element(lst):\n    frequency = defaultdict(int)\n    for sublist in lst:\n        for element in sublist:\n            frequency[element] += 1\n    return dict(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "392": {
    "question_id": "mbpp/39",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef freq_element(lst):\n    frequency = defaultdict(int)\n    for sublist in lst:\n        for element in sublist:\n            frequency[element] += 1\n    return dict(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "393": {
    "question_id": "mbpp/39",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef freq_element(lst):\n    frequency = defaultdict(int)\n    for sublist in lst:\n        for element in sublist:\n            frequency[element] += 1\n    return dict(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "394": {
    "question_id": "mbpp/39",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef freq_element(lst):\n    frequency = defaultdict(int)\n    for sublist in lst:\n        for element in sublist:\n            frequency[element] += 1\n    return dict(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "395": {
    "question_id": "mbpp/39",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef freq_element(lst):\n    frequency = defaultdict(int)\n    for sublist in lst:\n        for element in sublist:\n            frequency[element] += 1\n    return dict(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "396": {
    "question_id": "mbpp/39",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef freq_element(lst):\n    frequency = defaultdict(int)\n    for sublist in lst:\n        for element in sublist:\n            frequency[element] += 1\n    return dict(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "397": {
    "question_id": "mbpp/39",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef freq_element(lst):\n    frequency = defaultdict(int)\n    for sublist in lst:\n        for element in sublist:\n            frequency[element] += 1\n    return dict(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "398": {
    "question_id": "mbpp/39",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef freq_element(lst):\n    frequency = defaultdict(int)\n    for sublist in lst:\n        for element in sublist:\n            frequency[element] += 1\n    return dict(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "399": {
    "question_id": "mbpp/39",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef freq_element(lst):\n    frequency = defaultdict(int)\n    for sublist in lst:\n        for element in sublist:\n            frequency[element] += 1\n    return dict(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "400": {
    "question_id": "mbpp/40",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_evennumbers = lambda lst: list(filter(lambda x: x % 2 == 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "401": {
    "question_id": "mbpp/40",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_evennumbers = lambda lst: list(filter(lambda x: x % 2 == 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "402": {
    "question_id": "mbpp/40",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_evennumbers = lambda lst: list(filter(lambda x: x % 2 == 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "403": {
    "question_id": "mbpp/40",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_evennumbers = lambda lst: list(filter(lambda x: x % 2 == 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "404": {
    "question_id": "mbpp/40",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_evennumbers = lambda lst: list(filter(lambda x: x % 2 == 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "405": {
    "question_id": "mbpp/40",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_evennumbers = lambda lst: list(filter(lambda x: x % 2 == 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "406": {
    "question_id": "mbpp/40",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_evennumbers = lambda lst: list(filter(lambda x: x % 2 == 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "407": {
    "question_id": "mbpp/40",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_evennumbers = lambda lst: list(filter(lambda x: x % 2 == 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "408": {
    "question_id": "mbpp/40",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_evennumbers = lambda lst: list(filter(lambda x: x % 2 == 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "409": {
    "question_id": "mbpp/40",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_evennumbers = lambda lst: list(filter(lambda x: x % 2 == 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "410": {
    "question_id": "mbpp/41",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    sum_repeated = 0\n    for num, count in element_count.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "411": {
    "question_id": "mbpp/41",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    element_count = {}\n    repeated_sum = 0\n    \n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n            if element_count[num] == 2:\n                repeated_sum += num\n        else:\n            element_count[num] = 1\n    \n    return repeated_sum",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "412": {
    "question_id": "mbpp/41",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    element_count = {}\n    repeated_sum = 0\n    \n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n            if element_count[num] == 2:\n                repeated_sum += num\n        else:\n            element_count[num] = 1\n    \n    return repeated_sum",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "413": {
    "question_id": "mbpp/41",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    sum_repeated = 0\n    for num, count in element_count.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "414": {
    "question_id": "mbpp/41",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    sum_repeated = 0\n    for num, count in element_count.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "415": {
    "question_id": "mbpp/41",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    sum_repeated = 0\n    for num, count in element_count.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "416": {
    "question_id": "mbpp/41",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    element_count = {}\n    repeated_sum = 0\n    \n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    for num, count in element_count.items():\n        if count > 1:\n            repeated_sum += num * count\n    \n    return repeated_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "417": {
    "question_id": "mbpp/41",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    sum_repeated = 0\n    for num, count in element_count.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "418": {
    "question_id": "mbpp/41",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    sum_repeated = 0\n    for num, count in frequency.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "419": {
    "question_id": "mbpp/41",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    sum_repeated = 0\n    for num, count in element_count.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "420": {
    "question_id": "mbpp/42",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "421": {
    "question_id": "mbpp/42",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "422": {
    "question_id": "mbpp/42",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "423": {
    "question_id": "mbpp/42",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "424": {
    "question_id": "mbpp/42",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "425": {
    "question_id": "mbpp/42",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "426": {
    "question_id": "mbpp/42",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "427": {
    "question_id": "mbpp/42",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "428": {
    "question_id": "mbpp/42",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "429": {
    "question_id": "mbpp/42",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "430": {
    "question_id": "mbpp/43",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_string(text):\n    if text.strip().split()[0] == text.split()[0] and len(text.split()) > 0:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Not matched!,in fact Found a match!",
    "test_result": "False"
  },
  "431": {
    "question_id": "mbpp/43",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_string(word):\n    if word.startswith(' '):\n        return 'Not matched!'\n    return 'Matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "432": {
    "question_id": "mbpp/43",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_string(word):\n    if word.startswith(' '):\n        return 'Not matched!'\n    else:\n        return 'Found a match!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "433": {
    "question_id": "mbpp/43",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_string(text):\n    if text.strip().split()[0] == 'python':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Not matched!,in fact Found a match!",
    "test_result": "False"
  },
  "434": {
    "question_id": "mbpp/43",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_string(text):\n    if text.strip().startswith('python'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Not matched!,in fact Found a match!",
    "test_result": "False"
  },
  "435": {
    "question_id": "mbpp/43",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_string(text):\n    if len(text) == 0:\n        return 'Not matched!'\n    words = text.split()\n    if len(words) > 0 and words[0] == 'python':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Not matched!,in fact Found a match!",
    "test_result": "False"
  },
  "436": {
    "question_id": "mbpp/43",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_string(text):\n    if text.strip().split()[0] == 'python':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Not matched!,in fact Found a match!",
    "test_result": "False"
  },
  "437": {
    "question_id": "mbpp/43",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_string(text):\n    if text.strip().split()[0] == text.split()[0] and text.startswith(text.split()[0]):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "438": {
    "question_id": "mbpp/43",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_string(text):\n    if text.strip().split()[0] == 'python':\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Not matched!,in fact Matched!",
    "test_result": "False"
  },
  "439": {
    "question_id": "mbpp/43",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_string(text):\n    if text.strip().split()[0] == 'python':\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Not matched!,in fact Found a match!",
    "test_result": "False"
  },
  "440": {
    "question_id": "mbpp/44",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    if not arr:\n        return 0\n    return reduce(math.gcd, arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "441": {
    "question_id": "mbpp/44",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    if not arr:\n        return 0\n    return reduce(math.gcd, arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "442": {
    "question_id": "mbpp/44",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    if not arr:\n        return 0\n    return reduce(math.gcd, arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "443": {
    "question_id": "mbpp/44",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    if not arr:\n        return 0\n    return reduce(math.gcd, arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "444": {
    "question_id": "mbpp/44",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef get_gcd(arr):\n    if not arr:\n        return 0\n    current_gcd = arr[0]\n    for num in arr[1:]:\n        current_gcd = math.gcd(current_gcd, num)\n        if current_gcd == 1:\n            break\n    return current_gcd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "445": {
    "question_id": "mbpp/44",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    if not arr:\n        return 0\n    return reduce(math.gcd, arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "446": {
    "question_id": "mbpp/44",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    if not arr:\n        return 0\n    return reduce(math.gcd, arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "447": {
    "question_id": "mbpp/44",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    if not arr:\n        return 0\n    return reduce(math.gcd, arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "448": {
    "question_id": "mbpp/44",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    if not arr:\n        return 0\n    return reduce(math.gcd, arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "449": {
    "question_id": "mbpp/44",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    if not arr:\n        return 0\n    return reduce(math.gcd, arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "450": {
    "question_id": "mbpp/45",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_distinct(nums):\n    return len(nums) == len(set(nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "451": {
    "question_id": "mbpp/45",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_distinct(nums):\n    return len(nums) == len(set(nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "452": {
    "question_id": "mbpp/45",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_distinct(numbers):\n    return len(numbers) == len(set(numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "453": {
    "question_id": "mbpp/45",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_distinct(nums):\n    return len(nums) == len(set(nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "454": {
    "question_id": "mbpp/45",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_distinct(nums):\n    return len(nums) == len(set(nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "455": {
    "question_id": "mbpp/45",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_distinct(nums):\n    return len(nums) == len(set(nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "456": {
    "question_id": "mbpp/45",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_distinct(nums):\n    return len(nums) == len(set(nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "457": {
    "question_id": "mbpp/45",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_distinct(nums):\n    return len(nums) == len(set(nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "458": {
    "question_id": "mbpp/45",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_distinct(nums):\n    return len(nums) == len(set(nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "459": {
    "question_id": "mbpp/45",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_distinct(numbers):\n    return len(numbers) == len(set(numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "460": {
    "question_id": "mbpp/46",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef compute_Last_Digit(a, b):\n    if a < 0 or b < 0:\n        return -1\n    if a > b:\n        return 0\n    fact_a = math.factorial(a)\n    fact_b = math.factorial(b)\n    if fact_a == 0:\n        return 0\n    division = fact_b // fact_a\n    return division % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "461": {
    "question_id": "mbpp/46",
    "model": "deepseek-v3-250324",
    "generation_code": "def compute_Last_Digit(a, b):\n    if a == 0:\n        a = 1\n    if b == 0:\n        b = 1\n    if a > b:\n        return 0\n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n        if last_digit == 0:\n            break\n    return last_digit",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "462": {
    "question_id": "mbpp/46",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef compute_Last_Digit(a, b):\n    if a < 0 or b < 0:\n        return -1\n    if a > b:\n        return 0\n    if a == b:\n        return 1\n    fact_a = math.factorial(a)\n    fact_b = math.factorial(b)\n    if fact_a == 0:\n        return 0\n    division = fact_b // fact_a\n    return division % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "463": {
    "question_id": "mbpp/46",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef compute_Last_Digit(a, b):\n    if a < 0 or b < 0:\n        return -1\n    if a > b:\n        return 0\n    fact_a = math.factorial(a)\n    fact_b = math.factorial(b)\n    if fact_a == 0:\n        return 0\n    division = fact_b // fact_a\n    return division % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "464": {
    "question_id": "mbpp/46",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef compute_Last_Digit(a, b):\n    if a < 0 or b < 0:\n        return -1\n    if a > b:\n        return 0\n    fact_a = math.factorial(a)\n    fact_b = math.factorial(b)\n    if fact_a == 0:\n        return 0\n    division = fact_b // fact_a\n    return division % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "465": {
    "question_id": "mbpp/46",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef compute_Last_Digit(a, b):\n    if a < 0 or b < 0:\n        return 0\n    if a > b:\n        return 0\n    fact_a = math.factorial(a)\n    fact_b = math.factorial(b)\n    if fact_a == 0:\n        return 0\n    division = fact_b // fact_a\n    return division % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "466": {
    "question_id": "mbpp/46",
    "model": "deepseek-v3-250324",
    "generation_code": "def compute_Last_Digit(a, b):\n    if a > b:\n        return 0\n    if a == b:\n        return 1\n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n        if last_digit == 0:\n            break\n    return last_digit",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "467": {
    "question_id": "mbpp/46",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef compute_Last_Digit(a, b):\n    if a < 0 or b < 0:\n        return -1\n    if a > b:\n        return 0\n    fact_a = math.factorial(a)\n    fact_b = math.factorial(b)\n    if fact_a == 0:\n        return 0\n    division = fact_b // fact_a\n    return division % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "468": {
    "question_id": "mbpp/46",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef compute_Last_Digit(a, b):\n    if a < 0 or b < 0:\n        return -1\n    if a > b:\n        return 0\n    fact_a = math.factorial(a)\n    fact_b = math.factorial(b)\n    if fact_a == 0:\n        return 0\n    division = fact_b // fact_a\n    return division % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "469": {
    "question_id": "mbpp/46",
    "model": "deepseek-v3-250324",
    "generation_code": "def compute_Last_Digit(a, b):\n    if a > b:\n        return 0\n    if a == b:\n        return 1\n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n        if last_digit == 0:\n            break\n    return last_digit",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "470": {
    "question_id": "mbpp/47",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_bit_set_number(n):\n    if n == 0:\n        return 1\n    result = 0\n    bit_pos = 0\n    while (1 << bit_pos) <= n * 2:\n        if bit_pos % 2 == 0:\n            result |= (1 << bit_pos)\n        bit_pos += 1\n    return n | result",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "471": {
    "question_id": "mbpp/47",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_bit_set_number(n):\n    mask = 0x55555555  # This is a mask with all odd bits set (assuming 32-bit integer)\n    return n | mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "472": {
    "question_id": "mbpp/47",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_bit_set_number(n):\n    mask = 0x55555555  # This is a 32-bit mask with all odd bits set (0101...)\n    return n | mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "473": {
    "question_id": "mbpp/47",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_bit_set_number(n):\n    if n == 0:\n        return 1\n    mask = 0x55555555  # This is 0101 0101 ... in binary for 32 bits\n    return n | mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "474": {
    "question_id": "mbpp/47",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_bit_set_number(n):\n    mask = 0x55555555  # This is a mask with all odd bits set (binary: 0101 0101 ...)\n    return n | mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "475": {
    "question_id": "mbpp/47",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_bit_set_number(n):\n    if n == 0:\n        return 1\n    mask = 0x55555555  # This is a 32-bit mask with all odd bits set (0101...)\n    return n | mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "476": {
    "question_id": "mbpp/47",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_bit_set_number(n):\n    mask = 0x55555555  # This is a 32-bit mask with all odd bits set (0101...0101)\n    return n | mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "477": {
    "question_id": "mbpp/47",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_bit_set_number(n):\n    if n == 0:\n        return 1\n    mask = 0\n    bit_pos = 0\n    while (1 << bit_pos) <= n:\n        if bit_pos % 2 == 0:\n            mask |= (1 << bit_pos)\n        bit_pos += 1\n    return n | mask",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "478": {
    "question_id": "mbpp/47",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_bit_set_number(n):\n    if n == 0:\n        return 1\n    result = 0\n    bit_pos = 0\n    while (1 << bit_pos) <= n * 2:\n        if bit_pos % 2 == 0:\n            result |= (1 << bit_pos)\n        bit_pos += 1\n    return n | result",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "479": {
    "question_id": "mbpp/47",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_bit_set_number(n):\n    mask = 0x55555555  # This is a mask with all odd bits set (0101... in binary)\n    return n | mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "480": {
    "question_id": "mbpp/48",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n=0):\n    return [sub[n] for sub in lst if len(sub) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "481": {
    "question_id": "mbpp/48",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n=0):\n    return [sub_lst[n] for sub_lst in lst if len(sub_lst) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "482": {
    "question_id": "mbpp/48",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n=0):\n    return [sub[n] for sub in lst if len(sub) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "483": {
    "question_id": "mbpp/48",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n=0):\n    return [sublist[n] for sublist in lst if len(sublist) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "484": {
    "question_id": "mbpp/48",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n=0):\n    return [sub[n] for sub in lst if len(sub) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "485": {
    "question_id": "mbpp/48",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n=0):\n    return [sub[n] for sub in lst if len(sub) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "486": {
    "question_id": "mbpp/48",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n=0):\n    return [sub[n] if len(sub) > n else None for sub in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "487": {
    "question_id": "mbpp/48",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n=0):\n    return [sublist[n] for sublist in lst if len(sublist) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "488": {
    "question_id": "mbpp/48",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n=0):\n    return [sub[n] for sub in lst if len(sub) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "489": {
    "question_id": "mbpp/48",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n=0):\n    return [sub_lst[n] for sub_lst in lst if len(sub_lst) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "490": {
    "question_id": "mbpp/49",
    "model": "deepseek-v3-250324",
    "generation_code": "min_length_list = lambda lists: (min(len(lst) for lst in lists), min(lists, key=lambda x: len(x)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "491": {
    "question_id": "mbpp/49",
    "model": "deepseek-v3-250324",
    "generation_code": "min_length_list = lambda lists: (min(len(l) for l in lists), min(lists, key=lambda x: len(x)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "492": {
    "question_id": "mbpp/49",
    "model": "deepseek-v3-250324",
    "generation_code": "min_length_list = lambda lists: (min(len(lst) for lst in lists), next(lst for lst in lists if len(lst) == min(len(l) for l in lists)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "493": {
    "question_id": "mbpp/49",
    "model": "deepseek-v3-250324",
    "generation_code": "min_length_list = lambda lists: (min(len(lst) for lst in lists), next(lst for lst in lists if len(lst) == min(len(l) for l in lists)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "494": {
    "question_id": "mbpp/49",
    "model": "deepseek-v3-250324",
    "generation_code": "min_length_list = lambda lists: (min(len(l) for l in lists), next(l for l in lists if len(l) == min(len(x) for x in lists)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "495": {
    "question_id": "mbpp/49",
    "model": "deepseek-v3-250324",
    "generation_code": "min_length_list = lambda lists: (min(len(lst) for lst in lists), min(lists, key=lambda x: len(x)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "496": {
    "question_id": "mbpp/49",
    "model": "deepseek-v3-250324",
    "generation_code": "min_length_list = lambda lists: (min(len(l) for l in lists), min(lists, key=lambda x: len(x)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "497": {
    "question_id": "mbpp/49",
    "model": "deepseek-v3-250324",
    "generation_code": "min_length_list = lambda lists: (min(len(lst) for lst in lists), min(lists, key=lambda x: len(x)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "498": {
    "question_id": "mbpp/49",
    "model": "deepseek-v3-250324",
    "generation_code": "min_length_list = lambda lists: (min(len(lst) for lst in lists), min(lists, key=lambda x: len(x)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "499": {
    "question_id": "mbpp/49",
    "model": "deepseek-v3-250324",
    "generation_code": "min_length_list = lambda lists: (min(len(l) for l in lists), min(lists, key=lambda x: len(x)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "500": {
    "question_id": "mbpp/50",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_equilateral(a, b, c):\n    return a == b == c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "501": {
    "question_id": "mbpp/50",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_equilateral(a, b, c):\n    return a == b == c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "502": {
    "question_id": "mbpp/50",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_equilateral(a, b, c):\n    return a == b == c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "503": {
    "question_id": "mbpp/50",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_equilateral(a, b, c):\n    return a == b == c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "504": {
    "question_id": "mbpp/50",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_equilateral(a, b, c):\n    return a == b == c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "505": {
    "question_id": "mbpp/50",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_equilateral(a, b, c):\n    return a == b == c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "506": {
    "question_id": "mbpp/50",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_equilateral(a, b, c):\n    return a == b == c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "507": {
    "question_id": "mbpp/50",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_equilateral(a, b, c):\n    return a == b == c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "508": {
    "question_id": "mbpp/50",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_equilateral(a, b, c):\n    return a == b == c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "509": {
    "question_id": "mbpp/50",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_equilateral(a, b, c):\n    return a == b == c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "510": {
    "question_id": "mbpp/51",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "511": {
    "question_id": "mbpp/51",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "512": {
    "question_id": "mbpp/51",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "513": {
    "question_id": "mbpp/51",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "514": {
    "question_id": "mbpp/51",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "515": {
    "question_id": "mbpp/51",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "516": {
    "question_id": "mbpp/51",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "517": {
    "question_id": "mbpp/51",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "518": {
    "question_id": "mbpp/51",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "519": {
    "question_id": "mbpp/51",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_area(base, height):\n    return base * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "520": {
    "question_id": "mbpp/52",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Equality(s):\n    if len(s) == 0:\n        return \"Not Equal\"\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "521": {
    "question_id": "mbpp/52",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Equality(s):\n    if len(s) == 0:\n        return \"Not Equal\"\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "522": {
    "question_id": "mbpp/52",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Equality(s):\n    if len(s) == 0:\n        return \"Not Equal\"\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "523": {
    "question_id": "mbpp/52",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Equality(s):\n    if len(s) == 0:\n        return \"Not Equal\"\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "524": {
    "question_id": "mbpp/52",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Equality(s):\n    if len(s) == 0:\n        return \"Not Equal\"\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "525": {
    "question_id": "mbpp/52",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Equality(s):\n    if len(s) == 0:\n        return \"Not Equal\"\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "526": {
    "question_id": "mbpp/52",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Equality(s):\n    if len(s) == 0:\n        return \"Not Equal\"\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "527": {
    "question_id": "mbpp/52",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Equality(s):\n    if len(s) == 0:\n        return \"Not Equal\"\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "528": {
    "question_id": "mbpp/52",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Equality(s):\n    if len(s) == 0:\n        return \"Not Equal\"\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "529": {
    "question_id": "mbpp/52",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Equality(s):\n    if len(s) == 0:\n        return \"Not Equal\"\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "530": {
    "question_id": "mbpp/53",
    "model": "deepseek-v3-250324",
    "generation_code": "def counting_sort(arr):\n    if not arr:\n        return []\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    count = [0] * (max_val - min_val + 1)\n    \n    for num in arr:\n        count[num - min_val] += 1\n    \n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i + min_val] * count[i])\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "531": {
    "question_id": "mbpp/53",
    "model": "deepseek-v3-250324",
    "generation_code": "def counting_sort(arr):\n    if not arr:\n        return []\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    count = [0] * (max_val - min_val + 1)\n    \n    for num in arr:\n        count[num - min_val] += 1\n    \n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i + min_val] * count[i])\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "532": {
    "question_id": "mbpp/53",
    "model": "deepseek-v3-250324",
    "generation_code": "def counting_sort(arr):\n    if not arr:\n        return []\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    range_val = max_val - min_val + 1\n    \n    count = [0] * range_val\n    output = [0] * len(arr)\n    \n    for num in arr:\n        count[num - min_val] += 1\n    \n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n    \n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n    \n    return output",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "533": {
    "question_id": "mbpp/53",
    "model": "deepseek-v3-250324",
    "generation_code": "def counting_sort(arr):\n    if not arr:\n        return []\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    count = [0] * (max_val - min_val + 1)\n    \n    for num in arr:\n        count[num - min_val] += 1\n    \n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i + min_val] * count[i])\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "534": {
    "question_id": "mbpp/53",
    "model": "deepseek-v3-250324",
    "generation_code": "def counting_sort(arr):\n    if not arr:\n        return []\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    range_of_elements = max_val - min_val + 1\n    \n    count = [0] * range_of_elements\n    output = [0] * len(arr)\n    \n    for num in arr:\n        count[num - min_val] += 1\n    \n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n    \n    return output",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "535": {
    "question_id": "mbpp/53",
    "model": "deepseek-v3-250324",
    "generation_code": "def counting_sort(arr):\n    if not arr:\n        return []\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    range_of_elements = max_val - min_val + 1\n    \n    count = [0] * range_of_elements\n    output = [0] * len(arr)\n    \n    for num in arr:\n        count[num - min_val] += 1\n    \n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n    \n    return output",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "536": {
    "question_id": "mbpp/53",
    "model": "deepseek-v3-250324",
    "generation_code": "def counting_sort(arr):\n    if not arr:\n        return []\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    count = [0] * (max_val - min_val + 1)\n    \n    for num in arr:\n        count[num - min_val] += 1\n    \n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i + min_val] * count[i])\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "537": {
    "question_id": "mbpp/53",
    "model": "deepseek-v3-250324",
    "generation_code": "def counting_sort(arr):\n    if not arr:\n        return []\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    count = [0] * (max_val - min_val + 1)\n    \n    for num in arr:\n        count[num - min_val] += 1\n    \n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i + min_val] * count[i])\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "538": {
    "question_id": "mbpp/53",
    "model": "deepseek-v3-250324",
    "generation_code": "def counting_sort(arr):\n    if not arr:\n        return []\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    count = [0] * (max_val - min_val + 1)\n    \n    for num in arr:\n        count[num - min_val] += 1\n    \n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i + min_val] * count[i])\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "539": {
    "question_id": "mbpp/53",
    "model": "deepseek-v3-250324",
    "generation_code": "def counting_sort(arr):\n    if not arr:\n        return []\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    count = [0] * (max_val - min_val + 1)\n    \n    for num in arr:\n        count[num - min_val] += 1\n    \n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i + min_val] * count[i])\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "540": {
    "question_id": "mbpp/54",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_gp(a, r, n):\n    return a * (r ** (n - 1))",
    "test_output": "FAILED: expect 16,in fact 5",
    "test_result": "False"
  },
  "541": {
    "question_id": "mbpp/54",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_gp(a, r, n):\n    return a * (r ** (n - 1))",
    "test_output": "FAILED: expect 16,in fact 5",
    "test_result": "False"
  },
  "542": {
    "question_id": "mbpp/54",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_gp(a, r, n):\n    return a * (r ** (n - 1))",
    "test_output": "FAILED: expect 16,in fact 5",
    "test_result": "False"
  },
  "543": {
    "question_id": "mbpp/54",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_gp(a, r, n):\n    return a * (r ** (n - 1))",
    "test_output": "FAILED: expect 16,in fact 5",
    "test_result": "False"
  },
  "544": {
    "question_id": "mbpp/54",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_gp(a, r, n):\n    return a * (r ** (n - 1))",
    "test_output": "FAILED: expect 16,in fact 5",
    "test_result": "False"
  },
  "545": {
    "question_id": "mbpp/54",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_gp(a, r, n):\n    return a * (r ** (n - 1))",
    "test_output": "FAILED: expect 16,in fact 5",
    "test_result": "False"
  },
  "546": {
    "question_id": "mbpp/54",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_gp(a, r, n):\n    return a * (r ** (n - 1))",
    "test_output": "FAILED: expect 16,in fact 5",
    "test_result": "False"
  },
  "547": {
    "question_id": "mbpp/54",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_gp(a, r, n):\n    return a * (r ** (n - 1))",
    "test_output": "FAILED: expect 16,in fact 5",
    "test_result": "False"
  },
  "548": {
    "question_id": "mbpp/54",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_gp(a, r, n):\n    return a * (r ** (n - 1))",
    "test_output": "FAILED: expect 16,in fact 5",
    "test_result": "False"
  },
  "549": {
    "question_id": "mbpp/54",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_gp(a, r, n):\n    return a * (r ** (n - 1))",
    "test_output": "FAILED: expect 16,in fact 5",
    "test_result": "False"
  },
  "550": {
    "question_id": "mbpp/55",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(num):\n    if num < 0:\n        return False\n    reversed_num = int(str(num)[::-1])\n    return num == 2 * reversed_num - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "551": {
    "question_id": "mbpp/55",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(n):\n    if n < 0:\n        return False\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "552": {
    "question_id": "mbpp/55",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(num):\n    if num < 0:\n        return False\n    reversed_num = int(str(num)[::-1])\n    return num == 2 * reversed_num - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "553": {
    "question_id": "mbpp/55",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(n):\n    if n < 0:\n        return False\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "554": {
    "question_id": "mbpp/55",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(n):\n    if n < 0:\n        return False\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "555": {
    "question_id": "mbpp/55",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(num):\n    if num < 0:\n        return False\n    reversed_num = int(str(num)[::-1])\n    return num == 2 * reversed_num - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "556": {
    "question_id": "mbpp/55",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(num):\n    if num < 0:\n        return False\n    reversed_num = int(str(num)[::-1])\n    return num == 2 * reversed_num - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "557": {
    "question_id": "mbpp/55",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(n):\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "558": {
    "question_id": "mbpp/55",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(n):\n    if n < 0:\n        return False\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "559": {
    "question_id": "mbpp/55",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(num):\n    if num < 0:\n        return False\n    reversed_num = int(str(num)[::-1])\n    return num == 2 * reversed_num - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "560": {
    "question_id": "mbpp/56",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    largest_num = int(''.join(map(str, arr)))\n    return largest_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "561": {
    "question_id": "mbpp/56",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "562": {
    "question_id": "mbpp/56",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "563": {
    "question_id": "mbpp/56",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "564": {
    "question_id": "mbpp/56",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "565": {
    "question_id": "mbpp/56",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "566": {
    "question_id": "mbpp/56",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    largest_num = int(''.join(map(str, arr)))\n    return largest_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "567": {
    "question_id": "mbpp/56",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "568": {
    "question_id": "mbpp/56",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "569": {
    "question_id": "mbpp/56",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "570": {
    "question_id": "mbpp/57",
    "model": "deepseek-v3-250324",
    "generation_code": "def opposite_Signs(a, b):\n    return (a < 0) != (b < 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "571": {
    "question_id": "mbpp/57",
    "model": "deepseek-v3-250324",
    "generation_code": "def opposite_Signs(x, y):\n    return (x < 0) != (y < 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "572": {
    "question_id": "mbpp/57",
    "model": "deepseek-v3-250324",
    "generation_code": "def opposite_Signs(x, y):\n    return (x < 0) != (y < 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "573": {
    "question_id": "mbpp/57",
    "model": "deepseek-v3-250324",
    "generation_code": "def opposite_Signs(x, y):\n    return (x < 0) != (y < 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "574": {
    "question_id": "mbpp/57",
    "model": "deepseek-v3-250324",
    "generation_code": "def opposite_Signs(a, b):\n    return (a < 0) != (b < 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "575": {
    "question_id": "mbpp/57",
    "model": "deepseek-v3-250324",
    "generation_code": "def opposite_Signs(x, y):\n    return (x < 0) != (y < 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "576": {
    "question_id": "mbpp/57",
    "model": "deepseek-v3-250324",
    "generation_code": "def opposite_Signs(a, b):\n    return (a < 0) != (b < 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "577": {
    "question_id": "mbpp/57",
    "model": "deepseek-v3-250324",
    "generation_code": "def opposite_Signs(a, b):\n    return (a < 0) != (b < 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "578": {
    "question_id": "mbpp/57",
    "model": "deepseek-v3-250324",
    "generation_code": "def opposite_Signs(x, y):\n    return (x < 0) != (y < 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "579": {
    "question_id": "mbpp/57",
    "model": "deepseek-v3-250324",
    "generation_code": "def opposite_Signs(x, y):\n    return (x < 0) != (y < 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "580": {
    "question_id": "mbpp/58",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_octagonal(n):\n    return n * (3 * n - 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "581": {
    "question_id": "mbpp/58",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_octagonal(n):\n    if n <= 0:\n        return 0\n    return n * (3 * n - 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "582": {
    "question_id": "mbpp/58",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_octagonal(n):\n    if n < 1:\n        return None\n    return n * (3 * n - 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "583": {
    "question_id": "mbpp/58",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_octagonal(n):\n    return n * (3 * n - 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "584": {
    "question_id": "mbpp/58",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_octagonal(n):\n    if n < 1:\n        return None\n    return n * (3 * n - 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "585": {
    "question_id": "mbpp/58",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_octagonal(n):\n    if n < 1:\n        return None\n    return n * (3 * n - 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "586": {
    "question_id": "mbpp/58",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_octagonal(n):\n    if n <= 0:\n        return 0\n    return n * (3 * n - 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "587": {
    "question_id": "mbpp/58",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_octagonal(n):\n    if n < 1:\n        return None\n    return n * (3 * n - 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "588": {
    "question_id": "mbpp/58",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_octagonal(n):\n    if n < 1:\n        return 0\n    return n * (3 * n - 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "589": {
    "question_id": "mbpp/58",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_octagonal(n):\n    if n < 1:\n        return None\n    return n * (3 * n - 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "590": {
    "question_id": "mbpp/59",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "591": {
    "question_id": "mbpp/59",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "592": {
    "question_id": "mbpp/59",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "593": {
    "question_id": "mbpp/59",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "594": {
    "question_id": "mbpp/59",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    max_len = 1\n    current_len = 1\n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) == 1:\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 1\n    return max_len",
    "test_output": "FAILED: expect 5,in fact 3",
    "test_result": "False"
  },
  "595": {
    "question_id": "mbpp/59",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "596": {
    "question_id": "mbpp/59",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    max_len = 1\n    current_len = 1\n    for i in range(1, n):\n        if arr[i] != arr[i-1]:\n            current_len += 1\n        else:\n            current_len = 1\n        if current_len > max_len:\n            max_len = current_len\n    return max_len",
    "test_output": "FAILED: expect 5,in fact 8",
    "test_result": "False"
  },
  "597": {
    "question_id": "mbpp/59",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "598": {
    "question_id": "mbpp/59",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "599": {
    "question_id": "mbpp/59",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "600": {
    "question_id": "mbpp/60",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)):\n        current_sum = 0\n        for j in range(i, len(s)):\n            current_sum += int(s[j])\n            length = j - i + 1\n            if current_sum == length:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "601": {
    "question_id": "mbpp/60",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)):\n        current_sum = 0\n        for j in range(i, len(s)):\n            current_sum += int(s[j])\n            length = j - i + 1\n            if current_sum == length:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "602": {
    "question_id": "mbpp/60",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)):\n        current_sum = 0\n        for j in range(i, len(s)):\n            current_sum += int(s[j])\n            length = j - i + 1\n            if current_sum == length:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "603": {
    "question_id": "mbpp/60",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)):\n        current_sum = 0\n        for j in range(i, len(s)):\n            current_sum += int(s[j])\n            length = j - i + 1\n            if current_sum == length:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "604": {
    "question_id": "mbpp/60",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)):\n        current_sum = 0\n        for j in range(i, len(s)):\n            current_sum += int(s[j])\n            length = j - i + 1\n            if current_sum == length:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "605": {
    "question_id": "mbpp/60",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)):\n        current_sum = 0\n        for j in range(i, len(s)):\n            current_sum += int(s[j])\n            length = j - i + 1\n            if current_sum == length:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "606": {
    "question_id": "mbpp/60",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)):\n        current_sum = 0\n        for j in range(i, len(s)):\n            current_sum += int(s[j])\n            length = j - i + 1\n            if current_sum == length:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "607": {
    "question_id": "mbpp/60",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)):\n        current_sum = 0\n        for j in range(i, len(s)):\n            current_sum += int(s[j])\n            length = j - i + 1\n            if current_sum == length:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "608": {
    "question_id": "mbpp/60",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)):\n        current_sum = 0\n        for j in range(i, len(s)):\n            current_sum += int(s[j])\n            length = j - i + 1\n            if current_sum == length:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "609": {
    "question_id": "mbpp/60",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)):\n        current_sum = 0\n        for j in range(i, len(s)):\n            current_sum += int(s[j])\n            length = j - i + 1\n            if current_sum == length:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "610": {
    "question_id": "mbpp/61",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_num(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "611": {
    "question_id": "mbpp/61",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_num(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "612": {
    "question_id": "mbpp/61",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_num(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "613": {
    "question_id": "mbpp/61",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_num(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "614": {
    "question_id": "mbpp/61",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_num(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "615": {
    "question_id": "mbpp/61",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_num(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "616": {
    "question_id": "mbpp/61",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_num(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "617": {
    "question_id": "mbpp/61",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_num(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "618": {
    "question_id": "mbpp/61",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_num(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "619": {
    "question_id": "mbpp/61",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_num(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "620": {
    "question_id": "mbpp/62",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_difference(pairs):\n    if not pairs:\n        return 0\n    max_diff = 0\n    for a, b in pairs:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "621": {
    "question_id": "mbpp/62",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_difference(pairs):\n    if not pairs:\n        return 0\n    max_diff = 0\n    for pair in pairs:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "622": {
    "question_id": "mbpp/62",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_difference(pairs):\n    if not pairs:\n        return 0\n    max_diff = 0\n    for pair in pairs:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "623": {
    "question_id": "mbpp/62",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_difference(pairs):\n    if not pairs:\n        return 0\n    max_diff = 0\n    for a, b in pairs:\n        current_diff = abs(a - b)\n        if current_diff > max_diff:\n            max_diff = current_diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "624": {
    "question_id": "mbpp/62",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_difference(pairs):\n    if not pairs:\n        return 0\n    max_diff = 0\n    for pair in pairs:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "625": {
    "question_id": "mbpp/62",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_difference(pairs):\n    if not pairs:\n        return 0\n    max_diff = 0\n    for pair in pairs:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "626": {
    "question_id": "mbpp/62",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_difference(tuples_list):\n    if not tuples_list:\n        return 0\n    max_diff = 0\n    for pair in tuples_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "627": {
    "question_id": "mbpp/62",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_difference(tuples_list):\n    if not tuples_list:\n        return 0\n    max_diff = 0\n    for pair in tuples_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "628": {
    "question_id": "mbpp/62",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_difference(pairs):\n    if not pairs:\n        return 0\n    max_diff = 0\n    for pair in pairs:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "629": {
    "question_id": "mbpp/62",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_difference(tuples_list):\n    if not tuples_list:\n        return 0\n    max_diff = 0\n    for pair in tuples_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "630": {
    "question_id": "mbpp/63",
    "model": "deepseek-v3-250324",
    "generation_code": "subject_marks = lambda lst: sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "631": {
    "question_id": "mbpp/63",
    "model": "deepseek-v3-250324",
    "generation_code": "subject_marks = lambda lst: sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "632": {
    "question_id": "mbpp/63",
    "model": "deepseek-v3-250324",
    "generation_code": "subject_marks = lambda lst: sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "633": {
    "question_id": "mbpp/63",
    "model": "deepseek-v3-250324",
    "generation_code": "subject_marks = lambda lst: sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "634": {
    "question_id": "mbpp/63",
    "model": "deepseek-v3-250324",
    "generation_code": "subject_marks = lambda lst: sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "635": {
    "question_id": "mbpp/63",
    "model": "deepseek-v3-250324",
    "generation_code": "subject_marks = lambda lst: sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "636": {
    "question_id": "mbpp/63",
    "model": "deepseek-v3-250324",
    "generation_code": "subject_marks = lambda lst: sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "637": {
    "question_id": "mbpp/63",
    "model": "deepseek-v3-250324",
    "generation_code": "subject_marks = lambda lst: sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "638": {
    "question_id": "mbpp/63",
    "model": "deepseek-v3-250324",
    "generation_code": "subject_marks = lambda lst: sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "639": {
    "question_id": "mbpp/63",
    "model": "deepseek-v3-250324",
    "generation_code": "subject_marks = lambda lst: sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "640": {
    "question_id": "mbpp/64",
    "model": "deepseek-v3-250324",
    "generation_code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "641": {
    "question_id": "mbpp/64",
    "model": "deepseek-v3-250324",
    "generation_code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "642": {
    "question_id": "mbpp/64",
    "model": "deepseek-v3-250324",
    "generation_code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "643": {
    "question_id": "mbpp/64",
    "model": "deepseek-v3-250324",
    "generation_code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "644": {
    "question_id": "mbpp/64",
    "model": "deepseek-v3-250324",
    "generation_code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "645": {
    "question_id": "mbpp/64",
    "model": "deepseek-v3-250324",
    "generation_code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "646": {
    "question_id": "mbpp/64",
    "model": "deepseek-v3-250324",
    "generation_code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "647": {
    "question_id": "mbpp/64",
    "model": "deepseek-v3-250324",
    "generation_code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "648": {
    "question_id": "mbpp/64",
    "model": "deepseek-v3-250324",
    "generation_code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "649": {
    "question_id": "mbpp/64",
    "model": "deepseek-v3-250324",
    "generation_code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "650": {
    "question_id": "mbpp/65",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "651": {
    "question_id": "mbpp/65",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "652": {
    "question_id": "mbpp/65",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "653": {
    "question_id": "mbpp/65",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "654": {
    "question_id": "mbpp/65",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "655": {
    "question_id": "mbpp/65",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_count(lst):\n    return sum(1 for num in lst if num > 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "656": {
    "question_id": "mbpp/65",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "657": {
    "question_id": "mbpp/65",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "658": {
    "question_id": "mbpp/65",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "659": {
    "question_id": "mbpp/65",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "660": {
    "question_id": "mbpp/66",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "661": {
    "question_id": "mbpp/66",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n+1) for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "662": {
    "question_id": "mbpp/66",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n+1) for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "663": {
    "question_id": "mbpp/66",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "664": {
    "question_id": "mbpp/66",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "665": {
    "question_id": "mbpp/66",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n+1) for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "666": {
    "question_id": "mbpp/66",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "667": {
    "question_id": "mbpp/66",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "668": {
    "question_id": "mbpp/66",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n+1) for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "669": {
    "question_id": "mbpp/66",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "670": {
    "question_id": "mbpp/67",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    increasing = decreasing = True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            increasing = False\n        if arr[i] < arr[i+1]:\n            decreasing = False\n    return increasing or decreasing",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "671": {
    "question_id": "mbpp/67",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    increasing = decreasing = True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            increasing = False\n        if arr[i] < arr[i+1]:\n            decreasing = False\n    return increasing or decreasing",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "672": {
    "question_id": "mbpp/67",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    increasing = decreasing = True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            increasing = False\n        if arr[i] < arr[i+1]:\n            decreasing = False\n    return increasing or decreasing",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "673": {
    "question_id": "mbpp/67",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    increasing = decreasing = True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            increasing = False\n        if arr[i] < arr[i+1]:\n            decreasing = False\n    return increasing or decreasing",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "674": {
    "question_id": "mbpp/67",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    increasing = decreasing = True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            increasing = False\n        if arr[i] < arr[i+1]:\n            decreasing = False\n    return increasing or decreasing",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "675": {
    "question_id": "mbpp/67",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    increasing = decreasing = True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            increasing = False\n        if arr[i] < arr[i+1]:\n            decreasing = False\n    return increasing or decreasing",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "676": {
    "question_id": "mbpp/67",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    increasing = decreasing = True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            increasing = False\n        if arr[i] < arr[i+1]:\n            decreasing = False\n    return increasing or decreasing",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "677": {
    "question_id": "mbpp/67",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    increasing = decreasing = True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            increasing = False\n        if arr[i] < arr[i+1]:\n            decreasing = False\n    return increasing or decreasing",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "678": {
    "question_id": "mbpp/67",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    increasing = decreasing = True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            increasing = False\n        if arr[i] < arr[i+1]:\n            decreasing = False\n    return increasing or decreasing",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "679": {
    "question_id": "mbpp/67",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    increasing = decreasing = True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            increasing = False\n        if arr[i] < arr[i+1]:\n            decreasing = False\n    return increasing or decreasing",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "680": {
    "question_id": "mbpp/68",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_sublist(lst, sublist):\n    if not sublist:\n        return True\n    if len(sublist) > len(lst):\n        return False\n    for i in range(len(lst) - len(sublist) + 1):\n        if lst[i:i+len(sublist)] == sublist:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "681": {
    "question_id": "mbpp/68",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_sublist(lst, sublist):\n    if not sublist:\n        return True\n    if len(sublist) > len(lst):\n        return False\n    for i in range(len(lst) - len(sublist) + 1):\n        if lst[i:i+len(sublist)] == sublist:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "682": {
    "question_id": "mbpp/68",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_sublist(lst, sublist):\n    if not sublist:\n        return True\n    n = len(sublist)\n    for i in range(len(lst) - n + 1):\n        if lst[i:i+n] == sublist:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "683": {
    "question_id": "mbpp/68",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_sublist(lst, sublist):\n    if not sublist:\n        return True\n    if len(sublist) > len(lst):\n        return False\n    for i in range(len(lst) - len(sublist) + 1):\n        if lst[i:i+len(sublist)] == sublist:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "684": {
    "question_id": "mbpp/68",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_sublist(lst, sublist):\n    if not sublist:\n        return True\n    len_sublist = len(sublist)\n    for i in range(len(lst) - len_sublist + 1):\n        if lst[i:i+len_sublist] == sublist:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "685": {
    "question_id": "mbpp/68",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_sublist(lst, sublist):\n    if not sublist:\n        return True\n    len_sublist = len(sublist)\n    for i in range(len(lst) - len_sublist + 1):\n        if lst[i:i+len_sublist] == sublist:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "686": {
    "question_id": "mbpp/68",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_sublist(lst, sublist):\n    if not sublist:\n        return True\n    if len(sublist) > len(lst):\n        return False\n    for i in range(len(lst) - len(sublist) + 1):\n        if lst[i:i+len(sublist)] == sublist:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "687": {
    "question_id": "mbpp/68",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_sublist(lst, sublist):\n    if not sublist:\n        return True\n    if len(sublist) > len(lst):\n        return False\n    for i in range(len(lst) - len(sublist) + 1):\n        if lst[i:i+len(sublist)] == sublist:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "688": {
    "question_id": "mbpp/68",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_sublist(lst, sublist):\n    if not sublist:\n        return True\n    n = len(lst)\n    m = len(sublist)\n    if m > n:\n        return False\n    for i in range(n - m + 1):\n        if lst[i:i+m] == sublist:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "689": {
    "question_id": "mbpp/68",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_sublist(lst, sublist):\n    if not sublist:\n        return True\n    n = len(sublist)\n    for i in range(len(lst) - n + 1):\n        if lst[i:i+n] == sublist:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "690": {
    "question_id": "mbpp/69",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_equal(tuples_list, length):\n    if not tuples_list:\n        return 'All tuples have same length'\n    for t in tuples_list:\n        if len(t) != length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "691": {
    "question_id": "mbpp/69",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_equal(tuples_list, length):\n    if all(len(t) == length for t in tuples_list):\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "692": {
    "question_id": "mbpp/69",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_equal(tuples_list, length):\n    if not tuples_list:\n        return 'All tuples have same length'\n    for t in tuples_list:\n        if len(t) != length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "693": {
    "question_id": "mbpp/69",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_equal(tuples_list, length):\n    if all(len(t) == length for t in tuples_list):\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "694": {
    "question_id": "mbpp/69",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_equal(tuples_list, length):\n    if all(len(t) == length for t in tuples_list):\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "695": {
    "question_id": "mbpp/69",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_equal(tuples_list, length):\n    if all(len(t) == length for t in tuples_list):\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "696": {
    "question_id": "mbpp/69",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_equal(tuples_list, length):\n    if not tuples_list:\n        return 'All tuples have same length'\n    for t in tuples_list:\n        if len(t) != length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "697": {
    "question_id": "mbpp/69",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_equal(tuples_list, length):\n    if all(len(t) == length for t in tuples_list):\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "698": {
    "question_id": "mbpp/69",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_equal(tuples_list, length):\n    if not tuples_list:\n        return 'All tuples have same length'\n    for t in tuples_list:\n        if len(t) != length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "699": {
    "question_id": "mbpp/69",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_equal(tuples_list, length):\n    if all(len(t) == length for t in tuples_list):\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "700": {
    "question_id": "mbpp/70",
    "model": "deepseek-v3-250324",
    "generation_code": "def comb_sort(lst):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n    \n    n = len(lst)\n    gap = n\n    swapped = True\n    \n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n        \n        for i in range(0, n - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "701": {
    "question_id": "mbpp/70",
    "model": "deepseek-v3-250324",
    "generation_code": "def comb_sort(lst):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n    \n    n = len(lst)\n    gap = n\n    swapped = True\n    \n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n        \n        for i in range(0, n - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "702": {
    "question_id": "mbpp/70",
    "model": "deepseek-v3-250324",
    "generation_code": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        \n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "703": {
    "question_id": "mbpp/70",
    "model": "deepseek-v3-250324",
    "generation_code": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "704": {
    "question_id": "mbpp/70",
    "model": "deepseek-v3-250324",
    "generation_code": "def comb_sort(lst):\n    n = len(lst)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        \n        swapped = False\n        i = 0\n        while i + gap < n:\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n            i += 1\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "705": {
    "question_id": "mbpp/70",
    "model": "deepseek-v3-250324",
    "generation_code": "def comb_sort(lst):\n    n = len(lst)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        \n        swapped = False\n        for i in range(n - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "706": {
    "question_id": "mbpp/70",
    "model": "deepseek-v3-250324",
    "generation_code": "def comb_sort(lst):\n    n = len(lst)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "707": {
    "question_id": "mbpp/70",
    "model": "deepseek-v3-250324",
    "generation_code": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        \n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "708": {
    "question_id": "mbpp/70",
    "model": "deepseek-v3-250324",
    "generation_code": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        \n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "709": {
    "question_id": "mbpp/70",
    "model": "deepseek-v3-250324",
    "generation_code": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        \n        swapped = False\n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "710": {
    "question_id": "mbpp/71",
    "model": "deepseek-v3-250324",
    "generation_code": "def dif_Square(n):\n    if n < 0:\n        n = -n\n    if n % 2 == 1:\n        return True\n    if n % 4 == 0:\n        return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "711": {
    "question_id": "mbpp/71",
    "model": "deepseek-v3-250324",
    "generation_code": "def dif_Square(n):\n    if n % 2 != 0:\n        return True\n    else:\n        return n % 4 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "712": {
    "question_id": "mbpp/71",
    "model": "deepseek-v3-250324",
    "generation_code": "def dif_Square(n):\n    if n < 0:\n        n = -n\n    if n % 2 == 1:\n        return True\n    if n % 4 == 0:\n        return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "713": {
    "question_id": "mbpp/71",
    "model": "deepseek-v3-250324",
    "generation_code": "def dif_Square(n):\n    if n % 2 != 0:\n        return True\n    return n % 4 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "714": {
    "question_id": "mbpp/71",
    "model": "deepseek-v3-250324",
    "generation_code": "def dif_Square(n):\n    if n % 2 != 0:\n        return True\n    else:\n        return n % 4 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "715": {
    "question_id": "mbpp/71",
    "model": "deepseek-v3-250324",
    "generation_code": "def dif_Square(n):\n    if n % 2 != 0:\n        return True\n    else:\n        return n % 4 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "716": {
    "question_id": "mbpp/71",
    "model": "deepseek-v3-250324",
    "generation_code": "def dif_Square(n):\n    if n < 0:\n        n = -n\n    if n % 2 == 1:\n        return True\n    if n % 4 == 0:\n        return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "717": {
    "question_id": "mbpp/71",
    "model": "deepseek-v3-250324",
    "generation_code": "def dif_Square(n):\n    if n < 0:\n        n = -n\n    if n % 2 != 0:\n        return True\n    return n % 4 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "718": {
    "question_id": "mbpp/71",
    "model": "deepseek-v3-250324",
    "generation_code": "def dif_Square(n):\n    if n % 2 != 0:\n        return True\n    return n % 4 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "719": {
    "question_id": "mbpp/71",
    "model": "deepseek-v3-250324",
    "generation_code": "def dif_Square(n):\n    if n % 2 != 0:\n        return True\n    return n % 4 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "720": {
    "question_id": "mbpp/72",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef multiple_split(string):\n    return re.split(r'[\\n*]', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "721": {
    "question_id": "mbpp/72",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef multiple_split(string):\n    return re.split(r'[\\n*]', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "722": {
    "question_id": "mbpp/72",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef multiple_split(string):\n    return re.split(r'[\\n*]', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "723": {
    "question_id": "mbpp/72",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef multiple_split(string):\n    return re.split(r'[\\n*]', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "724": {
    "question_id": "mbpp/72",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef multiple_split(string):\n    return re.split(r'[\\n*]', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "725": {
    "question_id": "mbpp/72",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef multiple_split(string):\n    return re.split(r'[\\n*]', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "726": {
    "question_id": "mbpp/72",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef multiple_split(string):\n    return re.split(r'[\\n*]', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "727": {
    "question_id": "mbpp/72",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef multiple_split(string):\n    return re.split(r'[\\n*]', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "728": {
    "question_id": "mbpp/72",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef multiple_split(string):\n    return re.split(r'[\\n*]', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "729": {
    "question_id": "mbpp/72",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef multiple_split(string):\n    return re.split(r'[\\n*]', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "730": {
    "question_id": "mbpp/73",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    if not colors or not patterns:\n        return True\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "731": {
    "question_id": "mbpp/73",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    if not colors or not patterns:\n        return True\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "732": {
    "question_id": "mbpp/73",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "733": {
    "question_id": "mbpp/73",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    if not colors and not patterns:\n        return True\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "734": {
    "question_id": "mbpp/73",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "735": {
    "question_id": "mbpp/73",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "736": {
    "question_id": "mbpp/73",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    if not colors and not patterns:\n        return True\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "737": {
    "question_id": "mbpp/73",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    if not colors or not patterns:\n        return True\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "738": {
    "question_id": "mbpp/73",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "739": {
    "question_id": "mbpp/73",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "740": {
    "question_id": "mbpp/74",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_tuples(lst, k):\n    result = []\n    for tup in lst:\n        all_divisible = True\n        for num in tup:\n            if num % k != 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "741": {
    "question_id": "mbpp/74",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_tuples(lst, k):\n    result = []\n    for tup in lst:\n        all_divisible = True\n        for num in tup:\n            if num % k != 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "742": {
    "question_id": "mbpp/74",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_tuples(lst, k):\n    result = []\n    for t in lst:\n        all_divisible = True\n        for num in t:\n            if num % k != 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(t)\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "743": {
    "question_id": "mbpp/74",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_tuples(lst, k):\n    result = []\n    for t in lst:\n        all_divisible = True\n        for num in t:\n            if num % k != 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(t)\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "744": {
    "question_id": "mbpp/74",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_tuples(lst, k):\n    result = []\n    for tup in lst:\n        all_divisible = True\n        for num in tup:\n            if num % k != 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "745": {
    "question_id": "mbpp/74",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_tuples(lst, k):\n    result = []\n    for tup in lst:\n        all_divisible = True\n        for num in tup:\n            if num % k != 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "746": {
    "question_id": "mbpp/74",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_tuples(lst, k):\n    result = []\n    for tup in lst:\n        all_divisible = True\n        for num in tup:\n            if num % k != 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "747": {
    "question_id": "mbpp/74",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_tuples(lst, k):\n    result = []\n    for tup in lst:\n        all_divisible = True\n        for num in tup:\n            if num % k != 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "748": {
    "question_id": "mbpp/74",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_tuples(lst, k):\n    result = []\n    for tup in lst:\n        all_divisible = True\n        for num in tup:\n            if num % k != 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "749": {
    "question_id": "mbpp/74",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_tuples(lst, k):\n    result = []\n    for tup in lst:\n        all_divisible = True\n        for num in tup:\n            if num % k != 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "750": {
    "question_id": "mbpp/75",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(n, m):\n    if n < 1 or m < 1:\n        return 0\n    total = 0\n    min_dim = min(n, m)\n    for i in range(1, min_dim + 1):\n        total += (n - i + 1) * (m - i + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "751": {
    "question_id": "mbpp/75",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(m, n):\n    total = 0\n    min_dim = min(m, n)\n    for i in range(1, min_dim + 1):\n        total += (m - i + 1) * (n - i + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "752": {
    "question_id": "mbpp/75",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(m, n):\n    total = 0\n    min_dim = min(m, n)\n    for i in range(1, min_dim + 1):\n        total += (m - i + 1) * (n - i + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "753": {
    "question_id": "mbpp/75",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(n, m):\n    if n == 0 or m == 0:\n        return 0\n    total = 0\n    min_dim = min(n, m)\n    for i in range(1, min_dim + 1):\n        total += (n - i + 1) * (m - i + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "754": {
    "question_id": "mbpp/75",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(n, m):\n    total = 0\n    for i in range(1, min(n, m) + 1):\n        total += (n - i + 1) * (m - i + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "755": {
    "question_id": "mbpp/75",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(n, m):\n    if n == 0 or m == 0:\n        return 0\n    total = 0\n    min_dim = min(n, m)\n    for k in range(1, min_dim + 1):\n        total += (n - k + 1) * (m - k + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "756": {
    "question_id": "mbpp/75",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(n, m):\n    total = 0\n    for k in range(1, min(n, m) + 1):\n        total += (n - k + 1) * (m - k + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "757": {
    "question_id": "mbpp/75",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(m, n):\n    total = 0\n    for i in range(1, min(m, n) + 1):\n        total += (m - i + 1) * (n - i + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "758": {
    "question_id": "mbpp/75",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(m, n):\n    total = 0\n    min_dim = min(m, n)\n    for i in range(1, min_dim + 1):\n        total += (m - i + 1) * (n - i + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "759": {
    "question_id": "mbpp/75",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(n, m):\n    if n < 1 or m < 1:\n        return 0\n    total = 0\n    min_dim = min(n, m)\n    for i in range(1, min_dim + 1):\n        total += (n - i + 1) * (m - i + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "760": {
    "question_id": "mbpp/76",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(abs(n)):\n        num = int(digit)\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return abs(even_sum - odd_sum) % 11 != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "761": {
    "question_id": "mbpp/76",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(abs(n)):\n        num = int(digit)\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    difference = even_sum - odd_sum\n    return abs(difference) % 11 == 0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "762": {
    "question_id": "mbpp/76",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(abs(n)):\n        num = int(digit)\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return abs(even_sum - odd_sum) % 11 != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "763": {
    "question_id": "mbpp/76",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(abs(n)):\n        num = int(digit)\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    difference = even_sum - odd_sum\n    return abs(difference) % 11 == 0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "764": {
    "question_id": "mbpp/76",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(abs(n)):\n        num = int(digit)\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    difference = even_sum - odd_sum\n    return abs(difference) % 11 == 0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "765": {
    "question_id": "mbpp/76",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(abs(n)):\n        num = int(digit)\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    difference = even_sum - odd_sum\n    return abs(difference) % 11 == 0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "766": {
    "question_id": "mbpp/76",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(abs(n)):\n        num = int(digit)\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return abs(even_sum - odd_sum) % 11 == 0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "767": {
    "question_id": "mbpp/76",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(abs(n)):\n        num = int(digit)\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    difference = even_sum - odd_sum\n    return abs(difference) % 11 != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "768": {
    "question_id": "mbpp/76",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(abs(n)):\n        num = int(digit)\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    difference = even_sum - odd_sum\n    return abs(difference) % 11 == 0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "769": {
    "question_id": "mbpp/76",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(abs(n)):\n        num = int(digit)\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    difference = even_sum - odd_sum\n    return abs(difference) % 11 == 0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "770": {
    "question_id": "mbpp/77",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_With_Odd_SetBits(n):\n    count = 0\n    for num in range(1, n + 1):\n        bits = bin(num).count('1')\n        if bits % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "771": {
    "question_id": "mbpp/77",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_With_Odd_SetBits(n):\n    count = 0\n    for num in range(1, n + 1):\n        bits = bin(num).count('1')\n        if bits % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "772": {
    "question_id": "mbpp/77",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_With_Odd_SetBits(n):\n    count = 0\n    for num in range(1, n + 1):\n        bits = bin(num).count('1')\n        if bits % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "773": {
    "question_id": "mbpp/77",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_With_Odd_SetBits(n):\n    count = 0\n    for num in range(1, n + 1):\n        bits = bin(num).count('1')\n        if bits % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "774": {
    "question_id": "mbpp/77",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_With_Odd_SetBits(n):\n    count = 0\n    for num in range(1, n + 1):\n        bits = bin(num).count('1')\n        if bits % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "775": {
    "question_id": "mbpp/77",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n + 1):\n        bits = bin(i).count('1')\n        if bits % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "776": {
    "question_id": "mbpp/77",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n + 1):\n        bits = bin(i).count('1')\n        if bits % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "777": {
    "question_id": "mbpp/77",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_With_Odd_SetBits(n):\n    count = 0\n    for num in range(1, n + 1):\n        bits = bin(num).count('1')\n        if bits % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "778": {
    "question_id": "mbpp/77",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_With_Odd_SetBits(n):\n    count = 0\n    for num in range(1, n + 1):\n        bits = bin(num).count('1')\n        if bits % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "779": {
    "question_id": "mbpp/77",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_With_Odd_SetBits(n):\n    count = 0\n    for num in range(1, n + 1):\n        bits = bin(num).count('1')\n        if bits % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "780": {
    "question_id": "mbpp/78",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "781": {
    "question_id": "mbpp/78",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "782": {
    "question_id": "mbpp/78",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "783": {
    "question_id": "mbpp/78",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "784": {
    "question_id": "mbpp/78",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "785": {
    "question_id": "mbpp/78",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "786": {
    "question_id": "mbpp/78",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "787": {
    "question_id": "mbpp/78",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "788": {
    "question_id": "mbpp/78",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "789": {
    "question_id": "mbpp/78",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "790": {
    "question_id": "mbpp/79",
    "model": "deepseek-v3-250324",
    "generation_code": "def tetrahedral_number(n):\n    if n < 0:\n        return 0.0\n    return n * (n + 1) * (n + 2) / 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "791": {
    "question_id": "mbpp/79",
    "model": "deepseek-v3-250324",
    "generation_code": "def tetrahedral_number(n):\n    if n < 1:\n        return 0.0\n    return n * (n + 1) * (n + 2) / 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "792": {
    "question_id": "mbpp/79",
    "model": "deepseek-v3-250324",
    "generation_code": "def tetrahedral_number(n):\n    if n < 1:\n        return 0.0\n    return n * (n + 1) * (n + 2) / 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "793": {
    "question_id": "mbpp/79",
    "model": "deepseek-v3-250324",
    "generation_code": "def tetrahedral_number(n):\n    if n < 1:\n        return 0.0\n    return n * (n + 1) * (n + 2) / 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "794": {
    "question_id": "mbpp/79",
    "model": "deepseek-v3-250324",
    "generation_code": "def tetrahedral_number(n):\n    if n < 1:\n        return 0\n    return n * (n + 1) * (n + 2) / 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "795": {
    "question_id": "mbpp/79",
    "model": "deepseek-v3-250324",
    "generation_code": "def tetrahedral_number(n):\n    if n < 1:\n        return 0\n    return n * (n + 1) * (n + 2) / 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "796": {
    "question_id": "mbpp/79",
    "model": "deepseek-v3-250324",
    "generation_code": "def tetrahedral_number(n):\n    if n < 1:\n        return 0.0\n    return n * (n + 1) * (n + 2) / 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "797": {
    "question_id": "mbpp/79",
    "model": "deepseek-v3-250324",
    "generation_code": "def tetrahedral_number(n):\n    if n < 1:\n        return 0.0\n    return n * (n + 1) * (n + 2) / 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "798": {
    "question_id": "mbpp/79",
    "model": "deepseek-v3-250324",
    "generation_code": "def tetrahedral_number(n):\n    if n < 1:\n        return 0.0\n    return n * (n + 1) * (n + 2) / 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "799": {
    "question_id": "mbpp/79",
    "model": "deepseek-v3-250324",
    "generation_code": "def tetrahedral_number(n):\n    if n < 1:\n        return 0\n    return n * (n + 1) * (n + 2) / 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "800": {
    "question_id": "mbpp/80",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_tuples(tuple1, tuple2):\n    result = []\n    len1 = len(tuple1)\n    len2 = len(tuple2)\n    if len1 == 0 or len2 == 0:\n        return []\n    for i in range(max(len1, len2)):\n        val1 = tuple1[i % len1]\n        val2 = tuple2[i % len2]\n        result.append((val1, val2))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "801": {
    "question_id": "mbpp/80",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_tuples(tuple1, tuple2):\n    result = []\n    len1 = len(tuple1)\n    len2 = len(tuple2)\n    if len1 == 0 or len2 == 0:\n        return result\n    for i in range(max(len1, len2)):\n        val1 = tuple1[i % len1]\n        val2 = tuple2[i % len2]\n        result.append((val1, val2))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "802": {
    "question_id": "mbpp/80",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_tuples(tuple1, tuple2):\n    if not tuple1 or not tuple2:\n        return []\n    \n    len1 = len(tuple1)\n    len2 = len(tuple2)\n    result = []\n    \n    for i in range(max(len1, len2)):\n        val1 = tuple1[i % len1]\n        val2 = tuple2[i % len2]\n        result.append((val1, val2))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "803": {
    "question_id": "mbpp/80",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_tuples(tuple1, tuple2):\n    result = []\n    len1 = len(tuple1)\n    len2 = len(tuple2)\n    if len1 == 0 or len2 == 0:\n        return []\n    for i in range(max(len1, len2)):\n        val1 = tuple1[i % len1]\n        val2 = tuple2[i % len2]\n        result.append((val1, val2))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "804": {
    "question_id": "mbpp/80",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_tuples(tuple1, tuple2):\n    result = []\n    len1 = len(tuple1)\n    len2 = len(tuple2)\n    if len1 == 0 or len2 == 0:\n        return []\n    for i in range(max(len1, len2)):\n        val1 = tuple1[i % len1]\n        val2 = tuple2[i % len2]\n        result.append((val1, val2))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "805": {
    "question_id": "mbpp/80",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_tuples(tuple1, tuple2):\n    result = []\n    len1 = len(tuple1)\n    len2 = len(tuple2)\n    if len1 == 0 or len2 == 0:\n        return result\n    for i in range(max(len1, len2)):\n        val1 = tuple1[i % len1]\n        val2 = tuple2[i % len2]\n        result.append((val1, val2))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "806": {
    "question_id": "mbpp/80",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_tuples(tuple1, tuple2):\n    result = []\n    len1 = len(tuple1)\n    len2 = len(tuple2)\n    if len1 == 0 or len2 == 0:\n        return []\n    for i in range(max(len1, len2)):\n        val1 = tuple1[i % len1]\n        val2 = tuple2[i % len2]\n        result.append((val1, val2))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "807": {
    "question_id": "mbpp/80",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_tuples(tuple1, tuple2):\n    result = []\n    len1 = len(tuple1)\n    len2 = len(tuple2)\n    if len1 == 0 or len2 == 0:\n        return []\n    for i in range(max(len1, len2)):\n        val1 = tuple1[i % len1]\n        val2 = tuple2[i % len2]\n        result.append((val1, val2))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "808": {
    "question_id": "mbpp/80",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_tuples(tuple1, tuple2):\n    if not tuple1 or not tuple2:\n        return []\n    \n    len1 = len(tuple1)\n    len2 = len(tuple2)\n    max_len = max(len1, len2)\n    result = []\n    \n    for i in range(max_len):\n        val1 = tuple1[i % len1]\n        val2 = tuple2[i % len2]\n        result.append((val1, val2))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "809": {
    "question_id": "mbpp/80",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_tuples(tuple1, tuple2):\n    result = []\n    len1 = len(tuple1)\n    len2 = len(tuple2)\n    if len1 == 0 or len2 == 0:\n        return result\n    for i in range(len1):\n        val1 = tuple1[i]\n        val2 = tuple2[i % len2]\n        result.append((val1, val2))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "810": {
    "question_id": "mbpp/81",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "811": {
    "question_id": "mbpp/81",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "812": {
    "question_id": "mbpp/81",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "813": {
    "question_id": "mbpp/81",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "814": {
    "question_id": "mbpp/81",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "815": {
    "question_id": "mbpp/81",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "816": {
    "question_id": "mbpp/81",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "817": {
    "question_id": "mbpp/81",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "818": {
    "question_id": "mbpp/81",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "819": {
    "question_id": "mbpp/81",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "820": {
    "question_id": "mbpp/82",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Char(s):\n    if not s:\n        return ''\n    total = 0\n    for char in s:\n        total += ord(char)\n    return chr(total % 256)",
    "test_output": "FAILED: expect f,in fact &",
    "test_result": "False"
  },
  "821": {
    "question_id": "mbpp/82",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Char(input_str):\n    if not input_str:\n        return ''\n    total = 0\n    for char in input_str:\n        total += ord(char)\n    return chr(total % 256)",
    "test_output": "FAILED: expect f,in fact &",
    "test_result": "False"
  },
  "822": {
    "question_id": "mbpp/82",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Char(input_str):\n    if not input_str:\n        return ''\n    total = 0\n    for char in input_str:\n        total += ord(char)\n    return chr(total % 256)",
    "test_output": "FAILED: expect f,in fact &",
    "test_result": "False"
  },
  "823": {
    "question_id": "mbpp/82",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Char(input_string):\n    if not input_string:\n        return ''\n    total = 0\n    for char in input_string:\n        total += ord(char)\n    return chr(total % 26 + ord('a'))",
    "test_output": "FAILED: expect f,in fact i",
    "test_result": "False"
  },
  "824": {
    "question_id": "mbpp/82",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Char(input_string):\n    if not input_string:\n        return ''\n    total = 0\n    for char in input_string:\n        total += ord(char)\n    return chr(total % 256)",
    "test_output": "FAILED: expect f,in fact &",
    "test_result": "False"
  },
  "825": {
    "question_id": "mbpp/82",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Char(input_str):\n    if not input_str:\n        return ''\n    total = 0\n    for char in input_str:\n        total += ord(char)\n    return chr(total % 256)",
    "test_output": "FAILED: expect f,in fact &",
    "test_result": "False"
  },
  "826": {
    "question_id": "mbpp/82",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Char(input_string):\n    if not input_string:\n        return ''\n    total = 0\n    for char in input_string:\n        total += ord(char)\n    return chr(total % 256)",
    "test_output": "FAILED: expect f,in fact &",
    "test_result": "False"
  },
  "827": {
    "question_id": "mbpp/82",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Char(input_string):\n    if not input_string:\n        return ''\n    total = 0\n    for char in input_string:\n        total += ord(char)\n    return chr(total % 256)",
    "test_output": "FAILED: expect f,in fact &",
    "test_result": "False"
  },
  "828": {
    "question_id": "mbpp/82",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Char(input_string):\n    if not input_string:\n        return ''\n    total = 0\n    for char in input_string:\n        total += ord(char)\n    return chr(total % 256)",
    "test_output": "FAILED: expect f,in fact &",
    "test_result": "False"
  },
  "829": {
    "question_id": "mbpp/82",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Char(input_string):\n    if not input_string:\n        return ''\n    total = 0\n    for char in input_string:\n        total += ord(char)\n    return chr(total % 256)",
    "test_output": "FAILED: expect f,in fact &",
    "test_result": "False"
  },
  "830": {
    "question_id": "mbpp/83",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "831": {
    "question_id": "mbpp/83",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "832": {
    "question_id": "mbpp/83",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "833": {
    "question_id": "mbpp/83",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "834": {
    "question_id": "mbpp/83",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "835": {
    "question_id": "mbpp/83",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "836": {
    "question_id": "mbpp/83",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = 1, 1\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "837": {
    "question_id": "mbpp/83",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "838": {
    "question_id": "mbpp/83",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "839": {
    "question_id": "mbpp/83",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "840": {
    "question_id": "mbpp/84",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "841": {
    "question_id": "mbpp/84",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "842": {
    "question_id": "mbpp/84",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "843": {
    "question_id": "mbpp/84",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "844": {
    "question_id": "mbpp/84",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "845": {
    "question_id": "mbpp/84",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_sphere(radius):\n    if radius < 0:\n        return 0\n    return 4 * math.pi * radius ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "846": {
    "question_id": "mbpp/84",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_sphere(radius):\n    if radius < 0:\n        return 0\n    return 4 * math.pi * radius ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "847": {
    "question_id": "mbpp/84",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_sphere(radius):\n    if radius < 0:\n        return 0\n    return 4 * math.pi * radius ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "848": {
    "question_id": "mbpp/84",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "849": {
    "question_id": "mbpp/84",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "850": {
    "question_id": "mbpp/85",
    "model": "deepseek-v3-250324",
    "generation_code": "def centered_hexagonal_number(n):\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "851": {
    "question_id": "mbpp/85",
    "model": "deepseek-v3-250324",
    "generation_code": "def centered_hexagonal_number(n):\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "852": {
    "question_id": "mbpp/85",
    "model": "deepseek-v3-250324",
    "generation_code": "def centered_hexagonal_number(n):\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "853": {
    "question_id": "mbpp/85",
    "model": "deepseek-v3-250324",
    "generation_code": "def centered_hexagonal_number(n):\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "854": {
    "question_id": "mbpp/85",
    "model": "deepseek-v3-250324",
    "generation_code": "def centered_hexagonal_number(n):\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "855": {
    "question_id": "mbpp/85",
    "model": "deepseek-v3-250324",
    "generation_code": "def centered_hexagonal_number(n):\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "856": {
    "question_id": "mbpp/85",
    "model": "deepseek-v3-250324",
    "generation_code": "def centered_hexagonal_number(n):\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "857": {
    "question_id": "mbpp/85",
    "model": "deepseek-v3-250324",
    "generation_code": "def centered_hexagonal_number(n):\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "858": {
    "question_id": "mbpp/85",
    "model": "deepseek-v3-250324",
    "generation_code": "def centered_hexagonal_number(n):\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "859": {
    "question_id": "mbpp/85",
    "model": "deepseek-v3-250324",
    "generation_code": "def centered_hexagonal_number(n):\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "860": {
    "question_id": "mbpp/86",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged",
    "test_output": "FAILED: expect {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'},in fact {'R': 'Red', 'B': 'Blue', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'L': 'lavender'}",
    "test_result": "False"
  },
  "861": {
    "question_id": "mbpp/86",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged",
    "test_output": "FAILED: expect {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'},in fact {'R': 'Red', 'B': 'Blue', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'L': 'lavender'}",
    "test_result": "False"
  },
  "862": {
    "question_id": "mbpp/86",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged",
    "test_output": "FAILED: expect {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'},in fact {'R': 'Red', 'B': 'Blue', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'L': 'lavender'}",
    "test_result": "False"
  },
  "863": {
    "question_id": "mbpp/86",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged",
    "test_output": "FAILED: expect {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'},in fact {'R': 'Red', 'B': 'Blue', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'L': 'lavender'}",
    "test_result": "False"
  },
  "864": {
    "question_id": "mbpp/86",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged",
    "test_output": "FAILED: expect {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'},in fact {'R': 'Red', 'B': 'Blue', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'L': 'lavender'}",
    "test_result": "False"
  },
  "865": {
    "question_id": "mbpp/86",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged",
    "test_output": "FAILED: expect {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'},in fact {'R': 'Red', 'B': 'Blue', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'L': 'lavender'}",
    "test_result": "False"
  },
  "866": {
    "question_id": "mbpp/86",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged",
    "test_output": "FAILED: expect {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'},in fact {'R': 'Red', 'B': 'Blue', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'L': 'lavender'}",
    "test_result": "False"
  },
  "867": {
    "question_id": "mbpp/86",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged",
    "test_output": "FAILED: expect {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'},in fact {'R': 'Red', 'B': 'Blue', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'L': 'lavender'}",
    "test_result": "False"
  },
  "868": {
    "question_id": "mbpp/86",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged",
    "test_output": "FAILED: expect {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'},in fact {'R': 'Red', 'B': 'Blue', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'L': 'lavender'}",
    "test_result": "False"
  },
  "869": {
    "question_id": "mbpp/86",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged",
    "test_output": "FAILED: expect {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'},in fact {'R': 'Red', 'B': 'Blue', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'L': 'lavender'}",
    "test_result": "False"
  },
  "870": {
    "question_id": "mbpp/87",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "871": {
    "question_id": "mbpp/87",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "872": {
    "question_id": "mbpp/87",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "873": {
    "question_id": "mbpp/87",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "874": {
    "question_id": "mbpp/87",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "875": {
    "question_id": "mbpp/87",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "876": {
    "question_id": "mbpp/87",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "877": {
    "question_id": "mbpp/87",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "878": {
    "question_id": "mbpp/87",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "879": {
    "question_id": "mbpp/87",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "880": {
    "question_id": "mbpp/88",
    "model": "deepseek-v3-250324",
    "generation_code": "def closest_num(n):\n    if n <= 1:\n        return None\n    return n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "881": {
    "question_id": "mbpp/88",
    "model": "deepseek-v3-250324",
    "generation_code": "def closest_num(n):\n    if n <= 1:\n        return None\n    return n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "882": {
    "question_id": "mbpp/88",
    "model": "deepseek-v3-250324",
    "generation_code": "def closest_num(n):\n    if n <= 1:\n        return None\n    return n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "883": {
    "question_id": "mbpp/88",
    "model": "deepseek-v3-250324",
    "generation_code": "def closest_num(n):\n    if n <= 1:\n        return None\n    return n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "884": {
    "question_id": "mbpp/88",
    "model": "deepseek-v3-250324",
    "generation_code": "def closest_num(n):\n    if n <= 1:\n        return None\n    return n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "885": {
    "question_id": "mbpp/88",
    "model": "deepseek-v3-250324",
    "generation_code": "def closest_num(n):\n    if n <= 1:\n        return None\n    return n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "886": {
    "question_id": "mbpp/88",
    "model": "deepseek-v3-250324",
    "generation_code": "def closest_num(n):\n    if n <= 1:\n        return None\n    return n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "887": {
    "question_id": "mbpp/88",
    "model": "deepseek-v3-250324",
    "generation_code": "def closest_num(n):\n    if n <= 1:\n        return None\n    return n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "888": {
    "question_id": "mbpp/88",
    "model": "deepseek-v3-250324",
    "generation_code": "def closest_num(n):\n    if n <= 1:\n        return None\n    return n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "889": {
    "question_id": "mbpp/88",
    "model": "deepseek-v3-250324",
    "generation_code": "def closest_num(n):\n    if n <= 1:\n        return None\n    return n - 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "890": {
    "question_id": "mbpp/89",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "891": {
    "question_id": "mbpp/89",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "892": {
    "question_id": "mbpp/89",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "893": {
    "question_id": "mbpp/89",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "894": {
    "question_id": "mbpp/89",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "895": {
    "question_id": "mbpp/89",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "896": {
    "question_id": "mbpp/89",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "897": {
    "question_id": "mbpp/89",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "898": {
    "question_id": "mbpp/89",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "899": {
    "question_id": "mbpp/89",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "900": {
    "question_id": "mbpp/90",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_substring(string_list, substring):\n    for s in string_list:\n        if substring in s:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "901": {
    "question_id": "mbpp/90",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_substring(string_list, substring):\n    for s in string_list:\n        if substring in s:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "902": {
    "question_id": "mbpp/90",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_substring(string_list, substring):\n    for s in string_list:\n        if substring in s:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "903": {
    "question_id": "mbpp/90",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_substring(string_list, substring):\n    for s in string_list:\n        if substring in s:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "904": {
    "question_id": "mbpp/90",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_substring(string_list, substring):\n    for s in string_list:\n        if substring in s:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "905": {
    "question_id": "mbpp/90",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_substring(string_list, substring):\n    for s in string_list:\n        if substring in s:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "906": {
    "question_id": "mbpp/90",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_substring(string_list, substring):\n    for s in string_list:\n        if substring in s:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "907": {
    "question_id": "mbpp/90",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_substring(strings, substring):\n    for s in strings:\n        if substring in s:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "908": {
    "question_id": "mbpp/90",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_substring(string_list, substring):\n    for s in string_list:\n        if substring in s:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "909": {
    "question_id": "mbpp/90",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_substring(string_list, substring):\n    for s in string_list:\n        if substring in s:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "910": {
    "question_id": "mbpp/91",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_undulating(number):\n    s = str(number)\n    if len(s) < 2:\n        return False\n    if len(set(s)) != 2:\n        return False\n    a, b = s[0], s[1]\n    if a == b:\n        return False\n    for i in range(2, len(s)):\n        if i % 2 == 0:\n            if s[i] != a:\n                return False\n        else:\n            if s[i] != b:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "911": {
    "question_id": "mbpp/91",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_undulating(number):\n    s = str(number)\n    if len(s) < 2:\n        return False\n    if len(set(s)) != 2:\n        return False\n    a, b = s[0], s[1]\n    if a == b:\n        return False\n    for i in range(2, len(s)):\n        if i % 2 == 0:\n            if s[i] != a:\n                return False\n        else:\n            if s[i] != b:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "912": {
    "question_id": "mbpp/91",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_undulating(number):\n    s = str(number)\n    if len(s) < 2:\n        return False\n    if len(set(s)) != 2:\n        return False\n    a, b = s[0], s[1]\n    if a == b:\n        return False\n    for i in range(2, len(s)):\n        if i % 2 == 0:\n            if s[i] != a:\n                return False\n        else:\n            if s[i] != b:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "913": {
    "question_id": "mbpp/91",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_undulating(number):\n    s = str(number)\n    if len(s) < 2:\n        return False\n    if len(set(s)) != 2:\n        return False\n    a, b = s[0], s[1]\n    if a == b:\n        return False\n    for i in range(2, len(s)):\n        if i % 2 == 0:\n            if s[i] != a:\n                return False\n        else:\n            if s[i] != b:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "914": {
    "question_id": "mbpp/91",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_undulating(number):\n    s = str(number)\n    if len(s) < 2:\n        return False\n    if len(set(s)) != 2:\n        return False\n    for i in range(2, len(s)):\n        if s[i] != s[i-2]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "915": {
    "question_id": "mbpp/91",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_undulating(number):\n    s = str(number)\n    if len(s) < 2:\n        return False\n    if len(set(s)) != 2:\n        return False\n    a, b = s[0], s[1]\n    if a == b:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != a:\n            return False\n        if i % 2 == 1 and s[i] != b:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "916": {
    "question_id": "mbpp/91",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_undulating(number):\n    s = str(number)\n    if len(s) < 2:\n        return False\n    if len(set(s)) != 2:\n        return False\n    a, b = s[0], s[1]\n    if a == b:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != a:\n            return False\n        if i % 2 == 1 and s[i] != b:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "917": {
    "question_id": "mbpp/91",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_undulating(number):\n    s = str(number)\n    if len(s) < 2:\n        return False\n    if len(set(s)) != 2:\n        return False\n    a, b = s[0], s[1]\n    if a == b:\n        return False\n    for i in range(2, len(s)):\n        if i % 2 == 0:\n            if s[i] != a:\n                return False\n        else:\n            if s[i] != b:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "918": {
    "question_id": "mbpp/91",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_undulating(number):\n    s = str(number)\n    if len(s) < 2:\n        return False\n    if len(set(s)) != 2:\n        return False\n    a, b = s[0], s[1]\n    if a == b:\n        return False\n    for i in range(2, len(s)):\n        if i % 2 == 0:\n            if s[i] != a:\n                return False\n        else:\n            if s[i] != b:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "919": {
    "question_id": "mbpp/91",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_undulating(number):\n    s = str(number)\n    if len(s) < 2:\n        return False\n    if len(set(s)) != 2:\n        return False\n    for i in range(2, len(s)):\n        if s[i] != s[i-2]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "920": {
    "question_id": "mbpp/92",
    "model": "deepseek-v3-250324",
    "generation_code": "def power(a, b):\n    return a ** b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "921": {
    "question_id": "mbpp/92",
    "model": "deepseek-v3-250324",
    "generation_code": "def power(a, b):\n    return a ** b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "922": {
    "question_id": "mbpp/92",
    "model": "deepseek-v3-250324",
    "generation_code": "def power(a, b):\n    return a ** b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "923": {
    "question_id": "mbpp/92",
    "model": "deepseek-v3-250324",
    "generation_code": "def power(a, b):\n    return a ** b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "924": {
    "question_id": "mbpp/92",
    "model": "deepseek-v3-250324",
    "generation_code": "def power(a, b):\n    if b == 0:\n        return 1\n    result = 1\n    for _ in range(abs(b)):\n        result *= a\n    return result if b > 0 else 1 / result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "925": {
    "question_id": "mbpp/92",
    "model": "deepseek-v3-250324",
    "generation_code": "def power(a, b):\n    return a ** b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "926": {
    "question_id": "mbpp/92",
    "model": "deepseek-v3-250324",
    "generation_code": "def power(a, b):\n    return a ** b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "927": {
    "question_id": "mbpp/92",
    "model": "deepseek-v3-250324",
    "generation_code": "def power(a, b):\n    return a ** b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "928": {
    "question_id": "mbpp/92",
    "model": "deepseek-v3-250324",
    "generation_code": "def power(a, b):\n    return a ** b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "929": {
    "question_id": "mbpp/92",
    "model": "deepseek-v3-250324",
    "generation_code": "def power(a, b):\n    return a ** b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "930": {
    "question_id": "mbpp/93",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_minimum(tuples_list):\n    if not tuples_list:\n        return None\n    min_tuple = min(tuples_list, key=lambda x: x[1])\n    return min_tuple[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "931": {
    "question_id": "mbpp/93",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_minimum(tuples_list):\n    if not tuples_list:\n        return None\n    min_tuple = min(tuples_list, key=lambda x: x[1])\n    return min_tuple[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "932": {
    "question_id": "mbpp/93",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_minimum(records):\n    if not records:\n        return None\n    min_record = min(records, key=lambda x: x[1])\n    return min_record[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "933": {
    "question_id": "mbpp/93",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_minimum(tuples_list):\n    if not tuples_list:\n        return None\n    min_tuple = min(tuples_list, key=lambda x: x[1])\n    return min_tuple[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "934": {
    "question_id": "mbpp/93",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_minimum(tuples_list):\n    if not tuples_list:\n        return None\n    min_tuple = min(tuples_list, key=lambda x: x[1])\n    return min_tuple[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "935": {
    "question_id": "mbpp/93",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_minimum(records):\n    if not records:\n        return None\n    min_record = min(records, key=lambda x: x[1])\n    return min_record[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "936": {
    "question_id": "mbpp/93",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_minimum(tuples_list):\n    if not tuples_list:\n        return None\n    min_tuple = min(tuples_list, key=lambda x: x[1])\n    return min_tuple[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "937": {
    "question_id": "mbpp/93",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_minimum(tuples_list):\n    if not tuples_list:\n        return None\n    min_tuple = min(tuples_list, key=lambda x: x[1])\n    return min_tuple[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "938": {
    "question_id": "mbpp/93",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_minimum(tuples_list):\n    if not tuples_list:\n        return None\n    min_tuple = min(tuples_list, key=lambda x: x[1])\n    return min_tuple[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "939": {
    "question_id": "mbpp/93",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_minimum(tuples_list):\n    if not tuples_list:\n        return None\n    min_tuple = min(tuples_list, key=lambda x: x[1])\n    return min_tuple[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "940": {
    "question_id": "mbpp/94",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_len = len(lst[0])\n    for sublist in lst:\n        current_len = len(sublist)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "941": {
    "question_id": "mbpp/94",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_len = float('inf')\n    for sublist in lst:\n        current_len = len(sublist)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "942": {
    "question_id": "mbpp/94",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_len = float('inf')\n    for sublist in lst:\n        current_len = len(sublist)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "943": {
    "question_id": "mbpp/94",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_len = len(lst[0])\n    for sublist in lst:\n        current_len = len(sublist)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "944": {
    "question_id": "mbpp/94",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_len = len(lst[0])\n    for sublist in lst:\n        current_len = len(sublist)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "945": {
    "question_id": "mbpp/94",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    return min(len(sublist) for sublist in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "946": {
    "question_id": "mbpp/94",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_len = float('inf')\n    for sublist in lst:\n        current_len = len(sublist)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "947": {
    "question_id": "mbpp/94",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    return min(len(sublist) for sublist in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "948": {
    "question_id": "mbpp/94",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "949": {
    "question_id": "mbpp/94",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_len = len(lst[0])\n    for sublist in lst:\n        current_len = len(sublist)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "950": {
    "question_id": "mbpp/95",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisor(n):\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == n // i:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "951": {
    "question_id": "mbpp/95",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisor(n):\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "952": {
    "question_id": "mbpp/95",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisor(n):\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "953": {
    "question_id": "mbpp/95",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisor(n):\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "954": {
    "question_id": "mbpp/95",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisor(n):\n    if n == 0:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == n // i:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "955": {
    "question_id": "mbpp/95",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisor(n):\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == n // i:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "956": {
    "question_id": "mbpp/95",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisor(n):\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "957": {
    "question_id": "mbpp/95",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisor(n):\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "958": {
    "question_id": "mbpp/95",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisor(n):\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "959": {
    "question_id": "mbpp/95",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisor(n):\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "960": {
    "question_id": "mbpp/96",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_lists(list_of_lists):\n    frequency = {}\n    for lst in list_of_lists:\n        for item in lst:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "961": {
    "question_id": "mbpp/96",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_lists(list_of_lists):\n    frequency = {}\n    for lst in list_of_lists:\n        for item in lst:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "962": {
    "question_id": "mbpp/96",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_lists(list_of_lists):\n    frequency = {}\n    for lst in list_of_lists:\n        for item in lst:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "963": {
    "question_id": "mbpp/96",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_lists(list_of_lists):\n    frequency = {}\n    for lst in list_of_lists:\n        for item in lst:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "964": {
    "question_id": "mbpp/96",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_lists(list_of_lists):\n    frequency = {}\n    for lst in list_of_lists:\n        for item in lst:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "965": {
    "question_id": "mbpp/96",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_lists(list_of_lists):\n    frequency = {}\n    for lst in list_of_lists:\n        for item in lst:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "966": {
    "question_id": "mbpp/96",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_lists(list_of_lists):\n    frequency = {}\n    for lst in list_of_lists:\n        for item in lst:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "967": {
    "question_id": "mbpp/96",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_lists(list_of_lists):\n    frequency = {}\n    for lst in list_of_lists:\n        for item in lst:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "968": {
    "question_id": "mbpp/96",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_lists(list_of_lists):\n    frequency = {}\n    for lst in list_of_lists:\n        for item in lst:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "969": {
    "question_id": "mbpp/96",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_lists(list_of_lists):\n    frequency = {}\n    for lst in list_of_lists:\n        for item in lst:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "970": {
    "question_id": "mbpp/97",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "971": {
    "question_id": "mbpp/97",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "972": {
    "question_id": "mbpp/97",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "973": {
    "question_id": "mbpp/97",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "974": {
    "question_id": "mbpp/97",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "975": {
    "question_id": "mbpp/97",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "976": {
    "question_id": "mbpp/97",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "977": {
    "question_id": "mbpp/97",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "978": {
    "question_id": "mbpp/97",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "979": {
    "question_id": "mbpp/97",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "980": {
    "question_id": "mbpp/98",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "981": {
    "question_id": "mbpp/98",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n = n // 2\n    return ''.join(reversed(binary))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "982": {
    "question_id": "mbpp/98",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n = n // 2\n    return ''.join(reversed(binary))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "983": {
    "question_id": "mbpp/98",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "984": {
    "question_id": "mbpp/98",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n = n // 2\n    return ''.join(reversed(binary))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "985": {
    "question_id": "mbpp/98",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "986": {
    "question_id": "mbpp/98",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n = n // 2\n    return ''.join(reversed(binary))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "987": {
    "question_id": "mbpp/98",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n = n // 2\n    return ''.join(reversed(binary))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "988": {
    "question_id": "mbpp/98",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n = n // 2\n    return ''.join(reversed(binary))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "989": {
    "question_id": "mbpp/98",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n = n // 2\n    return ''.join(reversed(binary))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "990": {
    "question_id": "mbpp/99",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    if num < 9:\n        return num + 1\n    \n    next_num = num + 1\n    while True:\n        if is_palindrome(next_num):\n            return next_num\n        next_num += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "991": {
    "question_id": "mbpp/99",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_smallest_palindrome(num):\n    num += 1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "992": {
    "question_id": "mbpp/99",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    next_num = num + 1\n    while True:\n        if is_palindrome(next_num):\n            return next_num\n        next_num += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "993": {
    "question_id": "mbpp/99",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    next_num = num + 1\n    while True:\n        if is_palindrome(next_num):\n            return next_num\n        next_num += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "994": {
    "question_id": "mbpp/99",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    if num < 0:\n        return 0\n    \n    next_num = num + 1\n    while True:\n        if is_palindrome(next_num):\n            return next_num\n        next_num += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "995": {
    "question_id": "mbpp/99",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    if num < 0:\n        return 0\n    \n    next_num = num + 1\n    while True:\n        if is_palindrome(next_num):\n            return next_num\n        next_num += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "996": {
    "question_id": "mbpp/99",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    next_num = num + 1\n    while True:\n        if is_palindrome(next_num):\n            return next_num\n        next_num += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "997": {
    "question_id": "mbpp/99",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    if num < 9:\n        return num + 1\n    \n    next_num = num + 1\n    while True:\n        if is_palindrome(next_num):\n            return next_num\n        next_num += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "998": {
    "question_id": "mbpp/99",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "999": {
    "question_id": "mbpp/99",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    next_num = num + 1\n    while True:\n        if is_palindrome(next_num):\n            return next_num\n        next_num += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1000": {
    "question_id": "mbpp/100",
    "model": "deepseek-v3-250324",
    "generation_code": "def kth_element(arr, n, k):\n    if k <= 0 or k > n:\n        return None\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "1001": {
    "question_id": "mbpp/100",
    "model": "deepseek-v3-250324",
    "generation_code": "def kth_element(arr, n, k):\n    if k <= 0 or k > n:\n        return None\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "1002": {
    "question_id": "mbpp/100",
    "model": "deepseek-v3-250324",
    "generation_code": "def kth_element(arr, n, k):\n    if k <= 0 or k > n:\n        return None\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "1003": {
    "question_id": "mbpp/100",
    "model": "deepseek-v3-250324",
    "generation_code": "def kth_element(arr, n, k):\n    if k <= 0 or k > n:\n        return None\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "1004": {
    "question_id": "mbpp/100",
    "model": "deepseek-v3-250324",
    "generation_code": "def kth_element(arr, n, k):\n    if k <= 0 or k > n:\n        return None\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "1005": {
    "question_id": "mbpp/100",
    "model": "deepseek-v3-250324",
    "generation_code": "def kth_element(arr, n, k):\n    if k <= 0 or k > n:\n        return None\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "1006": {
    "question_id": "mbpp/100",
    "model": "deepseek-v3-250324",
    "generation_code": "def kth_element(arr, n, k):\n    if k <= 0 or k > n:\n        return None\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "1007": {
    "question_id": "mbpp/100",
    "model": "deepseek-v3-250324",
    "generation_code": "def kth_element(arr, n, k):\n    if k <= 0 or k > n:\n        return None\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "1008": {
    "question_id": "mbpp/100",
    "model": "deepseek-v3-250324",
    "generation_code": "def kth_element(arr, n, k):\n    if k <= 0 or k > n:\n        return None\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "1009": {
    "question_id": "mbpp/100",
    "model": "deepseek-v3-250324",
    "generation_code": "def kth_element(arr, n, k):\n    if k <= 0 or k > n:\n        return None\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "1010": {
    "question_id": "mbpp/101",
    "model": "deepseek-v3-250324",
    "generation_code": "def snake_to_camel(snake_str):\n    if not snake_str:\n        return snake_str\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1011": {
    "question_id": "mbpp/101",
    "model": "deepseek-v3-250324",
    "generation_code": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1012": {
    "question_id": "mbpp/101",
    "model": "deepseek-v3-250324",
    "generation_code": "def snake_to_camel(snake_str):\n    if not snake_str:\n        return snake_str\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1013": {
    "question_id": "mbpp/101",
    "model": "deepseek-v3-250324",
    "generation_code": "def snake_to_camel(snake_str):\n    if not snake_str:\n        return snake_str\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1014": {
    "question_id": "mbpp/101",
    "model": "deepseek-v3-250324",
    "generation_code": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1015": {
    "question_id": "mbpp/101",
    "model": "deepseek-v3-250324",
    "generation_code": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1016": {
    "question_id": "mbpp/101",
    "model": "deepseek-v3-250324",
    "generation_code": "def snake_to_camel(snake_str):\n    if not snake_str:\n        return snake_str\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1017": {
    "question_id": "mbpp/101",
    "model": "deepseek-v3-250324",
    "generation_code": "def snake_to_camel(snake_str):\n    if not snake_str:\n        return snake_str\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1018": {
    "question_id": "mbpp/101",
    "model": "deepseek-v3-250324",
    "generation_code": "def snake_to_camel(snake_str):\n    if not snake_str:\n        return snake_str\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1019": {
    "question_id": "mbpp/101",
    "model": "deepseek-v3-250324",
    "generation_code": "def snake_to_camel(snake_str):\n    if not snake_str:\n        return snake_str\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1020": {
    "question_id": "mbpp/102",
    "model": "deepseek-v3-250324",
    "generation_code": "def eulerian_num(n, m):\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)",
    "test_output": "FAILED: expect 4,in fact 0",
    "test_result": "False"
  },
  "1021": {
    "question_id": "mbpp/102",
    "model": "deepseek-v3-250324",
    "generation_code": "def eulerian_num(n, m):\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1\n    \n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)",
    "test_output": "FAILED: expect 4,in fact 0",
    "test_result": "False"
  },
  "1022": {
    "question_id": "mbpp/102",
    "model": "deepseek-v3-250324",
    "generation_code": "def eulerian_num(n, m):\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1\n    \n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)",
    "test_output": "FAILED: expect 4,in fact 0",
    "test_result": "False"
  },
  "1023": {
    "question_id": "mbpp/102",
    "model": "deepseek-v3-250324",
    "generation_code": "def eulerian_num(n, m):\n    if m < 0 or m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1024": {
    "question_id": "mbpp/102",
    "model": "deepseek-v3-250324",
    "generation_code": "def eulerian_num(n, m):\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1\n    \n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))",
    "test_output": "FAILED: expect 4,in fact 0",
    "test_result": "False"
  },
  "1025": {
    "question_id": "mbpp/102",
    "model": "deepseek-v3-250324",
    "generation_code": "def eulerian_num(n, m):\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)",
    "test_output": "FAILED: expect 4,in fact 0",
    "test_result": "False"
  },
  "1026": {
    "question_id": "mbpp/102",
    "model": "deepseek-v3-250324",
    "generation_code": "def eulerian_num(n, m):\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1\n    \n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)",
    "test_output": "FAILED: expect 4,in fact 0",
    "test_result": "False"
  },
  "1027": {
    "question_id": "mbpp/102",
    "model": "deepseek-v3-250324",
    "generation_code": "def eulerian_num(n, m):\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)",
    "test_output": "FAILED: expect 4,in fact 0",
    "test_result": "False"
  },
  "1028": {
    "question_id": "mbpp/102",
    "model": "deepseek-v3-250324",
    "generation_code": "def eulerian_num(n, m):\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1\n    \n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)",
    "test_output": "FAILED: expect 4,in fact 0",
    "test_result": "False"
  },
  "1029": {
    "question_id": "mbpp/102",
    "model": "deepseek-v3-250324",
    "generation_code": "def eulerian_num(n, m):\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1\n    \n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)",
    "test_output": "FAILED: expect 4,in fact 0",
    "test_result": "False"
  },
  "1030": {
    "question_id": "mbpp/103",
    "model": "deepseek-v3-250324",
    "generation_code": "sort_sublists = lambda lst: [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1031": {
    "question_id": "mbpp/103",
    "model": "deepseek-v3-250324",
    "generation_code": "sort_sublists = lambda lst: [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1032": {
    "question_id": "mbpp/103",
    "model": "deepseek-v3-250324",
    "generation_code": "sort_sublists = lambda lst: [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1033": {
    "question_id": "mbpp/103",
    "model": "deepseek-v3-250324",
    "generation_code": "sort_sublists = lambda lst: [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1034": {
    "question_id": "mbpp/103",
    "model": "deepseek-v3-250324",
    "generation_code": "sort_sublists = lambda lst: [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1035": {
    "question_id": "mbpp/103",
    "model": "deepseek-v3-250324",
    "generation_code": "sort_sublists = lambda lst: [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1036": {
    "question_id": "mbpp/103",
    "model": "deepseek-v3-250324",
    "generation_code": "sort_sublists = lambda lst: [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1037": {
    "question_id": "mbpp/103",
    "model": "deepseek-v3-250324",
    "generation_code": "sort_sublists = lambda lst: [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1038": {
    "question_id": "mbpp/103",
    "model": "deepseek-v3-250324",
    "generation_code": "sort_sublists = lambda lst: [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1039": {
    "question_id": "mbpp/103",
    "model": "deepseek-v3-250324",
    "generation_code": "sort_sublists = lambda lst: [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1040": {
    "question_id": "mbpp/104",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(lst):\n    return sum(1 for item in lst if item is True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1041": {
    "question_id": "mbpp/104",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(lst):\n    return sum(1 for item in lst if item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1042": {
    "question_id": "mbpp/104",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(lst):\n    return sum(1 for item in lst if item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1043": {
    "question_id": "mbpp/104",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(lst):\n    return sum(1 for item in lst if item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1044": {
    "question_id": "mbpp/104",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(lst):\n    return sum(1 for item in lst if item is True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1045": {
    "question_id": "mbpp/104",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(lst):\n    return sum(1 for item in lst if item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1046": {
    "question_id": "mbpp/104",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(lst):\n    return sum(1 for item in lst if item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1047": {
    "question_id": "mbpp/104",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(lst):\n    return sum(1 for item in lst if item is True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1048": {
    "question_id": "mbpp/104",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(lst):\n    return sum(1 for item in lst if item is True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1049": {
    "question_id": "mbpp/104",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(lst):\n    return sum(1 for item in lst if item is True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1050": {
    "question_id": "mbpp/105",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_lists(lst, tup):\n    return tup + tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1051": {
    "question_id": "mbpp/105",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_lists(lst, tup):\n    return tup + tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1052": {
    "question_id": "mbpp/105",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_lists(lst, tup):\n    return tup + tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1053": {
    "question_id": "mbpp/105",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_lists(lst, tup):\n    return tup + tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1054": {
    "question_id": "mbpp/105",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_lists(lst, tup):\n    return tup + tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1055": {
    "question_id": "mbpp/105",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_lists(lst, tup):\n    return tup + tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1056": {
    "question_id": "mbpp/105",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1057": {
    "question_id": "mbpp/105",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1058": {
    "question_id": "mbpp/105",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_lists(lst, tup):\n    return tup + tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1059": {
    "question_id": "mbpp/105",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_lists(lst, tup):\n    return tup + tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1060": {
    "question_id": "mbpp/106",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        if num < 0:\n            continue\n        count += 1\n    return count",
    "test_output": "FAILED: expect 0,in fact 3",
    "test_result": "False"
  },
  "1061": {
    "question_id": "mbpp/106",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        hex_str = hex(num)[2:]  # Remove '0x' prefix\n        if all(c in 'abcdefABCDEF' for c in hex_str):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1062": {
    "question_id": "mbpp/106",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        hex_str = hex(num)[2:]  # Remove '0x' prefix\n        valid = True\n        for c in hex_str:\n            if c not in '0123456789abcdef':\n                valid = False\n                break\n        if valid:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 0,in fact 3",
    "test_result": "False"
  },
  "1063": {
    "question_id": "mbpp/106",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        hex_str = hex(num)[2:]\n        if all(c in 'abcdefABCDEF' for c in hex_str):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1064": {
    "question_id": "mbpp/106",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        hex_str = hex(num)[2:]\n        if all(c in 'abcdefABCDEF' for c in hex_str):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1065": {
    "question_id": "mbpp/106",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        if num < 10:\n            continue\n        hex_str = hex(num)[2:]\n        if all(c in 'abcdefABCDEF' for c in hex_str):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1066": {
    "question_id": "mbpp/106",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        hex_str = hex(num)[2:]  # Remove '0x' prefix\n        if all(c in 'abcdefABCDEF' for c in hex_str):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1067": {
    "question_id": "mbpp/106",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        if num < 10:\n            count += 1\n        else:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 0,in fact 3",
    "test_result": "False"
  },
  "1068": {
    "question_id": "mbpp/106",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        hex_str = hex(num)[2:]  # Convert to hex and remove '0x' prefix\n        if all(c in 'abcdefABCDEF' for c in hex_str):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1069": {
    "question_id": "mbpp/106",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        hex_str = hex(num)[2:]\n        if all(c in 'abcdefABCDEF' for c in hex_str):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1070": {
    "question_id": "mbpp/107",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef merge_sorted_list(*args):\n    merged = heapq.merge(*args)\n    return list(merged)",
    "test_output": "FAILED: expect [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233],in fact [19, 20, 11, 24, 25, 24, 15, 4, 5, 26, 29, 54, 48, 56, 25, 110, 233, 154]",
    "test_result": "False"
  },
  "1071": {
    "question_id": "mbpp/107",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef merge_sorted_list(*iterables):\n    return list(heapq.merge(*iterables))",
    "test_output": "FAILED: expect [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233],in fact [19, 20, 11, 24, 25, 24, 15, 4, 5, 26, 29, 54, 48, 56, 25, 110, 233, 154]",
    "test_result": "False"
  },
  "1072": {
    "question_id": "mbpp/107",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef merge_sorted_list(*args):\n    merged = heapq.merge(*args)\n    return list(merged)",
    "test_output": "FAILED: expect [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233],in fact [19, 20, 11, 24, 25, 24, 15, 4, 5, 26, 29, 54, 48, 56, 25, 110, 233, 154]",
    "test_result": "False"
  },
  "1073": {
    "question_id": "mbpp/107",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef merge_sorted_list(*lists):\n    heap = []\n    for i, lst in enumerate(lists):\n        if lst:\n            heapq.heappush(heap, (lst[0], i, 0))\n    \n    merged = []\n    while heap:\n        val, list_idx, elem_idx = heapq.heappop(heap)\n        merged.append(val)\n        if elem_idx + 1 < len(lists[list_idx]):\n            next_elem = lists[list_idx][elem_idx + 1]\n            heapq.heappush(heap, (next_elem, list_idx, elem_idx + 1))\n    \n    return merged",
    "test_output": "FAILED: expect [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233],in fact [19, 20, 11, 24, 25, 24, 15, 4, 5, 26, 29, 54, 48, 56, 25, 110, 233, 154]",
    "test_result": "False"
  },
  "1074": {
    "question_id": "mbpp/107",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef merge_sorted_list(*args):\n    merged = []\n    heap = []\n    \n    for i, lst in enumerate(args):\n        if lst:\n            heapq.heappush(heap, (lst[0], i, 0))\n    \n    while heap:\n        val, list_idx, elem_idx = heapq.heappop(heap)\n        merged.append(val)\n        if elem_idx + 1 < len(args[list_idx]):\n            next_elem = args[list_idx][elem_idx + 1]\n            heapq.heappush(heap, (next_elem, list_idx, elem_idx + 1))\n    \n    return merged",
    "test_output": "FAILED: expect [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233],in fact [19, 20, 11, 24, 25, 24, 15, 4, 5, 26, 29, 54, 48, 56, 25, 110, 233, 154]",
    "test_result": "False"
  },
  "1075": {
    "question_id": "mbpp/107",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef merge_sorted_list(*lists):\n    heap = []\n    for i, lst in enumerate(lists):\n        if lst:\n            heapq.heappush(heap, (lst[0], i, 0))\n    \n    result = []\n    while heap:\n        val, list_idx, elem_idx = heapq.heappop(heap)\n        result.append(val)\n        if elem_idx + 1 < len(lists[list_idx]):\n            next_elem = lists[list_idx][elem_idx + 1]\n            heapq.heappush(heap, (next_elem, list_idx, elem_idx + 1))\n    \n    return result",
    "test_output": "FAILED: expect [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233],in fact [19, 20, 11, 24, 25, 24, 15, 4, 5, 26, 29, 54, 48, 56, 25, 110, 233, 154]",
    "test_result": "False"
  },
  "1076": {
    "question_id": "mbpp/107",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef merge_sorted_list(*iterables):\n    merged = heapq.merge(*iterables)\n    return list(merged)",
    "test_output": "FAILED: expect [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233],in fact [19, 20, 11, 24, 25, 24, 15, 4, 5, 26, 29, 54, 48, 56, 25, 110, 233, 154]",
    "test_result": "False"
  },
  "1077": {
    "question_id": "mbpp/107",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef merge_sorted_list(*input_lists):\n    merged = heapq.merge(*input_lists)\n    return list(merged)",
    "test_output": "FAILED: expect [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233],in fact [19, 20, 11, 24, 25, 24, 15, 4, 5, 26, 29, 54, 48, 56, 25, 110, 233, 154]",
    "test_result": "False"
  },
  "1078": {
    "question_id": "mbpp/107",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef merge_sorted_list(*args):\n    merged = heapq.merge(*args)\n    return list(merged)",
    "test_output": "FAILED: expect [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233],in fact [19, 20, 11, 24, 25, 24, 15, 4, 5, 26, 29, 54, 48, 56, 25, 110, 233, 154]",
    "test_result": "False"
  },
  "1079": {
    "question_id": "mbpp/107",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef merge_sorted_list(*iterables):\n    merged = heapq.merge(*iterables)\n    return list(merged)",
    "test_output": "FAILED: expect [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233],in fact [19, 20, 11, 24, 25, 24, 15, 4, 5, 26, 29, 54, 48, 56, 25, 110, 233, 154]",
    "test_result": "False"
  },
  "1080": {
    "question_id": "mbpp/108",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1081": {
    "question_id": "mbpp/108",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1082": {
    "question_id": "mbpp/108",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1083": {
    "question_id": "mbpp/108",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1084": {
    "question_id": "mbpp/108",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1085": {
    "question_id": "mbpp/108",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1086": {
    "question_id": "mbpp/108",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1087": {
    "question_id": "mbpp/108",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1088": {
    "question_id": "mbpp/108",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1089": {
    "question_id": "mbpp/108",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1090": {
    "question_id": "mbpp/109",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_missing(ranges, start, end):\n    missing = []\n    if not ranges:\n        return [(start, end)] if start < end else []\n    \n    # Sort the ranges based on the start value\n    sorted_ranges = sorted(ranges, key=lambda x: x[0])\n    \n    # Check before the first range\n    first_start = sorted_ranges[0][0]\n    if start < first_start:\n        missing.append((start, first_start))\n    \n    # Check between ranges\n    for i in range(1, len(sorted_ranges)):\n        prev_end = sorted_ranges[i-1][1]\n        curr_start = sorted_ranges[i][0]\n        if prev_end < curr_start:\n            missing.append((prev_end, curr_start))\n    \n    # Check after the last range\n    last_end = sorted_ranges[-1][1]\n    if last_end < end:\n        missing.append((last_end, end))\n    \n    return missing",
    "test_output": "FAILED: expect [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)],in fact [(2, 6), (9, 15), (34, 48), (70, 100)]",
    "test_result": "False"
  },
  "1091": {
    "question_id": "mbpp/109",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_missing(ranges, start, end):\n    missing = []\n    if not ranges:\n        return [(start, end)] if start < end else []\n    \n    # Sort the ranges based on the start value\n    sorted_ranges = sorted(ranges, key=lambda x: x[0])\n    \n    # Check before the first range\n    first_start = sorted_ranges[0][0]\n    if start < first_start:\n        missing.append((start, first_start))\n    \n    # Check between ranges\n    for i in range(1, len(sorted_ranges)):\n        prev_end = sorted_ranges[i-1][1]\n        curr_start = sorted_ranges[i][0]\n        if prev_end < curr_start:\n            missing.append((prev_end, curr_start))\n    \n    # Check after the last range\n    last_end = sorted_ranges[-1][1]\n    if last_end < end:\n        missing.append((last_end, end))\n    \n    return missing",
    "test_output": "FAILED: expect [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)],in fact [(2, 6), (9, 15), (34, 48), (70, 100)]",
    "test_result": "False"
  },
  "1092": {
    "question_id": "mbpp/109",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_missing(ranges, start, end):\n    missing_ranges = []\n    if not ranges:\n        if start <= end:\n            missing_ranges.append((start, end))\n        return missing_ranges\n    \n    # Handle the beginning part\n    first_start, first_end = ranges[0]\n    if start < first_start:\n        missing_ranges.append((start, first_start))\n    \n    # Handle the middle parts\n    prev_end = first_end\n    for current_start, current_end in ranges[1:]:\n        if prev_end < current_start:\n            missing_ranges.append((prev_end, current_start))\n        prev_end = max(prev_end, current_end)\n    \n    # Handle the end part\n    last_end = ranges[-1][1]\n    if last_end < end:\n        missing_ranges.append((last_end, end))\n    \n    return missing_ranges",
    "test_output": "FAILED: expect [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)],in fact [(2, 6), (9, 15), (34, 48), (70, 100)]",
    "test_result": "False"
  },
  "1093": {
    "question_id": "mbpp/109",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_missing(ranges, start, end):\n    missing_ranges = []\n    if not ranges:\n        missing_ranges.append((start, end))\n        return missing_ranges\n    \n    # Check before the first range\n    first_start = ranges[0][0]\n    if start < first_start:\n        missing_ranges.append((start, first_start))\n    \n    # Check between ranges\n    for i in range(1, len(ranges)):\n        prev_end = ranges[i-1][1]\n        current_start = ranges[i][0]\n        if prev_end < current_start:\n            missing_ranges.append((prev_end, current_start))\n    \n    # Check after the last range\n    last_end = ranges[-1][1]\n    if last_end < end:\n        missing_ranges.append((last_end, end))\n    \n    return missing_ranges",
    "test_output": "FAILED: expect [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)],in fact [(2, 6), (9, 15), (34, 48), (70, 100)]",
    "test_result": "False"
  },
  "1094": {
    "question_id": "mbpp/109",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_missing(ranges, start, end):\n    missing = []\n    if not ranges:\n        return [(start, end)] if start < end else []\n    \n    # Sort the ranges based on the start value\n    sorted_ranges = sorted(ranges, key=lambda x: x[0])\n    \n    # Check before the first range\n    first_start = sorted_ranges[0][0]\n    if start < first_start:\n        missing.append((start, first_start))\n    \n    # Check between ranges\n    for i in range(1, len(sorted_ranges)):\n        prev_end = sorted_ranges[i-1][1]\n        curr_start = sorted_ranges[i][0]\n        if prev_end < curr_start:\n            missing.append((prev_end, curr_start))\n    \n    # Check after the last range\n    last_end = sorted_ranges[-1][1]\n    if last_end < end:\n        missing.append((last_end, end))\n    \n    return missing",
    "test_output": "FAILED: expect [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)],in fact [(2, 6), (9, 15), (34, 48), (70, 100)]",
    "test_result": "False"
  },
  "1095": {
    "question_id": "mbpp/109",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_missing(ranges, start, end):\n    missing = []\n    if not ranges:\n        return [(start, end)] if start < end else []\n    \n    # Sort the ranges based on the start value\n    sorted_ranges = sorted(ranges, key=lambda x: x[0])\n    \n    # Check before the first range\n    first_start = sorted_ranges[0][0]\n    if start < first_start:\n        missing.append((start, first_start))\n    \n    # Check between ranges\n    for i in range(1, len(sorted_ranges)):\n        prev_end = sorted_ranges[i-1][1]\n        curr_start = sorted_ranges[i][0]\n        if prev_end < curr_start:\n            missing.append((prev_end, curr_start))\n    \n    # Check after the last range\n    last_end = sorted_ranges[-1][1]\n    if last_end < end:\n        missing.append((last_end, end))\n    \n    return missing",
    "test_output": "FAILED: expect [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)],in fact [(2, 6), (9, 15), (34, 48), (70, 100)]",
    "test_result": "False"
  },
  "1096": {
    "question_id": "mbpp/109",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_missing(ranges, start, end):\n    missing_ranges = []\n    if not ranges:\n        if start <= end:\n            missing_ranges.append((start, end))\n        return missing_ranges\n    \n    # Handle the beginning\n    first_start, first_end = ranges[0]\n    if start < first_start:\n        missing_ranges.append((start, first_start))\n    \n    # Handle the middle\n    prev_end = first_end\n    for current_start, current_end in ranges[1:]:\n        if prev_end < current_start:\n            missing_ranges.append((prev_end, current_start))\n        prev_end = max(prev_end, current_end)\n    \n    # Handle the end\n    last_end = ranges[-1][1]\n    if last_end < end:\n        missing_ranges.append((last_end, end))\n    \n    return missing_ranges",
    "test_output": "FAILED: expect [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)],in fact [(2, 6), (9, 15), (34, 48), (70, 100)]",
    "test_result": "False"
  },
  "1097": {
    "question_id": "mbpp/109",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_missing(ranges, start, end):\n    missing_ranges = []\n    if not ranges:\n        return [(start, end)] if start < end else []\n    \n    # Handle the beginning\n    first_start, first_end = ranges[0]\n    if start < first_start:\n        missing_ranges.append((start, first_start))\n    \n    # Handle the middle\n    prev_end = first_end\n    for current_start, current_end in ranges[1:]:\n        if prev_end < current_start:\n            missing_ranges.append((prev_end, current_start))\n        prev_end = max(prev_end, current_end)\n    \n    # Handle the end\n    last_start, last_end = ranges[-1]\n    if last_end < end:\n        missing_ranges.append((last_end, end))\n    \n    return missing_ranges",
    "test_output": "FAILED: expect [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)],in fact [(2, 6), (9, 15), (34, 48), (70, 100)]",
    "test_result": "False"
  },
  "1098": {
    "question_id": "mbpp/109",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_missing(ranges, start, end):\n    missing_ranges = []\n    if not ranges:\n        if start <= end:\n            missing_ranges.append((start, end))\n        return missing_ranges\n    \n    # Handle the start of the range\n    first_start, first_end = ranges[0]\n    if start < first_start:\n        missing_ranges.append((start, first_start))\n    \n    # Handle the middle ranges\n    for i in range(1, len(ranges)):\n        prev_end = ranges[i-1][1]\n        curr_start = ranges[i][0]\n        if prev_end < curr_start:\n            missing_ranges.append((prev_end, curr_start))\n    \n    # Handle the end of the range\n    last_start, last_end = ranges[-1]\n    if last_end < end:\n        missing_ranges.append((last_end, end))\n    \n    return missing_ranges",
    "test_output": "FAILED: expect [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)],in fact [(2, 6), (9, 15), (34, 48), (70, 100)]",
    "test_result": "False"
  },
  "1099": {
    "question_id": "mbpp/109",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_missing(ranges, start, end):\n    missing_ranges = []\n    if not ranges:\n        if start <= end:\n            missing_ranges.append((start, end))\n        return missing_ranges\n    \n    # Handle the beginning\n    first_start, first_end = ranges[0]\n    if start < first_start:\n        missing_ranges.append((start, first_start))\n    \n    # Handle the middle\n    prev_end = first_end\n    for current_start, current_end in ranges[1:]:\n        if prev_end < current_start:\n            missing_ranges.append((prev_end, current_start))\n        prev_end = max(prev_end, current_end)\n    \n    # Handle the end\n    last_start, last_end = ranges[-1]\n    if last_end < end:\n        missing_ranges.append((last_end, end))\n    \n    return missing_ranges",
    "test_output": "FAILED: expect [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)],in fact [(2, 6), (9, 15), (34, 48), (70, 100)]",
    "test_result": "False"
  },
  "1100": {
    "question_id": "mbpp/110",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    common_elements = set(nested_lists[0])\n    \n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return sorted(common_elements, reverse=True)",
    "test_output": "FAILED: expect [5, 23],in fact [23, 5]",
    "test_result": "False"
  },
  "1101": {
    "question_id": "mbpp/110",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return sorted(common_elements, reverse=True)",
    "test_output": "FAILED: expect [5, 23],in fact [23, 5]",
    "test_result": "False"
  },
  "1102": {
    "question_id": "mbpp/110",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return sorted(common_elements, reverse=True)",
    "test_output": "FAILED: expect [5, 23],in fact [23, 5]",
    "test_result": "False"
  },
  "1103": {
    "question_id": "mbpp/110",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return sorted(common_elements, reverse=True)",
    "test_output": "FAILED: expect [5, 23],in fact [23, 5]",
    "test_result": "False"
  },
  "1104": {
    "question_id": "mbpp/110",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return sorted(common_elements, reverse=True)",
    "test_output": "FAILED: expect [5, 23],in fact [23, 5]",
    "test_result": "False"
  },
  "1105": {
    "question_id": "mbpp/110",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return sorted(common_elements, reverse=True)",
    "test_output": "FAILED: expect [5, 23],in fact [23, 5]",
    "test_result": "False"
  },
  "1106": {
    "question_id": "mbpp/110",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return sorted(common_elements, reverse=True)",
    "test_output": "FAILED: expect [5, 23],in fact [23, 5]",
    "test_result": "False"
  },
  "1107": {
    "question_id": "mbpp/110",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return sorted(common_elements, reverse=True)",
    "test_output": "FAILED: expect [5, 23],in fact [23, 5]",
    "test_result": "False"
  },
  "1108": {
    "question_id": "mbpp/110",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return sorted(common_elements, reverse=True)",
    "test_output": "FAILED: expect [5, 23],in fact [23, 5]",
    "test_result": "False"
  },
  "1109": {
    "question_id": "mbpp/110",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return sorted(common_elements, reverse=True)",
    "test_output": "FAILED: expect [5, 23],in fact [23, 5]",
    "test_result": "False"
  },
  "1110": {
    "question_id": "mbpp/111",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perimeter(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    circle_perimeter = 2 * math.pi * radius\n    rectangle_perimeter = 2 * height\n    total_perimeter = 2 * circle_perimeter + rectangle_perimeter\n    return int(round(total_perimeter))",
    "test_output": "FAILED: expect 12,in fact 33",
    "test_result": "False"
  },
  "1111": {
    "question_id": "mbpp/111",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perimeter(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    circle_perimeter = 2 * math.pi * radius\n    rectangle_perimeter = 2 * height\n    total_perimeter = 2 * circle_perimeter + rectangle_perimeter\n    return int(round(total_perimeter))",
    "test_output": "FAILED: expect 12,in fact 33",
    "test_result": "False"
  },
  "1112": {
    "question_id": "mbpp/111",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perimeter(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    circular_perimeter = 2 * math.pi * radius\n    total_perimeter = 2 * circular_perimeter + 2 * height\n    return round(total_perimeter)",
    "test_output": "FAILED: expect 12,in fact 33",
    "test_result": "False"
  },
  "1113": {
    "question_id": "mbpp/111",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perimeter(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    circle_perimeter = 2 * math.pi * radius\n    total_perimeter = 2 * circle_perimeter + 2 * height\n    return total_perimeter",
    "test_output": "FAILED: expect 12,in fact 33.132741228718345",
    "test_result": "False"
  },
  "1114": {
    "question_id": "mbpp/111",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perimeter(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    return 2 * math.pi * radius + 2 * height",
    "test_output": "FAILED: expect 12,in fact 20.566370614359172",
    "test_result": "False"
  },
  "1115": {
    "question_id": "mbpp/111",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perimeter(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    circle_perimeter = 2 * math.pi * radius\n    total_perimeter = 2 * circle_perimeter + 2 * height\n    return round(total_perimeter)",
    "test_output": "FAILED: expect 12,in fact 33",
    "test_result": "False"
  },
  "1116": {
    "question_id": "mbpp/111",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perimeter(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    return 2 * math.pi * radius + 2 * height",
    "test_output": "FAILED: expect 12,in fact 20.566370614359172",
    "test_result": "False"
  },
  "1117": {
    "question_id": "mbpp/111",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perimeter(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    return 2 * math.pi * radius + 2 * height",
    "test_output": "FAILED: expect 12,in fact 20.566370614359172",
    "test_result": "False"
  },
  "1118": {
    "question_id": "mbpp/111",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perimeter(radius, height):\n    if radius < 0 or height < 0:\n        return 0\n    circle_perimeter = 2 * math.pi * radius\n    rectangle_perimeter = 2 * height\n    total_perimeter = 2 * circle_perimeter + rectangle_perimeter\n    return int(round(total_perimeter))",
    "test_output": "FAILED: expect 12,in fact 33",
    "test_result": "False"
  },
  "1119": {
    "question_id": "mbpp/111",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perimeter(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    return 2 * math.pi * radius + 2 * height",
    "test_output": "FAILED: expect 12,in fact 20.566370614359172",
    "test_result": "False"
  },
  "1120": {
    "question_id": "mbpp/112",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_integer(s):\n    if not s:\n        return False\n    s = s.strip()\n    if s.startswith('-') or s.startswith('+'):\n        s = s[1:]\n    if not s.isdigit():\n        return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1121": {
    "question_id": "mbpp/112",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_integer(s):\n    if not s:\n        return False\n    if s[0] in ['+', '-']:\n        return s[1:].isdigit()\n    return s.isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1122": {
    "question_id": "mbpp/112",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_integer(s):\n    if not s:\n        return False\n    if s[0] in ('-', '+'):\n        return s[1:].isdigit()\n    return s.isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1123": {
    "question_id": "mbpp/112",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_integer(s):\n    if not s:\n        return False\n    s = s.strip()\n    if s.startswith('-') or s.startswith('+'):\n        s = s[1:]\n    return s.isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1124": {
    "question_id": "mbpp/112",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_integer(s):\n    if not s:\n        return False\n    s = s.strip()\n    if s.startswith('-') or s.startswith('+'):\n        s = s[1:]\n    return s.isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1125": {
    "question_id": "mbpp/112",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_integer(s):\n    if not s:\n        return False\n    if s[0] in ('-', '+'):\n        return s[1:].isdigit()\n    return s.isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1126": {
    "question_id": "mbpp/112",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_integer(s):\n    if not s:\n        return False\n    s = s.strip()\n    if s.startswith('-') or s.startswith('+'):\n        s = s[1:]\n    return s.isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1127": {
    "question_id": "mbpp/112",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_integer(s):\n    if not s:\n        return False\n    s = s.strip()\n    if s.startswith('-') or s.startswith('+'):\n        s = s[1:]\n    return s.isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1128": {
    "question_id": "mbpp/112",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_integer(s):\n    if not s:\n        return False\n    s = s.strip()\n    if s.startswith('-') or s.startswith('+'):\n        s = s[1:]\n    return s.isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1129": {
    "question_id": "mbpp/112",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_integer(s):\n    if not s:\n        return False\n    if s[0] in ('-', '+'):\n        return s[1:].isdigit()\n    return s.isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1130": {
    "question_id": "mbpp/113",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_freq(tuple_list):\n    freq_dict = {}\n    for t in tuple_list:\n        if t in freq_dict:\n            freq_dict[t] += 1\n        else:\n            freq_dict[t] = 1\n    result = []\n    for key in freq_dict:\n        result.append(key + (freq_dict[key],))\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1131": {
    "question_id": "mbpp/113",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_freq(tuple_list):\n    freq_dict = {}\n    for t in tuple_list:\n        if t in freq_dict:\n            freq_dict[t] += 1\n        else:\n            freq_dict[t] = 1\n    result = []\n    for key in freq_dict:\n        result.append(key + (freq_dict[key],))\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1132": {
    "question_id": "mbpp/113",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_freq(tuple_list):\n    freq_dict = {}\n    for t in tuple_list:\n        if t in freq_dict:\n            freq_dict[t] += 1\n        else:\n            freq_dict[t] = 1\n    result = []\n    for t in freq_dict:\n        new_tuple = t + (freq_dict[t],)\n        result.append(new_tuple)\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1133": {
    "question_id": "mbpp/113",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_freq(tuples_list):\n    freq_dict = {}\n    for t in tuples_list:\n        if t in freq_dict:\n            freq_dict[t] += 1\n        else:\n            freq_dict[t] = 1\n    result = []\n    for key in freq_dict:\n        result.append(key + (freq_dict[key],))\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1134": {
    "question_id": "mbpp/113",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_freq(tuple_list):\n    freq_dict = {}\n    for t in tuple_list:\n        if t in freq_dict:\n            freq_dict[t] += 1\n        else:\n            freq_dict[t] = 1\n    result = []\n    for key in freq_dict:\n        result.append(key + (freq_dict[key],))\n    return sorted(result, key=lambda x: (-x[-1], x))",
    "test_output": "FAILED: expect [(6, 5, 8, 3), (2, 7, 2), (9, 1)],in fact [(6, 5, 8, 3), (2, 7, 2), (9, 1)]",
    "test_result": "False"
  },
  "1135": {
    "question_id": "mbpp/113",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_freq(tuple_list):\n    freq_dict = {}\n    for t in tuple_list:\n        if t in freq_dict:\n            freq_dict[t] += 1\n        else:\n            freq_dict[t] = 1\n    result = []\n    for key in freq_dict:\n        result.append(key + (freq_dict[key],))\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1136": {
    "question_id": "mbpp/113",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_freq(tuple_list):\n    freq_dict = {}\n    for t in tuple_list:\n        if t in freq_dict:\n            freq_dict[t] += 1\n        else:\n            freq_dict[t] = 1\n    result = []\n    for key in freq_dict:\n        result.append(key + (freq_dict[key],))\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1137": {
    "question_id": "mbpp/113",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_freq(tuple_list):\n    freq_dict = {}\n    for t in tuple_list:\n        if t in freq_dict:\n            freq_dict[t] += 1\n        else:\n            freq_dict[t] = 1\n    result = []\n    for key in freq_dict:\n        new_tuple = key + (freq_dict[key],)\n        result.append(new_tuple)\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1138": {
    "question_id": "mbpp/113",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_freq(tuple_list):\n    freq_dict = {}\n    for t in tuple_list:\n        if t in freq_dict:\n            freq_dict[t] += 1\n        else:\n            freq_dict[t] = 1\n    result = []\n    for key in freq_dict:\n        result.append(key + (freq_dict[key],))\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1139": {
    "question_id": "mbpp/113",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_freq(tuple_list):\n    freq_dict = {}\n    for t in tuple_list:\n        if t in freq_dict:\n            freq_dict[t] += 1\n        else:\n            freq_dict[t] = 1\n    result = []\n    for key in freq_dict:\n        new_tuple = key + (freq_dict[key],)\n        result.append(new_tuple)\n    return str(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1140": {
    "question_id": "mbpp/114",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_dit(lst):\n    return all(not d for d in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1141": {
    "question_id": "mbpp/114",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_dit(lst):\n    return all(not d for d in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1142": {
    "question_id": "mbpp/114",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_dit(lst):\n    return all(not d for d in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1143": {
    "question_id": "mbpp/114",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_dit(lst):\n    return all(not d for d in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1144": {
    "question_id": "mbpp/114",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_dit(lst):\n    return all(not d for d in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1145": {
    "question_id": "mbpp/114",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_dit(lst):\n    return all(not d for d in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1146": {
    "question_id": "mbpp/114",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_dit(lst):\n    return all(not d for d in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1147": {
    "question_id": "mbpp/114",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_dit(lst):\n    return all(not d for d in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1148": {
    "question_id": "mbpp/114",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_dit(lst):\n    return all(not d for d in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1149": {
    "question_id": "mbpp/114",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_dit(lst):\n    return all(not d for d in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1150": {
    "question_id": "mbpp/115",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_int(t):\n    result = 0\n    for num in t:\n        result = result * 10 + num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1151": {
    "question_id": "mbpp/115",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_int(t):\n    num = 0\n    for digit in t:\n        num = num * 10 + digit\n    return num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1152": {
    "question_id": "mbpp/115",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_int(t):\n    num = 0\n    for digit in t:\n        num = num * 10 + digit\n    return num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1153": {
    "question_id": "mbpp/115",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_int(t):\n    result = 0\n    for num in t:\n        result = result * 10 + num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1154": {
    "question_id": "mbpp/115",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_int(t):\n    if not t:\n        return 0\n    num_str = ''.join(map(str, t))\n    return int(num_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1155": {
    "question_id": "mbpp/115",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_int(t):\n    num = 0\n    for digit in t:\n        num = num * 10 + digit\n    return num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1156": {
    "question_id": "mbpp/115",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_int(t):\n    num = 0\n    for digit in t:\n        num = num * 10 + digit\n    return num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1157": {
    "question_id": "mbpp/115",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_int(t):\n    if not t:\n        return 0\n    num_str = ''.join(map(str, t))\n    return int(num_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1158": {
    "question_id": "mbpp/115",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_int(t):\n    result = 0\n    for num in t:\n        result = result * 10 + num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1159": {
    "question_id": "mbpp/115",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_int(t):\n    num = 0\n    for digit in t:\n        num = num * 10 + digit\n    return num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1160": {
    "question_id": "mbpp/116",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_to_float(lst):\n    converted = []\n    for item in lst:\n        if isinstance(item, (list, tuple)):\n            new_item = []\n            for elem in item:\n                try:\n                    new_elem = float(elem)\n                except (ValueError, TypeError):\n                    new_elem = elem\n                new_item.append(new_elem)\n            converted.append(tuple(new_item))\n        else:\n            try:\n                converted.append(float(item))\n            except (ValueError, TypeError):\n                converted.append(item)\n    return str(converted).replace(\" \", \"\")",
    "test_output": "FAILED: expect [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)],in fact [(3.0,4.0),(1.0,26.45),(7.32,8.0),(4.0,8.0)]",
    "test_result": "False"
  },
  "1161": {
    "question_id": "mbpp/116",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_to_float(lst):\n    converted = []\n    for item in lst:\n        if isinstance(item, (list, tuple)):\n            new_item = []\n            for elem in item:\n                try:\n                    new_elem = float(elem)\n                except (ValueError, TypeError):\n                    new_elem = elem\n                new_item.append(new_elem)\n            converted.append(tuple(new_item))\n        else:\n            try:\n                converted.append(float(item))\n            except (ValueError, TypeError):\n                converted.append(item)\n    return str(converted).replace(\" \", \"\")",
    "test_output": "FAILED: expect [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)],in fact [(3.0,4.0),(1.0,26.45),(7.32,8.0),(4.0,8.0)]",
    "test_result": "False"
  },
  "1162": {
    "question_id": "mbpp/116",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_to_float(lst):\n    converted = []\n    for item in lst:\n        if isinstance(item, (list, tuple)):\n            new_item = []\n            for element in item:\n                try:\n                    new_element = float(element)\n                except (ValueError, TypeError):\n                    new_element = element\n                new_item.append(new_element)\n            converted.append(tuple(new_item))\n        else:\n            try:\n                converted.append(float(item))\n            except (ValueError, TypeError):\n                converted.append(item)\n    return str(converted).replace(\" \", \"\")",
    "test_output": "FAILED: expect [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)],in fact [(3.0,4.0),(1.0,26.45),(7.32,8.0),(4.0,8.0)]",
    "test_result": "False"
  },
  "1163": {
    "question_id": "mbpp/116",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_to_float(lst):\n    converted = []\n    for item in lst:\n        if isinstance(item, (list, tuple)):\n            new_item = []\n            for element in item:\n                try:\n                    new_element = float(element)\n                except (ValueError, TypeError):\n                    new_element = element\n                new_item.append(new_element)\n            converted.append(tuple(new_item))\n        else:\n            try:\n                converted.append(float(item))\n            except (ValueError, TypeError):\n                converted.append(item)\n    return str(converted).replace(\" \", \"\")",
    "test_output": "FAILED: expect [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)],in fact [(3.0,4.0),(1.0,26.45),(7.32,8.0),(4.0,8.0)]",
    "test_result": "False"
  },
  "1164": {
    "question_id": "mbpp/116",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_to_float(lst):\n    converted = []\n    for item in lst:\n        if isinstance(item, (list, tuple)):\n            new_item = []\n            for elem in item:\n                try:\n                    new_elem = float(elem)\n                except (ValueError, TypeError):\n                    new_elem = elem\n                new_item.append(new_elem)\n            converted.append(tuple(new_item))\n        else:\n            try:\n                converted.append(float(item))\n            except (ValueError, TypeError):\n                converted.append(item)\n    return str(converted).replace(\" \", \"\")",
    "test_output": "FAILED: expect [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)],in fact [(3.0,4.0),(1.0,26.45),(7.32,8.0),(4.0,8.0)]",
    "test_result": "False"
  },
  "1165": {
    "question_id": "mbpp/116",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_to_float(lst):\n    converted = []\n    for item in lst:\n        if isinstance(item, (list, tuple)):\n            new_item = []\n            for element in item:\n                try:\n                    new_item.append(float(element))\n                except (ValueError, TypeError):\n                    new_item.append(element)\n            converted.append(tuple(new_item))\n        else:\n            try:\n                converted.append(float(item))\n            except (ValueError, TypeError):\n                converted.append(item)\n    return str(converted).replace(\" \", \"\")",
    "test_output": "FAILED: expect [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)],in fact [(3.0,4.0),(1.0,26.45),(7.32,8.0),(4.0,8.0)]",
    "test_result": "False"
  },
  "1166": {
    "question_id": "mbpp/116",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_to_float(lst):\n    converted = []\n    for item in lst:\n        if isinstance(item, (list, tuple)):\n            new_item = []\n            for element in item:\n                try:\n                    new_element = float(element)\n                except (ValueError, TypeError):\n                    new_element = element\n                new_item.append(new_element)\n            converted.append(tuple(new_item))\n        else:\n            try:\n                converted.append(float(item))\n            except (ValueError, TypeError):\n                converted.append(item)\n    return str(converted).replace(\" \", \"\")",
    "test_output": "FAILED: expect [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)],in fact [(3.0,4.0),(1.0,26.45),(7.32,8.0),(4.0,8.0)]",
    "test_result": "False"
  },
  "1167": {
    "question_id": "mbpp/116",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_to_float(lst):\n    converted = []\n    for item in lst:\n        if isinstance(item, (list, tuple)):\n            new_item = []\n            for elem in item:\n                try:\n                    new_item.append(float(elem))\n                except (ValueError, TypeError):\n                    new_item.append(elem)\n            converted.append(tuple(new_item) if isinstance(item, tuple) else new_item)\n        else:\n            try:\n                converted.append(float(item))\n            except (ValueError, TypeError):\n                converted.append(item)\n    return str(converted).replace(\" \", \"\")",
    "test_output": "FAILED: expect [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)],in fact [(3.0,4.0),(1.0,26.45),(7.32,8.0),(4.0,8.0)]",
    "test_result": "False"
  },
  "1168": {
    "question_id": "mbpp/116",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_to_float(lst):\n    converted = []\n    for item in lst:\n        if isinstance(item, (list, tuple)):\n            new_item = []\n            for element in item:\n                try:\n                    new_item.append(float(element))\n                except (ValueError, TypeError):\n                    new_item.append(element)\n            converted.append(tuple(new_item))\n        else:\n            try:\n                converted.append(float(item))\n            except (ValueError, TypeError):\n                converted.append(item)\n    return str(converted).replace(\" \", \"\")",
    "test_output": "FAILED: expect [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)],in fact [(3.0,4.0),(1.0,26.45),(7.32,8.0),(4.0,8.0)]",
    "test_result": "False"
  },
  "1169": {
    "question_id": "mbpp/116",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_to_float(lst):\n    converted = []\n    for item in lst:\n        if isinstance(item, (list, tuple)):\n            new_item = []\n            for element in item:\n                try:\n                    new_element = float(element)\n                except (ValueError, TypeError):\n                    new_element = element\n                new_item.append(new_element)\n            converted.append(tuple(new_item))\n        else:\n            try:\n                converted.append(float(item))\n            except (ValueError, TypeError):\n                converted.append(item)\n    return str(converted).replace(\" \", \"\")",
    "test_output": "FAILED: expect [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)],in fact [(3.0,4.0),(1.0,26.45),(7.32,8.0),(4.0,8.0)]",
    "test_result": "False"
  },
  "1170": {
    "question_id": "mbpp/117",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_list(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1171": {
    "question_id": "mbpp/117",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_list(input_string):\n    return input_string.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1172": {
    "question_id": "mbpp/117",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_list(input_string):\n    return input_string.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1173": {
    "question_id": "mbpp/117",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_list(input_string):\n    return input_string.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1174": {
    "question_id": "mbpp/117",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_list(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1175": {
    "question_id": "mbpp/117",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_list(input_string):\n    return input_string.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1176": {
    "question_id": "mbpp/117",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_list(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1177": {
    "question_id": "mbpp/117",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_list(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1178": {
    "question_id": "mbpp/117",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_list(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1179": {
    "question_id": "mbpp/117",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_list(input_string):\n    return input_string.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1180": {
    "question_id": "mbpp/118",
    "model": "deepseek-v3-250324",
    "generation_code": "def search(nums, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return nums[left]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1181": {
    "question_id": "mbpp/118",
    "model": "deepseek-v3-250324",
    "generation_code": "def search(nums, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return nums[left]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1182": {
    "question_id": "mbpp/118",
    "model": "deepseek-v3-250324",
    "generation_code": "def search(nums, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return nums[left]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1183": {
    "question_id": "mbpp/118",
    "model": "deepseek-v3-250324",
    "generation_code": "def search(nums, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return nums[left]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1184": {
    "question_id": "mbpp/118",
    "model": "deepseek-v3-250324",
    "generation_code": "def search(nums, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return nums[left]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1185": {
    "question_id": "mbpp/118",
    "model": "deepseek-v3-250324",
    "generation_code": "def search(arr, n):\n    left, right = 0, n - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        if mid % 2 == 1:\n            mid -= 1\n        \n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1186": {
    "question_id": "mbpp/118",
    "model": "deepseek-v3-250324",
    "generation_code": "def search(nums, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return nums[left]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1187": {
    "question_id": "mbpp/118",
    "model": "deepseek-v3-250324",
    "generation_code": "def search(nums, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return nums[left]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1188": {
    "question_id": "mbpp/118",
    "model": "deepseek-v3-250324",
    "generation_code": "def search(nums, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return nums[left]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1189": {
    "question_id": "mbpp/118",
    "model": "deepseek-v3-250324",
    "generation_code": "def search(arr, n):\n    left, right = 0, n - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        if mid % 2 == 1:\n            mid -= 1\n        \n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1190": {
    "question_id": "mbpp/119",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product_tuple(lst):\n    if not lst:\n        return 0\n    max_prod = float('-inf')\n    for t in lst:\n        product = t[0] * t[1]\n        if product > max_prod:\n            max_prod = product\n    return max_prod",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1191": {
    "question_id": "mbpp/119",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product_tuple(lst):\n    if not lst:\n        return 0\n    max_product = float('-inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1192": {
    "question_id": "mbpp/119",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product_tuple(lst):\n    if not lst:\n        return 0\n    max_prod = float('-inf')\n    for t in lst:\n        product = t[0] * t[1]\n        if product > max_prod:\n            max_prod = product\n    return max_prod",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1193": {
    "question_id": "mbpp/119",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product_tuple(lst):\n    if not lst:\n        return 0\n    max_product = float('-inf')\n    for t in lst:\n        product = t[0] * t[1]\n        if product > max_product:\n            max_product = product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1194": {
    "question_id": "mbpp/119",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product_tuple(lst):\n    if not lst:\n        return 0\n    max_prod = float('-inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product > max_prod:\n            max_prod = product\n    return max_prod",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1195": {
    "question_id": "mbpp/119",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product_tuple(lst):\n    if not lst:\n        return 0\n    max_prod = float('-inf')\n    for t in lst:\n        product = t[0] * t[1]\n        if product > max_prod:\n            max_prod = product\n    return max_prod",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1196": {
    "question_id": "mbpp/119",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product_tuple(tuple_list):\n    if not tuple_list:\n        return 0\n    max_product = float('-inf')\n    for t in tuple_list:\n        product = t[0] * t[1]\n        if product > max_product:\n            max_product = product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1197": {
    "question_id": "mbpp/119",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product_tuple(lst):\n    if not lst:\n        return 0\n    max_product = float('-inf')\n    for t in lst:\n        product = t[0] * t[1]\n        if product > max_product:\n            max_product = product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1198": {
    "question_id": "mbpp/119",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product_tuple(lst):\n    if not lst:\n        return 0\n    max_product = float('-inf')\n    for t in lst:\n        product = t[0] * t[1]\n        if product > max_product:\n            max_product = product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1199": {
    "question_id": "mbpp/119",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product_tuple(lst):\n    if not lst:\n        return 0\n    max_product = float('-inf')\n    for t in lst:\n        product = t[0] * t[1]\n        if product > max_product:\n            max_product = product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1200": {
    "question_id": "mbpp/120",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_triplet(arr, n, x, y):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == x and arr[i] * arr[j] * arr[k] == y:\n                    return True\n    return False",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1201": {
    "question_id": "mbpp/120",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_triplet(arr, n, x, y):\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == x and arr[i] * arr[j] * arr[k] == y:\n                    return True\n    return False",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1202": {
    "question_id": "mbpp/120",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_triplet(arr, n, x, y):\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == x and arr[i] * arr[j] * arr[k] == y:\n                    return True\n    return False",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1203": {
    "question_id": "mbpp/120",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_triplet(arr, n, sum, x):\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == sum:\n                return True\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return False",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1204": {
    "question_id": "mbpp/120",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_triplet(arr, n, sum, x):\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == sum:\n                return True\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return False",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1205": {
    "question_id": "mbpp/120",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_triplet(arr, n, x, y):\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == x and arr[i] * arr[j] * arr[k] == y:\n                    return True\n    return False",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1206": {
    "question_id": "mbpp/120",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_triplet(arr, n, x, start):\n    for i in range(start, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == x:\n                    return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1207": {
    "question_id": "mbpp/120",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_triplet(arr, n, sum, index):\n    if index >= n:\n        return False\n    for i in range(index, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == sum:\n                    return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1208": {
    "question_id": "mbpp/120",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_triplet(arr, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count > 3 or n == 0:\n        return False\n    return check_triplet(arr, n - 1, sum - arr[n - 1], count + 1) or check_triplet(arr, n - 1, sum, count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1209": {
    "question_id": "mbpp/120",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_triplet(arr, n, x, y):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == x and arr[i] * arr[j] * arr[k] == y:\n                    return True\n    return False",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1210": {
    "question_id": "mbpp/121",
    "model": "deepseek-v3-250324",
    "generation_code": "def smartNumber(n):\n    if n == 1:\n        return 30\n    count = 1\n    num = 30\n    while count < n:\n        num += 1\n        temp = num\n        factors = set()\n        for i in range(2, int(temp**0.5) + 1):\n            while temp % i == 0:\n                factors.add(i)\n                temp = temp // i\n        if temp > 1:\n            factors.add(temp)\n        if len(factors) == 3:\n            count += 1\n    return num",
    "test_output": "FAILED: expect 273,in fact 276",
    "test_result": "False"
  },
  "1211": {
    "question_id": "mbpp/121",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smartNumber(n):\n    count = 0\n    num = 1\n    while True:\n        num += 1\n        factors = set()\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                factors.add(i)\n                factors.add(num // i)\n        if len(factors) % 2 != 0:\n            count += 1\n            if count == n:\n                return num",
    "test_output": "FAILED: expect 30,in fact 4",
    "test_result": "False"
  },
  "1212": {
    "question_id": "mbpp/121",
    "model": "deepseek-v3-250324",
    "generation_code": "def smartNumber(n):\n    count = 0\n    num = 1\n    while True:\n        temp = num\n        factors = set()\n        i = 2\n        while i * i <= temp:\n            while temp % i == 0:\n                factors.add(i)\n                temp = temp // i\n            i += 1\n        if temp > 1:\n            factors.add(temp)\n        if len(factors) == 3:\n            count += 1\n            if count == n:\n                return num\n        num += 1",
    "test_output": "FAILED: expect 273,in fact 276",
    "test_result": "False"
  },
  "1213": {
    "question_id": "mbpp/121",
    "model": "deepseek-v3-250324",
    "generation_code": "def smartNumber(n):\n    count = 0\n    num = 1\n    while True:\n        temp = num\n        factors = set()\n        i = 2\n        while i * i <= temp:\n            while temp % i == 0:\n                factors.add(i)\n                temp = temp // i\n            i += 1\n        if temp > 1:\n            factors.add(temp)\n        if len(factors) == 3:\n            count += 1\n            if count == n:\n                return num\n        num += 1",
    "test_output": "FAILED: expect 273,in fact 276",
    "test_result": "False"
  },
  "1214": {
    "question_id": "mbpp/121",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    count = 1\n    num = 30\n    while count < n:\n        num += 1\n        factors = set()\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                factors.add(i)\n                factors.add(num // i)\n        if len(factors) % 2 != 0:\n            count += 1\n    return num",
    "test_output": "FAILED: expect 273,in fact 2916",
    "test_result": "False"
  },
  "1215": {
    "question_id": "mbpp/121",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smartNumber(n):\n    count = 0\n    num = 1\n    while True:\n        num += 1\n        factors = set()\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                factors.add(i)\n                factors.add(num // i)\n        if len(factors) % 2 != 0:\n            count += 1\n            if count == n:\n                return num",
    "test_output": "FAILED: expect 30,in fact 4",
    "test_result": "False"
  },
  "1216": {
    "question_id": "mbpp/121",
    "model": "deepseek-v3-250324",
    "generation_code": "def smartNumber(n):\n    count = 0\n    num = 1\n    while True:\n        temp = num\n        factors = set()\n        for i in range(2, int(temp**0.5) + 1):\n            while temp % i == 0:\n                factors.add(i)\n                temp = temp // i\n        if temp > 1:\n            factors.add(temp)\n        if len(factors) == 3:\n            count += 1\n            if count == n:\n                return num\n        num += 1",
    "test_output": "FAILED: expect 273,in fact 276",
    "test_result": "False"
  },
  "1217": {
    "question_id": "mbpp/121",
    "model": "deepseek-v3-250324",
    "generation_code": "def smartNumber(n):\n    count = 0\n    num = 1\n    while True:\n        temp = num\n        factors = set()\n        for i in range(2, int(temp**0.5) + 1):\n            while temp % i == 0:\n                factors.add(i)\n                temp = temp // i\n        if temp > 1:\n            factors.add(temp)\n        if len(factors) == 3:\n            count += 1\n            if count == n:\n                return num\n        num += 1",
    "test_output": "FAILED: expect 273,in fact 276",
    "test_result": "False"
  },
  "1218": {
    "question_id": "mbpp/121",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smartNumber(n):\n    if n < 1:\n        return None\n    count = 0\n    num = 1\n    while True:\n        num += 1\n        factors = set()\n        for i in range(1, int(math.isqrt(num)) + 1):\n            if num % i == 0:\n                factors.add(i)\n                factors.add(num // i)\n        if len(factors) == 4:\n            count += 1\n            if count == n:\n                return num",
    "test_output": "FAILED: expect 30,in fact 6",
    "test_result": "False"
  },
  "1219": {
    "question_id": "mbpp/121",
    "model": "deepseek-v3-250324",
    "generation_code": "def smartNumber(n):\n    count = 0\n    num = 1\n    while True:\n        num += 1\n        factors = set()\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.add(i)\n                factors.add(num // i)\n        if len(factors) % 2 != 0:\n            count += 1\n            if count == n:\n                return num",
    "test_output": "FAILED: expect 30,in fact 4",
    "test_result": "False"
  },
  "1220": {
    "question_id": "mbpp/122",
    "model": "deepseek-v3-250324",
    "generation_code": "def amicable_numbers_sum(n):\n    def sum_proper_divisors(num):\n        if num == 1:\n            return 0\n        sum_div = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum_div += i\n                other_div = num // i\n                if other_div != i:\n                    sum_div += other_div\n        return sum_div\n    \n    amicable_sum = 0\n    for a in range(1, n + 1):\n        b = sum_proper_divisors(a)\n        if b > a and sum_proper_divisors(b) == a:\n            amicable_sum += a + b if b <= n else a\n    return amicable_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1221": {
    "question_id": "mbpp/122",
    "model": "deepseek-v3-250324",
    "generation_code": "def amicable_numbers_sum(n):\n    def sum_proper_divisors(num):\n        if num == 1:\n            return 0\n        sum_div = 1\n        sqrt_num = int(num ** 0.5)\n        for i in range(2, sqrt_num + 1):\n            if num % i == 0:\n                sum_div += i\n                other_div = num // i\n                if other_div != i:\n                    sum_div += other_div\n        return sum_div\n    \n    amicable_sum = 0\n    for a in range(1, n + 1):\n        b = sum_proper_divisors(a)\n        if b > a and sum_proper_divisors(b) == a:\n            amicable_sum += a + b if b <= n else a\n    return amicable_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1222": {
    "question_id": "mbpp/122",
    "model": "deepseek-v3-250324",
    "generation_code": "def amicable_numbers_sum(n):\n    def sum_proper_divisors(num):\n        if num == 1:\n            return 0\n        sum_div = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum_div += i\n                other_div = num // i\n                if other_div != i:\n                    sum_div += other_div\n        return sum_div\n    \n    amicable_sum = 0\n    for a in range(1, n + 1):\n        b = sum_proper_divisors(a)\n        if b > a and sum_proper_divisors(b) == a:\n            amicable_sum += a + b if b <= n else a\n    return amicable_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1223": {
    "question_id": "mbpp/122",
    "model": "deepseek-v3-250324",
    "generation_code": "def amicable_numbers_sum(n):\n    def sum_proper_divisors(num):\n        if num == 1:\n            return 0\n        sum_div = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum_div += i\n                other_div = num // i\n                if other_div != i:\n                    sum_div += other_div\n        return sum_div\n    \n    amicable_sum = 0\n    for a in range(1, n + 1):\n        b = sum_proper_divisors(a)\n        if b > a and sum_proper_divisors(b) == a:\n            amicable_sum += a + b\n    \n    return amicable_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1224": {
    "question_id": "mbpp/122",
    "model": "deepseek-v3-250324",
    "generation_code": "def amicable_numbers_sum(n):\n    def sum_proper_divisors(num):\n        if num == 1:\n            return 0\n        divisors = {1}\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                divisors.add(i)\n                divisors.add(num // i)\n        return sum(divisors)\n    \n    amicable_sum = 0\n    for a in range(1, n + 1):\n        b = sum_proper_divisors(a)\n        if b > a and sum_proper_divisors(b) == a:\n            amicable_sum += a + b if b <= n else a\n    return amicable_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1225": {
    "question_id": "mbpp/122",
    "model": "deepseek-v3-250324",
    "generation_code": "def amicable_numbers_sum(n):\n    def sum_proper_divisors(num):\n        if num == 1:\n            return 0\n        divisors = {1}\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                divisors.add(i)\n                divisors.add(num // i)\n        return sum(divisors)\n    \n    amicable_sum = 0\n    for a in range(1, n + 1):\n        b = sum_proper_divisors(a)\n        if b > a and sum_proper_divisors(b) == a:\n            amicable_sum += a + b if b <= n else a\n    return amicable_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1226": {
    "question_id": "mbpp/122",
    "model": "deepseek-v3-250324",
    "generation_code": "def amicable_numbers_sum(n):\n    def sum_proper_divisors(num):\n        if num == 1:\n            return 0\n        sum_div = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum_div += i\n                other_div = num // i\n                if other_div != i:\n                    sum_div += other_div\n        return sum_div\n    \n    amicable_sum = 0\n    for a in range(1, n + 1):\n        b = sum_proper_divisors(a)\n        if b > a and sum_proper_divisors(b) == a:\n            amicable_sum += a + b if b <= n else a\n    \n    return amicable_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1227": {
    "question_id": "mbpp/122",
    "model": "deepseek-v3-250324",
    "generation_code": "def amicable_numbers_sum(n):\n    def sum_proper_divisors(num):\n        if num == 1:\n            return 0\n        sum_div = 1\n        sqrt_num = int(num ** 0.5)\n        for i in range(2, sqrt_num + 1):\n            if num % i == 0:\n                sum_div += i\n                other_div = num // i\n                if other_div != i:\n                    sum_div += other_div\n        return sum_div\n    \n    amicable_sum = 0\n    for a in range(1, n + 1):\n        b = sum_proper_divisors(a)\n        if b > a and sum_proper_divisors(b) == a:\n            amicable_sum += a + b if b <= n else a\n    return amicable_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1228": {
    "question_id": "mbpp/122",
    "model": "deepseek-v3-250324",
    "generation_code": "def amicable_numbers_sum(n):\n    def sum_proper_divisors(num):\n        if num == 1:\n            return 0\n        sum_div = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum_div += i\n                other_div = num // i\n                if other_div != i:\n                    sum_div += other_div\n        return sum_div\n    \n    amicable_sum = 0\n    for a in range(1, n + 1):\n        b = sum_proper_divisors(a)\n        if b > a and sum_proper_divisors(b) == a:\n            amicable_sum += a + b\n    \n    return amicable_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1229": {
    "question_id": "mbpp/122",
    "model": "deepseek-v3-250324",
    "generation_code": "def amicable_numbers_sum(n):\n    def sum_proper_divisors(num):\n        if num == 1:\n            return 0\n        sum_div = 1\n        sqrt_num = int(num ** 0.5)\n        for i in range(2, sqrt_num + 1):\n            if num % i == 0:\n                sum_div += i\n                other_div = num // i\n                if other_div != i:\n                    sum_div += other_div\n        return sum_div\n    \n    amicable_sum = 0\n    for a in range(1, n + 1):\n        b = sum_proper_divisors(a)\n        if b > a and sum_proper_divisors(b) == a:\n            amicable_sum += a + b if b <= n else a\n    return amicable_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1230": {
    "question_id": "mbpp/123",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef angle_complex(num):\n    return cmath.phase(num)",
    "test_output": "FAILED: TypeError: angle_complex() takes 1 positional argument but 2 were given\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 187, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nTypeError: angle_complex() takes 1 positional argument but 2 were given\n",
    "test_result": "False"
  },
  "1231": {
    "question_id": "mbpp/123",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef angle_complex(complex_num):\n    return cmath.phase(complex_num)",
    "test_output": "FAILED: TypeError: angle_complex() takes 1 positional argument but 2 were given\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nTypeError: angle_complex() takes 1 positional argument but 2 were given\n",
    "test_result": "False"
  },
  "1232": {
    "question_id": "mbpp/123",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef angle_complex(num):\n    return cmath.phase(num)",
    "test_output": "FAILED: TypeError: angle_complex() takes 1 positional argument but 2 were given\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nTypeError: angle_complex() takes 1 positional argument but 2 were given\n",
    "test_result": "False"
  },
  "1233": {
    "question_id": "mbpp/123",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef angle_complex(real, imag):\n    return cmath.phase(real + imag)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1234": {
    "question_id": "mbpp/123",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef angle_complex(real, imag):\n    return cmath.phase(real + imag)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1235": {
    "question_id": "mbpp/123",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef angle_complex(real, imag):\n    return cmath.phase(real + imag)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1236": {
    "question_id": "mbpp/123",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef angle_complex(real, imag):\n    return cmath.phase(real + imag)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1237": {
    "question_id": "mbpp/123",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef angle_complex(real, imag):\n    return cmath.phase(real + imag)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1238": {
    "question_id": "mbpp/123",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef angle_complex(x):\n    return cmath.phase(x)",
    "test_output": "FAILED: TypeError: angle_complex() takes 1 positional argument but 2 were given\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nTypeError: angle_complex() takes 1 positional argument but 2 were given\n",
    "test_result": "False"
  },
  "1239": {
    "question_id": "mbpp/123",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef angle_complex(real, imag):\n    return cmath.phase(real + imag)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1240": {
    "question_id": "mbpp/124",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_length(s, n):\n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            current_diff = count0 - count1\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1241": {
    "question_id": "mbpp/124",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_length(s, n):\n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            current_diff = count0 - count1\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1242": {
    "question_id": "mbpp/124",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_length(s, n):\n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            current_diff = count0 - count1\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1243": {
    "question_id": "mbpp/124",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_length(s, n):\n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            current_diff = count0 - count1\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1244": {
    "question_id": "mbpp/124",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_length(s, n):\n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            current_diff = count0 - count1\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1245": {
    "question_id": "mbpp/124",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_length(s, n):\n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            current_diff = count0 - count1\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1246": {
    "question_id": "mbpp/124",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_length(s, n):\n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            current_diff = count0 - count1\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1247": {
    "question_id": "mbpp/124",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_length(s, n):\n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            current_diff = count0 - count1\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1248": {
    "question_id": "mbpp/124",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_length(s, n):\n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            current_diff = count0 - count1\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1249": {
    "question_id": "mbpp/124",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_length(s, n):\n    max_diff = 0\n    for i in range(n):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            current_diff = count0 - count1\n            if current_diff > max_diff:\n                max_diff = current_diff\n    return max_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1250": {
    "question_id": "mbpp/125",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    if g == 0:\n        return 0\n    \n    sum_divisors = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                sum_divisors += i\n            else:\n                sum_divisors += i + g // i\n    return sum_divisors",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1251": {
    "question_id": "mbpp/125",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    sum_divisors = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                sum_divisors += i\n            else:\n                sum_divisors += i + g // i\n    return sum_divisors",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1252": {
    "question_id": "mbpp/125",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sum_common_divisors(a, b):\n    def get_divisors(n):\n        divisors = set()\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return divisors\n    \n    divisors_a = get_divisors(a)\n    divisors_b = get_divisors(b)\n    common_divisors = divisors_a & divisors_b\n    return sum(common_divisors)",
    "test_output": "FAILED: TypeError: 'int' object is not iterable\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nTypeError: 'int' object is not iterable\n",
    "test_result": "False"
  },
  "1253": {
    "question_id": "mbpp/125",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sum_common_divisors(a, b):\n    def get_divisors(n):\n        divisors = set()\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return divisors\n    \n    divisors_a = get_divisors(a)\n    divisors_b = get_divisors(b)\n    common_divisors = divisors_a & divisors_b\n    return sum(common_divisors)",
    "test_output": "FAILED: TypeError: 'int' object is not iterable\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nTypeError: 'int' object is not iterable\n",
    "test_result": "False"
  },
  "1254": {
    "question_id": "mbpp/125",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sum_common_divisors(a, b):\n    def get_divisors(n):\n        divisors = set()\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return divisors\n    \n    divisors_a = get_divisors(a)\n    divisors_b = get_divisors(b)\n    common_divisors = divisors_a.intersection(divisors_b)\n    return sum(common_divisors)",
    "test_output": "FAILED: TypeError: 'int' object is not iterable\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nTypeError: 'int' object is not iterable\n",
    "test_result": "False"
  },
  "1255": {
    "question_id": "mbpp/125",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    sum_divisors = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i == g // i:\n                sum_divisors += i\n            else:\n                sum_divisors += i + g // i\n    return sum_divisors",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1256": {
    "question_id": "mbpp/125",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    sum_divisors = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                sum_divisors += i\n            else:\n                sum_divisors += i + g // i\n    return sum_divisors",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1257": {
    "question_id": "mbpp/125",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    sum_divisors = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                sum_divisors += i\n            else:\n                sum_divisors += i + g // i\n    return sum_divisors",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1258": {
    "question_id": "mbpp/125",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    sum_divisors = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                sum_divisors += i\n            else:\n                sum_divisors += i + g // i\n    return sum_divisors",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1259": {
    "question_id": "mbpp/125",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    sum_divisors = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            sum_divisors += i\n            if i != g // i:\n                sum_divisors += g // i\n    return sum_divisors",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1260": {
    "question_id": "mbpp/126",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_int(a, b):\n    if a == 0 or b == 0:\n        return 0\n    result = 0\n    abs_a = abs(a)\n    abs_b = abs(b)\n    for _ in range(abs_b):\n        result += abs_a\n    if (a < 0 and b > 0) or (a > 0 and b < 0):\n        return -result\n    else:\n        return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1261": {
    "question_id": "mbpp/126",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_int(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if b < 0:\n        return -multiply_int(a, -b)\n    return a + multiply_int(a, b - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1262": {
    "question_id": "mbpp/126",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_int(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if b < 0:\n        return -multiply_int(a, -b)\n    if b == 1:\n        return a\n    return a + multiply_int(a, b - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1263": {
    "question_id": "mbpp/126",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_int(a, b):\n    if a == 0 or b == 0:\n        return 0\n    result = 0\n    abs_a = abs(a)\n    abs_b = abs(b)\n    for _ in range(abs_b):\n        result += abs_a\n    if (a < 0 and b > 0) or (a > 0 and b < 0):\n        return -result\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1264": {
    "question_id": "mbpp/126",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_int(a, b):\n    if a == 0 or b == 0:\n        return 0\n    result = 0\n    abs_a = abs(a)\n    abs_b = abs(b)\n    for _ in range(abs_b):\n        result += abs_a\n    if (a < 0 and b > 0) or (a > 0 and b < 0):\n        return -result\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1265": {
    "question_id": "mbpp/126",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_int(a, b):\n    if a == 0 or b == 0:\n        return 0\n    result = 0\n    abs_a = abs(a)\n    abs_b = abs(b)\n    for _ in range(abs_b):\n        result += abs_a\n    if (a < 0 and b > 0) or (a > 0 and b < 0):\n        return -result\n    else:\n        return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1266": {
    "question_id": "mbpp/126",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_int(a, b):\n    if a == 0 or b == 0:\n        return 0\n    result = 0\n    abs_a = abs(a)\n    abs_b = abs(b)\n    for _ in range(abs_b):\n        result += abs_a\n    if (a < 0 and b > 0) or (a > 0 and b < 0):\n        return -result\n    else:\n        return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1267": {
    "question_id": "mbpp/126",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_int(a, b):\n    if a == 0 or b == 0:\n        return 0\n    result = 0\n    abs_a = abs(a)\n    abs_b = abs(b)\n    for _ in range(abs_b):\n        result += abs_a\n    if (a < 0 and b > 0) or (a > 0 and b < 0):\n        return -result\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1268": {
    "question_id": "mbpp/126",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_int(a, b):\n    if a == 0 or b == 0:\n        return 0\n    result = 0\n    abs_a = abs(a)\n    abs_b = abs(b)\n    for _ in range(abs_b):\n        result += abs_a\n    if (a < 0 and b > 0) or (a > 0 and b < 0):\n        return -result\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1269": {
    "question_id": "mbpp/126",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_int(a, b):\n    if a == 0 or b == 0:\n        return 0\n    result = 0\n    abs_a = abs(a)\n    abs_b = abs(b)\n    for _ in range(abs_b):\n        result += abs_a\n    if (a < 0 and b > 0) or (a > 0 and b < 0):\n        return -result\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1270": {
    "question_id": "mbpp/127",
    "model": "deepseek-v3-250324",
    "generation_code": "def long_words(n, words_str):\n    words = words_str.split()\n    return [word for word in words if len(word) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1271": {
    "question_id": "mbpp/127",
    "model": "deepseek-v3-250324",
    "generation_code": "def long_words(n, string):\n    words = string.split()\n    return [word for word in words if len(word) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1272": {
    "question_id": "mbpp/127",
    "model": "deepseek-v3-250324",
    "generation_code": "def long_words(n, string):\n    words = string.split()\n    return [word for word in words if len(word) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1273": {
    "question_id": "mbpp/127",
    "model": "deepseek-v3-250324",
    "generation_code": "def long_words(n, string):\n    words = string.split()\n    return [word for word in words if len(word) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1274": {
    "question_id": "mbpp/127",
    "model": "deepseek-v3-250324",
    "generation_code": "def long_words(n, string):\n    words = string.split()\n    return [word for word in words if len(word) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1275": {
    "question_id": "mbpp/127",
    "model": "deepseek-v3-250324",
    "generation_code": "def long_words(n, string):\n    words = string.split()\n    return [word for word in words if len(word) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1276": {
    "question_id": "mbpp/127",
    "model": "deepseek-v3-250324",
    "generation_code": "def long_words(n, string):\n    words = string.split()\n    return [word for word in words if len(word) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1277": {
    "question_id": "mbpp/127",
    "model": "deepseek-v3-250324",
    "generation_code": "def long_words(n, string):\n    words = string.split()\n    return [word for word in words if len(word) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1278": {
    "question_id": "mbpp/127",
    "model": "deepseek-v3-250324",
    "generation_code": "def long_words(n, string):\n    words = string.split()\n    return [word for word in words if len(word) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1279": {
    "question_id": "mbpp/127",
    "model": "deepseek-v3-250324",
    "generation_code": "def long_words(n, string):\n    words = string.split()\n    return [word for word in words if len(word) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1280": {
    "question_id": "mbpp/128",
    "model": "deepseek-v3-250324",
    "generation_code": "def magic_square_test(square):\n    if not square:\n        return False\n    n = len(square)\n    for row in square:\n        if len(row) != n:\n            return False\n    magic_sum = n * (n**2 + 1) // 2\n    \n    # Check rows\n    for row in square:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += square[i][j]\n        if col_sum != magic_sum:\n            return False\n    \n    # Check diagonals\n    diag1 = 0\n    diag2 = 0\n    for i in range(n):\n        diag1 += square[i][i]\n        diag2 += square[i][n - 1 - i]\n    if diag1 != magic_sum or diag2 != magic_sum:\n        return False\n    \n    # Check all numbers from 1 to n^2 are present\n    numbers = set()\n    for row in square:\n        for num in row:\n            numbers.add(num)\n    if numbers != set(range(1, n**2 + 1)):\n        return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1281": {
    "question_id": "mbpp/128",
    "model": "deepseek-v3-250324",
    "generation_code": "def magic_square_test(square):\n    if not square:\n        return False\n    n = len(square)\n    for row in square:\n        if len(row) != n:\n            return False\n    \n    magic_sum = n * (n**2 + 1) // 2\n    \n    # Check rows\n    for row in square:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += square[i][j]\n        if col_sum != magic_sum:\n            return False\n    \n    # Check main diagonal\n    diag_sum = 0\n    for i in range(n):\n        diag_sum += square[i][i]\n    if diag_sum != magic_sum:\n        return False\n    \n    # Check anti-diagonal\n    anti_diag_sum = 0\n    for i in range(n):\n        anti_diag_sum += square[i][n - 1 - i]\n    if anti_diag_sum != magic_sum:\n        return False\n    \n    # Check all numbers from 1 to n^2 are present exactly once\n    numbers = set()\n    for row in square:\n        for num in row:\n            if num < 1 or num > n**2:\n                return False\n            numbers.add(num)\n    if len(numbers) != n**2:\n        return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1282": {
    "question_id": "mbpp/128",
    "model": "deepseek-v3-250324",
    "generation_code": "def magic_square_test(square):\n    if not square:\n        return False\n    n = len(square)\n    for row in square:\n        if len(row) != n:\n            return False\n    \n    magic_sum = n * (n**2 + 1) // 2\n    \n    # Check rows\n    for row in square:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += square[i][j]\n        if col_sum != magic_sum:\n            return False\n    \n    # Check diagonals\n    diag1 = 0\n    diag2 = 0\n    for i in range(n):\n        diag1 += square[i][i]\n        diag2 += square[i][n - 1 - i]\n    if diag1 != magic_sum or diag2 != magic_sum:\n        return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1283": {
    "question_id": "mbpp/128",
    "model": "deepseek-v3-250324",
    "generation_code": "def magic_square_test(square):\n    if not square:\n        return False\n    n = len(square)\n    for row in square:\n        if len(row) != n:\n            return False\n    \n    magic_sum = sum(square[0])\n    \n    # Check rows\n    for row in square:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += square[i][j]\n        if col_sum != magic_sum:\n            return False\n    \n    # Check diagonals\n    diag1 = 0\n    diag2 = 0\n    for i in range(n):\n        diag1 += square[i][i]\n        diag2 += square[i][n-1-i]\n    if diag1 != magic_sum or diag2 != magic_sum:\n        return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1284": {
    "question_id": "mbpp/128",
    "model": "deepseek-v3-250324",
    "generation_code": "def magic_square_test(square):\n    if not square:\n        return False\n    n = len(square)\n    for row in square:\n        if len(row) != n:\n            return False\n    magic_sum = n * (n**2 + 1) // 2\n    \n    # Check rows\n    for row in square:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += square[i][j]\n        if col_sum != magic_sum:\n            return False\n    \n    # Check diagonals\n    diag1 = 0\n    diag2 = 0\n    for i in range(n):\n        diag1 += square[i][i]\n        diag2 += square[i][n - 1 - i]\n    if diag1 != magic_sum or diag2 != magic_sum:\n        return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1285": {
    "question_id": "mbpp/128",
    "model": "deepseek-v3-250324",
    "generation_code": "def magic_square_test(square):\n    if not square:\n        return False\n    n = len(square)\n    for row in square:\n        if len(row) != n:\n            return False\n    \n    magic_sum = n * (n**2 + 1) // 2\n    \n    # Check rows\n    for row in square:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += square[i][j]\n        if column_sum != magic_sum:\n            return False\n    \n    # Check main diagonal\n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += square[i][i]\n    if diagonal_sum != magic_sum:\n        return False\n    \n    # Check anti-diagonal\n    anti_diagonal_sum = 0\n    for i in range(n):\n        anti_diagonal_sum += square[i][n - 1 - i]\n    if anti_diagonal_sum != magic_sum:\n        return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1286": {
    "question_id": "mbpp/128",
    "model": "deepseek-v3-250324",
    "generation_code": "def magic_square_test(square):\n    if not square:\n        return False\n    n = len(square)\n    for row in square:\n        if len(row) != n:\n            return False\n    magic_sum = sum(square[0])\n    \n    # Check rows\n    for row in square:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += square[i][j]\n        if col_sum != magic_sum:\n            return False\n    \n    # Check diagonals\n    diag1 = 0\n    diag2 = 0\n    for i in range(n):\n        diag1 += square[i][i]\n        diag2 += square[i][n - 1 - i]\n    if diag1 != magic_sum or diag2 != magic_sum:\n        return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1287": {
    "question_id": "mbpp/128",
    "model": "deepseek-v3-250324",
    "generation_code": "def magic_square_test(square):\n    if not square:\n        return False\n    n = len(square)\n    for row in square:\n        if len(row) != n:\n            return False\n    \n    magic_sum = n * (n**2 + 1) // 2\n    \n    # Check rows\n    for row in square:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += square[i][j]\n        if column_sum != magic_sum:\n            return False\n    \n    # Check diagonals\n    diagonal1 = 0\n    diagonal2 = 0\n    for i in range(n):\n        diagonal1 += square[i][i]\n        diagonal2 += square[i][n - 1 - i]\n    if diagonal1 != magic_sum or diagonal2 != magic_sum:\n        return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1288": {
    "question_id": "mbpp/128",
    "model": "deepseek-v3-250324",
    "generation_code": "def magic_square_test(square):\n    if not square:\n        return False\n    n = len(square)\n    for row in square:\n        if len(row) != n:\n            return False\n    \n    magic_sum = sum(square[0])\n    \n    # Check rows\n    for row in square:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += square[i][j]\n        if col_sum != magic_sum:\n            return False\n    \n    # Check diagonals\n    diag1_sum = 0\n    diag2_sum = 0\n    for i in range(n):\n        diag1_sum += square[i][i]\n        diag2_sum += square[i][n - 1 - i]\n    if diag1_sum != magic_sum or diag2_sum != magic_sum:\n        return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1289": {
    "question_id": "mbpp/128",
    "model": "deepseek-v3-250324",
    "generation_code": "def magic_square_test(square):\n    if not square:\n        return False\n    n = len(square)\n    for row in square:\n        if len(row) != n:\n            return False\n    \n    magic_sum = sum(square[0])\n    \n    # Check rows\n    for row in square:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += square[i][j]\n        if col_sum != magic_sum:\n            return False\n    \n    # Check main diagonal\n    diag_sum = 0\n    for i in range(n):\n        diag_sum += square[i][i]\n    if diag_sum != magic_sum:\n        return False\n    \n    # Check anti-diagonal\n    anti_diag_sum = 0\n    for i in range(n):\n        anti_diag_sum += square[i][n - 1 - i]\n    if anti_diag_sum != magic_sum:\n        return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1290": {
    "question_id": "mbpp/129",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return (None, 0)\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = max(frequency, key=frequency.get)\n    max_count = frequency[max_item]\n    return (max_item, max_count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1291": {
    "question_id": "mbpp/129",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return (None, 0)\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = max(frequency.items(), key=lambda x: x[1])\n    return max_item",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1292": {
    "question_id": "mbpp/129",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = max(frequency.items(), key=lambda x: x[1])\n    return max_item",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1293": {
    "question_id": "mbpp/129",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return (None, 0)\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = max(frequency.items(), key=lambda x: x[1])\n    return max_item",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1294": {
    "question_id": "mbpp/129",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return (None, 0)\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = max(frequency.items(), key=lambda x: x[1])\n    return max_item",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1295": {
    "question_id": "mbpp/129",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return (None, 0)\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = max(frequency.keys(), key=lambda x: frequency[x])\n    return (max_item, frequency[max_item])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1296": {
    "question_id": "mbpp/129",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return (None, 0)\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = max(frequency.items(), key=lambda x: x[1])\n    return max_item",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1297": {
    "question_id": "mbpp/129",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return (None, 0)\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = max(frequency, key=frequency.get)\n    return (max_item, frequency[max_item])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1298": {
    "question_id": "mbpp/129",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return (None, 0)\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = max(frequency.items(), key=lambda x: x[1])\n    return max_item",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1299": {
    "question_id": "mbpp/129",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return (None, 0)\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = max(frequency.keys(), key=lambda k: frequency[k])\n    max_count = frequency[max_item]\n    return (max_item, max_count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1300": {
    "question_id": "mbpp/130",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s_list = list(s)\n    vowel_indices = [i for i, char in enumerate(s_list) if char in vowels]\n    vowel_chars = [s_list[i] for i in vowel_indices]\n    vowel_chars.reverse()\n    for idx, char in zip(vowel_indices, vowel_chars):\n        s_list[idx] = char\n    return ''.join(s_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1301": {
    "question_id": "mbpp/130",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s_list = list(s)\n    vowel_indices = [i for i, char in enumerate(s_list) if char in vowels]\n    vowel_chars = [s_list[i] for i in vowel_indices]\n    vowel_chars.reverse()\n    for i, idx in enumerate(vowel_indices):\n        s_list[idx] = vowel_chars[i]\n    return ''.join(s_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1302": {
    "question_id": "mbpp/130",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s_list = list(s)\n    vowel_indices = [i for i, char in enumerate(s_list) if char in vowels]\n    vowel_chars = [s_list[i] for i in vowel_indices]\n    vowel_chars.reverse()\n    for i, idx in enumerate(vowel_indices):\n        s_list[idx] = vowel_chars[i]\n    return ''.join(s_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1303": {
    "question_id": "mbpp/130",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s_list = list(s)\n    vowel_indices = [i for i, char in enumerate(s_list) if char in vowels]\n    vowel_chars = [s_list[i] for i in vowel_indices]\n    vowel_chars.reverse()\n    for idx, char in zip(vowel_indices, vowel_chars):\n        s_list[idx] = char\n    return ''.join(s_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1304": {
    "question_id": "mbpp/130",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s_list = list(s)\n    vowel_indices = [i for i, char in enumerate(s_list) if char in vowels]\n    vowel_chars = [s_list[i] for i in vowel_indices]\n    vowel_chars.reverse()\n    for idx, char in zip(vowel_indices, vowel_chars):\n        s_list[idx] = char\n    return ''.join(s_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1305": {
    "question_id": "mbpp/130",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s_list = list(s)\n    vowel_indices = [i for i, char in enumerate(s_list) if char in vowels]\n    vowel_chars = [s_list[i] for i in vowel_indices]\n    vowel_chars.reverse()\n    for idx, char in zip(vowel_indices, vowel_chars):\n        s_list[idx] = char\n    return ''.join(s_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1306": {
    "question_id": "mbpp/130",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s_list = list(s)\n    vowel_indices = [i for i, char in enumerate(s_list) if char in vowels]\n    vowel_chars = [s_list[i] for i in vowel_indices]\n    vowel_chars.reverse()\n    for idx, char in zip(vowel_indices, vowel_chars):\n        s_list[idx] = char\n    return ''.join(s_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1307": {
    "question_id": "mbpp/130",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s_list = list(s)\n    vowel_indices = [i for i, char in enumerate(s_list) if char in vowels]\n    vowel_chars = [s_list[i] for i in vowel_indices]\n    vowel_chars.reverse()\n    for i, idx in enumerate(vowel_indices):\n        s_list[idx] = vowel_chars[i]\n    return ''.join(s_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1308": {
    "question_id": "mbpp/130",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s_list = list(s)\n    i = 0\n    j = len(s_list) - 1\n    \n    while i < j:\n        if s_list[i] in vowels and s_list[j] in vowels:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n        elif s_list[i] in vowels:\n            j -= 1\n        elif s_list[j] in vowels:\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    \n    return ''.join(s_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1309": {
    "question_id": "mbpp/130",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s_list = list(s)\n    vowel_indices = [i for i, char in enumerate(s_list) if char in vowels]\n    vowel_chars = [s_list[i] for i in vowel_indices]\n    vowel_chars.reverse()\n    for idx, char in zip(vowel_indices, vowel_chars):\n        s_list[idx] = char\n    return ''.join(s_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1310": {
    "question_id": "mbpp/131",
    "model": "deepseek-v3-250324",
    "generation_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1311": {
    "question_id": "mbpp/131",
    "model": "deepseek-v3-250324",
    "generation_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1312": {
    "question_id": "mbpp/131",
    "model": "deepseek-v3-250324",
    "generation_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1313": {
    "question_id": "mbpp/131",
    "model": "deepseek-v3-250324",
    "generation_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1314": {
    "question_id": "mbpp/131",
    "model": "deepseek-v3-250324",
    "generation_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1315": {
    "question_id": "mbpp/131",
    "model": "deepseek-v3-250324",
    "generation_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1316": {
    "question_id": "mbpp/131",
    "model": "deepseek-v3-250324",
    "generation_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1317": {
    "question_id": "mbpp/131",
    "model": "deepseek-v3-250324",
    "generation_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1318": {
    "question_id": "mbpp/131",
    "model": "deepseek-v3-250324",
    "generation_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1319": {
    "question_id": "mbpp/131",
    "model": "deepseek-v3-250324",
    "generation_code": "def tup_string(tup):\n    return ''.join(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1320": {
    "question_id": "mbpp/132",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_negativenum = lambda numbers: sum(filter(lambda x: x < 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1321": {
    "question_id": "mbpp/132",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_negativenum = lambda numbers: sum(filter(lambda x: x < 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1322": {
    "question_id": "mbpp/132",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_negativenum = lambda numbers: sum(filter(lambda x: x < 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1323": {
    "question_id": "mbpp/132",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_negativenum = lambda numbers: sum(filter(lambda x: x < 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1324": {
    "question_id": "mbpp/132",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_negativenum = lambda numbers: sum(filter(lambda x: x < 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1325": {
    "question_id": "mbpp/132",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_negativenum = lambda numbers: sum(filter(lambda x: x < 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1326": {
    "question_id": "mbpp/132",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_negativenum = lambda numbers: sum(filter(lambda x: x < 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1327": {
    "question_id": "mbpp/132",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_negativenum = lambda numbers: sum(filter(lambda x: x < 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1328": {
    "question_id": "mbpp/132",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_negativenum = lambda lst: sum(filter(lambda x: x < 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1329": {
    "question_id": "mbpp/132",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_negativenum = lambda nums: sum(filter(lambda x: x < 0, nums))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1330": {
    "question_id": "mbpp/133",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_last(arr, p, d):\n    for _ in range(p):\n        last_element = arr[-1]\n        if last_element % 2 == 0:\n            arr[-1] = last_element // 2\n        else:\n            arr[-1] = last_element + d\n    \n    if arr[-1] % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"",
    "test_output": "FAILED: expect EVEN,in fact ODD",
    "test_result": "False"
  },
  "1331": {
    "question_id": "mbpp/133",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_last(arr, p, d):\n    if not arr:\n        return \"ODD\"\n    \n    last = arr[-1]\n    for _ in range(p):\n        if d == 0:\n            last += 1\n        else:\n            last -= 1\n    \n    return \"EVEN\" if last % 2 == 0 else \"ODD\"",
    "test_output": "FAILED: expect EVEN,in fact ODD",
    "test_result": "False"
  },
  "1332": {
    "question_id": "mbpp/133",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_last(arr, p, d):\n    if not arr:\n        return \"ODD\"\n    \n    last_element = arr[-1]\n    \n    for _ in range(p):\n        if d == 1:\n            last_element += 1\n        elif d == 0:\n            last_element -= 1\n    \n    if last_element % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"",
    "test_output": "FAILED: expect EVEN,in fact ODD",
    "test_result": "False"
  },
  "1333": {
    "question_id": "mbpp/133",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_last(arr, p, d):\n    for _ in range(p):\n        last_element = arr[-1]\n        if last_element % 2 == 0:\n            arr[-1] = last_element // 2\n        else:\n            arr[-1] = last_element + d\n    return \"EVEN\" if arr[-1] % 2 == 0 else \"ODD\"",
    "test_output": "FAILED: expect EVEN,in fact ODD",
    "test_result": "False"
  },
  "1334": {
    "question_id": "mbpp/133",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_last(arr, p, d):\n    if not arr:\n        return \"ODD\"\n    \n    last = arr[-1]\n    for _ in range(p):\n        if d == 0:\n            last += 1\n        else:\n            last -= 1\n    \n    return \"EVEN\" if last % 2 == 0 else \"ODD\"",
    "test_output": "FAILED: expect EVEN,in fact ODD",
    "test_result": "False"
  },
  "1335": {
    "question_id": "mbpp/133",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_last(arr, p, d):\n    if not arr:\n        return \"ODD\"\n    \n    last_element = arr[-1]\n    for _ in range(p):\n        if d == 0:\n            last_element += 1\n        else:\n            last_element -= 1\n    \n    return \"EVEN\" if last_element % 2 == 0 else \"ODD\"",
    "test_output": "FAILED: expect EVEN,in fact ODD",
    "test_result": "False"
  },
  "1336": {
    "question_id": "mbpp/133",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_last(arr, p, d):\n    for _ in range(p):\n        last_element = arr[-1]\n        if last_element % 2 == 0:\n            arr[-1] = last_element // 2\n        else:\n            arr[-1] = last_element + d\n    return \"EVEN\" if arr[-1] % 2 == 0 else \"ODD\"",
    "test_output": "FAILED: expect EVEN,in fact ODD",
    "test_result": "False"
  },
  "1337": {
    "question_id": "mbpp/133",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_last(arr, p, d):\n    for _ in range(p):\n        if d == 0:\n            arr = [x + 1 for x in arr]\n        else:\n            arr = [x - 1 for x in arr]\n    last_element = arr[-1]\n    return \"EVEN\" if last_element % 2 == 0 else \"ODD\"",
    "test_output": "FAILED: expect EVEN,in fact ODD",
    "test_result": "False"
  },
  "1338": {
    "question_id": "mbpp/133",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_last(arr, p, d):\n    if not arr:\n        return \"ODD\"\n    \n    last = arr[-1]\n    for _ in range(p):\n        if d == 0:\n            last += 1\n        else:\n            last -= 1\n    \n    return \"EVEN\" if last % 2 == 0 else \"ODD\"",
    "test_output": "FAILED: expect EVEN,in fact ODD",
    "test_result": "False"
  },
  "1339": {
    "question_id": "mbpp/133",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_last(arr, p, d):\n    for _ in range(p):\n        last_element = arr[-1]\n        if last_element % 2 == 0:\n            arr[-1] = last_element // 2\n        else:\n            arr[-1] = last_element + d\n    \n    if arr[-1] % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"",
    "test_output": "FAILED: expect EVEN,in fact ODD",
    "test_result": "False"
  },
  "1340": {
    "question_id": "mbpp/134",
    "model": "deepseek-v3-250324",
    "generation_code": "def hexagonal_num(n):\n    return n * (2 * n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1341": {
    "question_id": "mbpp/134",
    "model": "deepseek-v3-250324",
    "generation_code": "def hexagonal_num(n):\n    return n * (2 * n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1342": {
    "question_id": "mbpp/134",
    "model": "deepseek-v3-250324",
    "generation_code": "def hexagonal_num(n):\n    return n * (2 * n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1343": {
    "question_id": "mbpp/134",
    "model": "deepseek-v3-250324",
    "generation_code": "def hexagonal_num(n):\n    return n * (2 * n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1344": {
    "question_id": "mbpp/134",
    "model": "deepseek-v3-250324",
    "generation_code": "def hexagonal_num(n):\n    if n < 1:\n        return 0\n    return n * (2 * n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1345": {
    "question_id": "mbpp/134",
    "model": "deepseek-v3-250324",
    "generation_code": "def hexagonal_num(n):\n    if n < 1:\n        return 0\n    return n * (2 * n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1346": {
    "question_id": "mbpp/134",
    "model": "deepseek-v3-250324",
    "generation_code": "def hexagonal_num(n):\n    if n < 1:\n        return 0\n    return n * (2 * n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1347": {
    "question_id": "mbpp/134",
    "model": "deepseek-v3-250324",
    "generation_code": "def hexagonal_num(n):\n    return n * (2 * n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1348": {
    "question_id": "mbpp/134",
    "model": "deepseek-v3-250324",
    "generation_code": "def hexagonal_num(n):\n    if n < 1:\n        return 0\n    return n * (2 * n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1349": {
    "question_id": "mbpp/134",
    "model": "deepseek-v3-250324",
    "generation_code": "def hexagonal_num(n):\n    if n < 1:\n        return 0\n    return n * (2 * n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1350": {
    "question_id": "mbpp/135",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_electbill(units):\n    if units <= 50:\n        return units * 0.50\n    elif units <= 150:\n        return 50 * 0.50 + (units - 50) * 0.75\n    elif units <= 250:\n        return 50 * 0.50 + 100 * 0.75 + (units - 150) * 1.20\n    else:\n        return 50 * 0.50 + 100 * 0.75 + 100 * 1.20 + (units - 250) * 1.50",
    "test_output": "FAILED: expect 246.25,in fact 43.75",
    "test_result": "False"
  },
  "1351": {
    "question_id": "mbpp/135",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_electbill(units):\n    if units <= 50:\n        return units * 0.50\n    elif units <= 150:\n        return 50 * 0.50 + (units - 50) * 0.75\n    elif units <= 250:\n        return 50 * 0.50 + 100 * 0.75 + (units - 150) * 1.20\n    else:\n        return 50 * 0.50 + 100 * 0.75 + 100 * 1.20 + (units - 250) * 1.50",
    "test_output": "FAILED: expect 246.25,in fact 43.75",
    "test_result": "False"
  },
  "1352": {
    "question_id": "mbpp/135",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_electbill(units):\n    if units <= 50:\n        return units * 0.50\n    elif units <= 150:\n        return 50 * 0.50 + (units - 50) * 0.75\n    elif units <= 250:\n        return 50 * 0.50 + 100 * 0.75 + (units - 150) * 1.20\n    else:\n        return 50 * 0.50 + 100 * 0.75 + 100 * 1.20 + (units - 250) * 1.50",
    "test_output": "FAILED: expect 246.25,in fact 43.75",
    "test_result": "False"
  },
  "1353": {
    "question_id": "mbpp/135",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_electbill(units):\n    if units <= 50:\n        return units * 0.50\n    elif units <= 150:\n        return 50 * 0.50 + (units - 50) * 0.75\n    elif units <= 250:\n        return 50 * 0.50 + 100 * 0.75 + (units - 150) * 1.20\n    else:\n        return 50 * 0.50 + 100 * 0.75 + 100 * 1.20 + (units - 250) * 1.50",
    "test_output": "FAILED: expect 246.25,in fact 43.75",
    "test_result": "False"
  },
  "1354": {
    "question_id": "mbpp/135",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_electbill(units):\n    if units <= 50:\n        return units * 2.60\n    elif units <= 100:\n        return 50 * 2.60 + (units - 50) * 3.25\n    else:\n        return 50 * 2.60 + 50 * 3.25 + (units - 100) * 5.26",
    "test_output": "FAILED: expect 246.25,in fact 211.25",
    "test_result": "False"
  },
  "1355": {
    "question_id": "mbpp/135",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_electbill(units):\n    if units <= 50:\n        return units * 0.50\n    elif units <= 150:\n        return 50 * 0.50 + (units - 50) * 0.75\n    elif units <= 250:\n        return 50 * 0.50 + 100 * 0.75 + (units - 150) * 1.20\n    else:\n        return 50 * 0.50 + 100 * 0.75 + 100 * 1.20 + (units - 250) * 1.50",
    "test_output": "FAILED: expect 246.25,in fact 43.75",
    "test_result": "False"
  },
  "1356": {
    "question_id": "mbpp/135",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_electbill(units):\n    if units <= 50:\n        return units * 1.50\n    elif units <= 150:\n        return 50 * 1.50 + (units - 50) * 2.25\n    elif units <= 250:\n        return 50 * 1.50 + 100 * 2.25 + (units - 150) * 3.00\n    else:\n        return 50 * 1.50 + 100 * 2.25 + 100 * 3.00 + (units - 250) * 3.25",
    "test_output": "FAILED: expect 246.25,in fact 131.25",
    "test_result": "False"
  },
  "1357": {
    "question_id": "mbpp/135",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_electbill(units):\n    if units <= 50:\n        return units * 0.50\n    elif units <= 150:\n        return 50 * 0.50 + (units - 50) * 0.75\n    elif units <= 250:\n        return 50 * 0.50 + 100 * 0.75 + (units - 150) * 1.20\n    else:\n        return 50 * 0.50 + 100 * 0.75 + 100 * 1.20 + (units - 250) * 1.50",
    "test_output": "FAILED: expect 246.25,in fact 43.75",
    "test_result": "False"
  },
  "1358": {
    "question_id": "mbpp/135",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_electbill(units):\n    if units <= 50:\n        return units * 0.50\n    elif units <= 150:\n        return 50 * 0.50 + (units - 50) * 0.75\n    elif units <= 250:\n        return 50 * 0.50 + 100 * 0.75 + (units - 150) * 1.20\n    else:\n        return 50 * 0.50 + 100 * 0.75 + 100 * 1.20 + (units - 250) * 1.50",
    "test_output": "FAILED: expect 246.25,in fact 43.75",
    "test_result": "False"
  },
  "1359": {
    "question_id": "mbpp/135",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_electbill(units):\n    if units <= 50:\n        return units * 2.0\n    elif units <= 150:\n        return 50 * 2.0 + (units - 50) * 2.5\n    elif units <= 250:\n        return 50 * 2.0 + 100 * 2.5 + (units - 150) * 3.0\n    else:\n        return 50 * 2.0 + 100 * 2.5 + 100 * 3.0 + (units - 250) * 3.5",
    "test_output": "FAILED: expect 246.25,in fact 162.5",
    "test_result": "False"
  },
  "1360": {
    "question_id": "mbpp/136",
    "model": "deepseek-v3-250324",
    "generation_code": "def zero_count(arr):\n    if not arr:\n        return 0.0\n    zeroes = arr.count(0)\n    return zeroes / len(arr)",
    "test_output": "FAILED: expect 0.15,in fact 0.15384615384615385",
    "test_result": "False"
  },
  "1361": {
    "question_id": "mbpp/136",
    "model": "deepseek-v3-250324",
    "generation_code": "def zero_count(arr):\n    if not arr:\n        return 0.0\n    zeroes = arr.count(0)\n    return zeroes / len(arr)",
    "test_output": "FAILED: expect 0.15,in fact 0.15384615384615385",
    "test_result": "False"
  },
  "1362": {
    "question_id": "mbpp/136",
    "model": "deepseek-v3-250324",
    "generation_code": "def zero_count(nums):\n    if not nums:\n        return 0.0\n    zeroes = nums.count(0)\n    return zeroes / len(nums)",
    "test_output": "FAILED: expect 0.15,in fact 0.15384615384615385",
    "test_result": "False"
  },
  "1363": {
    "question_id": "mbpp/136",
    "model": "deepseek-v3-250324",
    "generation_code": "def zero_count(nums):\n    if not nums:\n        return 0.0\n    zeroes = nums.count(0)\n    return zeroes / len(nums)",
    "test_output": "FAILED: expect 0.15,in fact 0.15384615384615385",
    "test_result": "False"
  },
  "1364": {
    "question_id": "mbpp/136",
    "model": "deepseek-v3-250324",
    "generation_code": "def zero_count(arr):\n    if not arr:\n        return 0.0\n    zeroes = arr.count(0)\n    return zeroes / len(arr)",
    "test_output": "FAILED: expect 0.15,in fact 0.15384615384615385",
    "test_result": "False"
  },
  "1365": {
    "question_id": "mbpp/136",
    "model": "deepseek-v3-250324",
    "generation_code": "def zero_count(arr):\n    if not arr:\n        return 0.0\n    zeroes = arr.count(0)\n    return zeroes / len(arr)",
    "test_output": "FAILED: expect 0.15,in fact 0.15384615384615385",
    "test_result": "False"
  },
  "1366": {
    "question_id": "mbpp/136",
    "model": "deepseek-v3-250324",
    "generation_code": "def zero_count(arr):\n    if not arr:\n        return 0.0\n    zeroes = arr.count(0)\n    return zeroes / len(arr)",
    "test_output": "FAILED: expect 0.15,in fact 0.15384615384615385",
    "test_result": "False"
  },
  "1367": {
    "question_id": "mbpp/136",
    "model": "deepseek-v3-250324",
    "generation_code": "def zero_count(nums):\n    if not nums:\n        return 0.0\n    zeroes = nums.count(0)\n    return zeroes / len(nums)",
    "test_output": "FAILED: expect 0.15,in fact 0.15384615384615385",
    "test_result": "False"
  },
  "1368": {
    "question_id": "mbpp/136",
    "model": "deepseek-v3-250324",
    "generation_code": "def zero_count(nums):\n    if not nums:\n        return 0.0\n    zeroes = nums.count(0)\n    return zeroes / len(nums)",
    "test_output": "FAILED: expect 0.15,in fact 0.15384615384615385",
    "test_result": "False"
  },
  "1369": {
    "question_id": "mbpp/136",
    "model": "deepseek-v3-250324",
    "generation_code": "def zero_count(arr):\n    if not arr:\n        return 0.0\n    zeroes = arr.count(0)\n    return zeroes / len(arr)",
    "test_output": "FAILED: expect 0.15,in fact 0.15384615384615385",
    "test_result": "False"
  },
  "1370": {
    "question_id": "mbpp/137",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    binary = bin(n)[2:]\n    return '0' in binary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1371": {
    "question_id": "mbpp/137",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    return (n & (n - 1)) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1372": {
    "question_id": "mbpp/137",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    binary = bin(n)[2:]\n    return '0' in binary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1373": {
    "question_id": "mbpp/137",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    return (n & (n - 1)) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1374": {
    "question_id": "mbpp/137",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    return (n & (n - 1)) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1375": {
    "question_id": "mbpp/137",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    binary = bin(n)[2:]\n    return binary.count('1') > 1",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1376": {
    "question_id": "mbpp/137",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    binary = bin(n)[2:]\n    return '0' in binary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1377": {
    "question_id": "mbpp/137",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    return (n & (n - 1)) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1378": {
    "question_id": "mbpp/137",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    return (n & (n - 1)) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1379": {
    "question_id": "mbpp/137",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    binary = bin(n)[2:]\n    return binary.count('1') >= 2",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1380": {
    "question_id": "mbpp/138",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef circle_circumference(radius):\n    if radius < 0:\n        return 0\n    return 2 * math.pi * radius",
    "test_output": "FAILED: expect 62.830000000000005,in fact 62.83185307179586",
    "test_result": "False"
  },
  "1381": {
    "question_id": "mbpp/138",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_output": "FAILED: expect 62.830000000000005,in fact 62.83185307179586",
    "test_result": "False"
  },
  "1382": {
    "question_id": "mbpp/138",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_output": "FAILED: expect 62.830000000000005,in fact 62.83185307179586",
    "test_result": "False"
  },
  "1383": {
    "question_id": "mbpp/138",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_output": "FAILED: expect 62.830000000000005,in fact 62.83185307179586",
    "test_result": "False"
  },
  "1384": {
    "question_id": "mbpp/138",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_output": "FAILED: expect 62.830000000000005,in fact 62.83185307179586",
    "test_result": "False"
  },
  "1385": {
    "question_id": "mbpp/138",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_output": "FAILED: expect 62.830000000000005,in fact 62.83185307179586",
    "test_result": "False"
  },
  "1386": {
    "question_id": "mbpp/138",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_output": "FAILED: expect 62.830000000000005,in fact 62.83185307179586",
    "test_result": "False"
  },
  "1387": {
    "question_id": "mbpp/138",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef circle_circumference(radius):\n    if radius < 0:\n        return 0\n    return 2 * math.pi * radius",
    "test_output": "FAILED: expect 62.830000000000005,in fact 62.83185307179586",
    "test_result": "False"
  },
  "1388": {
    "question_id": "mbpp/138",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_output": "FAILED: expect 62.830000000000005,in fact 62.83185307179586",
    "test_result": "False"
  },
  "1389": {
    "question_id": "mbpp/138",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius",
    "test_output": "FAILED: expect 62.830000000000005,in fact 62.83185307179586",
    "test_result": "False"
  },
  "1390": {
    "question_id": "mbpp/139",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_singly(tuples_list):\n    from collections import defaultdict\n    \n    frequency = defaultdict(int)\n    for t in tuples_list:\n        for element in t:\n            frequency[element] += 1\n    \n    singly_elements = [element for element, count in frequency.items() if count == 1]\n    return singly_elements",
    "test_output": "FAILED: expect [3, 4, 5, 7, 1],in fact [3, 7, 1]",
    "test_result": "False"
  },
  "1391": {
    "question_id": "mbpp/139",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_singly(tuples_list):\n    from collections import defaultdict\n    count_dict = defaultdict(int)\n    for t in tuples_list:\n        for element in t:\n            count_dict[element] += 1\n    return [element for element in count_dict if count_dict[element] == 1]",
    "test_output": "FAILED: expect [3, 4, 5, 7, 1],in fact [3, 7, 1]",
    "test_result": "False"
  },
  "1392": {
    "question_id": "mbpp/139",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_singly(tuple_list):\n    from collections import defaultdict\n    \n    count_dict = defaultdict(int)\n    for t in tuple_list:\n        for element in t:\n            count_dict[element] += 1\n    \n    result = [element for element in count_dict if count_dict[element] == 1]\n    return result",
    "test_output": "FAILED: expect [3, 4, 5, 7, 1],in fact [3, 7, 1]",
    "test_result": "False"
  },
  "1393": {
    "question_id": "mbpp/139",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_singly(tuples_list):\n    from collections import defaultdict\n    count_dict = defaultdict(int)\n    for t in tuples_list:\n        for element in t:\n            count_dict[element] += 1\n    singly_elements = [element for element, count in count_dict.items() if count == 1]\n    return singly_elements",
    "test_output": "FAILED: expect [3, 4, 5, 7, 1],in fact [3, 7, 1]",
    "test_result": "False"
  },
  "1394": {
    "question_id": "mbpp/139",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_singly(tuples_list):\n    from collections import defaultdict\n    count_dict = defaultdict(int)\n    for t in tuples_list:\n        for element in t:\n            count_dict[element] += 1\n    return [element for element in count_dict if count_dict[element] == 1]",
    "test_output": "FAILED: expect [3, 4, 5, 7, 1],in fact [3, 7, 1]",
    "test_result": "False"
  },
  "1395": {
    "question_id": "mbpp/139",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_singly(tuples_list):\n    from collections import defaultdict\n    count_dict = defaultdict(int)\n    \n    for t in tuples_list:\n        for num in t:\n            count_dict[num] += 1\n    \n    result = [num for num in count_dict if count_dict[num] == 1]\n    return sorted(result)",
    "test_output": "FAILED: expect [3, 4, 5, 7, 1],in fact [1, 3, 7]",
    "test_result": "False"
  },
  "1396": {
    "question_id": "mbpp/139",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_singly(tuples_list):\n    from collections import defaultdict\n    \n    count_dict = defaultdict(int)\n    for t in tuples_list:\n        for element in t:\n            count_dict[element] += 1\n    \n    result = [element for element in count_dict if count_dict[element] == 1]\n    return result",
    "test_output": "FAILED: expect [3, 4, 5, 7, 1],in fact [3, 7, 1]",
    "test_result": "False"
  },
  "1397": {
    "question_id": "mbpp/139",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_singly(tuples_list):\n    from collections import defaultdict\n    \n    count_dict = defaultdict(int)\n    for t in tuples_list:\n        for element in t:\n            count_dict[element] += 1\n    \n    result = [element for element in count_dict if count_dict[element] == 1]\n    return result",
    "test_output": "FAILED: expect [3, 4, 5, 7, 1],in fact [3, 7, 1]",
    "test_result": "False"
  },
  "1398": {
    "question_id": "mbpp/139",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_singly(tuple_list):\n    from collections import defaultdict\n    count_dict = defaultdict(int)\n    \n    for t in tuple_list:\n        for element in t:\n            count_dict[element] += 1\n    \n    result = [element for element in count_dict if count_dict[element] == 1]\n    return result",
    "test_output": "FAILED: expect [3, 4, 5, 7, 1],in fact [3, 7, 1]",
    "test_result": "False"
  },
  "1399": {
    "question_id": "mbpp/139",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_singly(tuples_list):\n    from collections import defaultdict\n    count_dict = defaultdict(int)\n    for t in tuples_list:\n        for num in t:\n            count_dict[num] += 1\n    return [num for num in count_dict if count_dict[num] == 1]",
    "test_output": "FAILED: expect [3, 4, 5, 7, 1],in fact [3, 7, 1]",
    "test_result": "False"
  },
  "1400": {
    "question_id": "mbpp/140",
    "model": "deepseek-v3-250324",
    "generation_code": "def pancake_sort(arr):\n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_idx = arr.index(max(arr[:curr_size]))\n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                arr[:max_idx+1] = arr[:max_idx+1][::-1]\n            arr[:curr_size] = arr[:curr_size][::-1]\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1401": {
    "question_id": "mbpp/140",
    "model": "deepseek-v3-250324",
    "generation_code": "def pancake_sort(arr):\n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_idx = arr.index(max(arr[:curr_size]))\n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                arr[:max_idx+1] = arr[:max_idx+1][::-1]\n            arr[:curr_size] = arr[:curr_size][::-1]\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1402": {
    "question_id": "mbpp/140",
    "model": "deepseek-v3-250324",
    "generation_code": "def pancake_sort(arr):\n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_idx = arr.index(max(arr[:curr_size]))\n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                arr[:max_idx+1] = arr[:max_idx+1][::-1]\n            arr[:curr_size] = arr[:curr_size][::-1]\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1403": {
    "question_id": "mbpp/140",
    "model": "deepseek-v3-250324",
    "generation_code": "def pancake_sort(arr):\n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_idx = arr.index(max(arr[:curr_size]))\n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                arr[:max_idx+1] = arr[:max_idx+1][::-1]\n            arr[:curr_size] = arr[:curr_size][::-1]\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1404": {
    "question_id": "mbpp/140",
    "model": "deepseek-v3-250324",
    "generation_code": "def pancake_sort(arr):\n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_idx = arr.index(max(arr[:curr_size]))\n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                arr[:max_idx+1] = arr[:max_idx+1][::-1]\n            arr[:curr_size] = arr[:curr_size][::-1]\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1405": {
    "question_id": "mbpp/140",
    "model": "deepseek-v3-250324",
    "generation_code": "def pancake_sort(arr):\n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_idx = arr.index(max(arr[:curr_size]))\n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                arr[:max_idx+1] = arr[:max_idx+1][::-1]\n            arr[:curr_size] = arr[:curr_size][::-1]\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1406": {
    "question_id": "mbpp/140",
    "model": "deepseek-v3-250324",
    "generation_code": "def pancake_sort(arr):\n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_idx = arr.index(max(arr[:curr_size]))\n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                arr[:max_idx+1] = arr[:max_idx+1][::-1]\n            arr[:curr_size] = arr[:curr_size][::-1]\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1407": {
    "question_id": "mbpp/140",
    "model": "deepseek-v3-250324",
    "generation_code": "def pancake_sort(arr):\n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_idx = arr.index(max(arr[:curr_size]))\n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                arr[:max_idx+1] = arr[:max_idx+1][::-1]\n            arr[:curr_size] = arr[:curr_size][::-1]\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1408": {
    "question_id": "mbpp/140",
    "model": "deepseek-v3-250324",
    "generation_code": "def pancake_sort(arr):\n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_idx = arr.index(max(arr[:curr_size]))\n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                arr[:max_idx+1] = arr[:max_idx+1][::-1]\n            arr[:curr_size] = arr[:curr_size][::-1]\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1409": {
    "question_id": "mbpp/140",
    "model": "deepseek-v3-250324",
    "generation_code": "def pancake_sort(arr):\n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_idx = arr.index(max(arr[:curr_size]))\n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                arr[:max_idx+1] = arr[:max_idx+1][::-1]\n            arr[:curr_size] = arr[:curr_size][::-1]\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1410": {
    "question_id": "mbpp/141",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1411": {
    "question_id": "mbpp/141",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1412": {
    "question_id": "mbpp/141",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1413": {
    "question_id": "mbpp/141",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1414": {
    "question_id": "mbpp/141",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1415": {
    "question_id": "mbpp/141",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1416": {
    "question_id": "mbpp/141",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1417": {
    "question_id": "mbpp/141",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1418": {
    "question_id": "mbpp/141",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1419": {
    "question_id": "mbpp/141",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_len = min(len(list1), len(list2), len(list3))\n    for i in range(min_len):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1420": {
    "question_id": "mbpp/142",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lists(t):\n    count = 0\n    for element in t:\n        if isinstance(element, list):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1421": {
    "question_id": "mbpp/142",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lists(t):\n    count = 0\n    for element in t:\n        if isinstance(element, list):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1422": {
    "question_id": "mbpp/142",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lists(t):\n    count = 0\n    for element in t:\n        if isinstance(element, list):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1423": {
    "question_id": "mbpp/142",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lists(t):\n    count = 0\n    for element in t:\n        if isinstance(element, list):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1424": {
    "question_id": "mbpp/142",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lists(t):\n    count = 0\n    for element in t:\n        if isinstance(element, list):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1425": {
    "question_id": "mbpp/142",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lists(t):\n    count = 0\n    for element in t:\n        if isinstance(element, list):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1426": {
    "question_id": "mbpp/142",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lists(t):\n    count = 0\n    for element in t:\n        if isinstance(element, list):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1427": {
    "question_id": "mbpp/142",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lists(t):\n    count = 0\n    for element in t:\n        if isinstance(element, list):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1428": {
    "question_id": "mbpp/142",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lists(t):\n    count = 0\n    for element in t:\n        if isinstance(element, list):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1429": {
    "question_id": "mbpp/142",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lists(t):\n    count = 0\n    for element in t:\n        if isinstance(element, list):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1430": {
    "question_id": "mbpp/143",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Pairs(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += abs(arr[i] - arr[j])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1431": {
    "question_id": "mbpp/143",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Pairs(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += abs(arr[i] - arr[j])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1432": {
    "question_id": "mbpp/143",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Pairs(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += abs(arr[i] - arr[j])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1433": {
    "question_id": "mbpp/143",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Pairs(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1434": {
    "question_id": "mbpp/143",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Pairs(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += abs(arr[i] - arr[j])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1435": {
    "question_id": "mbpp/143",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Pairs(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += abs(arr[i] - arr[j])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1436": {
    "question_id": "mbpp/143",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Pairs(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1437": {
    "question_id": "mbpp/143",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Pairs(arr, n):\n    sum_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum_diff += abs(arr[i] - arr[j])\n    return sum_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1438": {
    "question_id": "mbpp/143",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Pairs(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1439": {
    "question_id": "mbpp/143",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Pairs(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1440": {
    "question_id": "mbpp/144",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return max_val - min_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1441": {
    "question_id": "mbpp/144",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr[1:]:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return max_val - min_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1442": {
    "question_id": "mbpp/144",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return max_val - min_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1443": {
    "question_id": "mbpp/144",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr[1:]:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return max_val - min_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1444": {
    "question_id": "mbpp/144",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return max_val - min_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1445": {
    "question_id": "mbpp/144",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return max_val - min_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1446": {
    "question_id": "mbpp/144",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return max_val - min_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1447": {
    "question_id": "mbpp/144",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return max_val - min_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1448": {
    "question_id": "mbpp/144",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return max_val - min_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1449": {
    "question_id": "mbpp/144",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr[1:]:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return max_val - min_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1450": {
    "question_id": "mbpp/145",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value_string(s):\n    total = 0\n    for char in s:\n        total += ord(char)\n    return total",
    "test_output": "FAILED: expect 112,in fact 674",
    "test_result": "False"
  },
  "1451": {
    "question_id": "mbpp/145",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value_string(s):\n    total = 0\n    for char in s:\n        total += ord(char)\n    return total",
    "test_output": "FAILED: expect 112,in fact 674",
    "test_result": "False"
  },
  "1452": {
    "question_id": "mbpp/145",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value_string(s):\n    if not s:\n        return 0\n    total = 0\n    for char in s:\n        total += ord(char)\n    return total",
    "test_output": "FAILED: expect 112,in fact 674",
    "test_result": "False"
  },
  "1453": {
    "question_id": "mbpp/145",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value_string(s):\n    total = 0\n    for char in s:\n        total += ord(char)\n    return total",
    "test_output": "FAILED: expect 112,in fact 674",
    "test_result": "False"
  },
  "1454": {
    "question_id": "mbpp/145",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value_string(s):\n    total = 0\n    for char in s:\n        total += ord(char)\n    return total",
    "test_output": "FAILED: expect 112,in fact 674",
    "test_result": "False"
  },
  "1455": {
    "question_id": "mbpp/145",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value_string(s):\n    total = 0\n    for char in s:\n        total += ord(char)\n    return total",
    "test_output": "FAILED: expect 112,in fact 674",
    "test_result": "False"
  },
  "1456": {
    "question_id": "mbpp/145",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value_string(s):\n    total = 0\n    for char in s:\n        total += ord(char)\n    return total",
    "test_output": "FAILED: expect 112,in fact 674",
    "test_result": "False"
  },
  "1457": {
    "question_id": "mbpp/145",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value_string(s):\n    total = 0\n    for char in s:\n        total += ord(char)\n    return total",
    "test_output": "FAILED: expect 112,in fact 674",
    "test_result": "False"
  },
  "1458": {
    "question_id": "mbpp/145",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value_string(s):\n    total = 0\n    for char in s:\n        total += ord(char)\n    return total",
    "test_output": "FAILED: expect 112,in fact 674",
    "test_result": "False"
  },
  "1459": {
    "question_id": "mbpp/145",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value_string(s):\n    total = 0\n    for char in s:\n        total += ord(char)\n    return total",
    "test_output": "FAILED: expect 112,in fact 674",
    "test_result": "False"
  },
  "1460": {
    "question_id": "mbpp/146",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_path_sum(triangle, i, j):\n    if i == 0 and j == 0:\n        return triangle[0][0]\n    if j < 0 or j > i:\n        return 0\n    left = max_path_sum(triangle, i - 1, j - 1) if j > 0 else 0\n    right = max_path_sum(triangle, i - 1, j) if j < i else 0\n    return triangle[i][j] + max(left, right)",
    "test_output": "FAILED: expect 14,in fact 12",
    "test_result": "False"
  },
  "1461": {
    "question_id": "mbpp/146",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_path_sum(triangle, i, j):\n    if i == 0 and j == 0:\n        return triangle[0][0]\n    if j < 0 or j > i:\n        return float('-inf')\n    return triangle[i][j] + max(max_path_sum(triangle, i-1, j-1), max_path_sum(triangle, i-1, j))",
    "test_output": "FAILED: expect 14,in fact 12",
    "test_result": "False"
  },
  "1462": {
    "question_id": "mbpp/146",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_path_sum(triangle, i, j):\n    if i == 0 and j == 0:\n        return triangle[0][0]\n    if j < 0 or j > i:\n        return float('-inf')\n    left = max_path_sum(triangle, i-1, j-1) if j > 0 else float('-inf')\n    right = max_path_sum(triangle, i-1, j) if j < i else float('-inf')\n    return triangle[i][j] + max(left, right)",
    "test_output": "FAILED: expect 14,in fact 12",
    "test_result": "False"
  },
  "1463": {
    "question_id": "mbpp/146",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_path_sum(triangle, i, j):\n    if i == 0 and j == 0:\n        return triangle[0][0]\n    if j < 0 or j > i:\n        return float('-inf')\n    return triangle[i][j] + max(max_path_sum(triangle, i-1, j-1), max_path_sum(triangle, i-1, j))",
    "test_output": "FAILED: expect 14,in fact 12",
    "test_result": "False"
  },
  "1464": {
    "question_id": "mbpp/146",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_path_sum(triangle, row, col):\n    if not triangle or row < 0 or col < 0:\n        return 0\n    for i in range(row - 1, -1, -1):\n        for j in range(i + 1):\n            triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])\n    return triangle[0][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1465": {
    "question_id": "mbpp/146",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_path_sum(triangle, row, col):\n    if row == 0:\n        return triangle[0][0]\n    \n    for i in range(1, row + 1):\n        for j in range(i + 1):\n            if j == 0:\n                triangle[i][j] += triangle[i-1][j]\n            elif j == i:\n                triangle[i][j] += triangle[i-1][j-1]\n            else:\n                triangle[i][j] += max(triangle[i-1][j-1], triangle[i-1][j])\n    \n    return max(triangle[row])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1466": {
    "question_id": "mbpp/146",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_path_sum(triangle, row, col):\n    if row == 0:\n        return triangle[0][0]\n    \n    dp = [[0 for _ in range(len(triangle[r]))] for r in range(row + 1)]\n    dp[0][0] = triangle[0][0]\n    \n    for i in range(1, row + 1):\n        for j in range(len(triangle[i])):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + triangle[i][j]\n            elif j == len(triangle[i]) - 1:\n                dp[i][j] = dp[i-1][j-1] + triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\n    \n    return max(dp[row])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1467": {
    "question_id": "mbpp/146",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_path_sum(triangle, row, col):\n    if row == 0:\n        return triangle[0][0]\n    \n    for i in range(1, row + 1):\n        for j in range(len(triangle[i])):\n            if j == 0:\n                triangle[i][j] += triangle[i-1][j]\n            elif j == len(triangle[i]) - 1:\n                triangle[i][j] += triangle[i-1][j-1]\n            else:\n                triangle[i][j] += max(triangle[i-1][j-1], triangle[i-1][j])\n    \n    return max(triangle[row])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1468": {
    "question_id": "mbpp/146",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_path_sum(triangle, row, col):\n    if row == 0:\n        return triangle[0][0]\n    \n    dp = [[0 for _ in range(len(triangle[i]))] for i in range(row + 1)]\n    dp[0][0] = triangle[0][0]\n    \n    for i in range(1, row + 1):\n        for j in range(len(triangle[i])):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + triangle[i][j]\n            elif j == len(triangle[i]) - 1:\n                dp[i][j] = dp[i-1][j-1] + triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\n    \n    return max(dp[row])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1469": {
    "question_id": "mbpp/146",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_path_sum(triangle, row, col):\n    if row == 0:\n        return triangle[0][0]\n    \n    for i in range(1, row + 1):\n        for j in range(i + 1):\n            if j == 0:\n                triangle[i][j] += triangle[i-1][j]\n            elif j == i:\n                triangle[i][j] += triangle[i-1][j-1]\n            else:\n                triangle[i][j] += max(triangle[i-1][j-1], triangle[i-1][j])\n    \n    return max(triangle[row])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1470": {
    "question_id": "mbpp/147",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits_twoparts(n):\n    max_sum = 0\n    s = str(n)\n    for i in range(1, len(s)):\n        part1 = int(s[:i])\n        part2 = int(s[i:])\n        current_sum = sum(int(d) for d in str(part1)) + sum(int(d) for d in str(part2))\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum if max_sum != 0 else sum(int(d) for d in str(n))",
    "test_output": "FAILED: expect 17,in fact 8",
    "test_result": "False"
  },
  "1471": {
    "question_id": "mbpp/147",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits_twoparts(number):\n    max_sum = 0\n    s = str(number)\n    for i in range(1, len(s)):\n        part1 = int(s[:i])\n        part2 = int(s[i:])\n        current_sum = sum(int(d) for d in str(part1)) + sum(int(d) for d in str(part2))\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_output": "FAILED: expect 17,in fact 8",
    "test_result": "False"
  },
  "1472": {
    "question_id": "mbpp/147",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits_twoparts(number):\n    max_sum = 0\n    s = str(number)\n    for i in range(1, len(s)):\n        part1 = int(s[:i])\n        part2 = int(s[i:])\n        current_sum = sum(int(d) for d in str(part1)) + sum(int(d) for d in str(part2))\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_output": "FAILED: expect 17,in fact 8",
    "test_result": "False"
  },
  "1473": {
    "question_id": "mbpp/147",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits_twoparts(number):\n    max_sum = 0\n    str_num = str(number)\n    for i in range(1, len(str_num)):\n        part1 = int(str_num[:i])\n        part2 = int(str_num[i:])\n        current_sum = sum(int(d) for d in str(part1)) + sum(int(d) for d in str(part2))\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_output": "FAILED: expect 17,in fact 8",
    "test_result": "False"
  },
  "1474": {
    "question_id": "mbpp/147",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits_twoparts(number):\n    max_sum = -1\n    str_num = str(number)\n    for i in range(1, len(str_num)):\n        part1 = int(str_num[:i])\n        part2 = int(str_num[i:])\n        current_sum = sum(int(d) for d in str(part1)) + sum(int(d) for d in str(part2))\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_output": "FAILED: expect 17,in fact 8",
    "test_result": "False"
  },
  "1475": {
    "question_id": "mbpp/147",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits_twoparts(number):\n    max_sum = 0\n    str_num = str(number)\n    for i in range(1, len(str_num)):\n        part1 = int(str_num[:i])\n        part2 = int(str_num[i:])\n        current_sum = sum(int(d) for d in str(part1)) + sum(int(d) for d in str(part2))\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_output": "FAILED: expect 17,in fact 8",
    "test_result": "False"
  },
  "1476": {
    "question_id": "mbpp/147",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits_twoparts(number):\n    max_sum = 0\n    s = str(number)\n    for i in range(1, len(s)):\n        part1 = int(s[:i])\n        part2 = int(s[i:])\n        current_sum = sum(int(d) for d in str(part1)) + sum(int(d) for d in str(part2))\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_output": "FAILED: expect 17,in fact 8",
    "test_result": "False"
  },
  "1477": {
    "question_id": "mbpp/147",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits_twoparts(number):\n    max_sum = 0\n    s = str(number)\n    for i in range(1, len(s)):\n        part1 = int(s[:i])\n        part2 = int(s[i:])\n        current_sum = sum(int(d) for d in str(part1)) + sum(int(d) for d in str(part2))\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_output": "FAILED: expect 17,in fact 8",
    "test_result": "False"
  },
  "1478": {
    "question_id": "mbpp/147",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits_twoparts(number):\n    max_sum = -1\n    s = str(number)\n    for i in range(1, len(s)):\n        part1 = int(s[:i])\n        part2 = int(s[i:])\n        current_sum = sum(int(d) for d in str(part1)) + sum(int(d) for d in str(part2))\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_output": "FAILED: expect 17,in fact 8",
    "test_result": "False"
  },
  "1479": {
    "question_id": "mbpp/147",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits_twoparts(number):\n    s = str(number)\n    max_sum = 0\n    for i in range(1, len(s)):\n        part1 = int(s[:i])\n        part2 = int(s[i:])\n        current_sum = sum(int(d) for d in str(part1)) + sum(int(d) for d in str(part2))\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_output": "FAILED: expect 17,in fact 8",
    "test_result": "False"
  },
  "1480": {
    "question_id": "mbpp/148",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1481": {
    "question_id": "mbpp/148",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1482": {
    "question_id": "mbpp/148",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1483": {
    "question_id": "mbpp/148",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1484": {
    "question_id": "mbpp/148",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1485": {
    "question_id": "mbpp/148",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1486": {
    "question_id": "mbpp/148",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1487": {
    "question_id": "mbpp/148",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1488": {
    "question_id": "mbpp/148",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1489": {
    "question_id": "mbpp/148",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1490": {
    "question_id": "mbpp/149",
    "model": "deepseek-v3-250324",
    "generation_code": "def does_Contain_B(a, b, num):\n    if a == num or b == num:\n        return True\n    while True:\n        c = a + b\n        if c == num:\n            return True\n        if c > num:\n            return False\n        a, b = b, c",
    "test_output": "FAILED: Error parsing test_output - Expecting value: line 1 column 43 (char 42)",
    "test_result": "False"
  },
  "1491": {
    "question_id": "mbpp/149",
    "model": "deepseek-v3-250324",
    "generation_code": "def does_Contain_B(a, b, num):\n    if a == num or b == num:\n        return True\n    while True:\n        c = a + b\n        if c == num:\n            return True\n        if c > num:\n            return False\n        a, b = b, c",
    "test_output": "FAILED: Error parsing test_output - Expecting value: line 1 column 43 (char 42)",
    "test_result": "False"
  },
  "1492": {
    "question_id": "mbpp/149",
    "model": "deepseek-v3-250324",
    "generation_code": "def does_Contain_B(a, b, num):\n    if a == num or b == num:\n        return True\n    while True:\n        c = a + b\n        if c == num:\n            return True\n        if c > num:\n            return False\n        a, b = b, c",
    "test_output": "FAILED: Error parsing test_output - Expecting value: line 1 column 43 (char 42)",
    "test_result": "False"
  },
  "1493": {
    "question_id": "mbpp/149",
    "model": "deepseek-v3-250324",
    "generation_code": "def does_Contain_B(a, b, num):\n    if a == num or b == num:\n        return True\n    while True:\n        c = a + b\n        if c == num:\n            return True\n        if c > num:\n            return False\n        a, b = b, c",
    "test_output": "FAILED: Error parsing test_output - Expecting value: line 1 column 43 (char 42)",
    "test_result": "False"
  },
  "1494": {
    "question_id": "mbpp/149",
    "model": "deepseek-v3-250324",
    "generation_code": "def does_Contain_B(a, b, num):\n    if a == num or b == num:\n        return True\n    while True:\n        c = a + b\n        if c == num:\n            return True\n        if c > num:\n            return False\n        a, b = b, c",
    "test_output": "FAILED: Error parsing test_output - Expecting value: line 1 column 43 (char 42)",
    "test_result": "False"
  },
  "1495": {
    "question_id": "mbpp/149",
    "model": "deepseek-v3-250324",
    "generation_code": "def does_Contain_B(a, b, num):\n    if a == num or b == num:\n        return True\n    while True:\n        c = a + b\n        if c == num:\n            return True\n        if c > num:\n            return False\n        a, b = b, c",
    "test_output": "FAILED: Error parsing test_output - Expecting value: line 1 column 43 (char 42)",
    "test_result": "False"
  },
  "1496": {
    "question_id": "mbpp/149",
    "model": "deepseek-v3-250324",
    "generation_code": "def does_Contain_B(a, b, num):\n    if a == num or b == num:\n        return True\n    while True:\n        c = a + b\n        if c == num:\n            return True\n        if c > num:\n            return False\n        a, b = b, c",
    "test_output": "FAILED: Error parsing test_output - Expecting value: line 1 column 43 (char 42)",
    "test_result": "False"
  },
  "1497": {
    "question_id": "mbpp/149",
    "model": "deepseek-v3-250324",
    "generation_code": "def does_Contain_B(a, b, num):\n    if a == num or b == num:\n        return True\n    while True:\n        c = a + b\n        if c == num:\n            return True\n        if c > num:\n            return False\n        a, b = b, c",
    "test_output": "FAILED: Error parsing test_output - Expecting value: line 1 column 43 (char 42)",
    "test_result": "False"
  },
  "1498": {
    "question_id": "mbpp/149",
    "model": "deepseek-v3-250324",
    "generation_code": "def does_Contain_B(a, b, num):\n    if a == num or b == num:\n        return True\n    while True:\n        c = a + b\n        if c == num:\n            return True\n        if c > num:\n            return False\n        a, b = b, c",
    "test_output": "FAILED: Error parsing test_output - Expecting value: line 1 column 43 (char 42)",
    "test_result": "False"
  },
  "1499": {
    "question_id": "mbpp/149",
    "model": "deepseek-v3-250324",
    "generation_code": "def does_Contain_B(a, b, num):\n    if a == num or b == num:\n        return True\n    while True:\n        c = a + b\n        if c == num:\n            return True\n        if c > num:\n            return False\n        a, b = b, c",
    "test_output": "FAILED: Error parsing test_output - Expecting value: line 1 column 43 (char 42)",
    "test_result": "False"
  },
  "1500": {
    "question_id": "mbpp/150",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_coprime(a, b):\n    return math.gcd(a, b) == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1501": {
    "question_id": "mbpp/150",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_coprime(a, b):\n    return math.gcd(a, b) == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1502": {
    "question_id": "mbpp/150",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_coprime(a, b):\n    return math.gcd(a, b) == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1503": {
    "question_id": "mbpp/150",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_coprime(a, b):\n    return math.gcd(a, b) == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1504": {
    "question_id": "mbpp/150",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_coprime(a, b):\n    return math.gcd(a, b) == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1505": {
    "question_id": "mbpp/150",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_coprime(a, b):\n    return math.gcd(a, b) == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1506": {
    "question_id": "mbpp/150",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_coprime(a, b):\n    return math.gcd(a, b) == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1507": {
    "question_id": "mbpp/150",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_coprime(a, b):\n    return math.gcd(a, b) == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1508": {
    "question_id": "mbpp/150",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_coprime(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return gcd(a, b) == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1509": {
    "question_id": "mbpp/150",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_coprime(a, b):\n    return math.gcd(a, b) == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1510": {
    "question_id": "mbpp/151",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1511": {
    "question_id": "mbpp/151",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1512": {
    "question_id": "mbpp/151",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1513": {
    "question_id": "mbpp/151",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    merged = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    \n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    \n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1514": {
    "question_id": "mbpp/151",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1515": {
    "question_id": "mbpp/151",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    merged = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    \n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    \n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1516": {
    "question_id": "mbpp/151",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1517": {
    "question_id": "mbpp/151",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    merged = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    \n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    \n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1518": {
    "question_id": "mbpp/151",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    merged = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    \n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    \n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1519": {
    "question_id": "mbpp/151",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    merged = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    \n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    \n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1520": {
    "question_id": "mbpp/152",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_vertex(a, b, c):\n    x_vertex = -b / (2 * a)\n    y_vertex = a * (x_vertex ** 2) + b * x_vertex + c\n    return (round(x_vertex, 2), round(y_vertex, 2))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.2222222222222223),in fact (-0.44, 2.22)",
    "test_result": "False"
  },
  "1521": {
    "question_id": "mbpp/152",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_vertex(a, b, c):\n    h = -b / (2 * a)\n    k = a * h ** 2 + b * h + c\n    return (round(h, 2), round(k, 2))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.2222222222222223),in fact (-0.44, 2.22)",
    "test_result": "False"
  },
  "1522": {
    "question_id": "mbpp/152",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_vertex(a, b, c):\n    x_vertex = -b / (2 * a)\n    y_vertex = a * (x_vertex ** 2) + b * x_vertex + c\n    return (round(x_vertex, 2), round(y_vertex, 2))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.2222222222222223),in fact (-0.44, 2.22)",
    "test_result": "False"
  },
  "1523": {
    "question_id": "mbpp/152",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_vertex(a, b, c):\n    h = -b / (2 * a)\n    k = a * h ** 2 + b * h + c\n    return (round(h, 2), round(k, 2))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.2222222222222223),in fact (-0.44, 2.22)",
    "test_result": "False"
  },
  "1524": {
    "question_id": "mbpp/152",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_vertex(a, b, c):\n    h = -b / (2 * a)\n    k = a * h ** 2 + b * h + c\n    return (round(h, 2), round(k, 2))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.2222222222222223),in fact (-0.44, 2.22)",
    "test_result": "False"
  },
  "1525": {
    "question_id": "mbpp/152",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_vertex(a, b, c):\n    h = -b / (2 * a)\n    k = a * h ** 2 + b * h + c\n    return (round(h, 2), round(k, 2))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.2222222222222223),in fact (-0.44, 2.22)",
    "test_result": "False"
  },
  "1526": {
    "question_id": "mbpp/152",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_vertex(a, b, c):\n    h = -b / (2 * a)\n    k = a * h ** 2 + b * h + c\n    return (round(h, 2), round(k, 2))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.2222222222222223),in fact (-0.44, 2.22)",
    "test_result": "False"
  },
  "1527": {
    "question_id": "mbpp/152",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_vertex(a, b, c):\n    x_vertex = -b / (2 * a)\n    y_vertex = a * (x_vertex ** 2) + b * x_vertex + c\n    return (round(x_vertex, 2), round(y_vertex, 2))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.2222222222222223),in fact (-0.44, 2.22)",
    "test_result": "False"
  },
  "1528": {
    "question_id": "mbpp/152",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_vertex(a, b, c):\n    x_vertex = -b / (2 * a)\n    y_vertex = a * (x_vertex ** 2) + b * x_vertex + c\n    return (round(x_vertex, 2), round(y_vertex, 2))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.2222222222222223),in fact (-0.44, 2.22)",
    "test_result": "False"
  },
  "1529": {
    "question_id": "mbpp/152",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_vertex(a, b, c):\n    h = -b / (2 * a)\n    k = a * h ** 2 + b * h + c\n    return (round(h, 2), round(k, 2))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.2222222222222223),in fact (-0.44, 2.22)",
    "test_result": "False"
  },
  "1530": {
    "question_id": "mbpp/153",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n):\n    return [sublist[n] for sublist in lst if len(sublist) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1531": {
    "question_id": "mbpp/153",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n):\n    return [sublist[n] for sublist in lst if len(sublist) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1532": {
    "question_id": "mbpp/153",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n):\n    return [sub_lst[n] for sub_lst in lst if n < len(sub_lst)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1533": {
    "question_id": "mbpp/153",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n):\n    return [sub_lst[n] for sub_lst in lst if len(sub_lst) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1534": {
    "question_id": "mbpp/153",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n):\n    return [sub_lst[n] for sub_lst in lst if len(sub_lst) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1535": {
    "question_id": "mbpp/153",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n):\n    return [sublist[n] for sublist in lst if len(sublist) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1536": {
    "question_id": "mbpp/153",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n):\n    return [sublist[n] for sublist in lst if len(sublist) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1537": {
    "question_id": "mbpp/153",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n):\n    return [sub_lst[n] for sub_lst in lst if len(sub_lst) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1538": {
    "question_id": "mbpp/153",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n):\n    return [sub_lst[n] for sub_lst in lst if len(sub_lst) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1539": {
    "question_id": "mbpp/153",
    "model": "deepseek-v3-250324",
    "generation_code": "def specified_element(lst, n):\n    return [sublist[n] for sublist in lst if len(sublist) > n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1540": {
    "question_id": "mbpp/154",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA  # This is a 32-bit mask with even bits set (1010...)\n    return n ^ mask",
    "test_output": "FAILED: expect 0,in fact 2863311520",
    "test_result": "False"
  },
  "1541": {
    "question_id": "mbpp/154",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA  # This is a 32-bit mask with even bits set (10101010...)\n    return n ^ mask",
    "test_output": "FAILED: expect 0,in fact 2863311520",
    "test_result": "False"
  },
  "1542": {
    "question_id": "mbpp/154",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA  # Binary: 10101010101010101010101010101010\n    return n ^ mask",
    "test_output": "FAILED: expect 0,in fact 2863311520",
    "test_result": "False"
  },
  "1543": {
    "question_id": "mbpp/154",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA  # This is a 32-bit mask with all even bits set (bits 1, 3, 5, etc.)\n    return n ^ mask",
    "test_output": "FAILED: expect 0,in fact 2863311520",
    "test_result": "False"
  },
  "1544": {
    "question_id": "mbpp/154",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA  # Binary: 10101010101010101010101010101010\n    return n ^ mask",
    "test_output": "FAILED: expect 0,in fact 2863311520",
    "test_result": "False"
  },
  "1545": {
    "question_id": "mbpp/154",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA  # This is 10101010... in binary (32 bits)\n    return n ^ mask",
    "test_output": "FAILED: expect 0,in fact 2863311520",
    "test_result": "False"
  },
  "1546": {
    "question_id": "mbpp/154",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA  # Binary: 10101010101010101010101010101010\n    return n ^ mask",
    "test_output": "FAILED: expect 0,in fact 2863311520",
    "test_result": "False"
  },
  "1547": {
    "question_id": "mbpp/154",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA  # Binary: 10101010... (32 bits)\n    return n ^ mask",
    "test_output": "FAILED: expect 0,in fact 2863311520",
    "test_result": "False"
  },
  "1548": {
    "question_id": "mbpp/154",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA  # This is a 32-bit mask with all even bits set (bits 1,3,5,...)\n    return n ^ mask",
    "test_output": "FAILED: expect 0,in fact 2863311520",
    "test_result": "False"
  },
  "1549": {
    "question_id": "mbpp/154",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA  # This is 10101010... in binary (32 bits)\n    return n ^ mask",
    "test_output": "FAILED: expect 0,in fact 2863311520",
    "test_result": "False"
  },
  "1550": {
    "question_id": "mbpp/155",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_int_str(t):\n    return tuple(tuple(int(item) for item in inner) for inner in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1551": {
    "question_id": "mbpp/155",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_int_str(t):\n    return tuple(tuple(int(item) for item in inner) for inner in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1552": {
    "question_id": "mbpp/155",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_int_str(t):\n    return tuple(tuple(int(item) for item in inner_tuple) for inner_tuple in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1553": {
    "question_id": "mbpp/155",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_int_str(t):\n    return tuple(tuple(int(item) for item in inner) for inner in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1554": {
    "question_id": "mbpp/155",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_int_str(t):\n    return tuple(tuple(int(item) for item in inner) for inner in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1555": {
    "question_id": "mbpp/155",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_int_str(t):\n    return tuple(tuple(int(item) for item in inner) for inner in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1556": {
    "question_id": "mbpp/155",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_int_str(t):\n    return tuple(tuple(int(item) for item in inner) for inner in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1557": {
    "question_id": "mbpp/155",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_int_str(t):\n    return tuple(tuple(int(item) for item in sub_tuple) for sub_tuple in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1558": {
    "question_id": "mbpp/155",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_int_str(t):\n    return tuple(tuple(int(item) for item in inner_tuple) for inner_tuple in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1559": {
    "question_id": "mbpp/155",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_int_str(t):\n    return tuple(tuple(int(item) for item in inner) for inner in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1560": {
    "question_id": "mbpp/156",
    "model": "deepseek-v3-250324",
    "generation_code": "def encode_list(lst):\n    if not lst:\n        return []\n    \n    encoded = []\n    current_val = lst[0]\n    count = 1\n    \n    for val in lst[1:]:\n        if val == current_val:\n            count += 1\n        else:\n            encoded.append([count, current_val])\n            current_val = val\n            count = 1\n    encoded.append([count, current_val])\n    \n    return encoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1561": {
    "question_id": "mbpp/156",
    "model": "deepseek-v3-250324",
    "generation_code": "def encode_list(lst):\n    if not lst:\n        return []\n    \n    encoded = []\n    current_val = lst[0]\n    count = 1\n    \n    for val in lst[1:]:\n        if val == current_val:\n            count += 1\n        else:\n            encoded.append([count, current_val])\n            current_val = val\n            count = 1\n    encoded.append([count, current_val])\n    \n    return encoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1562": {
    "question_id": "mbpp/156",
    "model": "deepseek-v3-250324",
    "generation_code": "def encode_list(lst):\n    if not lst:\n        return []\n    \n    encoded = []\n    current_val = lst[0]\n    count = 1\n    \n    for val in lst[1:]:\n        if val == current_val:\n            count += 1\n        else:\n            encoded.append([count, current_val])\n            current_val = val\n            count = 1\n    \n    encoded.append([count, current_val])\n    return encoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1563": {
    "question_id": "mbpp/156",
    "model": "deepseek-v3-250324",
    "generation_code": "def encode_list(lst):\n    if not lst:\n        return []\n    \n    encoded = []\n    current_val = lst[0]\n    count = 1\n    \n    for val in lst[1:]:\n        if val == current_val:\n            count += 1\n        else:\n            encoded.append([count, current_val])\n            current_val = val\n            count = 1\n    encoded.append([count, current_val])\n    \n    return encoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1564": {
    "question_id": "mbpp/156",
    "model": "deepseek-v3-250324",
    "generation_code": "def encode_list(lst):\n    if not lst:\n        return []\n    \n    encoded = []\n    current_val = lst[0]\n    count = 1\n    \n    for val in lst[1:]:\n        if val == current_val:\n            count += 1\n        else:\n            encoded.append([count, current_val])\n            current_val = val\n            count = 1\n    encoded.append([count, current_val])\n    \n    return encoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1565": {
    "question_id": "mbpp/156",
    "model": "deepseek-v3-250324",
    "generation_code": "def encode_list(lst):\n    if not lst:\n        return []\n    \n    encoded = []\n    current_val = lst[0]\n    count = 1\n    \n    for val in lst[1:]:\n        if val == current_val:\n            count += 1\n        else:\n            encoded.append([count, current_val])\n            current_val = val\n            count = 1\n    encoded.append([count, current_val])\n    \n    return encoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1566": {
    "question_id": "mbpp/156",
    "model": "deepseek-v3-250324",
    "generation_code": "def encode_list(lst):\n    if not lst:\n        return []\n    \n    encoded = []\n    current_val = lst[0]\n    count = 1\n    \n    for val in lst[1:]:\n        if val == current_val:\n            count += 1\n        else:\n            encoded.append([count, current_val])\n            current_val = val\n            count = 1\n    encoded.append([count, current_val])\n    \n    return encoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1567": {
    "question_id": "mbpp/156",
    "model": "deepseek-v3-250324",
    "generation_code": "def encode_list(lst):\n    if not lst:\n        return []\n    \n    encoded = []\n    current_val = lst[0]\n    count = 1\n    \n    for val in lst[1:]:\n        if val == current_val:\n            count += 1\n        else:\n            encoded.append([count, current_val])\n            current_val = val\n            count = 1\n    encoded.append([count, current_val])\n    \n    return encoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1568": {
    "question_id": "mbpp/156",
    "model": "deepseek-v3-250324",
    "generation_code": "def encode_list(lst):\n    if not lst:\n        return []\n    \n    encoded = []\n    current_val = lst[0]\n    count = 1\n    \n    for val in lst[1:]:\n        if val == current_val:\n            count += 1\n        else:\n            encoded.append([count, current_val])\n            current_val = val\n            count = 1\n    encoded.append([count, current_val])\n    \n    return encoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1569": {
    "question_id": "mbpp/156",
    "model": "deepseek-v3-250324",
    "generation_code": "def encode_list(lst):\n    if not lst:\n        return []\n    \n    encoded = []\n    current_val = lst[0]\n    count = 1\n    \n    for val in lst[1:]:\n        if val == current_val:\n            count += 1\n        else:\n            encoded.append([count, current_val])\n            current_val = val\n            count = 1\n    encoded.append([count, current_val])\n    \n    return encoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1570": {
    "question_id": "mbpp/157",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Ops(arr, n, k):\n    if not arr or n <= 0:\n        return 0\n    \n    max_count = 0\n    freq = {}\n    \n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n    \n    return n - max_count",
    "test_output": "FAILED: expect -1,in fact 3",
    "test_result": "False"
  },
  "1571": {
    "question_id": "mbpp/157",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Ops(arr, n, k):\n    if not arr:\n        return 0\n    max_count = max(arr.count(x) for x in arr)\n    return n - max_count",
    "test_output": "FAILED: expect -1,in fact 3",
    "test_result": "False"
  },
  "1572": {
    "question_id": "mbpp/157",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Ops(arr, n, k):\n    if not arr or n == 0:\n        return 0\n    max_freq = 0\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n    return n - max_freq",
    "test_output": "FAILED: expect -1,in fact 3",
    "test_result": "False"
  },
  "1573": {
    "question_id": "mbpp/157",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Ops(arr, n, k):\n    if not arr:\n        return 0\n    max_freq = 0\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n    return n - max_freq",
    "test_output": "FAILED: expect -1,in fact 3",
    "test_result": "False"
  },
  "1574": {
    "question_id": "mbpp/157",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Ops(arr, n, k):\n    if not arr:\n        return 0\n    max_freq = 0\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n    return n - max_freq",
    "test_output": "FAILED: expect -1,in fact 3",
    "test_result": "False"
  },
  "1575": {
    "question_id": "mbpp/157",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Ops(arr, n, k):\n    max_freq = 0\n    freq = {}\n    \n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n    \n    return n - max_freq",
    "test_output": "FAILED: expect -1,in fact 3",
    "test_result": "False"
  },
  "1576": {
    "question_id": "mbpp/157",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Ops(arr, n, k):\n    max_freq = 0\n    freq = {}\n    \n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n    \n    return n - max_freq",
    "test_output": "FAILED: expect -1,in fact 3",
    "test_result": "False"
  },
  "1577": {
    "question_id": "mbpp/157",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Ops(arr, n, k):\n    max_freq = 0\n    freq = {}\n    \n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n    \n    return n - max_freq",
    "test_output": "FAILED: expect -1,in fact 3",
    "test_result": "False"
  },
  "1578": {
    "question_id": "mbpp/157",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Ops(arr, n, k):\n    if not arr:\n        return 0\n    max_freq = 0\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n    return n - max_freq",
    "test_output": "FAILED: expect -1,in fact 3",
    "test_result": "False"
  },
  "1579": {
    "question_id": "mbpp/157",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Ops(arr, n, k):\n    if not arr:\n        return 0\n    max_freq = 0\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n    return n - max_freq",
    "test_output": "FAILED: expect -1,in fact 3",
    "test_result": "False"
  },
  "1580": {
    "question_id": "mbpp/158",
    "model": "deepseek-v3-250324",
    "generation_code": "def month_season(month, day):\n    month = month.lower()\n    if month in ['december', 'january', 'february']:\n        return 'winter'\n    elif month in ['march', 'april', 'may']:\n        return 'spring'\n    elif month in ['june', 'july', 'august']:\n        return 'summer'\n    elif month in ['september', 'october', 'november']:\n        return 'fall'\n    else:\n        return 'winter'  # default case, though shouldn't happen with valid input",
    "test_output": "FAILED: expect autumn,in fact fall",
    "test_result": "False"
  },
  "1581": {
    "question_id": "mbpp/158",
    "model": "deepseek-v3-250324",
    "generation_code": "def month_season(month, day):\n    month = month.lower()\n    if month in ['december', 'january', 'february']:\n        return 'winter'\n    elif month in ['march', 'april', 'may']:\n        return 'spring'\n    elif month in ['june', 'july', 'august']:\n        return 'summer'\n    elif month in ['september', 'october', 'november']:\n        return 'autumn'\n    else:\n        return 'unknown'",
    "test_output": "FAILED: expect spring,in fact summer",
    "test_result": "False"
  },
  "1582": {
    "question_id": "mbpp/158",
    "model": "deepseek-v3-250324",
    "generation_code": "def month_season(month, day):\n    month = month.lower()\n    if month in ['december', 'january', 'february']:\n        return 'winter'\n    elif month in ['march', 'april', 'may']:\n        return 'spring'\n    elif month in ['june', 'july', 'august']:\n        return 'summer'\n    elif month in ['september', 'october', 'november']:\n        return 'autumn'\n    else:\n        return 'unknown'",
    "test_output": "FAILED: expect spring,in fact summer",
    "test_result": "False"
  },
  "1583": {
    "question_id": "mbpp/158",
    "model": "deepseek-v3-250324",
    "generation_code": "def month_season(month, day):\n    seasons = {\n        'winter': [('December', 21), ('January', 1), ('February', 1), ('March', 19)],\n        'spring': [('March', 20), ('April', 1), ('May', 1), ('June', 20)],\n        'summer': [('June', 21), ('July', 1), ('August', 1), ('September', 21)],\n        'autumn': [('September', 22), ('October', 1), ('November', 1), ('December', 20)]\n    }\n    \n    for season, months in seasons.items():\n        for m, d in months:\n            if month == m:\n                if (month == 'March' and day >= 20) or (month == 'June' and day >= 21) or (month == 'September' and day >= 22) or (month == 'December' and day >= 21):\n                    if season == 'winter':\n                        return 'spring'\n                    elif season == 'spring':\n                        return 'summer'\n                    elif season == 'summer':\n                        return 'autumn'\n                    elif season == 'autumn':\n                        return 'winter'\n                return season\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1584": {
    "question_id": "mbpp/158",
    "model": "deepseek-v3-250324",
    "generation_code": "def month_season(month, day):\n    seasons = {\n        'winter': [('December', 21), ('January', 1), ('February', 1), ('March', 19)],\n        'spring': [('March', 20), ('April', 1), ('May', 1), ('June', 20)],\n        'summer': [('June', 21), ('July', 1), ('August', 1), ('September', 20)],\n        'fall': [('September', 21), ('October', 1), ('November', 1), ('December', 20)]\n    }\n    \n    for season, months in seasons.items():\n        for m, d in months:\n            if month == m and day >= d:\n                return season\n            if month == m and day < d:\n                continue\n    return 'winter'",
    "test_output": "FAILED: expect autumn,in fact fall",
    "test_result": "False"
  },
  "1585": {
    "question_id": "mbpp/158",
    "model": "deepseek-v3-250324",
    "generation_code": "def month_season(month, day):\n    month = month.lower()\n    if month in ['december', 'january', 'february']:\n        return 'winter'\n    elif month in ['march', 'april', 'may']:\n        if month == 'march' and day >= 20:\n            return 'spring'\n        elif month == 'may' and day > 31:\n            return 'summer'\n        else:\n            return 'spring'\n    elif month in ['june', 'july', 'august']:\n        if month == 'june' and day < 21:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month in ['september', 'october', 'november']:\n        if month == 'september' and day >= 22:\n            return 'autumn'\n        elif month == 'november' and day > 30:\n            return 'winter'\n        else:\n            return 'autumn'\n    else:\n        return 'winter'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1586": {
    "question_id": "mbpp/158",
    "model": "deepseek-v3-250324",
    "generation_code": "def month_season(month, day):\n    month = month.lower()\n    if month in ['december', 'january', 'february']:\n        return 'winter'\n    elif month in ['march', 'april', 'may']:\n        return 'spring'\n    elif month in ['june', 'july', 'august']:\n        return 'summer'\n    elif month in ['september', 'october', 'november']:\n        return 'fall'\n    else:\n        return 'unknown'",
    "test_output": "FAILED: expect autumn,in fact fall",
    "test_result": "False"
  },
  "1587": {
    "question_id": "mbpp/158",
    "model": "deepseek-v3-250324",
    "generation_code": "def month_season(month, day):\n    month = month.lower()\n    if month in ['december', 'january', 'february']:\n        return 'winter'\n    elif month in ['march', 'april', 'may']:\n        return 'spring'\n    elif month in ['june', 'july', 'august']:\n        return 'summer'\n    elif month in ['september', 'october', 'november']:\n        return 'autumn'\n    else:\n        return 'unknown'",
    "test_output": "FAILED: expect spring,in fact summer",
    "test_result": "False"
  },
  "1588": {
    "question_id": "mbpp/158",
    "model": "deepseek-v3-250324",
    "generation_code": "def month_season(month, day):\n    month = month.lower()\n    if month in ['december', 'january', 'february']:\n        return 'winter'\n    elif month in ['march', 'april', 'may']:\n        return 'spring'\n    elif month in ['june', 'july', 'august']:\n        return 'summer'\n    elif month in ['september', 'october', 'november']:\n        return 'fall'\n    else:\n        return 'unknown'",
    "test_output": "FAILED: expect autumn,in fact fall",
    "test_result": "False"
  },
  "1589": {
    "question_id": "mbpp/158",
    "model": "deepseek-v3-250324",
    "generation_code": "def month_season(month, day):\n    month = month.lower()\n    if month in ['december', 'january', 'february']:\n        return 'winter'\n    elif month in ['march', 'april', 'may']:\n        return 'spring'\n    elif month in ['june', 'july', 'august']:\n        return 'summer'\n    elif month in ['september', 'october', 'november']:\n        return 'autumn'\n    else:\n        return 'unknown'",
    "test_output": "FAILED: expect spring,in fact summer",
    "test_result": "False"
  },
  "1590": {
    "question_id": "mbpp/159",
    "model": "deepseek-v3-250324",
    "generation_code": "def solution(a, b, n):\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder >= 0 and remainder % b == 0:\n            y = remainder // b\n            return ('x = ', x, ', y = ', y)\n    return None",
    "test_output": "FAILED: expect No solution,in fact None",
    "test_result": "False"
  },
  "1591": {
    "question_id": "mbpp/159",
    "model": "deepseek-v3-250324",
    "generation_code": "def solution(a, b, n):\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder >= 0 and remainder % b == 0:\n            y = remainder // b\n            return ('x = ', x, ', y = ', y)\n    return None",
    "test_output": "FAILED: expect No solution,in fact None",
    "test_result": "False"
  },
  "1592": {
    "question_id": "mbpp/159",
    "model": "deepseek-v3-250324",
    "generation_code": "def solution(a, b, n):\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder >= 0 and remainder % b == 0:\n            y = remainder // b\n            return ('x = ', x, ', y = ', y)\n    return None",
    "test_output": "FAILED: expect No solution,in fact None",
    "test_result": "False"
  },
  "1593": {
    "question_id": "mbpp/159",
    "model": "deepseek-v3-250324",
    "generation_code": "def solution(a, b, n):\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if y >= 0:\n                return ('x = ', x, ', y = ', y)\n    return None",
    "test_output": "FAILED: expect No solution,in fact None",
    "test_result": "False"
  },
  "1594": {
    "question_id": "mbpp/159",
    "model": "deepseek-v3-250324",
    "generation_code": "def solution(a, b, n):\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder >= 0 and remainder % b == 0:\n            y = remainder // b\n            return ('x = ', x, ', y = ', y)\n    return None",
    "test_output": "FAILED: expect No solution,in fact None",
    "test_result": "False"
  },
  "1595": {
    "question_id": "mbpp/159",
    "model": "deepseek-v3-250324",
    "generation_code": "def solution(a, b, n):\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder >= 0 and remainder % b == 0:\n            y = remainder // b\n            return ('x = ', x, ', y = ', y)\n    return None",
    "test_output": "FAILED: expect No solution,in fact None",
    "test_result": "False"
  },
  "1596": {
    "question_id": "mbpp/159",
    "model": "deepseek-v3-250324",
    "generation_code": "def solution(a, b, n):\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder >= 0 and remainder % b == 0:\n            y = remainder // b\n            return ('x = ', x, ', y = ', y)\n    return None",
    "test_output": "FAILED: expect No solution,in fact None",
    "test_result": "False"
  },
  "1597": {
    "question_id": "mbpp/159",
    "model": "deepseek-v3-250324",
    "generation_code": "def solution(a, b, n):\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder >= 0 and remainder % b == 0:\n            y = remainder // b\n            return ('x = ', x, ', y = ', y)\n    return None",
    "test_output": "FAILED: expect No solution,in fact None",
    "test_result": "False"
  },
  "1598": {
    "question_id": "mbpp/159",
    "model": "deepseek-v3-250324",
    "generation_code": "def solution(a, b, n):\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if y >= 0:\n                return ('x = ', x, ', y = ', y)\n    return None",
    "test_output": "FAILED: expect No solution,in fact None",
    "test_result": "False"
  },
  "1599": {
    "question_id": "mbpp/159",
    "model": "deepseek-v3-250324",
    "generation_code": "def solution(a, b, n):\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder >= 0 and remainder % b == 0:\n            y = remainder // b\n            return ('x = ', x, ', y = ', y)\n    return None",
    "test_output": "FAILED: expect No solution,in fact None",
    "test_result": "False"
  },
  "1600": {
    "question_id": "mbpp/160",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1601": {
    "question_id": "mbpp/160",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_elements(list1, list2):\n    return [item for item in list1 if item not in list2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1602": {
    "question_id": "mbpp/160",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1603": {
    "question_id": "mbpp/160",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1604": {
    "question_id": "mbpp/160",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_elements(list1, list2):\n    return [item for item in list1 if item not in list2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1605": {
    "question_id": "mbpp/160",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_elements(list1, list2):\n    return [item for item in list1 if item not in list2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1606": {
    "question_id": "mbpp/160",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1607": {
    "question_id": "mbpp/160",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1608": {
    "question_id": "mbpp/160",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1609": {
    "question_id": "mbpp/160",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1610": {
    "question_id": "mbpp/161",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1611": {
    "question_id": "mbpp/161",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1612": {
    "question_id": "mbpp/161",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1613": {
    "question_id": "mbpp/161",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1614": {
    "question_id": "mbpp/161",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1615": {
    "question_id": "mbpp/161",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1616": {
    "question_id": "mbpp/161",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1617": {
    "question_id": "mbpp/161",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1618": {
    "question_id": "mbpp/161",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1619": {
    "question_id": "mbpp/161",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1620": {
    "question_id": "mbpp/162",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    perimeter = sides * length\n    apothem = length / (2 * math.tan(math.pi / sides))\n    area = 0.5 * perimeter * apothem\n    return area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1621": {
    "question_id": "mbpp/162",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    numerator = sides * (length ** 2)\n    denominator = 4 * math.tan(math.pi / sides)\n    area = numerator / denominator\n    return area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1622": {
    "question_id": "mbpp/162",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    area = (sides * length ** 2) / (4 * math.tan(math.pi / sides))\n    return area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1623": {
    "question_id": "mbpp/162",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    area = (sides * length ** 2) / (4 * math.tan(math.pi / sides))\n    return area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1624": {
    "question_id": "mbpp/162",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    area = (sides * length ** 2) / (4 * math.tan(math.pi / sides))\n    return area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1625": {
    "question_id": "mbpp/162",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    perimeter = sides * length\n    apothem = length / (2 * math.tan(math.pi / sides))\n    area = (perimeter * apothem) / 2\n    return area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1626": {
    "question_id": "mbpp/162",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    numerator = sides * (length ** 2)\n    denominator = 4 * math.tan(math.pi / sides)\n    return numerator / denominator",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1627": {
    "question_id": "mbpp/162",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    perimeter = sides * length\n    apothem = length / (2 * math.tan(math.pi / sides))\n    area = (perimeter * apothem) / 2\n    return area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1628": {
    "question_id": "mbpp/162",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    return (sides * length ** 2) / (4 * math.tan(math.pi / sides))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1629": {
    "question_id": "mbpp/162",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    area = (sides * length ** 2) / (4 * math.tan(math.pi / sides))\n    return area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1630": {
    "question_id": "mbpp/163",
    "model": "deepseek-v3-250324",
    "generation_code": "def areEquivalent(a, b):\n    def sum_divisors(n):\n        if n == 0:\n            return 0\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if i == n // i:\n                    total += i\n                else:\n                    total += i + n // i\n        return total\n    \n    return sum_divisors(a) == sum_divisors(b)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1631": {
    "question_id": "mbpp/163",
    "model": "deepseek-v3-250324",
    "generation_code": "def areEquivalent(a, b):\n    def sum_divisors(n):\n        if n == 0:\n            return 0\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if i == n // i:\n                    total += i\n                else:\n                    total += i + n // i\n        return total\n    \n    return sum_divisors(a) == sum_divisors(b)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1632": {
    "question_id": "mbpp/163",
    "model": "deepseek-v3-250324",
    "generation_code": "def areEquivalent(a, b):\n    def sum_divisors(n):\n        if n == 0:\n            return 0\n        sum_div = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                sum_div += i\n        return sum_div\n    \n    return sum_divisors(a) == sum_divisors(b)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1633": {
    "question_id": "mbpp/163",
    "model": "deepseek-v3-250324",
    "generation_code": "def areEquivalent(a, b):\n    def sum_divisors(n):\n        if n == 0:\n            return 0\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if i == n // i:\n                    total += i\n                else:\n                    total += i + n // i\n        return total\n    \n    return sum_divisors(a) == sum_divisors(b)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1634": {
    "question_id": "mbpp/163",
    "model": "deepseek-v3-250324",
    "generation_code": "def areEquivalent(a, b):\n    def sum_divisors(n):\n        if n == 0:\n            return 0\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if i == n // i:\n                    total += i\n                else:\n                    total += i + n // i\n        return total\n    \n    return sum_divisors(a) == sum_divisors(b)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1635": {
    "question_id": "mbpp/163",
    "model": "deepseek-v3-250324",
    "generation_code": "def areEquivalent(a, b):\n    def sum_divisors(n):\n        if n == 0:\n            return 0\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if i == n // i:\n                    total += i\n                else:\n                    total += i + n // i\n        return total\n    \n    return sum_divisors(a) == sum_divisors(b)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1636": {
    "question_id": "mbpp/163",
    "model": "deepseek-v3-250324",
    "generation_code": "def areEquivalent(a, b):\n    def sum_divisors(n):\n        if n == 0:\n            return 0\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if i == n // i:\n                    total += i\n                else:\n                    total += i + n // i\n        return total\n    \n    return sum_divisors(a) == sum_divisors(b)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1637": {
    "question_id": "mbpp/163",
    "model": "deepseek-v3-250324",
    "generation_code": "def areEquivalent(a, b):\n    def sum_divisors(n):\n        if n == 0:\n            return 0\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n    \n    return sum_divisors(a) == sum_divisors(b)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1638": {
    "question_id": "mbpp/163",
    "model": "deepseek-v3-250324",
    "generation_code": "def areEquivalent(a, b):\n    def sum_divisors(n):\n        if n == 0:\n            return 0\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if i == n // i:\n                    total += i\n                else:\n                    total += i + n // i\n        return total\n    \n    return sum_divisors(a) == sum_divisors(b)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1639": {
    "question_id": "mbpp/163",
    "model": "deepseek-v3-250324",
    "generation_code": "def areEquivalent(a, b):\n    def sum_divisors(n):\n        if n == 0:\n            return 0\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if i == n // i:\n                    total += i\n                else:\n                    total += i + n // i\n        return total\n    \n    return sum_divisors(a) == sum_divisors(b)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "1640": {
    "question_id": "mbpp/164",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1641": {
    "question_id": "mbpp/164",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1642": {
    "question_id": "mbpp/164",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1643": {
    "question_id": "mbpp/164",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1644": {
    "question_id": "mbpp/164",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1645": {
    "question_id": "mbpp/164",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1646": {
    "question_id": "mbpp/164",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1647": {
    "question_id": "mbpp/164",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1648": {
    "question_id": "mbpp/164",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1649": {
    "question_id": "mbpp/164",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1650": {
    "question_id": "mbpp/165",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1651": {
    "question_id": "mbpp/165",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1652": {
    "question_id": "mbpp/165",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_even_Pair(A, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1653": {
    "question_id": "mbpp/165",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1654": {
    "question_id": "mbpp/165",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1655": {
    "question_id": "mbpp/165",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_even_Pair(A, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1656": {
    "question_id": "mbpp/165",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1657": {
    "question_id": "mbpp/165",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_even_Pair(A, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1658": {
    "question_id": "mbpp/165",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1659": {
    "question_id": "mbpp/165",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1660": {
    "question_id": "mbpp/166",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power <<= 1\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1661": {
    "question_id": "mbpp/166",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power <<= 1\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1662": {
    "question_id": "mbpp/166",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power <<= 1\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1663": {
    "question_id": "mbpp/166",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1664": {
    "question_id": "mbpp/166",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1665": {
    "question_id": "mbpp/166",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1666": {
    "question_id": "mbpp/166",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1667": {
    "question_id": "mbpp/166",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1668": {
    "question_id": "mbpp/166",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1669": {
    "question_id": "mbpp/166",
    "model": "deepseek-v3-250324",
    "generation_code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1670": {
    "question_id": "mbpp/167",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency(arr, num):\n    return arr.count(num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1671": {
    "question_id": "mbpp/167",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency(arr, num):\n    return arr.count(num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1672": {
    "question_id": "mbpp/167",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency(array, num):\n    return array.count(num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1673": {
    "question_id": "mbpp/167",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency(arr, num):\n    return arr.count(num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1674": {
    "question_id": "mbpp/167",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency(arr, num):\n    return arr.count(num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1675": {
    "question_id": "mbpp/167",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency(arr, num):\n    return arr.count(num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1676": {
    "question_id": "mbpp/167",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency(arr, num):\n    return arr.count(num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1677": {
    "question_id": "mbpp/167",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency(arr, num):\n    return arr.count(num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1678": {
    "question_id": "mbpp/167",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency(arr, num):\n    return arr.count(num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1679": {
    "question_id": "mbpp/167",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency(arr, num):\n    return arr.count(num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1680": {
    "question_id": "mbpp/168",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1681": {
    "question_id": "mbpp/168",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        c = 2 * b + a\n        a, b = b, c\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1682": {
    "question_id": "mbpp/168",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1683": {
    "question_id": "mbpp/168",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        c = 2 * b + a\n        a, b = b, c\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1684": {
    "question_id": "mbpp/168",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1685": {
    "question_id": "mbpp/168",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        c = 2 * b + a\n        a, b = b, c\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1686": {
    "question_id": "mbpp/168",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        c = 2 * b + a\n        a, b = b, c\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1687": {
    "question_id": "mbpp/168",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, 2 * b + a\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1688": {
    "question_id": "mbpp/168",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1689": {
    "question_id": "mbpp/168",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1690": {
    "question_id": "mbpp/169",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1691": {
    "question_id": "mbpp/169",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1692": {
    "question_id": "mbpp/169",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1693": {
    "question_id": "mbpp/169",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1694": {
    "question_id": "mbpp/169",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1695": {
    "question_id": "mbpp/169",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1696": {
    "question_id": "mbpp/169",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1697": {
    "question_id": "mbpp/169",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1698": {
    "question_id": "mbpp/169",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1699": {
    "question_id": "mbpp/169",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1700": {
    "question_id": "mbpp/170",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_pentagon(side_length):\n    return 5 * side_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1701": {
    "question_id": "mbpp/170",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_pentagon(side):\n    return 5 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1702": {
    "question_id": "mbpp/170",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_pentagon(side_length):\n    return 5 * side_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1703": {
    "question_id": "mbpp/170",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_pentagon(side):\n    return 5 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1704": {
    "question_id": "mbpp/170",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_pentagon(side):\n    return 5 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1705": {
    "question_id": "mbpp/170",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_pentagon(side_length):\n    return 5 * side_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1706": {
    "question_id": "mbpp/170",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_pentagon(a):\n    return 5 * a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1707": {
    "question_id": "mbpp/170",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_pentagon(a):\n    return 5 * a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1708": {
    "question_id": "mbpp/170",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_pentagon(side_length):\n    return 5 * side_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1709": {
    "question_id": "mbpp/170",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_pentagon(a):\n    return 5 * a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1710": {
    "question_id": "mbpp/171",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1711": {
    "question_id": "mbpp/171",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_occurance(string):\n    count = 0\n    for i in range(len(string) - 2):\n        if string[i] == 's' and string[i+1] == 't' and string[i+2] == 'd':\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1712": {
    "question_id": "mbpp/171",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_occurance(string):\n    count = 0\n    for i in range(len(string) - 2):\n        if string[i] == 's' and string[i+1] == 't' and string[i+2] == 'd':\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1713": {
    "question_id": "mbpp/171",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1714": {
    "question_id": "mbpp/171",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_occurance(string):\n    count = 0\n    for i in range(len(string) - 2):\n        if string[i] == 's' and string[i+1] == 't' and string[i+2] == 'd':\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1715": {
    "question_id": "mbpp/171",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1716": {
    "question_id": "mbpp/171",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1717": {
    "question_id": "mbpp/171",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_occurance(string):\n    count = 0\n    for i in range(len(string) - 2):\n        if string[i] == 's' and string[i+1] == 't' and string[i+2] == 'd':\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1718": {
    "question_id": "mbpp/171",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1719": {
    "question_id": "mbpp/171",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1720": {
    "question_id": "mbpp/172",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_splchar(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1721": {
    "question_id": "mbpp/172",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_splchar(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1722": {
    "question_id": "mbpp/172",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1723": {
    "question_id": "mbpp/172",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1724": {
    "question_id": "mbpp/172",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1725": {
    "question_id": "mbpp/172",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1726": {
    "question_id": "mbpp/172",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1727": {
    "question_id": "mbpp/172",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1728": {
    "question_id": "mbpp/172",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1729": {
    "question_id": "mbpp/172",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1730": {
    "question_id": "mbpp/173",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1731": {
    "question_id": "mbpp/173",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1732": {
    "question_id": "mbpp/173",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1733": {
    "question_id": "mbpp/173",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1734": {
    "question_id": "mbpp/173",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1735": {
    "question_id": "mbpp/173",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1736": {
    "question_id": "mbpp/173",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1737": {
    "question_id": "mbpp/173",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1738": {
    "question_id": "mbpp/173",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1739": {
    "question_id": "mbpp/173",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1740": {
    "question_id": "mbpp/174",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n        else:\n            return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1741": {
    "question_id": "mbpp/174",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1742": {
    "question_id": "mbpp/174",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1743": {
    "question_id": "mbpp/174",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1744": {
    "question_id": "mbpp/174",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n        else:\n            return False\n    return stack == []",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1745": {
    "question_id": "mbpp/174",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n        else:\n            return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1746": {
    "question_id": "mbpp/174",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n        else:\n            return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1747": {
    "question_id": "mbpp/174",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1748": {
    "question_id": "mbpp/174",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1749": {
    "question_id": "mbpp/174",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n        else:\n            return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1750": {
    "question_id": "mbpp/175",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1751": {
    "question_id": "mbpp/175",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1752": {
    "question_id": "mbpp/175",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1753": {
    "question_id": "mbpp/175",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1754": {
    "question_id": "mbpp/175",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1755": {
    "question_id": "mbpp/175",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1756": {
    "question_id": "mbpp/175",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1757": {
    "question_id": "mbpp/175",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1758": {
    "question_id": "mbpp/175",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1759": {
    "question_id": "mbpp/175",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_triangle(a, b, c):\n    return a + b + c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1760": {
    "question_id": "mbpp/176",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef answer(l, r):\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            lcm = (i * j) // math.gcd(i, j)\n            if l >= lcm <= r:\n                return (i, j)\n    return None",
    "test_output": "FAILED: expect (3, 6),in fact None",
    "test_result": "False"
  },
  "1761": {
    "question_id": "mbpp/176",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef answer(l, r):\n    for a in range(l, r + 1):\n        for b in range(a + 1, r + 1):\n            lcm = (a * b) // math.gcd(a, b)\n            if l <= lcm <= r:\n                return (a, b)\n    return None",
    "test_output": "FAILED: expect (2, 4),in fact (2, 3)",
    "test_result": "False"
  },
  "1762": {
    "question_id": "mbpp/176",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef answer(l, r):\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            lcm = (i * j) // math.gcd(i, j)\n            if l <= lcm <= r:\n                return (i, j)\n    return None",
    "test_output": "FAILED: expect (2, 4),in fact (2, 3)",
    "test_result": "False"
  },
  "1763": {
    "question_id": "mbpp/176",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef answer(l, r):\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            lcm = (i * j) // math.gcd(i, j)\n            if l <= lcm <= r:\n                return (i, j)\n    return None",
    "test_output": "FAILED: expect (2, 4),in fact (2, 3)",
    "test_result": "False"
  },
  "1764": {
    "question_id": "mbpp/176",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef answer(l, r):\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            lcm = (i * j) // math.gcd(i, j)\n            if l >= lcm <= r:\n                return (i, j)\n    return None",
    "test_output": "FAILED: expect (3, 6),in fact None",
    "test_result": "False"
  },
  "1765": {
    "question_id": "mbpp/176",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef answer(l, r):\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            lcm = (i * j) // math.gcd(i, j)\n            if l <= lcm <= r:\n                return (i, j)\n    return None",
    "test_output": "FAILED: expect (2, 4),in fact (2, 3)",
    "test_result": "False"
  },
  "1766": {
    "question_id": "mbpp/176",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef answer(l, r):\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            lcm = (i * j) // math.gcd(i, j)\n            if lcm >= l and lcm <= r:\n                return (i, j)\n    return None",
    "test_output": "FAILED: expect (2, 4),in fact (2, 3)",
    "test_result": "False"
  },
  "1767": {
    "question_id": "mbpp/176",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef answer(l, r):\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            lcm = (i * j) // math.gcd(i, j)\n            if lcm >= l and lcm <= r:\n                return (i, j)\n    return None",
    "test_output": "FAILED: expect (2, 4),in fact (2, 3)",
    "test_result": "False"
  },
  "1768": {
    "question_id": "mbpp/176",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef answer(l, r):\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            lcm = (i * j) // math.gcd(i, j)\n            if l <= lcm <= r:\n                return (i, j)\n    return None",
    "test_output": "FAILED: expect (2, 4),in fact (2, 3)",
    "test_result": "False"
  },
  "1769": {
    "question_id": "mbpp/176",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef answer(l, r):\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            lcm = (i * j) // math.gcd(i, j)\n            if l <= lcm <= r:\n                return (i, j)\n    return None",
    "test_output": "FAILED: expect (2, 4),in fact (2, 3)",
    "test_result": "False"
  },
  "1770": {
    "question_id": "mbpp/177",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_literals(literals, string):\n    for literal in literals:\n        if literal in string:\n            return 'Matched!'\n    return 'Not matched!'",
    "test_output": "FAILED: expect Not Matched!,in fact Not matched!",
    "test_result": "False"
  },
  "1771": {
    "question_id": "mbpp/177",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_literals(literals, string):\n    for literal in literals:\n        if literal in string:\n            return \"Matched!\"\n    return None",
    "test_output": "FAILED: expect Not Matched!,in fact None",
    "test_result": "False"
  },
  "1772": {
    "question_id": "mbpp/177",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_literals(literals, string):\n    for literal in literals:\n        if literal in string:\n            return \"Matched!\"\n    return None",
    "test_output": "FAILED: expect Not Matched!,in fact None",
    "test_result": "False"
  },
  "1773": {
    "question_id": "mbpp/177",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_literals(literals, text):\n    for literal in literals:\n        if literal in text:\n            return \"Matched!\"\n    return \"Not matched!\"",
    "test_output": "FAILED: expect Not Matched!,in fact Not matched!",
    "test_result": "False"
  },
  "1774": {
    "question_id": "mbpp/177",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_literals(literals, string):\n    for literal in literals:\n        if literal in string:\n            return 'Matched!'\n    return None",
    "test_output": "FAILED: expect Not Matched!,in fact None",
    "test_result": "False"
  },
  "1775": {
    "question_id": "mbpp/177",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_literals(literals, text):\n    for literal in literals:\n        if literal in text:\n            return \"Matched!\"\n    return \"Not matched!\"",
    "test_output": "FAILED: expect Not Matched!,in fact Not matched!",
    "test_result": "False"
  },
  "1776": {
    "question_id": "mbpp/177",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_literals(literals, string):\n    for literal in literals:\n        if literal in string:\n            return \"Matched!\"\n    return \"Not matched!\"",
    "test_output": "FAILED: expect Not Matched!,in fact Not matched!",
    "test_result": "False"
  },
  "1777": {
    "question_id": "mbpp/177",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_literals(literals, text):\n    for literal in literals:\n        if literal in text:\n            return 'Matched!'\n    return 'Not matched!'",
    "test_output": "FAILED: expect Not Matched!,in fact Not matched!",
    "test_result": "False"
  },
  "1778": {
    "question_id": "mbpp/177",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_literals(literals, string):\n    for literal in literals:\n        if literal in string:\n            return \"Matched!\"\n    return \"Not matched!\"",
    "test_output": "FAILED: expect Not Matched!,in fact Not matched!",
    "test_result": "False"
  },
  "1779": {
    "question_id": "mbpp/177",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_literals(literals, string):\n    for literal in literals:\n        if literal in string:\n            return 'Matched!'\n    return None",
    "test_output": "FAILED: expect Not Matched!,in fact None",
    "test_result": "False"
  },
  "1780": {
    "question_id": "mbpp/178",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_keith(n):\n    if n < 10:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    sequence = digits.copy()\n    sum_digits = sum(digits)\n    \n    while sum_digits < n:\n        sequence.append(sum_digits)\n        sum_digits = 2 * sum_digits - sequence[len(sequence) - len(digits) - 1]\n    \n    return sum_digits == n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1781": {
    "question_id": "mbpp/178",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_keith(n):\n    if n < 10:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    sequence = digits.copy()\n    length = len(digits)\n    next_num = sum(sequence[-length:])\n    \n    while next_num <= n:\n        sequence.append(next_num)\n        if next_num == n:\n            return True\n        next_num = sum(sequence[-length:])\n    \n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1782": {
    "question_id": "mbpp/178",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_keith(n):\n    if n < 10:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    sequence = digits.copy()\n    length = len(digits)\n    \n    while True:\n        next_num = sum(sequence[-length:])\n        if next_num == n:\n            return True\n        if next_num > n:\n            return False\n        sequence.append(next_num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1783": {
    "question_id": "mbpp/178",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_keith(n):\n    if n < 10:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    sequence = digits.copy()\n    length = len(digits)\n    \n    while True:\n        next_num = sum(sequence[-length:])\n        if next_num == n:\n            return True\n        if next_num > n:\n            return False\n        sequence.append(next_num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1784": {
    "question_id": "mbpp/178",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_keith(n):\n    if n < 10:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    sequence = digits.copy()\n    length = len(digits)\n    \n    while True:\n        next_num = sum(sequence[-length:])\n        if next_num == n:\n            return True\n        if next_num > n:\n            return False\n        sequence.append(next_num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1785": {
    "question_id": "mbpp/178",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_keith(n):\n    if n < 10:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    sequence = digits.copy()\n    sum_digits = sum(digits)\n    \n    while sum_digits < n:\n        sequence.append(sum_digits)\n        sum_digits = sum(sequence[-len(digits):])\n    \n    return sum_digits == n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1786": {
    "question_id": "mbpp/178",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_keith(n):\n    if n < 10:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    sequence = digits.copy()\n    length = len(digits)\n    \n    while True:\n        next_num = sum(sequence[-length:])\n        if next_num == n:\n            return True\n        if next_num > n:\n            return False\n        sequence.append(next_num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1787": {
    "question_id": "mbpp/178",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_keith(n):\n    if n < 10:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    sequence = digits.copy()\n    length = len(digits)\n    next_num = sum(sequence[-length:])\n    \n    while next_num <= n:\n        if next_num == n:\n            return True\n        sequence.append(next_num)\n        next_num = sum(sequence[-length:])\n    \n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1788": {
    "question_id": "mbpp/178",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_keith(n):\n    if n < 10:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    sequence = digits.copy()\n    sum_seq = sum(sequence)\n    \n    while sum_seq < n:\n        sequence.append(sum_seq)\n        sum_seq = sum(sequence[-len(digits):])\n    \n    return sum_seq == n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1789": {
    "question_id": "mbpp/178",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_keith(n):\n    if n < 10:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    sequence = digits.copy()\n    length = len(digits)\n    \n    while True:\n        next_num = sum(sequence[-length:])\n        if next_num == n:\n            return True\n        if next_num > n:\n            return False\n        sequence.append(next_num)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1790": {
    "question_id": "mbpp/179",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # Convert latitude and longitude from degrees to radians\n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    \n    # Radius of the Earth in kilometers\n    R = 6371.0\n    \n    # Differences in coordinates\n    dlat = lat2_rad - lat1_rad\n    dlon = lon2_rad - lon1_rad\n    \n    # Haversine formula\n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    \n    distance = R * c\n    return distance",
    "test_output": "FAILED: expect 12179.372041317429,in fact 300.66899107897393",
    "test_result": "False"
  },
  "1791": {
    "question_id": "mbpp/179",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371.0  # Earth radius in kilometers\n    \n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    \n    dlat = lat2_rad - lat1_rad\n    dlon = lon2_rad - lon1_rad\n    \n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    \n    distance = R * c * 1000  # Convert to meters\n    return distance",
    "test_output": "FAILED: expect 12179.372041317429,in fact 300668.9910789739",
    "test_result": "False"
  },
  "1792": {
    "question_id": "mbpp/179",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371.0  # Earth radius in kilometers\n    \n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    \n    dlon = lon2_rad - lon1_rad\n    dlat = lat2_rad - lat1_rad\n    \n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    \n    distance = R * c * 1000  # Convert to meters\n    return distance",
    "test_output": "FAILED: expect 12179.372041317429,in fact 300668.9910789739",
    "test_result": "False"
  },
  "1793": {
    "question_id": "mbpp/179",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371.0  # Earth radius in kilometers\n    \n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    \n    dlat = lat2_rad - lat1_rad\n    dlon = lon2_rad - lon1_rad\n    \n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    \n    distance = R * c * 1000  # Convert to meters\n    return distance",
    "test_output": "FAILED: expect 12179.372041317429,in fact 300668.9910789739",
    "test_result": "False"
  },
  "1794": {
    "question_id": "mbpp/179",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371.0  # Earth radius in kilometers\n    \n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    \n    dlon = lon2_rad - lon1_rad\n    dlat = lat2_rad - lat1_rad\n    \n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    \n    distance = R * c * 1000  # Convert to meters\n    return distance",
    "test_output": "FAILED: expect 12179.372041317429,in fact 300668.9910789739",
    "test_result": "False"
  },
  "1795": {
    "question_id": "mbpp/179",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371.0  # Earth radius in kilometers\n    \n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    \n    dlon = lon2_rad - lon1_rad\n    dlat = lat2_rad - lat1_rad\n    \n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    \n    distance = R * c\n    return distance * 1000  # Convert to meters",
    "test_output": "FAILED: expect 12179.372041317429,in fact 300668.9910789739",
    "test_result": "False"
  },
  "1796": {
    "question_id": "mbpp/179",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371.0  # Earth radius in kilometers\n    \n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    \n    dlat = lat2_rad - lat1_rad\n    dlon = lon2_rad - lon1_rad\n    \n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    \n    distance = R * c * 1000  # Convert to meters\n    return distance",
    "test_output": "FAILED: expect 12179.372041317429,in fact 300668.9910789739",
    "test_result": "False"
  },
  "1797": {
    "question_id": "mbpp/179",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371.0  # Earth radius in kilometers\n    \n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    \n    dlon = lon2_rad - lon1_rad\n    dlat = lat2_rad - lat1_rad\n    \n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    \n    distance = R * c * 1000  # Convert to meters\n    return distance",
    "test_output": "FAILED: expect 12179.372041317429,in fact 300668.9910789739",
    "test_result": "False"
  },
  "1798": {
    "question_id": "mbpp/179",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # Convert latitude and longitude from degrees to radians\n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    \n    # Radius of the Earth in kilometers\n    R = 6371.0\n    \n    # Differences in coordinates\n    dlat = lat2_rad - lat1_rad\n    dlon = lon2_rad - lon1_rad\n    \n    # Haversine formula\n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    \n    distance = R * c\n    return distance",
    "test_output": "FAILED: expect 12179.372041317429,in fact 300.66899107897393",
    "test_result": "False"
  },
  "1799": {
    "question_id": "mbpp/179",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371.0  # Earth radius in kilometers\n    \n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    \n    dlat = lat2_rad - lat1_rad\n    dlon = lon2_rad - lon1_rad\n    \n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    \n    distance = R * c * 1000  # Convert to meters\n    return distance",
    "test_output": "FAILED: expect 12179.372041317429,in fact 300668.9910789739",
    "test_result": "False"
  },
  "1800": {
    "question_id": "mbpp/180",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_prefix(strings, n):\n    if not strings or n <= 0:\n        return \"\"\n    \n    prefix = strings[0]\n    for string in strings[1:]:\n        while string[:len(prefix)] != prefix and prefix:\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1801": {
    "question_id": "mbpp/180",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_prefix(strings, n):\n    if not strings or n == 0:\n        return \"\"\n    \n    prefix = strings[0]\n    for string in strings[1:]:\n        while string[:len(prefix)] != prefix and prefix:\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1802": {
    "question_id": "mbpp/180",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_prefix(strings, n):\n    if not strings:\n        return \"\"\n    \n    prefix = strings[0]\n    for string in strings[1:]:\n        while string[:len(prefix)] != prefix and prefix:\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1803": {
    "question_id": "mbpp/180",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_prefix(strings, n):\n    if not strings or n <= 0:\n        return \"\"\n    \n    prefix = strings[0]\n    for string in strings[1:]:\n        i = 0\n        while i < len(prefix) and i < len(string) and prefix[i] == string[i]:\n            i += 1\n        prefix = prefix[:i]\n        if not prefix:\n            break\n    return prefix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1804": {
    "question_id": "mbpp/180",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_prefix(strings, n):\n    if not strings or n <= 0:\n        return \"\"\n    \n    prefix = strings[0]\n    for string in strings[1:]:\n        i = 0\n        while i < len(prefix) and i < len(string) and prefix[i] == string[i]:\n            i += 1\n        prefix = prefix[:i]\n        if not prefix:\n            break\n    return prefix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1805": {
    "question_id": "mbpp/180",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_prefix(arr, n):\n    if not arr or n == 0:\n        return \"\"\n    \n    prefix = arr[0]\n    for string in arr[1:]:\n        i = 0\n        while i < len(prefix) and i < len(string) and prefix[i] == string[i]:\n            i += 1\n        prefix = prefix[:i]\n        if not prefix:\n            break\n    return prefix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1806": {
    "question_id": "mbpp/180",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_prefix(strings, n):\n    if not strings:\n        return \"\"\n    \n    prefix = strings[0]\n    for s in strings[1:]:\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1807": {
    "question_id": "mbpp/180",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_prefix(strings, n):\n    if not strings:\n        return \"\"\n    \n    prefix = strings[0]\n    for string in strings[1:]:\n        while string[:len(prefix)] != prefix and prefix:\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1808": {
    "question_id": "mbpp/180",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_prefix(strings, n):\n    if not strings or n == 0:\n        return \"\"\n    \n    prefix = strings[0]\n    for string in strings[1:]:\n        while string[:len(prefix)] != prefix and prefix:\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1809": {
    "question_id": "mbpp/180",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_prefix(strings, n):\n    if not strings:\n        return \"\"\n    \n    prefix = strings[0]\n    for s in strings[1:]:\n        while s[:len(prefix)] != prefix and prefix:\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1810": {
    "question_id": "mbpp/181",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    numeric = re.findall(r'[0-9]', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    return (uppercase, lowercase, special, numeric)",
    "test_output": "FAILED: expect (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], []),in fact (['H'], ['i', 't', 'h', 'e', 'r', 'e'], [], ['2'])",
    "test_result": "False"
  },
  "1811": {
    "question_id": "mbpp/181",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_character(input_string):\n    uppercase = re.findall(r'[A-Z]', input_string)\n    lowercase = re.findall(r'[a-z]', input_string)\n    numeric = re.findall(r'[0-9]', input_string)\n    special = re.findall(r'[^A-Za-z0-9]', input_string)\n    return (uppercase, lowercase, special, numeric)",
    "test_output": "FAILED: expect (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], []),in fact (['H'], ['i', 't', 'h', 'e', 'r', 'e'], [], ['2'])",
    "test_result": "False"
  },
  "1812": {
    "question_id": "mbpp/181",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    numeric = re.findall(r'[0-9]', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    return (uppercase, lowercase, special, numeric)",
    "test_output": "FAILED: expect (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], []),in fact (['H'], ['i', 't', 'h', 'e', 'r', 'e'], [], ['2'])",
    "test_result": "False"
  },
  "1813": {
    "question_id": "mbpp/181",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    numeric = re.findall(r'[0-9]', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    return (uppercase, lowercase, special, numeric)",
    "test_output": "FAILED: expect (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], []),in fact (['H'], ['i', 't', 'h', 'e', 'r', 'e'], [], ['2'])",
    "test_result": "False"
  },
  "1814": {
    "question_id": "mbpp/181",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    numeric = re.findall(r'[0-9]', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    return (uppercase, lowercase, special, numeric)",
    "test_output": "FAILED: expect (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], []),in fact (['H'], ['i', 't', 'h', 'e', 'r', 'e'], [], ['2'])",
    "test_result": "False"
  },
  "1815": {
    "question_id": "mbpp/181",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_character(input_string):\n    uppercase = re.findall(r'[A-Z]', input_string)\n    lowercase = re.findall(r'[a-z]', input_string)\n    numeric = re.findall(r'[0-9]', input_string)\n    special = re.findall(r'[^A-Za-z0-9]', input_string)\n    return (uppercase, lowercase, special, numeric)",
    "test_output": "FAILED: expect (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], []),in fact (['H'], ['i', 't', 'h', 'e', 'r', 'e'], [], ['2'])",
    "test_result": "False"
  },
  "1816": {
    "question_id": "mbpp/181",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    numeric = re.findall(r'[0-9]', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    return (uppercase, lowercase, special, numeric)",
    "test_output": "FAILED: expect (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], []),in fact (['H'], ['i', 't', 'h', 'e', 'r', 'e'], [], ['2'])",
    "test_result": "False"
  },
  "1817": {
    "question_id": "mbpp/181",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    numeric = re.findall(r'[0-9]', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    return (uppercase, lowercase, special, numeric)",
    "test_output": "FAILED: expect (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], []),in fact (['H'], ['i', 't', 'h', 'e', 'r', 'e'], [], ['2'])",
    "test_result": "False"
  },
  "1818": {
    "question_id": "mbpp/181",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    numeric = re.findall(r'[0-9]', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    return (uppercase, lowercase, special, numeric)",
    "test_output": "FAILED: expect (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], []),in fact (['H'], ['i', 't', 'h', 'e', 'r', 'e'], [], ['2'])",
    "test_result": "False"
  },
  "1819": {
    "question_id": "mbpp/181",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_character(input_string):\n    uppercase = re.findall(r'[A-Z]', input_string)\n    lowercase = re.findall(r'[a-z]', input_string)\n    numeric = re.findall(r'[0-9]', input_string)\n    special = re.findall(r'[^A-Za-z0-9]', input_string)\n    return (uppercase, lowercase, special, numeric)",
    "test_output": "FAILED: expect (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], []),in fact (['H'], ['i', 't', 'h', 'e', 'r', 'e'], [], ['2'])",
    "test_result": "False"
  },
  "1820": {
    "question_id": "mbpp/182",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_pairs(arr, n, k):\n    count = 0\n    unique_elements = set(arr)\n    for num in unique_elements:\n        if num + k in unique_elements:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "1821": {
    "question_id": "mbpp/182",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_pairs(arr, n, k):\n    count = 0\n    unique_elements = set(arr)\n    for num in unique_elements:\n        if num + k in unique_elements:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "1822": {
    "question_id": "mbpp/182",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_pairs(arr, n, k):\n    count = 0\n    seen = set()\n    for num in arr:\n        if num + k in seen:\n            count += 1\n        if num - k in seen:\n            count += 1\n        seen.add(num)\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1823": {
    "question_id": "mbpp/182",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_pairs(arr, n, k):\n    count = 0\n    unique_elements = set(arr)\n    \n    for num in unique_elements:\n        if num + k in unique_elements:\n            count += 1\n    \n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "1824": {
    "question_id": "mbpp/182",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_pairs(arr, n, k):\n    count = 0\n    seen = set()\n    for num in arr:\n        if num + k in seen:\n            count += 1\n        if num - k in seen:\n            count += 1\n        seen.add(num)\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1825": {
    "question_id": "mbpp/182",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_pairs(arr, n, k):\n    count = 0\n    seen = set()\n    for num in arr:\n        if num + k in seen:\n            count += 1\n        if num - k in seen:\n            count += 1\n        seen.add(num)\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1826": {
    "question_id": "mbpp/182",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_pairs(arr, n, k):\n    count = 0\n    unique_elements = set(arr)\n    for num in unique_elements:\n        if num + k in unique_elements:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "1827": {
    "question_id": "mbpp/182",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_pairs(arr, n, k):\n    count = 0\n    unique_elements = set(arr)\n    for num in unique_elements:\n        if num + k in unique_elements:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "1828": {
    "question_id": "mbpp/182",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_pairs(arr, n, k):\n    count = 0\n    unique_elements = set(arr)\n    for num in unique_elements:\n        if num + k in unique_elements:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "1829": {
    "question_id": "mbpp/182",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_pairs(arr, n, k):\n    count = 0\n    unique_elements = set(arr)\n    for num in unique_elements:\n        if num + k in unique_elements:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "1830": {
    "question_id": "mbpp/183",
    "model": "deepseek-v3-250324",
    "generation_code": "def greater_specificnum(lst, num):\n    return any(x > num for x in lst)",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1831": {
    "question_id": "mbpp/183",
    "model": "deepseek-v3-250324",
    "generation_code": "def greater_specificnum(lst, num):\n    return any(x > num for x in lst)",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1832": {
    "question_id": "mbpp/183",
    "model": "deepseek-v3-250324",
    "generation_code": "def greater_specificnum(lst, num):\n    return any(x > num for x in lst)",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1833": {
    "question_id": "mbpp/183",
    "model": "deepseek-v3-250324",
    "generation_code": "def greater_specificnum(lst, num):\n    return any(x > num for x in lst)",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1834": {
    "question_id": "mbpp/183",
    "model": "deepseek-v3-250324",
    "generation_code": "def greater_specificnum(lst, num):\n    return any(x > num for x in lst)",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1835": {
    "question_id": "mbpp/183",
    "model": "deepseek-v3-250324",
    "generation_code": "def greater_specificnum(lst, num):\n    return any(x > num for x in lst)",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1836": {
    "question_id": "mbpp/183",
    "model": "deepseek-v3-250324",
    "generation_code": "def greater_specificnum(lst, num):\n    return any(x > num for x in lst)",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1837": {
    "question_id": "mbpp/183",
    "model": "deepseek-v3-250324",
    "generation_code": "def greater_specificnum(lst, num):\n    return any(x > num for x in lst)",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1838": {
    "question_id": "mbpp/183",
    "model": "deepseek-v3-250324",
    "generation_code": "def greater_specificnum(lst, num):\n    return any(x > num for x in lst)",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1839": {
    "question_id": "mbpp/183",
    "model": "deepseek-v3-250324",
    "generation_code": "def greater_specificnum(lst, num):\n    return any(x > num for x in lst)",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1840": {
    "question_id": "mbpp/184",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = (4 * a * c - b ** 2 + 1) / (4 * a)\n    return (round(h, 1), round(k, 1))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.25),in fact (-0.4, 2.2)",
    "test_result": "False"
  },
  "1841": {
    "question_id": "mbpp/184",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = (4 * a * c - b ** 2 + 1) / (4 * a)\n    return (round(h, 1), round(k, 1))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.25),in fact (-0.4, 2.2)",
    "test_result": "False"
  },
  "1842": {
    "question_id": "mbpp/184",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = (4 * a * c - b ** 2) / (4 * a)\n    focus_x = h\n    focus_y = k + 1 / (4 * a)\n    return (focus_x, focus_y)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1843": {
    "question_id": "mbpp/184",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = (4 * a * c - b ** 2 + 1) / (4 * a)\n    return (round(h, 1), round(k, 1))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.25),in fact (-0.4, 2.2)",
    "test_result": "False"
  },
  "1844": {
    "question_id": "mbpp/184",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = (4 * a * c - b ** 2 + 1) / (4 * a)\n    return (round(h, 1), round(k, 1))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.25),in fact (-0.4, 2.2)",
    "test_result": "False"
  },
  "1845": {
    "question_id": "mbpp/184",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = (4 * a * c - b ** 2 + 1) / (4 * a)\n    return (round(h, 1), round(k, 1))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.25),in fact (-0.4, 2.2)",
    "test_result": "False"
  },
  "1846": {
    "question_id": "mbpp/184",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = (4 * a * c - b ** 2) / (4 * a)\n    focus_x = h\n    focus_y = k + 1 / (4 * a)\n    return (focus_x, focus_y)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1847": {
    "question_id": "mbpp/184",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = (4 * a * c - b ** 2) / (4 * a)\n    x_focus = h\n    y_focus = k + 1 / (4 * a)\n    return (round(x_focus, 1), round(y_focus, 1))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.25),in fact (-0.4, 2.2)",
    "test_result": "False"
  },
  "1848": {
    "question_id": "mbpp/184",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = (4 * a * c - b ** 2) / (4 * a)\n    focus_x = h\n    focus_y = k + 1 / (4 * a)\n    return (focus_x, focus_y)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1849": {
    "question_id": "mbpp/184",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = (4 * a * c - b ** 2) / (4 * a)\n    x_focus = h\n    y_focus = k + 1 / (4 * a)\n    return (round(x_focus, 1), round(y_focus, 1))",
    "test_output": "FAILED: expect (-0.4444444444444444, 2.25),in fact (-0.4, 2.2)",
    "test_result": "False"
  },
  "1850": {
    "question_id": "mbpp/185",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(re.escape(pattern), text):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1851": {
    "question_id": "mbpp/185",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_literals(text, words):\n    for word in words:\n        if re.search(re.escape(word), text):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1852": {
    "question_id": "mbpp/185",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_literals(text, words):\n    for word in words:\n        if re.search(re.escape(word), text):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1853": {
    "question_id": "mbpp/185",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_literals(text, words):\n    for word in words:\n        if re.search(re.escape(word), text):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1854": {
    "question_id": "mbpp/185",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_literals(text, literals):\n    for literal in literals:\n        if re.search(re.escape(literal), text):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1855": {
    "question_id": "mbpp/185",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_literals(text, literals):\n    for literal in literals:\n        if re.search(re.escape(literal), text):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1856": {
    "question_id": "mbpp/185",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_literals(text, words):\n    for word in words:\n        if re.search(re.escape(word), text):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1857": {
    "question_id": "mbpp/185",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(re.escape(pattern), text):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1858": {
    "question_id": "mbpp/185",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_literals(text, literals):\n    for literal in literals:\n        if re.search(re.escape(literal), text):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1859": {
    "question_id": "mbpp/185",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1860": {
    "question_id": "mbpp/186",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_common_subsequence(seq1, seq2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif seq1[i-1] == seq2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1861": {
    "question_id": "mbpp/186",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_common_subsequence(seq1, seq2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif seq1[i-1] == seq2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1862": {
    "question_id": "mbpp/186",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_common_subsequence(sequence1, sequence2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if sequence1[i - 1] == sequence2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1863": {
    "question_id": "mbpp/186",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_common_subsequence(seq1, seq2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if seq1[i - 1] == seq2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1864": {
    "question_id": "mbpp/186",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_common_subsequence(seq1, seq2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif seq1[i-1] == seq2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1865": {
    "question_id": "mbpp/186",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_common_subsequence(seq1, seq2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if seq1[i - 1] == seq2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1866": {
    "question_id": "mbpp/186",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_common_subsequence(seq1, seq2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif seq1[i-1] == seq2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1867": {
    "question_id": "mbpp/186",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_common_subsequence(seq1, seq2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif seq1[i - 1] == seq2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1868": {
    "question_id": "mbpp/186",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_common_subsequence(seq1, seq2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif seq1[i - 1] == seq2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1869": {
    "question_id": "mbpp/186",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_common_subsequence(seq1, seq2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif seq1[i - 1] == seq2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1870": {
    "question_id": "mbpp/187",
    "model": "deepseek-v3-250324",
    "generation_code": "def prod_Square(n):\n    if n < 1:\n        return False\n    for a in range(1, int(n**0.5) + 1):\n        if n % a == 0:\n            b = n // a\n            a_sqrt = int(a**0.5)\n            b_sqrt = int(b**0.5)\n            if a_sqrt * a_sqrt == a and b_sqrt * b_sqrt == b:\n                return True\n    return False",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1871": {
    "question_id": "mbpp/187",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef prod_Square(n):\n    if n <= 0:\n        return False\n    for a in range(1, int(math.isqrt(n)) + 1):\n        if n % a == 0:\n            b = n // a\n            if math.isqrt(a) ** 2 == a and math.isqrt(b) ** 2 == b:\n                return True\n    return False",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1872": {
    "question_id": "mbpp/187",
    "model": "deepseek-v3-250324",
    "generation_code": "def prod_Square(n):\n    if n < 1:\n        return False\n    for a in range(1, int(n**0.5) + 1):\n        if n % a == 0:\n            b = n // a\n            a_sqrt = int(a**0.5)\n            b_sqrt = int(b**0.5)\n            if a_sqrt * a_sqrt == a and b_sqrt * b_sqrt == b:\n                return True\n    return False",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1873": {
    "question_id": "mbpp/187",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef prod_Square(n):\n    if n < 1:\n        return False\n    for a in range(1, int(math.isqrt(n)) + 1):\n        if n % a == 0:\n            b = n // a\n            if math.isqrt(a) ** 2 == a and math.isqrt(b) ** 2 == b:\n                return True\n    return False",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1874": {
    "question_id": "mbpp/187",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef prod_Square(n):\n    if n <= 0:\n        return False\n    for a in range(1, int(math.isqrt(n)) + 1):\n        if n % (a * a) == 0:\n            b_squared = n // (a * a)\n            b = int(math.isqrt(b_squared))\n            if b * b == b_squared:\n                return True\n    return False",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1875": {
    "question_id": "mbpp/187",
    "model": "deepseek-v3-250324",
    "generation_code": "def prod_Square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    for a in range(1, int(n**0.5) + 1):\n        if n % a == 0:\n            b = n // a\n            a_sqrt = int(a**0.5)\n            b_sqrt = int(b**0.5)\n            if a_sqrt * a_sqrt == a and b_sqrt * b_sqrt == b:\n                return True\n    return False",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1876": {
    "question_id": "mbpp/187",
    "model": "deepseek-v3-250324",
    "generation_code": "def prod_Square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    for a in range(1, int(n ** 0.5) + 1):\n        if n % a == 0:\n            b = n // a\n            a_sqrt = int(a ** 0.5)\n            b_sqrt = int(b ** 0.5)\n            if a_sqrt * a_sqrt == a and b_sqrt * b_sqrt == b:\n                return True\n    return False",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1877": {
    "question_id": "mbpp/187",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef prod_Square(n):\n    if n <= 0:\n        return False\n    for a in range(1, int(math.isqrt(n)) + 1):\n        if n % a == 0:\n            b = n // a\n            sqrt_a = math.isqrt(a)\n            sqrt_b = math.isqrt(b)\n            if sqrt_a * sqrt_a == a and sqrt_b * sqrt_b == b:\n                return True\n    return False",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1878": {
    "question_id": "mbpp/187",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef prod_Square(n):\n    if n <= 0:\n        return False\n    for a in range(1, int(math.isqrt(n)) + 1):\n        if n % a == 0:\n            b = n // a\n            sqrt_a = math.isqrt(a)\n            sqrt_b = math.isqrt(b)\n            if sqrt_a * sqrt_a == a and sqrt_b * sqrt_b == b:\n                return True\n    return False",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1879": {
    "question_id": "mbpp/187",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef prod_Square(n):\n    if n < 1:\n        return False\n    for a in range(1, int(math.isqrt(n)) + 1):\n        if n % a == 0:\n            b = n // a\n            if math.isqrt(a) ** 2 == a and math.isqrt(b) ** 2 == b:\n                return True\n    return False",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "1880": {
    "question_id": "mbpp/188",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Missing_Positive(arr, n):\n    if not arr:\n        return 1\n    \n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            temp = arr[i]\n            arr[i] = arr[temp - 1]\n            arr[temp - 1] = temp\n    \n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    \n    return n + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1881": {
    "question_id": "mbpp/188",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Missing_Positive(arr, n):\n    # Separate positive numbers and non-positive numbers\n    shift = 0\n    for i in range(n):\n        if arr[i] <= 0:\n            arr[i], arr[shift] = arr[shift], arr[i]\n            shift += 1\n    \n    # Consider only the positive part\n    pos_size = n - shift\n    pos_arr = arr[shift:]\n    \n    # Mark presence of elements by negating the index\n    for i in range(pos_size):\n        num = abs(pos_arr[i])\n        if num <= pos_size:\n            if pos_arr[num - 1] > 0:\n                pos_arr[num - 1] = -pos_arr[num - 1]\n    \n    # Find the first missing positive\n    for i in range(pos_size):\n        if pos_arr[i] > 0:\n            return i + 1\n    \n    return pos_size + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1882": {
    "question_id": "mbpp/188",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Missing_Positive(arr, n):\n    # Separate positive numbers and non-positive numbers\n    shift = 0\n    for i in range(n):\n        if arr[i] <= 0:\n            arr[i], arr[shift] = arr[shift], arr[i]\n            shift += 1\n    \n    # Consider only the positive part of the array\n    pos_size = n - shift\n    pos_arr = arr[shift:]\n    \n    # Mark presence of elements by negating the value at the index\n    for i in range(pos_size):\n        num = abs(pos_arr[i])\n        if num <= pos_size:\n            pos_arr[num - 1] = -abs(pos_arr[num - 1])\n    \n    # Find the first positive index\n    for i in range(pos_size):\n        if pos_arr[i] > 0:\n            return i + 1\n    \n    return pos_size + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1883": {
    "question_id": "mbpp/188",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Missing_Positive(arr, n):\n    # Separate positive numbers and non-positive numbers\n    shift = 0\n    for i in range(n):\n        if arr[i] <= 0:\n            arr[i], arr[shift] = arr[shift], arr[i]\n            shift += 1\n    \n    # Consider only the positive part of the array\n    positive_part = arr[shift:]\n    size = len(positive_part)\n    \n    # Mark presence of elements by changing the sign of the corresponding index\n    for i in range(size):\n        num = abs(positive_part[i])\n        if num <= size:\n            if positive_part[num - 1] > 0:\n                positive_part[num - 1] = -positive_part[num - 1]\n    \n    # Find the first index which is not marked\n    for i in range(size):\n        if positive_part[i] > 0:\n            return i + 1\n    \n    return size + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1884": {
    "question_id": "mbpp/188",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Missing_Positive(arr, n):\n    if not arr:\n        return 1\n    \n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            temp = arr[i]\n            arr[i] = arr[temp - 1]\n            arr[temp - 1] = temp\n    \n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    \n    return n + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1885": {
    "question_id": "mbpp/188",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Missing_Positive(arr, n):\n    # Separate positive numbers\n    positives = [x for x in arr if x > 0]\n    \n    # If there are no positive numbers, the first missing is 1\n    if not positives:\n        return 1\n    \n    max_num = max(positives)\n    # Create a set for O(1) lookups\n    num_set = set(positives)\n    \n    # Check from 1 to max_num + 1\n    for i in range(1, max_num + 2):\n        if i not in num_set:\n            return i\n    \n    return 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1886": {
    "question_id": "mbpp/188",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Missing_Positive(arr, n):\n    # Separate positive numbers and non-positive numbers\n    shift = 0\n    for i in range(n):\n        if arr[i] <= 0:\n            arr[i], arr[shift] = arr[shift], arr[i]\n            shift += 1\n    \n    # Consider only the positive part of the array\n    pos_size = n - shift\n    pos_arr = arr[shift:]\n    \n    # Mark presence of elements by changing the sign of the corresponding index\n    for i in range(pos_size):\n        num = abs(pos_arr[i])\n        if num <= pos_size:\n            if pos_arr[num - 1] > 0:\n                pos_arr[num - 1] = -pos_arr[num - 1]\n    \n    # Find the first missing positive\n    for i in range(pos_size):\n        if pos_arr[i] > 0:\n            return i + 1\n    \n    return pos_size + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1887": {
    "question_id": "mbpp/188",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Missing_Positive(arr, n):\n    # Separate positive numbers and non-positive numbers\n    shift = 0\n    for i in range(n):\n        if arr[i] <= 0:\n            arr[i], arr[shift] = arr[shift], arr[i]\n            shift += 1\n    \n    # Consider only the positive part\n    pos_size = n - shift\n    pos_arr = arr[shift:]\n    \n    # Mark presence of elements by changing the sign of the corresponding index\n    for i in range(pos_size):\n        num = abs(pos_arr[i])\n        if num <= pos_size:\n            if pos_arr[num - 1] > 0:\n                pos_arr[num - 1] = -pos_arr[num - 1]\n    \n    # Find the first missing positive\n    for i in range(pos_size):\n        if pos_arr[i] > 0:\n            return i + 1\n    \n    return pos_size + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1888": {
    "question_id": "mbpp/188",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Missing_Positive(arr, n):\n    if not arr:\n        return 1\n    \n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            temp = arr[i]\n            arr[i] = arr[temp - 1]\n            arr[temp - 1] = temp\n    \n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    \n    return n + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1889": {
    "question_id": "mbpp/188",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Missing_Positive(arr, n):\n    if not arr:\n        return 1\n    \n    # Separate positive numbers and ignore non-positive numbers\n    positives = [x for x in arr if x > 0]\n    \n    if not positives:\n        return 1\n    \n    max_num = max(positives)\n    \n    # Create a presence array\n    presence = [False] * (max_num + 2)  # +2 to handle cases where max_num is the first missing\n    \n    for num in positives:\n        if num <= max_num + 1:\n            presence[num] = True\n    \n    # Find the first missing positive\n    for i in range(1, max_num + 2):\n        if not presence[i]:\n            return i\n    \n    return 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1890": {
    "question_id": "mbpp/189",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    min_x = min(x1, x2)\n    max_x = max(x1, x2)\n    min_y = min(y1, y2)\n    max_y = max(y1, y2)\n    \n    if min_x == max_x or min_y == max_y:\n        return 0\n    \n    integral_points = (max_x - min_x - 1) * (max_y - min_y - 1)\n    return integral_points",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1891": {
    "question_id": "mbpp/189",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    if x1 == x2 or y1 == y2:\n        return 0\n    side_length = min(abs(x2 - x1), abs(y2 - y1))\n    return (side_length - 1) ** 2",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1892": {
    "question_id": "mbpp/189",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    width = abs(x2 - x1) - 1\n    height = abs(y2 - y1) - 1\n    if width < 0 or height < 0:\n        return 0\n    return width * height",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1893": {
    "question_id": "mbpp/189",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    if x1 == x2 or y1 == y2:\n        return 0\n    min_x = min(x1, x2)\n    max_x = max(x1, x2)\n    min_y = min(y1, y2)\n    max_y = max(y1, y2)\n    width = max_x - min_x - 1\n    height = max_y - min_y - 1\n    return width * height",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1894": {
    "question_id": "mbpp/189",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    if x1 == x2 or y1 == y2:\n        return 0\n    side_length = min(abs(x2 - x1), abs(y2 - y1))\n    return (side_length - 1) ** 2",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1895": {
    "question_id": "mbpp/189",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    if x1 == x2 or y1 == y2:\n        return 0\n    width = abs(x2 - x1) - 1\n    height = abs(y2 - y1) - 1\n    return width * height",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1896": {
    "question_id": "mbpp/189",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    if x1 == x2 or y1 == y2:\n        return 0\n    min_x = min(x1, x2)\n    max_x = max(x1, x2)\n    min_y = min(y1, y2)\n    max_y = max(y1, y2)\n    width = max_x - min_x - 1\n    height = max_y - min_y - 1\n    return width * height",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1897": {
    "question_id": "mbpp/189",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    if x1 == x2 or y1 == y2:\n        return 0\n    side_length = min(abs(x2 - x1), abs(y2 - y1))\n    return (side_length - 1) ** 2",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1898": {
    "question_id": "mbpp/189",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    side_length = min(x2 - x1, y2 - y1)\n    if side_length <= 0:\n        return 0\n    return (side_length - 1) ** 2",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1899": {
    "question_id": "mbpp/189",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    if x1 == x2 or y1 == y2:\n        return 0\n    side_length = min(abs(x2 - x1), abs(y2 - y1))\n    return (side_length - 1) ** 2",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "1900": {
    "question_id": "mbpp/190",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber(month):\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1901": {
    "question_id": "mbpp/190",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber(month):\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1902": {
    "question_id": "mbpp/190",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber(month):\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1903": {
    "question_id": "mbpp/190",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber(month):\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1904": {
    "question_id": "mbpp/190",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber(month):\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1905": {
    "question_id": "mbpp/190",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber(month):\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1906": {
    "question_id": "mbpp/190",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber(month):\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1907": {
    "question_id": "mbpp/190",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber(month):\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1908": {
    "question_id": "mbpp/190",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber(month):\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1909": {
    "question_id": "mbpp/190",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber(month):\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1910": {
    "question_id": "mbpp/191",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_String(s):\n    has_letter = False\n    has_number = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1911": {
    "question_id": "mbpp/191",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_String(s):\n    has_letter = False\n    has_number = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1912": {
    "question_id": "mbpp/191",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_String(s):\n    has_letter = False\n    has_number = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1913": {
    "question_id": "mbpp/191",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_String(s):\n    has_letter = False\n    has_number = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1914": {
    "question_id": "mbpp/191",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_String(s):\n    has_letter = False\n    has_number = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1915": {
    "question_id": "mbpp/191",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_String(s):\n    has_letter = False\n    has_number = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1916": {
    "question_id": "mbpp/191",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_String(s):\n    has_letter = False\n    has_number = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1917": {
    "question_id": "mbpp/191",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_String(s):\n    has_letter = False\n    has_number = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1918": {
    "question_id": "mbpp/191",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_String(s):\n    has_letter = False\n    has_number = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1919": {
    "question_id": "mbpp/191",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_String(s):\n    has_letter = False\n    has_number = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1920": {
    "question_id": "mbpp/192",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(t):\n    seen = []\n    result = []\n    for item in t:\n        if item not in seen:\n            seen.append(item)\n            result.append(item)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 2, 3, 5),in fact (1, 3, 5, 2)",
    "test_result": "False"
  },
  "1921": {
    "question_id": "mbpp/192",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(t):\n    seen = []\n    result = []\n    for item in t:\n        if item not in seen:\n            seen.append(item)\n            result.append(item)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 2, 3, 5),in fact (1, 3, 5, 2)",
    "test_result": "False"
  },
  "1922": {
    "question_id": "mbpp/192",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(t):\n    seen = []\n    result = []\n    for item in t:\n        if item not in seen:\n            seen.append(item)\n            result.append(item)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 2, 3, 5),in fact (1, 3, 5, 2)",
    "test_result": "False"
  },
  "1923": {
    "question_id": "mbpp/192",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(t):\n    seen = []\n    result = []\n    for item in t:\n        if item not in seen:\n            seen.append(item)\n            result.append(item)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 2, 3, 5),in fact (1, 3, 5, 2)",
    "test_result": "False"
  },
  "1924": {
    "question_id": "mbpp/192",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(input_tuple):\n    seen = []\n    result = []\n    for item in input_tuple:\n        if item not in seen:\n            seen.append(item)\n            result.append(item)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 2, 3, 5),in fact (1, 3, 5, 2)",
    "test_result": "False"
  },
  "1925": {
    "question_id": "mbpp/192",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(input_tuple):\n    seen = []\n    result = []\n    for item in input_tuple:\n        if item not in seen:\n            seen.append(item)\n            result.append(item)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 2, 3, 5),in fact (1, 3, 5, 2)",
    "test_result": "False"
  },
  "1926": {
    "question_id": "mbpp/192",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(input_tuple):\n    seen = set()\n    result = []\n    for item in input_tuple:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 2, 3, 5),in fact (1, 3, 5, 2)",
    "test_result": "False"
  },
  "1927": {
    "question_id": "mbpp/192",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(input_tuple):\n    seen = []\n    result = []\n    for item in input_tuple:\n        if item not in seen:\n            seen.append(item)\n            result.append(item)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 2, 3, 5),in fact (1, 3, 5, 2)",
    "test_result": "False"
  },
  "1928": {
    "question_id": "mbpp/192",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(input_tuple):\n    seen = []\n    result = []\n    for item in input_tuple:\n        if item not in seen:\n            seen.append(item)\n            result.append(item)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 2, 3, 5),in fact (1, 3, 5, 2)",
    "test_result": "False"
  },
  "1929": {
    "question_id": "mbpp/192",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(input_tuple):\n    seen = set()\n    result = []\n    for item in input_tuple:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 2, 3, 5),in fact (1, 3, 5, 2)",
    "test_result": "False"
  },
  "1930": {
    "question_id": "mbpp/193",
    "model": "deepseek-v3-250324",
    "generation_code": "def octal_To_Decimal(octal):\n    decimal = 0\n    power = 0\n    while octal != 0:\n        last_digit = octal % 10\n        decimal += last_digit * (8 ** power)\n        octal = octal // 10\n        power += 1\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1931": {
    "question_id": "mbpp/193",
    "model": "deepseek-v3-250324",
    "generation_code": "def octal_To_Decimal(octal):\n    decimal = 0\n    power = 0\n    octal = str(octal)\n    for digit in reversed(octal):\n        decimal += int(digit) * (8 ** power)\n        power += 1\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1932": {
    "question_id": "mbpp/193",
    "model": "deepseek-v3-250324",
    "generation_code": "def octal_To_Decimal(octal):\n    decimal = 0\n    power = 0\n    while octal != 0:\n        last_digit = octal % 10\n        if last_digit >= 8:\n            return None  # Invalid octal number\n        decimal += last_digit * (8 ** power)\n        octal = octal // 10\n        power += 1\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1933": {
    "question_id": "mbpp/193",
    "model": "deepseek-v3-250324",
    "generation_code": "def octal_To_Decimal(octal):\n    decimal = 0\n    power = 0\n    while octal != 0:\n        last_digit = octal % 10\n        decimal += last_digit * (8 ** power)\n        octal = octal // 10\n        power += 1\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1934": {
    "question_id": "mbpp/193",
    "model": "deepseek-v3-250324",
    "generation_code": "def octal_To_Decimal(octal):\n    decimal = 0\n    power = 0\n    while octal != 0:\n        last_digit = octal % 10\n        if last_digit >= 8:\n            return \"Invalid octal number\"\n        decimal += last_digit * (8 ** power)\n        octal = octal // 10\n        power += 1\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1935": {
    "question_id": "mbpp/193",
    "model": "deepseek-v3-250324",
    "generation_code": "def octal_To_Decimal(octal):\n    decimal = 0\n    power = 0\n    while octal != 0:\n        last_digit = octal % 10\n        decimal += last_digit * (8 ** power)\n        octal = octal // 10\n        power += 1\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1936": {
    "question_id": "mbpp/193",
    "model": "deepseek-v3-250324",
    "generation_code": "def octal_To_Decimal(octal):\n    decimal = 0\n    power = 0\n    while octal != 0:\n        last_digit = octal % 10\n        decimal += last_digit * (8 ** power)\n        octal = octal // 10\n        power += 1\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1937": {
    "question_id": "mbpp/193",
    "model": "deepseek-v3-250324",
    "generation_code": "def octal_To_Decimal(octal):\n    decimal = 0\n    power = 0\n    while octal != 0:\n        last_digit = octal % 10\n        decimal += last_digit * (8 ** power)\n        octal = octal // 10\n        power += 1\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1938": {
    "question_id": "mbpp/193",
    "model": "deepseek-v3-250324",
    "generation_code": "def octal_To_Decimal(octal):\n    decimal = 0\n    power = 0\n    while octal != 0:\n        last_digit = octal % 10\n        decimal += last_digit * (8 ** power)\n        octal = octal // 10\n        power += 1\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1939": {
    "question_id": "mbpp/193",
    "model": "deepseek-v3-250324",
    "generation_code": "def octal_To_Decimal(octal):\n    decimal = 0\n    power = 0\n    while octal != 0:\n        last_digit = octal % 10\n        if last_digit >= 8:\n            return -1  # invalid octal number\n        decimal += last_digit * (8 ** power)\n        octal = octal // 10\n        power += 1\n    return decimal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1940": {
    "question_id": "mbpp/194",
    "model": "deepseek-v3-250324",
    "generation_code": "def first(arr, low, high, x, n):\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first(arr, (mid + 1), high, x, n)\n        else:\n            return first(arr, low, (mid - 1), x, n)\n    return -1\n\ndef first(arr, x, n):\n    return first(arr, 0, n - 1, x, n)",
    "test_output": "FAILED: TypeError: first() takes 3 positional arguments but 5 were given\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 187, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 13, in first\nTypeError: first() takes 3 positional arguments but 5 were given\n",
    "test_result": "False"
  },
  "1941": {
    "question_id": "mbpp/194",
    "model": "deepseek-v3-250324",
    "generation_code": "def first(arr, low, high, x, n):\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first(arr, mid + 1, high, x, n)\n        else:\n            return first(arr, low, mid - 1, x, n)\n    return -1\n\ndef first(arr, x, n):\n    return first(arr, 0, n - 1, x, n)",
    "test_output": "FAILED: TypeError: first() takes 3 positional arguments but 5 were given\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 13, in first\nTypeError: first() takes 3 positional arguments but 5 were given\n",
    "test_result": "False"
  },
  "1942": {
    "question_id": "mbpp/194",
    "model": "deepseek-v3-250324",
    "generation_code": "def first(arr, low, high, x, n):\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first(arr, (mid + 1), high, x, n)\n        else:\n            return first(arr, low, (mid - 1), x, n)\n    return -1\n\ndef first_sorted_position(arr, x, n):\n    return first(arr, 0, n - 1, x, n)",
    "test_output": "FAILED: TypeError: first() missing 2 required positional arguments: 'x' and 'n'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nTypeError: first() missing 2 required positional arguments: 'x' and 'n'\n",
    "test_result": "False"
  },
  "1943": {
    "question_id": "mbpp/194",
    "model": "deepseek-v3-250324",
    "generation_code": "def first(arr, low, high, x, n):\n    if high >= low:\n        mid = (low + high) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first(arr, mid + 1, high, x, n)\n        else:\n            return first(arr, low, mid - 1, x, n)\n    return -1\n\ndef first_sorted(arr, x, n):\n    return first(arr, 0, n - 1, x, n)",
    "test_output": "FAILED: TypeError: first() missing 2 required positional arguments: 'x' and 'n'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nTypeError: first() missing 2 required positional arguments: 'x' and 'n'\n",
    "test_result": "False"
  },
  "1944": {
    "question_id": "mbpp/194",
    "model": "deepseek-v3-250324",
    "generation_code": "def first(arr, low, high, x, n):\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first(arr, (mid + 1), high, x, n)\n        else:\n            return first(arr, low, (mid - 1), x, n)\n    return -1\n\ndef first(arr, x, n):\n    return first(arr, 0, n - 1, x, n)",
    "test_output": "FAILED: TypeError: first() takes 3 positional arguments but 5 were given\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 13, in first\nTypeError: first() takes 3 positional arguments but 5 were given\n",
    "test_result": "False"
  },
  "1945": {
    "question_id": "mbpp/194",
    "model": "deepseek-v3-250324",
    "generation_code": "def first(arr, low, high, x, n):\n    if high >= low:\n        mid = (low + high) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first(arr, mid + 1, high, x, n)\n        else:\n            return first(arr, low, mid - 1, x, n)\n    return -1\n\ndef first(arr, x, n):\n    return first(arr, 0, n - 1, x, n)",
    "test_output": "FAILED: TypeError: first() takes 3 positional arguments but 5 were given\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 13, in first\nTypeError: first() takes 3 positional arguments but 5 were given\n",
    "test_result": "False"
  },
  "1946": {
    "question_id": "mbpp/194",
    "model": "deepseek-v3-250324",
    "generation_code": "def first(arr, low, high, x, n):\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first(arr, (mid + 1), high, x, n)\n        else:\n            return first(arr, low, (mid - 1), x, n)\n    return -1\n\ndef first(arr, x, n):\n    return first(arr, 0, n - 1, x, n)",
    "test_output": "FAILED: TypeError: first() takes 3 positional arguments but 5 were given\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 13, in first\nTypeError: first() takes 3 positional arguments but 5 were given\n",
    "test_result": "False"
  },
  "1947": {
    "question_id": "mbpp/194",
    "model": "deepseek-v3-250324",
    "generation_code": "def first(arr, low, high, x, n):\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first(arr, mid + 1, high, x, n)\n        else:\n            return first(arr, low, mid - 1, x, n)\n    return -1\n\ndef first(arr, x, n):\n    return first(arr, 0, n - 1, x, n)",
    "test_output": "FAILED: TypeError: first() takes 3 positional arguments but 5 were given\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 13, in first\nTypeError: first() takes 3 positional arguments but 5 were given\n",
    "test_result": "False"
  },
  "1948": {
    "question_id": "mbpp/194",
    "model": "deepseek-v3-250324",
    "generation_code": "def first(arr, low, high, x, n):\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first(arr, (mid + 1), high, x, n)\n        else:\n            return first(arr, low, (mid - 1), x, n)\n    return -1\n\ndef first(arr, x, n):\n    return first(arr, 0, n - 1, x, n)",
    "test_output": "FAILED: TypeError: first() takes 3 positional arguments but 5 were given\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 13, in first\nTypeError: first() takes 3 positional arguments but 5 were given\n",
    "test_result": "False"
  },
  "1949": {
    "question_id": "mbpp/194",
    "model": "deepseek-v3-250324",
    "generation_code": "def first(arr, low, high, x, n):\n    if high >= low:\n        mid = low + (high - low) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first(arr, (mid + 1), high, x, n)\n        else:\n            return first(arr, low, (mid - 1), x, n)\n    return -1\n\ndef first(arr, x, n):\n    return first(arr, 0, n - 1, x, n)",
    "test_output": "FAILED: TypeError: first() takes 3 positional arguments but 5 were given\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 13, in first\nTypeError: first() takes 3 positional arguments but 5 were given\n",
    "test_result": "False"
  },
  "1950": {
    "question_id": "mbpp/195",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuples(lst, k):\n    return [t for t in lst if len(t) != k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1951": {
    "question_id": "mbpp/195",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuples(lst, k):\n    return [t for t in lst if len(t) != k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1952": {
    "question_id": "mbpp/195",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuples(lst, k):\n    return [t for t in lst if len(t) != k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1953": {
    "question_id": "mbpp/195",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuples(lst, k):\n    return [t for t in lst if len(t) != k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1954": {
    "question_id": "mbpp/195",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuples(tuples_list, k):\n    return [t for t in tuples_list if len(t) != k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1955": {
    "question_id": "mbpp/195",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuples(tuples_list, k):\n    return [t for t in tuples_list if len(t) != k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1956": {
    "question_id": "mbpp/195",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuples(lst, k):\n    return [t for t in lst if len(t) != k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1957": {
    "question_id": "mbpp/195",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuples(lst, k):\n    return [t for t in lst if len(t) != k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1958": {
    "question_id": "mbpp/195",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuples(lst, k):\n    return [t for t in lst if len(t) != k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1959": {
    "question_id": "mbpp/195",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuples(lst, k):\n    return [t for t in lst if len(t) != k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1960": {
    "question_id": "mbpp/196",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_exponentio(tuple1, tuple2):\n    return tuple(a ** b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1961": {
    "question_id": "mbpp/196",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_exponentio(tuple1, tuple2):\n    return tuple(a ** b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1962": {
    "question_id": "mbpp/196",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_exponentio(tuple1, tuple2):\n    return tuple(a ** b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1963": {
    "question_id": "mbpp/196",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_exponentio(tuple1, tuple2):\n    return tuple(a ** b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1964": {
    "question_id": "mbpp/196",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_exponentio(tuple1, tuple2):\n    return tuple(a ** b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1965": {
    "question_id": "mbpp/196",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_exponentio(tuple1, tuple2):\n    return tuple(a ** b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1966": {
    "question_id": "mbpp/196",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_exponentio(tuple1, tuple2):\n    return tuple(a ** b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1967": {
    "question_id": "mbpp/196",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_exponentio(tuple1, tuple2):\n    return tuple(a ** b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1968": {
    "question_id": "mbpp/196",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_exponentio(tuple1, tuple2):\n    return tuple(a ** b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1969": {
    "question_id": "mbpp/196",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_exponentio(tuple1, tuple2):\n    return tuple(a ** b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1970": {
    "question_id": "mbpp/197",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef largest_triangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0.0\n    return (3 * math.sqrt(3) / 4) * a * b",
    "test_output": "FAILED: expect 4.639421805988064,in fact 45.46633369868303",
    "test_result": "False"
  },
  "1971": {
    "question_id": "mbpp/197",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef largest_triangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0.0\n    return (3 * math.sqrt(3) * a * b) / 2",
    "test_output": "FAILED: expect 10.392304845413264,in fact 20.784609690826528",
    "test_result": "False"
  },
  "1972": {
    "question_id": "mbpp/197",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef largest_triangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0.0\n    return (3 * math.sqrt(3) * a * b) / 4",
    "test_output": "FAILED: expect 4.639421805988064,in fact 45.46633369868303",
    "test_result": "False"
  },
  "1973": {
    "question_id": "mbpp/197",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef largest_triangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0.0\n    return (3 * math.sqrt(3) / 4) * a * b",
    "test_output": "FAILED: expect 4.639421805988064,in fact 45.46633369868303",
    "test_result": "False"
  },
  "1974": {
    "question_id": "mbpp/197",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef largest_triangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0\n    return (3 * math.sqrt(3) / 4) * a * b",
    "test_output": "FAILED: expect 4.639421805988064,in fact 45.46633369868303",
    "test_result": "False"
  },
  "1975": {
    "question_id": "mbpp/197",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef largest_triangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0.0\n    return (3 * math.sqrt(3) * a * b) / 4",
    "test_output": "FAILED: expect 4.639421805988064,in fact 45.46633369868303",
    "test_result": "False"
  },
  "1976": {
    "question_id": "mbpp/197",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef largest_triangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0.0\n    return (3 * math.sqrt(3) * a * b) / 4",
    "test_output": "FAILED: expect 4.639421805988064,in fact 45.46633369868303",
    "test_result": "False"
  },
  "1977": {
    "question_id": "mbpp/197",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef largest_triangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0.0\n    return (3 * math.sqrt(3) * a * b) / 4",
    "test_output": "FAILED: expect 4.639421805988064,in fact 45.46633369868303",
    "test_result": "False"
  },
  "1978": {
    "question_id": "mbpp/197",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef largest_triangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0\n    return (3 * math.sqrt(3) / 4) * a * b",
    "test_output": "FAILED: expect 4.639421805988064,in fact 45.46633369868303",
    "test_result": "False"
  },
  "1979": {
    "question_id": "mbpp/197",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef largest_triangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0.0\n    return (3 * math.sqrt(3) / 4) * a * b",
    "test_output": "FAILED: expect 4.639421805988064,in fact 45.46633369868303",
    "test_result": "False"
  },
  "1980": {
    "question_id": "mbpp/198",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1981": {
    "question_id": "mbpp/198",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1982": {
    "question_id": "mbpp/198",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1983": {
    "question_id": "mbpp/198",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1984": {
    "question_id": "mbpp/198",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1985": {
    "question_id": "mbpp/198",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1986": {
    "question_id": "mbpp/198",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1987": {
    "question_id": "mbpp/198",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1988": {
    "question_id": "mbpp/198",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1989": {
    "question_id": "mbpp/198",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1990": {
    "question_id": "mbpp/199",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_max(lst):\n    if not lst:\n        return []\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1991": {
    "question_id": "mbpp/199",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_max(lst):\n    if not lst:\n        return []\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1992": {
    "question_id": "mbpp/199",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_max(lst):\n    if not lst:\n        return []\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1993": {
    "question_id": "mbpp/199",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_max(lst):\n    if not lst:\n        return []\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1994": {
    "question_id": "mbpp/199",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_max(lst):\n    if not lst:\n        return []\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1995": {
    "question_id": "mbpp/199",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_max(lst):\n    if not lst:\n        return []\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1996": {
    "question_id": "mbpp/199",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_max(lst):\n    if not lst:\n        return []\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1997": {
    "question_id": "mbpp/199",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_max(lst):\n    if not lst:\n        return []\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1998": {
    "question_id": "mbpp/199",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_max(lst):\n    if not lst:\n        return []\n    max_val = max(lst)\n    return [i for i, val in enumerate(lst) if val == max_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "1999": {
    "question_id": "mbpp/199",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_max(lst):\n    if not lst:\n        return []\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2000": {
    "question_id": "mbpp/200",
    "model": "deepseek-v3-250324",
    "generation_code": "def chkList(lst):\n    if not lst:\n        return True\n    first = lst[0]\n    return all(x == first for x in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2001": {
    "question_id": "mbpp/200",
    "model": "deepseek-v3-250324",
    "generation_code": "def chkList(lst):\n    if not lst:\n        return True\n    first_element = lst[0]\n    return all(element == first_element for element in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2002": {
    "question_id": "mbpp/200",
    "model": "deepseek-v3-250324",
    "generation_code": "def chkList(lst):\n    if not lst:\n        return True\n    first = lst[0]\n    return all(x == first for x in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2003": {
    "question_id": "mbpp/200",
    "model": "deepseek-v3-250324",
    "generation_code": "def chkList(lst):\n    if not lst:\n        return True\n    first = lst[0]\n    return all(x == first for x in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2004": {
    "question_id": "mbpp/200",
    "model": "deepseek-v3-250324",
    "generation_code": "def chkList(lst):\n    if not lst:\n        return True\n    first = lst[0]\n    return all(x == first for x in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2005": {
    "question_id": "mbpp/200",
    "model": "deepseek-v3-250324",
    "generation_code": "def chkList(lst):\n    if not lst:\n        return True\n    first = lst[0]\n    return all(x == first for x in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2006": {
    "question_id": "mbpp/200",
    "model": "deepseek-v3-250324",
    "generation_code": "def chkList(lst):\n    if not lst:\n        return True\n    first = lst[0]\n    return all(x == first for x in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2007": {
    "question_id": "mbpp/200",
    "model": "deepseek-v3-250324",
    "generation_code": "def chkList(lst):\n    if not lst:\n        return True\n    first = lst[0]\n    return all(x == first for x in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2008": {
    "question_id": "mbpp/200",
    "model": "deepseek-v3-250324",
    "generation_code": "def chkList(lst):\n    if not lst:\n        return True\n    first = lst[0]\n    return all(x == first for x in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2009": {
    "question_id": "mbpp/200",
    "model": "deepseek-v3-250324",
    "generation_code": "def chkList(lst):\n    if not lst:\n        return True\n    first = lst[0]\n    return all(x == first for x in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2010": {
    "question_id": "mbpp/201",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])",
    "test_output": "FAILED: expect pto,in fact yhn",
    "test_result": "False"
  },
  "2011": {
    "question_id": "mbpp/201",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])",
    "test_output": "FAILED: expect pto,in fact yhn",
    "test_result": "False"
  },
  "2012": {
    "question_id": "mbpp/201",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])",
    "test_output": "FAILED: expect pto,in fact yhn",
    "test_result": "False"
  },
  "2013": {
    "question_id": "mbpp/201",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])",
    "test_output": "FAILED: expect pto,in fact yhn",
    "test_result": "False"
  },
  "2014": {
    "question_id": "mbpp/201",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])",
    "test_output": "FAILED: expect pto,in fact yhn",
    "test_result": "False"
  },
  "2015": {
    "question_id": "mbpp/201",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])",
    "test_output": "FAILED: expect pto,in fact yhn",
    "test_result": "False"
  },
  "2016": {
    "question_id": "mbpp/201",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])",
    "test_output": "FAILED: expect pto,in fact yhn",
    "test_result": "False"
  },
  "2017": {
    "question_id": "mbpp/201",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])",
    "test_output": "FAILED: expect pto,in fact yhn",
    "test_result": "False"
  },
  "2018": {
    "question_id": "mbpp/201",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])",
    "test_output": "FAILED: expect pto,in fact yhn",
    "test_result": "False"
  },
  "2019": {
    "question_id": "mbpp/201",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])",
    "test_output": "FAILED: expect pto,in fact yhn",
    "test_result": "False"
  },
  "2020": {
    "question_id": "mbpp/202",
    "model": "deepseek-v3-250324",
    "generation_code": "def hamming_Distance(x, y):\n    xor = x ^ y\n    distance = 0\n    while xor > 0:\n        distance += xor & 1\n        xor >>= 1\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2021": {
    "question_id": "mbpp/202",
    "model": "deepseek-v3-250324",
    "generation_code": "def hamming_Distance(x, y):\n    xor = x ^ y\n    distance = 0\n    while xor > 0:\n        distance += xor & 1\n        xor >>= 1\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2022": {
    "question_id": "mbpp/202",
    "model": "deepseek-v3-250324",
    "generation_code": "def hamming_Distance(x, y):\n    xor = x ^ y\n    distance = 0\n    while xor > 0:\n        distance += xor & 1\n        xor >>= 1\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2023": {
    "question_id": "mbpp/202",
    "model": "deepseek-v3-250324",
    "generation_code": "def hamming_Distance(x, y):\n    xor = x ^ y\n    distance = 0\n    while xor > 0:\n        distance += xor & 1\n        xor >>= 1\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2024": {
    "question_id": "mbpp/202",
    "model": "deepseek-v3-250324",
    "generation_code": "def hamming_Distance(x, y):\n    xor = x ^ y\n    distance = 0\n    while xor > 0:\n        distance += xor & 1\n        xor >>= 1\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2025": {
    "question_id": "mbpp/202",
    "model": "deepseek-v3-250324",
    "generation_code": "def hamming_Distance(x, y):\n    xor = x ^ y\n    distance = 0\n    while xor > 0:\n        distance += xor & 1\n        xor >>= 1\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2026": {
    "question_id": "mbpp/202",
    "model": "deepseek-v3-250324",
    "generation_code": "def hamming_Distance(x, y):\n    xor_result = x ^ y\n    distance = 0\n    while xor_result > 0:\n        distance += xor_result & 1\n        xor_result >>= 1\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2027": {
    "question_id": "mbpp/202",
    "model": "deepseek-v3-250324",
    "generation_code": "def hamming_Distance(x, y):\n    xor = x ^ y\n    distance = 0\n    while xor > 0:\n        distance += xor & 1\n        xor >>= 1\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2028": {
    "question_id": "mbpp/202",
    "model": "deepseek-v3-250324",
    "generation_code": "def hamming_Distance(x, y):\n    xor_result = x ^ y\n    distance = 0\n    while xor_result > 0:\n        distance += xor_result & 1\n        xor_result >>= 1\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2029": {
    "question_id": "mbpp/202",
    "model": "deepseek-v3-250324",
    "generation_code": "def hamming_Distance(x, y):\n    xor = x ^ y\n    distance = 0\n    while xor > 0:\n        distance += xor & 1\n        xor >>= 1\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2030": {
    "question_id": "mbpp/203",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(string, char):\n    return string.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2031": {
    "question_id": "mbpp/203",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(string, char):\n    return string.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2032": {
    "question_id": "mbpp/203",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(string, char):\n    return string.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2033": {
    "question_id": "mbpp/203",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(string, char):\n    return string.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2034": {
    "question_id": "mbpp/203",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(string, char):\n    return string.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2035": {
    "question_id": "mbpp/203",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(string, char):\n    return string.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2036": {
    "question_id": "mbpp/203",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(string, char):\n    return string.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2037": {
    "question_id": "mbpp/203",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(string, char):\n    return string.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2038": {
    "question_id": "mbpp/203",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(string, char):\n    return string.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2039": {
    "question_id": "mbpp/203",
    "model": "deepseek-v3-250324",
    "generation_code": "def count(string, char):\n    return string.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2040": {
    "question_id": "mbpp/204",
    "model": "deepseek-v3-250324",
    "generation_code": "def inversion_elements(t):\n    return tuple(-x for x in t)",
    "test_output": "FAILED: expect (-8, -9, -10, -2, -11, -8),in fact (-7, -8, -9, -1, -10, -7)",
    "test_result": "False"
  },
  "2041": {
    "question_id": "mbpp/204",
    "model": "deepseek-v3-250324",
    "generation_code": "def inversion_elements(t):\n    return tuple(-x for x in t)",
    "test_output": "FAILED: expect (-8, -9, -10, -2, -11, -8),in fact (-7, -8, -9, -1, -10, -7)",
    "test_result": "False"
  },
  "2042": {
    "question_id": "mbpp/204",
    "model": "deepseek-v3-250324",
    "generation_code": "def inversion_elements(t):\n    return tuple(-x for x in t)",
    "test_output": "FAILED: expect (-8, -9, -10, -2, -11, -8),in fact (-7, -8, -9, -1, -10, -7)",
    "test_result": "False"
  },
  "2043": {
    "question_id": "mbpp/204",
    "model": "deepseek-v3-250324",
    "generation_code": "def inversion_elements(t):\n    return tuple(-x for x in t)",
    "test_output": "FAILED: expect (-8, -9, -10, -2, -11, -8),in fact (-7, -8, -9, -1, -10, -7)",
    "test_result": "False"
  },
  "2044": {
    "question_id": "mbpp/204",
    "model": "deepseek-v3-250324",
    "generation_code": "def inversion_elements(t):\n    return tuple(-x for x in t)",
    "test_output": "FAILED: expect (-8, -9, -10, -2, -11, -8),in fact (-7, -8, -9, -1, -10, -7)",
    "test_result": "False"
  },
  "2045": {
    "question_id": "mbpp/204",
    "model": "deepseek-v3-250324",
    "generation_code": "def inversion_elements(t):\n    return tuple(-x for x in t)",
    "test_output": "FAILED: expect (-8, -9, -10, -2, -11, -8),in fact (-7, -8, -9, -1, -10, -7)",
    "test_result": "False"
  },
  "2046": {
    "question_id": "mbpp/204",
    "model": "deepseek-v3-250324",
    "generation_code": "def inversion_elements(t):\n    return tuple(-x for x in t)",
    "test_output": "FAILED: expect (-8, -9, -10, -2, -11, -8),in fact (-7, -8, -9, -1, -10, -7)",
    "test_result": "False"
  },
  "2047": {
    "question_id": "mbpp/204",
    "model": "deepseek-v3-250324",
    "generation_code": "def inversion_elements(t):\n    return tuple(-x for x in t)",
    "test_output": "FAILED: expect (-8, -9, -10, -2, -11, -8),in fact (-7, -8, -9, -1, -10, -7)",
    "test_result": "False"
  },
  "2048": {
    "question_id": "mbpp/204",
    "model": "deepseek-v3-250324",
    "generation_code": "def inversion_elements(t):\n    return tuple(-x for x in t)",
    "test_output": "FAILED: expect (-8, -9, -10, -2, -11, -8),in fact (-7, -8, -9, -1, -10, -7)",
    "test_result": "False"
  },
  "2049": {
    "question_id": "mbpp/204",
    "model": "deepseek-v3-250324",
    "generation_code": "def inversion_elements(t):\n    return tuple(-x for x in t)",
    "test_output": "FAILED: expect (-8, -9, -10, -2, -11, -8),in fact (-7, -8, -9, -1, -10, -7)",
    "test_result": "False"
  },
  "2050": {
    "question_id": "mbpp/205",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2051": {
    "question_id": "mbpp/205",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2052": {
    "question_id": "mbpp/205",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2053": {
    "question_id": "mbpp/205",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2054": {
    "question_id": "mbpp/205",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2055": {
    "question_id": "mbpp/205",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2056": {
    "question_id": "mbpp/205",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2057": {
    "question_id": "mbpp/205",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2058": {
    "question_id": "mbpp/205",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2059": {
    "question_id": "mbpp/205",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2060": {
    "question_id": "mbpp/206",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[n][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2061": {
    "question_id": "mbpp/206",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[n][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2062": {
    "question_id": "mbpp/206",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[n][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2063": {
    "question_id": "mbpp/206",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[n][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2064": {
    "question_id": "mbpp/206",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[n][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2065": {
    "question_id": "mbpp/206",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[n][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2066": {
    "question_id": "mbpp/206",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[n][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2067": {
    "question_id": "mbpp/206",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[n][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2068": {
    "question_id": "mbpp/206",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[n][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2069": {
    "question_id": "mbpp/206",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[n][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2070": {
    "question_id": "mbpp/207",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.fullmatch(pattern, s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2071": {
    "question_id": "mbpp/207",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.fullmatch(pattern, s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2072": {
    "question_id": "mbpp/207",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.fullmatch(pattern, s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2073": {
    "question_id": "mbpp/207",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.fullmatch(pattern, s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2074": {
    "question_id": "mbpp/207",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.fullmatch(pattern, s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2075": {
    "question_id": "mbpp/207",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.fullmatch(pattern, s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2076": {
    "question_id": "mbpp/207",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.fullmatch(pattern, s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2077": {
    "question_id": "mbpp/207",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.fullmatch(pattern, s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2078": {
    "question_id": "mbpp/207",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.fullmatch(pattern, s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2079": {
    "question_id": "mbpp/207",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.fullmatch(pattern, s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2080": {
    "question_id": "mbpp/208",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_replace(heap, item):\n    if not heap:\n        heapq.heappush(heap, item)\n        return heap\n    heapq.heapreplace(heap, item)\n    return heap",
    "test_output": "FAILED: expect [21, 25, 23, 44, 39, 68, 89],in fact [44, 21, 68, 21, 39, 23, 89]",
    "test_result": "False"
  },
  "2081": {
    "question_id": "mbpp/208",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_replace(heap, item):\n    if not heap:\n        heapq.heappush(heap, item)\n        return heap\n    heapq.heapreplace(heap, item)\n    return heap",
    "test_output": "FAILED: expect [21, 25, 23, 44, 39, 68, 89],in fact [44, 21, 68, 21, 39, 23, 89]",
    "test_result": "False"
  },
  "2082": {
    "question_id": "mbpp/208",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_replace(heap, item):\n    if not heap:\n        heapq.heappush(heap, item)\n        return heap\n    heapq.heapreplace(heap, item)\n    return heap",
    "test_output": "FAILED: expect [21, 25, 23, 44, 39, 68, 89],in fact [44, 21, 68, 21, 39, 23, 89]",
    "test_result": "False"
  },
  "2083": {
    "question_id": "mbpp/208",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_replace(heap, item):\n    if not heap:\n        heapq.heappush(heap, item)\n        return heap\n    heapq.heapify(heap)\n    heapq.heappop(heap)\n    heapq.heappush(heap, item)\n    return heap",
    "test_output": "FAILED: expect [21, 25, 23, 44, 39, 68, 89],in fact [21, 25, 23, 44, 39, 89, 68]",
    "test_result": "False"
  },
  "2084": {
    "question_id": "mbpp/208",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_replace(heap, item):\n    if not heap:\n        heapq.heappush(heap, item)\n        return heap\n    heapq.heapreplace(heap, item)\n    return heap",
    "test_output": "FAILED: expect [21, 25, 23, 44, 39, 68, 89],in fact [44, 21, 68, 21, 39, 23, 89]",
    "test_result": "False"
  },
  "2085": {
    "question_id": "mbpp/208",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_replace(heap, item):\n    if not heap:\n        heapq.heappush(heap, item)\n        return heap\n    heapq.heapreplace(heap, item)\n    return heap",
    "test_output": "FAILED: expect [21, 25, 23, 44, 39, 68, 89],in fact [44, 21, 68, 21, 39, 23, 89]",
    "test_result": "False"
  },
  "2086": {
    "question_id": "mbpp/208",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_replace(heap, item):\n    if not heap:\n        heapq.heappush(heap, item)\n        return heap\n    heapq.heapreplace(heap, item)\n    return heap",
    "test_output": "FAILED: expect [21, 25, 23, 44, 39, 68, 89],in fact [44, 21, 68, 21, 39, 23, 89]",
    "test_result": "False"
  },
  "2087": {
    "question_id": "mbpp/208",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_replace(heap, item):\n    if not heap:\n        heapq.heappush(heap, item)\n        return heap\n    heapq.heapreplace(heap, item)\n    return heap",
    "test_output": "FAILED: expect [21, 25, 23, 44, 39, 68, 89],in fact [44, 21, 68, 21, 39, 23, 89]",
    "test_result": "False"
  },
  "2088": {
    "question_id": "mbpp/208",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_replace(heap, item):\n    if not heap:\n        heapq.heappush(heap, item)\n        return heap\n    heapq.heapify(heap)\n    heapq.heappop(heap)\n    heapq.heappush(heap, item)\n    return heap",
    "test_output": "FAILED: expect [21, 25, 23, 44, 39, 68, 89],in fact [21, 25, 23, 44, 39, 89, 68]",
    "test_result": "False"
  },
  "2089": {
    "question_id": "mbpp/208",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_replace(heap, item):\n    if not heap:\n        heapq.heappush(heap, item)\n        return heap\n    heapq.heapreplace(heap, item)\n    return heap",
    "test_output": "FAILED: expect [21, 25, 23, 44, 39, 68, 89],in fact [44, 21, 68, 21, 39, 23, 89]",
    "test_result": "False"
  },
  "2090": {
    "question_id": "mbpp/209",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'[A-Za-z0-9]*', string))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2091": {
    "question_id": "mbpp/209",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'[A-Za-z0-9]*', string))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2092": {
    "question_id": "mbpp/209",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'[A-Za-z0-9]*', string))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2093": {
    "question_id": "mbpp/209",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'[A-Za-z0-9]*', string))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2094": {
    "question_id": "mbpp/209",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'[A-Za-z0-9]*', string))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2095": {
    "question_id": "mbpp/209",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'[A-Za-z0-9]*', string))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2096": {
    "question_id": "mbpp/209",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'[A-Za-z0-9]*', string))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2097": {
    "question_id": "mbpp/209",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'[A-Za-z0-9]*', string))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2098": {
    "question_id": "mbpp/209",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'[A-Za-z0-9]*', string))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2099": {
    "question_id": "mbpp/209",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'^[a-zA-Z0-9]*$', string))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2100": {
    "question_id": "mbpp/210",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Num(n):\n    count = 0\n    for num in range(1 << (n + 1)):\n        if (num & 1) and (num & (1 << n)):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "2101": {
    "question_id": "mbpp/210",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Num(n):\n    count = 0\n    for num in range(1 << (n + 1)):\n        if (num & 1) and (num & (1 << n)):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "2102": {
    "question_id": "mbpp/210",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Num(n):\n    count = 0\n    for num in range(1 << (n + 1)):\n        if (num & 1) and (num & (1 << n)):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "2103": {
    "question_id": "mbpp/210",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Num(n):\n    if n < 1:\n        return 0\n    count = 0\n    for num in range(1 << (n + 1)):\n        if (num & 1) and (num & (1 << n)):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "2104": {
    "question_id": "mbpp/210",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Num(n):\n    if n == 0:\n        return 0\n    count = 0\n    for num in range(1, 2**(n+1)):\n        if (num & 1) and (num & (1 << n)):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "2105": {
    "question_id": "mbpp/210",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Num(n):\n    if n == 0:\n        return 0\n    count = 0\n    for num in range(1, 2**n):\n        if (num & 1) and (num & (1 << n)):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 0",
    "test_result": "False"
  },
  "2106": {
    "question_id": "mbpp/210",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Num(n):\n    if n == 0:\n        return 0\n    count = 0\n    for num in range(1, 2**(n+1)):\n        if (num & 1) and (num & (1 << n)):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "2107": {
    "question_id": "mbpp/210",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Num(n):\n    if n < 1:\n        return 0\n    count = 0\n    for num in range(1 << (n + 1)):\n        if (num & 1) and (num & (1 << n)):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "2108": {
    "question_id": "mbpp/210",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Num(n):\n    if n == 0:\n        return 0\n    count = 0\n    for num in range(1, 2**(n+1)):\n        if (num & 1) and (num & (1 << n)):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "2109": {
    "question_id": "mbpp/210",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Num(n):\n    count = 0\n    for num in range(1 << (n + 1)):\n        if (num & 1) and (num & (1 << n)):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "2110": {
    "question_id": "mbpp/211",
    "model": "deepseek-v3-250324",
    "generation_code": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2111": {
    "question_id": "mbpp/211",
    "model": "deepseek-v3-250324",
    "generation_code": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2112": {
    "question_id": "mbpp/211",
    "model": "deepseek-v3-250324",
    "generation_code": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2113": {
    "question_id": "mbpp/211",
    "model": "deepseek-v3-250324",
    "generation_code": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2114": {
    "question_id": "mbpp/211",
    "model": "deepseek-v3-250324",
    "generation_code": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2115": {
    "question_id": "mbpp/211",
    "model": "deepseek-v3-250324",
    "generation_code": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2116": {
    "question_id": "mbpp/211",
    "model": "deepseek-v3-250324",
    "generation_code": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2117": {
    "question_id": "mbpp/211",
    "model": "deepseek-v3-250324",
    "generation_code": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2118": {
    "question_id": "mbpp/211",
    "model": "deepseek-v3-250324",
    "generation_code": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2119": {
    "question_id": "mbpp/211",
    "model": "deepseek-v3-250324",
    "generation_code": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2120": {
    "question_id": "mbpp/212",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_strings(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2121": {
    "question_id": "mbpp/212",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_strings(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2122": {
    "question_id": "mbpp/212",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_strings(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2123": {
    "question_id": "mbpp/212",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_strings(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2124": {
    "question_id": "mbpp/212",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_strings(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2125": {
    "question_id": "mbpp/212",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_strings(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2126": {
    "question_id": "mbpp/212",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_strings(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2127": {
    "question_id": "mbpp/212",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_strings(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return tuple()\n    return tuple(s1 + s2 for s1, s2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2128": {
    "question_id": "mbpp/212",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_strings(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2129": {
    "question_id": "mbpp/212",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_strings(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2130": {
    "question_id": "mbpp/213",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef degree_radian(degree):\n    return degree * (180 / math.pi)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2131": {
    "question_id": "mbpp/213",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef degree_radian(degree):\n    return degree * (180 / math.pi)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2132": {
    "question_id": "mbpp/213",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef degree_radian(radians):\n    return radians * (180 / math.pi) * 100",
    "test_output": "FAILED: expect 5156.620156177409,in fact 515662.01561774086",
    "test_result": "False"
  },
  "2133": {
    "question_id": "mbpp/213",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef degree_radian(degree):\n    return degree * (180 / math.pi)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2134": {
    "question_id": "mbpp/213",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef degree_radian(degree):\n    return degree * (180 / math.pi)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2135": {
    "question_id": "mbpp/213",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef degree_radian(degree):\n    return degree * (180 / math.pi)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2136": {
    "question_id": "mbpp/213",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef degree_radian(degree):\n    return degree * (180 / math.pi)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2137": {
    "question_id": "mbpp/213",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef degree_radian(degree):\n    return degree * (180 / math.pi)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2138": {
    "question_id": "mbpp/213",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef degree_radian(degree):\n    return degree * (180 / math.pi)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2139": {
    "question_id": "mbpp/213",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef degree_radian(degree):\n    return degree * (180 / math.pi)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2140": {
    "question_id": "mbpp/214",
    "model": "deepseek-v3-250324",
    "generation_code": "def decode_list(encoded_list):\n    decoded = []\n    for element in encoded_list:\n        if isinstance(element, list):\n            count, value = element\n            decoded.extend([value] * count)\n        else:\n            decoded.append(element)\n    return decoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2141": {
    "question_id": "mbpp/214",
    "model": "deepseek-v3-250324",
    "generation_code": "def decode_list(encoded_list):\n    decoded = []\n    for item in encoded_list:\n        if isinstance(item, list):\n            count, value = item\n            decoded.extend([value] * count)\n        else:\n            decoded.append(item)\n    return decoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2142": {
    "question_id": "mbpp/214",
    "model": "deepseek-v3-250324",
    "generation_code": "def decode_list(encoded_list):\n    decoded = []\n    for element in encoded_list:\n        if isinstance(element, list):\n            count, value = element\n            decoded.extend([value] * count)\n        else:\n            decoded.append(element)\n    return decoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2143": {
    "question_id": "mbpp/214",
    "model": "deepseek-v3-250324",
    "generation_code": "def decode_list(encoded_list):\n    decoded = []\n    for item in encoded_list:\n        if isinstance(item, list):\n            count, value = item\n            decoded.extend([value] * count)\n        else:\n            decoded.append(item)\n    return decoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2144": {
    "question_id": "mbpp/214",
    "model": "deepseek-v3-250324",
    "generation_code": "def decode_list(encoded_list):\n    decoded = []\n    for item in encoded_list:\n        if isinstance(item, list):\n            count, value = item\n            decoded.extend([value] * count)\n        else:\n            decoded.append(item)\n    return decoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2145": {
    "question_id": "mbpp/214",
    "model": "deepseek-v3-250324",
    "generation_code": "def decode_list(encoded_list):\n    decoded = []\n    for item in encoded_list:\n        if isinstance(item, list):\n            count, value = item\n            decoded.extend([value] * count)\n        else:\n            decoded.append(item)\n    return decoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2146": {
    "question_id": "mbpp/214",
    "model": "deepseek-v3-250324",
    "generation_code": "def decode_list(encoded_list):\n    decoded = []\n    for element in encoded_list:\n        if isinstance(element, list):\n            count, value = element\n            decoded.extend([value] * count)\n        else:\n            decoded.append(element)\n    return decoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2147": {
    "question_id": "mbpp/214",
    "model": "deepseek-v3-250324",
    "generation_code": "def decode_list(encoded):\n    decoded = []\n    for element in encoded:\n        if isinstance(element, list):\n            count, value = element\n            decoded.extend([value] * count)\n        else:\n            decoded.append(element)\n    return decoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2148": {
    "question_id": "mbpp/214",
    "model": "deepseek-v3-250324",
    "generation_code": "def decode_list(encoded_list):\n    decoded = []\n    for element in encoded_list:\n        if isinstance(element, list):\n            count, value = element\n            decoded.extend([value] * count)\n        else:\n            decoded.append(element)\n    return decoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2149": {
    "question_id": "mbpp/214",
    "model": "deepseek-v3-250324",
    "generation_code": "def decode_list(encoded_list):\n    decoded = []\n    for element in encoded_list:\n        if isinstance(element, list):\n            count, value = element\n            decoded.extend([value] * count)\n        else:\n            decoded.append(element)\n    return decoded",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2150": {
    "question_id": "mbpp/215",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset_list(lst, nested_lst):\n    for sublist in nested_lst:\n        if all(item in lst for item in sublist):\n            return True\n    return False",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "2151": {
    "question_id": "mbpp/215",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset_list(lst, nested_lst):\n    for sublist in nested_lst:\n        if not all(elem in lst for elem in sublist):\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "2152": {
    "question_id": "mbpp/215",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset_list(lst, nested_lst):\n    for sublist in nested_lst:\n        if not all(elem in lst for elem in sublist):\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "2153": {
    "question_id": "mbpp/215",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset_list(lst, nested_lst):\n    for sublist in nested_lst:\n        if not all(elem in lst for elem in sublist):\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "2154": {
    "question_id": "mbpp/215",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset_list(lst, nested_lst):\n    for sublist in nested_lst:\n        if all(elem in lst for elem in sublist):\n            return True\n    return False",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "2155": {
    "question_id": "mbpp/215",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset_list(lst, nested_lst):\n    for sublist in nested_lst:\n        if all(elem in lst for elem in sublist):\n            return True\n    return False",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "2156": {
    "question_id": "mbpp/215",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset_list(lst, nested_lst):\n    for sublist in nested_lst:\n        if not all(item in lst for item in sublist):\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "2157": {
    "question_id": "mbpp/215",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset_list(lst, nested_lst):\n    for sublist in nested_lst:\n        if not all(elem in lst for elem in sublist):\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "2158": {
    "question_id": "mbpp/215",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset_list(lst, nested_lst):\n    for sublist in nested_lst:\n        if not all(elem in lst for elem in sublist):\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "2159": {
    "question_id": "mbpp/215",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset_list(lst, nested_lst):\n    for sublist in nested_lst:\n        if all(item in lst for item in sublist):\n            return True\n    return False",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "2160": {
    "question_id": "mbpp/216",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect \u0000,in fact None",
    "test_result": "False"
  },
  "2161": {
    "question_id": "mbpp/216",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect \u0000,in fact None",
    "test_result": "False"
  },
  "2162": {
    "question_id": "mbpp/216",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect \u0000,in fact None",
    "test_result": "False"
  },
  "2163": {
    "question_id": "mbpp/216",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect \u0000,in fact None",
    "test_result": "False"
  },
  "2164": {
    "question_id": "mbpp/216",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect \u0000,in fact None",
    "test_result": "False"
  },
  "2165": {
    "question_id": "mbpp/216",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect \u0000,in fact None",
    "test_result": "False"
  },
  "2166": {
    "question_id": "mbpp/216",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect \u0000,in fact None",
    "test_result": "False"
  },
  "2167": {
    "question_id": "mbpp/216",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect \u0000,in fact None",
    "test_result": "False"
  },
  "2168": {
    "question_id": "mbpp/216",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect \u0000,in fact None",
    "test_result": "False"
  },
  "2169": {
    "question_id": "mbpp/216",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect \u0000,in fact None",
    "test_result": "False"
  },
  "2170": {
    "question_id": "mbpp/217",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Operations(x, y):\n    if x == y:\n        return 0\n    if y < x:\n        x, y = y, x\n    if y % x != 0:\n        return -1\n    operations = 0\n    z = y // x\n    while z != 1:\n        if z % 2 != 0:\n            return -1\n        z = z // 2\n        operations += 1\n    return operations",
    "test_output": "FAILED: expect 4,in fact -1",
    "test_result": "False"
  },
  "2171": {
    "question_id": "mbpp/217",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Operations(x, y):\n    if x == y:\n        return 0\n    if x > y:\n        return x - y\n    if y % 2 == 1:\n        return 1 + min_Operations(x, y + 1)\n    else:\n        return 1 + min_Operations(x, y // 2)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "2172": {
    "question_id": "mbpp/217",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Operations(x, y):\n    if x == y:\n        return 0\n    if y < x:\n        x, y = y, x\n    if y % x != 0:\n        return -1\n    operations = 0\n    z = y // x\n    while z != 1:\n        if z % 2 != 0:\n            return -1\n        z = z // 2\n        operations += 1\n    return operations",
    "test_output": "FAILED: expect 4,in fact -1",
    "test_result": "False"
  },
  "2173": {
    "question_id": "mbpp/217",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Operations(x, y):\n    if x == y:\n        return 0\n    if x > y:\n        return x - y\n    if y % 2 == 0:\n        return 1 + min_Operations(x, y // 2)\n    else:\n        return 1 + min_Operations(x, y + 1)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "2174": {
    "question_id": "mbpp/217",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Operations(x, y):\n    if x == y:\n        return 0\n    if y < x:\n        x, y = y, x\n    if y % x != 0:\n        return -1\n    operations = 0\n    z = y // x\n    while z != 1:\n        if z % 2 != 0:\n            return -1\n        z = z // 2\n        operations += 1\n    return operations",
    "test_output": "FAILED: expect 4,in fact -1",
    "test_result": "False"
  },
  "2175": {
    "question_id": "mbpp/217",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Operations(x, y):\n    if x == y:\n        return 0\n    if x > y:\n        return x - y\n    if y % 2 == 1:\n        return 1 + min_Operations(x, y + 1)\n    else:\n        return 1 + min_Operations(x, y // 2)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "2176": {
    "question_id": "mbpp/217",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Operations(x, y):\n    if x == y:\n        return 0\n    if y < x:\n        x, y = y, x\n    if y % x != 0:\n        return -1\n    operations = 0\n    temp = y // x\n    while temp != 1:\n        if temp % 2 != 0:\n            return -1\n        temp = temp // 2\n        operations += 1\n    return operations",
    "test_output": "FAILED: expect 4,in fact -1",
    "test_result": "False"
  },
  "2177": {
    "question_id": "mbpp/217",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Operations(x, y):\n    if x == y:\n        return 0\n    if y > x:\n        x, y = y, x\n    if x % y != 0:\n        return -1\n    operations = 0\n    while x != y:\n        if x >= 2 * y:\n            x = x // 2\n            operations += 1\n        else:\n            return -1\n    return operations",
    "test_output": "FAILED: expect 4,in fact -1",
    "test_result": "False"
  },
  "2178": {
    "question_id": "mbpp/217",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Operations(x, y):\n    if x == y:\n        return 0\n    if y > x:\n        x, y = y, x\n    if x % y != 0:\n        return -1\n    operations = 0\n    while x != y:\n        if x % 2 == 0 and x // 2 >= y:\n            x = x // 2\n            operations += 1\n        else:\n            return -1\n    return operations",
    "test_output": "FAILED: expect 4,in fact -1",
    "test_result": "False"
  },
  "2179": {
    "question_id": "mbpp/217",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Operations(x, y):\n    if x == y:\n        return 0\n    if y < x:\n        x, y = y, x\n    if y % x != 0:\n        return -1\n    operations = 0\n    while y != x:\n        if y % 2 == 0 and y // 2 >= x:\n            y = y // 2\n            operations += 1\n        else:\n            return -1\n    return operations",
    "test_output": "FAILED: expect 4,in fact -1",
    "test_result": "False"
  },
  "2180": {
    "question_id": "mbpp/218",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_min_max(test_tup, k):\n    if not test_tup or k <= 0:\n        return ()\n    sorted_tup = sorted(test_tup)\n    min_k = tuple(sorted_tup[:k])\n    max_k = tuple(sorted_tup[-k:][::-1])\n    return min_k + max_k",
    "test_output": "FAILED: expect (3, 5, 8, 20),in fact (3, 5, 20, 8)",
    "test_result": "False"
  },
  "2181": {
    "question_id": "mbpp/218",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_min_max(test_tup, k):\n    if not test_tup or k <= 0:\n        return ()\n    sorted_tup = sorted(test_tup)\n    min_elements = tuple(sorted_tup[:k])\n    max_elements = tuple(sorted_tup[-k:][::-1])\n    return min_elements + max_elements",
    "test_output": "FAILED: expect (3, 5, 8, 20),in fact (3, 5, 20, 8)",
    "test_result": "False"
  },
  "2182": {
    "question_id": "mbpp/218",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_min_max(test_tup, k):\n    if not test_tup or k <= 0:\n        return ()\n    sorted_tup = sorted(test_tup)\n    min_elements = tuple(sorted_tup[:k])\n    max_elements = tuple(sorted_tup[-k:][::-1])\n    return min_elements + max_elements",
    "test_output": "FAILED: expect (3, 5, 8, 20),in fact (3, 5, 20, 8)",
    "test_result": "False"
  },
  "2183": {
    "question_id": "mbpp/218",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_min_max(test_tup, k):\n    if not test_tup or k <= 0:\n        return ()\n    sorted_tup = sorted(test_tup)\n    min_elements = tuple(sorted_tup[:k])\n    max_elements = tuple(sorted_tup[-k:][::-1])\n    return min_elements + max_elements",
    "test_output": "FAILED: expect (3, 5, 8, 20),in fact (3, 5, 20, 8)",
    "test_result": "False"
  },
  "2184": {
    "question_id": "mbpp/218",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_min_max(test_tup, k):\n    if not test_tup or k <= 0:\n        return ()\n    sorted_tup = sorted(test_tup)\n    min_elements = tuple(sorted_tup[:k])\n    max_elements = tuple(sorted_tup[-k:][::-1])\n    return min_elements + max_elements",
    "test_output": "FAILED: expect (3, 5, 8, 20),in fact (3, 5, 20, 8)",
    "test_result": "False"
  },
  "2185": {
    "question_id": "mbpp/218",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_min_max(test_tup, k):\n    if not test_tup or k <= 0:\n        return tuple()\n    sorted_tup = sorted(test_tup)\n    min_elements = tuple(sorted_tup[:k])\n    max_elements = tuple(sorted_tup[-k:][::-1])\n    return min_elements + max_elements",
    "test_output": "FAILED: expect (3, 5, 8, 20),in fact (3, 5, 20, 8)",
    "test_result": "False"
  },
  "2186": {
    "question_id": "mbpp/218",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_min_max(test_tup, k):\n    if not test_tup or k <= 0:\n        return ()\n    sorted_tup = sorted(test_tup)\n    min_elements = tuple(sorted_tup[:k])\n    max_elements = tuple(sorted_tup[-k:][::-1])\n    return min_elements + max_elements",
    "test_output": "FAILED: expect (3, 5, 8, 20),in fact (3, 5, 20, 8)",
    "test_result": "False"
  },
  "2187": {
    "question_id": "mbpp/218",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_min_max(test_tup, k):\n    if not test_tup or k <= 0:\n        return ()\n    sorted_tup = sorted(test_tup)\n    min_elements = tuple(sorted_tup[:k])\n    max_elements = tuple(sorted_tup[-k:][::-1])\n    return min_elements + max_elements",
    "test_output": "FAILED: expect (3, 5, 8, 20),in fact (3, 5, 20, 8)",
    "test_result": "False"
  },
  "2188": {
    "question_id": "mbpp/218",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_min_max(test_tup, k):\n    if not test_tup or k <= 0:\n        return ()\n    sorted_tup = sorted(test_tup)\n    min_elements = tuple(sorted_tup[:k])\n    max_elements = tuple(sorted_tup[-k:][::-1])\n    return min_elements + max_elements",
    "test_output": "FAILED: expect (3, 5, 8, 20),in fact (3, 5, 20, 8)",
    "test_result": "False"
  },
  "2189": {
    "question_id": "mbpp/218",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_min_max(test_tup, k):\n    if not test_tup or k <= 0:\n        return ()\n    sorted_tup = sorted(test_tup)\n    min_elements = tuple(sorted_tup[:k])\n    max_elements = tuple(sorted_tup[-k:][::-1])\n    return min_elements + max_elements",
    "test_output": "FAILED: expect (3, 5, 8, 20),in fact (3, 5, 20, 8)",
    "test_result": "False"
  },
  "2190": {
    "question_id": "mbpp/219",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_max_specialchar(s, n):\n    count = 0\n    result = []\n    for char in s:\n        if char in (' ', ',', '.') and count < n:\n            result.append(':')\n            count += 1\n        else:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2191": {
    "question_id": "mbpp/219",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_max_specialchar(s, n):\n    count = 0\n    result = []\n    for char in s:\n        if char in (' ', ',', '.') and count < n:\n            result.append(':')\n            count += 1\n        else:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2192": {
    "question_id": "mbpp/219",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_max_specialchar(s, n):\n    count = 0\n    result = []\n    for char in s:\n        if char in (' ', ',', '.') and count < n:\n            result.append(':')\n            count += 1\n        else:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2193": {
    "question_id": "mbpp/219",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_max_specialchar(s, n):\n    count = 0\n    result = []\n    for char in s:\n        if char in (' ', ',', '.') and count < n:\n            result.append(':')\n            count += 1\n        else:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2194": {
    "question_id": "mbpp/219",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef replace_max_specialchar(text, n):\n    if n <= 0:\n        return text\n    pattern = r'[ ,.]'\n    matches = list(re.finditer(pattern, text))\n    count = 0\n    result = []\n    last_pos = 0\n    for match in matches:\n        if count >= n:\n            break\n        start, end = match.span()\n        result.append(text[last_pos:start])\n        result.append(':')\n        last_pos = end\n        count += 1\n    result.append(text[last_pos:])\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2195": {
    "question_id": "mbpp/219",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_max_specialchar(text, n):\n    count = 0\n    result = []\n    for char in text:\n        if char in (' ', ',', '.') and count < n:\n            result.append(':')\n            count += 1\n        else:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2196": {
    "question_id": "mbpp/219",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_max_specialchar(text, n):\n    count = 0\n    result = []\n    for char in text:\n        if char in (' ', ',', '.') and count < n:\n            result.append(':')\n            count += 1\n        else:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2197": {
    "question_id": "mbpp/219",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_max_specialchar(s, n):\n    count = 0\n    result = []\n    for char in s:\n        if char in (' ', ',', '.') and count < n:\n            result.append(':')\n            count += 1\n        else:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2198": {
    "question_id": "mbpp/219",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_max_specialchar(text, n):\n    if n <= 0:\n        return text\n    count = 0\n    result = []\n    for char in text:\n        if char in (' ', ',', '.') and count < n:\n            result.append(':')\n            count += 1\n        else:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2199": {
    "question_id": "mbpp/219",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_max_specialchar(s, n):\n    count = 0\n    result = []\n    for char in s:\n        if char in (' ', ',', '.') and count < n:\n            result.append(':')\n            count += 1\n        else:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2200": {
    "question_id": "mbpp/220",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2201": {
    "question_id": "mbpp/220",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2202": {
    "question_id": "mbpp/220",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2203": {
    "question_id": "mbpp/220",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2204": {
    "question_id": "mbpp/220",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2205": {
    "question_id": "mbpp/220",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2206": {
    "question_id": "mbpp/220",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2207": {
    "question_id": "mbpp/220",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2208": {
    "question_id": "mbpp/220",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2209": {
    "question_id": "mbpp/220",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2210": {
    "question_id": "mbpp/221",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    return all(isinstance(x, first_type) for x in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2211": {
    "question_id": "mbpp/221",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    return all(isinstance(x, first_type) for x in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2212": {
    "question_id": "mbpp/221",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    return all(isinstance(x, first_type) for x in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2213": {
    "question_id": "mbpp/221",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    return all(isinstance(x, first_type) for x in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2214": {
    "question_id": "mbpp/221",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    return all(isinstance(x, first_type) for x in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2215": {
    "question_id": "mbpp/221",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    return all(isinstance(x, first_type) for x in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2216": {
    "question_id": "mbpp/221",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    return all(isinstance(x, first_type) for x in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2217": {
    "question_id": "mbpp/221",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    for element in t[1:]:\n        if type(element) != first_type:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2218": {
    "question_id": "mbpp/221",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    for element in t[1:]:\n        if type(element) != first_type:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2219": {
    "question_id": "mbpp/221",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    return all(isinstance(x, first_type) for x in t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2220": {
    "question_id": "mbpp/222",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_majority(arr, n, x):\n    first_index = -1\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if first_index == -1:\n        return False\n    \n    last_index = -1\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_index = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    count = last_index - first_index + 1\n    return count > n // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2221": {
    "question_id": "mbpp/222",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_majority(arr, n, x):\n    first_index = -1\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if first_index == -1:\n        return False\n    \n    last_index = -1\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_index = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    count = last_index - first_index + 1\n    return count > n // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2222": {
    "question_id": "mbpp/222",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_majority(arr, n, x):\n    first_index = -1\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if first_index == -1:\n        return False\n    \n    last_index = -1\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_index = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    count = last_index - first_index + 1\n    return count > n // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2223": {
    "question_id": "mbpp/222",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_majority(arr, n, x):\n    first = 0\n    last = n - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1] != x:\n                break\n            last = mid - 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    first_occurrence = mid\n    \n    first = 0\n    last = n - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if arr[mid] == x:\n            if mid == n - 1 or arr[mid + 1] != x:\n                break\n            first = mid + 1\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n    last_occurrence = mid\n    \n    count = last_occurrence - first_occurrence + 1\n    return count > n // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2224": {
    "question_id": "mbpp/222",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_majority(arr, n, x):\n    first_index = -1\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if first_index == -1:\n        return False\n    \n    last_index = -1\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_index = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    count = last_index - first_index + 1\n    return count > n // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2225": {
    "question_id": "mbpp/222",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_majority(arr, n, x):\n    first_index = -1\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if first_index == -1:\n        return False\n    \n    last_index = -1\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_index = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    count = last_index - first_index + 1\n    return count > n // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2226": {
    "question_id": "mbpp/222",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_majority(arr, n, x):\n    first_index = -1\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if first_index == -1:\n        return False\n    \n    last_index = -1\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_index = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    count = last_index - first_index + 1\n    return count > n // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2227": {
    "question_id": "mbpp/222",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_majority(arr, n, x):\n    first_index = -1\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if first_index == -1:\n        return False\n    \n    last_index = -1\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_index = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    count = last_index - first_index + 1\n    return count > n // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2228": {
    "question_id": "mbpp/222",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_majority(arr, n, x):\n    first_index = -1\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if first_index == -1:\n        return False\n    \n    last_index = -1\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_index = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    count = last_index - first_index + 1\n    return count > n // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2229": {
    "question_id": "mbpp/222",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_majority(arr, n, x):\n    first_index = -1\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if first_index == -1:\n        return False\n    \n    last_index = -1\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_index = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    count = last_index - first_index + 1\n    return count > n // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2230": {
    "question_id": "mbpp/223",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2231": {
    "question_id": "mbpp/223",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2232": {
    "question_id": "mbpp/223",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2233": {
    "question_id": "mbpp/223",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2234": {
    "question_id": "mbpp/223",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2235": {
    "question_id": "mbpp/223",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2236": {
    "question_id": "mbpp/223",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2237": {
    "question_id": "mbpp/223",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2238": {
    "question_id": "mbpp/223",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2239": {
    "question_id": "mbpp/223",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2240": {
    "question_id": "mbpp/224",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2241": {
    "question_id": "mbpp/224",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min(arr, low, high):\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2242": {
    "question_id": "mbpp/224",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min(arr, low, high):\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2243": {
    "question_id": "mbpp/224",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min(arr, low, high):\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2244": {
    "question_id": "mbpp/224",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n    if mid > low and arr[mid] < arr[mid-1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid-1)\n    return find_Min(arr, mid+1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2245": {
    "question_id": "mbpp/224",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n    if mid > low and arr[mid] < arr[mid-1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid-1)\n    return find_Min(arr, mid+1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2246": {
    "question_id": "mbpp/224",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2247": {
    "question_id": "mbpp/224",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n    if mid > low and arr[mid] < arr[mid-1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid-1)\n    return find_Min(arr, mid+1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2248": {
    "question_id": "mbpp/224",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2249": {
    "question_id": "mbpp/224",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min(arr, low, high):\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2250": {
    "question_id": "mbpp/225",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_values_string(s):\n    return s[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2251": {
    "question_id": "mbpp/225",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_values_string(s):\n    return s[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2252": {
    "question_id": "mbpp/225",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_values_string(s):\n    return s[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2253": {
    "question_id": "mbpp/225",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_values_string(s):\n    return s[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2254": {
    "question_id": "mbpp/225",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_values_string(s):\n    return s[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2255": {
    "question_id": "mbpp/225",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_values_string(s):\n    return s[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2256": {
    "question_id": "mbpp/225",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_values_string(s):\n    return s[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2257": {
    "question_id": "mbpp/225",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_values_string(s):\n    return s[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2258": {
    "question_id": "mbpp/225",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_values_string(s):\n    return s[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2259": {
    "question_id": "mbpp/225",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_values_string(s):\n    return s[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2260": {
    "question_id": "mbpp/226",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2261": {
    "question_id": "mbpp/226",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2262": {
    "question_id": "mbpp/226",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2263": {
    "question_id": "mbpp/226",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2264": {
    "question_id": "mbpp/226",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2265": {
    "question_id": "mbpp/226",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2266": {
    "question_id": "mbpp/226",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2267": {
    "question_id": "mbpp/226",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2268": {
    "question_id": "mbpp/226",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2269": {
    "question_id": "mbpp/226",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_three(a, b, c):\n    return min(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2270": {
    "question_id": "mbpp/227",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2271": {
    "question_id": "mbpp/227",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2272": {
    "question_id": "mbpp/227",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2273": {
    "question_id": "mbpp/227",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2274": {
    "question_id": "mbpp/227",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2275": {
    "question_id": "mbpp/227",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2276": {
    "question_id": "mbpp/227",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2277": {
    "question_id": "mbpp/227",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = (1 << (r - l + 1)) - 1\n    mask <<= (l - 1)\n    return (n & mask) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2278": {
    "question_id": "mbpp/227",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2279": {
    "question_id": "mbpp/227",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2280": {
    "question_id": "mbpp/228",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2281": {
    "question_id": "mbpp/228",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2282": {
    "question_id": "mbpp/228",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2283": {
    "question_id": "mbpp/228",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2284": {
    "question_id": "mbpp/228",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2285": {
    "question_id": "mbpp/228",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2286": {
    "question_id": "mbpp/228",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2287": {
    "question_id": "mbpp/228",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2288": {
    "question_id": "mbpp/228",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2289": {
    "question_id": "mbpp/228",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2290": {
    "question_id": "mbpp/229",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_blank(string, char):\n    return string.replace(' ', char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2291": {
    "question_id": "mbpp/229",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_blank(string, char):\n    return string.replace(' ', char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2292": {
    "question_id": "mbpp/229",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_blank(string, char):\n    return string.replace(' ', char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2293": {
    "question_id": "mbpp/229",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_blank(string, char):\n    return string.replace(' ', char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2294": {
    "question_id": "mbpp/229",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_blank(string, char):\n    return string.replace(' ', char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2295": {
    "question_id": "mbpp/229",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_blank(string, char):\n    return string.replace(' ', char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2296": {
    "question_id": "mbpp/229",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_blank(string, char):\n    return string.replace(' ', char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2297": {
    "question_id": "mbpp/229",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_blank(string, char):\n    return string.replace(' ', char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2298": {
    "question_id": "mbpp/229",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_blank(string, char):\n    return string.replace(' ', char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2299": {
    "question_id": "mbpp/229",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_blank(string, char):\n    return string.replace(' ', char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2300": {
    "question_id": "mbpp/230",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(triangle, n):\n    if n == 0:\n        return 0\n    dp = [[0] * (i + 1) for i in range(n)]\n    dp[0][0] = triangle[0][0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + triangle[i][j]\n            elif j == i:\n                dp[i][j] = dp[i-1][j-1] + triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\n    return max(dp[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2301": {
    "question_id": "mbpp/230",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(triangle, n):\n    if not triangle or n == 0:\n        return 0\n    dp = triangle[-1].copy()\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            dp[j] = triangle[i][j] + max(dp[j], dp[j+1])\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2302": {
    "question_id": "mbpp/230",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(triangle, n):\n    if n == 0:\n        return 0\n    dp = [[0] * (i + 1) for i in range(n)]\n    dp[0][0] = triangle[0][0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + triangle[i][j]\n            elif j == i:\n                dp[i][j] = dp[i-1][j-1] + triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\n    return max(dp[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2303": {
    "question_id": "mbpp/230",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(triangle, n):\n    if n == 0:\n        return 0\n    dp = [[0] * (i + 1) for i in range(n)]\n    dp[0][0] = triangle[0][0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + triangle[i][j]\n            elif j == i:\n                dp[i][j] = dp[i-1][j-1] + triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\n    return max(dp[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2304": {
    "question_id": "mbpp/230",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(triangle, n):\n    if n == 0:\n        return 0\n    dp = [[0] * (i + 1) for i in range(n)]\n    dp[0][0] = triangle[0][0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + triangle[i][j]\n            elif j == i:\n                dp[i][j] = dp[i-1][j-1] + triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\n    return max(dp[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2305": {
    "question_id": "mbpp/230",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(triangle, n):\n    if not triangle or n == 0:\n        return 0\n    dp = [[0] * (i + 1) for i in range(n)]\n    dp[0][0] = triangle[0][0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + triangle[i][j]\n            elif j == i:\n                dp[i][j] = dp[i-1][j-1] + triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\n    return max(dp[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2306": {
    "question_id": "mbpp/230",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(triangle, n):\n    if n == 0:\n        return 0\n    dp = [[0] * (i + 1) for i in range(n)]\n    dp[0][0] = triangle[0][0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + triangle[i][j]\n            elif j == i:\n                dp[i][j] = dp[i-1][j-1] + triangle[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\n    return max(dp[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2307": {
    "question_id": "mbpp/230",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(triangle, n):\n    if not triangle or n == 0:\n        return 0\n    dp = triangle[-1].copy()\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            dp[j] = triangle[i][j] + max(dp[j], dp[j+1])\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2308": {
    "question_id": "mbpp/230",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(triangle, size):\n    if size == 0:\n        return 0\n    dp = triangle[-1].copy()\n    for i in range(size-2, -1, -1):\n        for j in range(len(triangle[i])):\n            dp[j] = triangle[i][j] + max(dp[j], dp[j+1])\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2309": {
    "question_id": "mbpp/230",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(triangle, n):\n    if not triangle or n == 0:\n        return 0\n    dp = triangle[-1].copy()\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            dp[j] = triangle[i][j] + max(dp[j], dp[j+1])\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2310": {
    "question_id": "mbpp/231",
    "model": "deepseek-v3-250324",
    "generation_code": "def larg_nnum(dataset, n):\n    if n <= 0:\n        return []\n    sorted_data = sorted(dataset, reverse=True)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2311": {
    "question_id": "mbpp/231",
    "model": "deepseek-v3-250324",
    "generation_code": "def larg_nnum(dataset, n):\n    if n <= 0:\n        return []\n    sorted_data = sorted(dataset, reverse=True)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2312": {
    "question_id": "mbpp/231",
    "model": "deepseek-v3-250324",
    "generation_code": "def larg_nnum(dataset, n):\n    if n <= 0:\n        return []\n    sorted_dataset = sorted(dataset, reverse=True)\n    return sorted_dataset[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2313": {
    "question_id": "mbpp/231",
    "model": "deepseek-v3-250324",
    "generation_code": "def larg_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset, reverse=True)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2314": {
    "question_id": "mbpp/231",
    "model": "deepseek-v3-250324",
    "generation_code": "def larg_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset, reverse=True)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2315": {
    "question_id": "mbpp/231",
    "model": "deepseek-v3-250324",
    "generation_code": "def larg_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset, reverse=True)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2316": {
    "question_id": "mbpp/231",
    "model": "deepseek-v3-250324",
    "generation_code": "def larg_nnum(dataset, n):\n    if n <= 0:\n        return []\n    sorted_data = sorted(dataset, reverse=True)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2317": {
    "question_id": "mbpp/231",
    "model": "deepseek-v3-250324",
    "generation_code": "def larg_nnum(dataset, n):\n    if n <= 0:\n        return []\n    sorted_dataset = sorted(dataset, reverse=True)\n    return sorted_dataset[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2318": {
    "question_id": "mbpp/231",
    "model": "deepseek-v3-250324",
    "generation_code": "def larg_nnum(dataset, n):\n    if n <= 0:\n        return []\n    sorted_data = sorted(dataset, reverse=True)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2319": {
    "question_id": "mbpp/231",
    "model": "deepseek-v3-250324",
    "generation_code": "def larg_nnum(dataset, n):\n    if not dataset or n <= 0:\n        return []\n    sorted_data = sorted(dataset, reverse=True)\n    return sorted_data[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2320": {
    "question_id": "mbpp/232",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsuface_cylinder(height, radius):\n    if radius <= 0 or height <= 0:\n        return 0\n    return 2 * math.pi * radius * height",
    "test_output": "FAILED: expect 314.15000000000003,in fact 314.1592653589793",
    "test_result": "False"
  },
  "2321": {
    "question_id": "mbpp/232",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsuface_cylinder(height, radius):\n    if radius <= 0 or height <= 0:\n        return 0\n    return 2 * math.pi * radius * height",
    "test_output": "FAILED: expect 314.15000000000003,in fact 314.1592653589793",
    "test_result": "False"
  },
  "2322": {
    "question_id": "mbpp/232",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsuface_cylinder(height, radius):\n    if radius <= 0 or height <= 0:\n        return 0\n    return 2 * math.pi * radius * height",
    "test_output": "FAILED: expect 314.15000000000003,in fact 314.1592653589793",
    "test_result": "False"
  },
  "2323": {
    "question_id": "mbpp/232",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsuface_cylinder(height, radius):\n    if height <= 0 or radius <= 0:\n        return 0\n    return 2 * math.pi * radius * height",
    "test_output": "FAILED: expect 314.15000000000003,in fact 314.1592653589793",
    "test_result": "False"
  },
  "2324": {
    "question_id": "mbpp/232",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsuface_cylinder(height, radius):\n    if height <= 0 or radius <= 0:\n        return 0\n    return 2 * math.pi * radius * height",
    "test_output": "FAILED: expect 314.15000000000003,in fact 314.1592653589793",
    "test_result": "False"
  },
  "2325": {
    "question_id": "mbpp/232",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsuface_cylinder(height, radius):\n    return 2 * math.pi * radius * height",
    "test_output": "FAILED: expect 314.15000000000003,in fact 314.1592653589793",
    "test_result": "False"
  },
  "2326": {
    "question_id": "mbpp/232",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsuface_cylinder(height, radius):\n    if height <= 0 or radius <= 0:\n        return 0\n    return 2 * math.pi * radius * height",
    "test_output": "FAILED: expect 314.15000000000003,in fact 314.1592653589793",
    "test_result": "False"
  },
  "2327": {
    "question_id": "mbpp/232",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsuface_cylinder(height, radius):\n    if height <= 0 or radius <= 0:\n        return 0\n    return 2 * math.pi * radius * height",
    "test_output": "FAILED: expect 314.15000000000003,in fact 314.1592653589793",
    "test_result": "False"
  },
  "2328": {
    "question_id": "mbpp/232",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    return 2 * math.pi * radius * height",
    "test_output": "FAILED: expect 314.15000000000003,in fact 314.1592653589793",
    "test_result": "False"
  },
  "2329": {
    "question_id": "mbpp/232",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsuface_cylinder(height, radius):\n    if height <= 0 or radius <= 0:\n        return 0\n    return 2 * math.pi * radius * height",
    "test_output": "FAILED: expect 314.15000000000003,in fact 314.1592653589793",
    "test_result": "False"
  },
  "2330": {
    "question_id": "mbpp/233",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return side_length ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2331": {
    "question_id": "mbpp/233",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return side_length ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2332": {
    "question_id": "mbpp/233",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return side_length ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2333": {
    "question_id": "mbpp/233",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return side_length ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2334": {
    "question_id": "mbpp/233",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return side_length ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2335": {
    "question_id": "mbpp/233",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return side_length ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2336": {
    "question_id": "mbpp/233",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return side_length ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2337": {
    "question_id": "mbpp/233",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return side_length ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2338": {
    "question_id": "mbpp/233",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return side_length ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2339": {
    "question_id": "mbpp/233",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cube(side_length):\n    return side_length ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2340": {
    "question_id": "mbpp/234",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_set_number(n):\n    mask = 0x55555555  # This is 0101 0101 ... in binary for 32 bits\n    return n | mask",
    "test_output": "FAILED: expect 10,in fact 1431655775",
    "test_result": "False"
  },
  "2341": {
    "question_id": "mbpp/234",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_set_number(n):\n    mask = 0xAAAAAAAA  # 0b10101010101010101010101010101010 in 32 bits\n    return n | mask",
    "test_output": "FAILED: expect 10,in fact 2863311530",
    "test_result": "False"
  },
  "2342": {
    "question_id": "mbpp/234",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_set_number(n):\n    mask = 0xAAAAAAAA  # 0b10101010101010101010101010101010\n    return n | mask",
    "test_output": "FAILED: expect 10,in fact 2863311530",
    "test_result": "False"
  },
  "2343": {
    "question_id": "mbpp/234",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_set_number(n):\n    mask = 0x55555555  # Binary: 0101 0101 0101 0101 0101 0101 0101 0101\n    return n | mask",
    "test_output": "FAILED: expect 10,in fact 1431655775",
    "test_result": "False"
  },
  "2344": {
    "question_id": "mbpp/234",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_set_number(n):\n    mask = 0xAAAAAAAA  # This is a 32-bit mask where all even bits are set (bits 1, 3, 5, etc.)\n    return n | mask",
    "test_output": "FAILED: expect 10,in fact 2863311530",
    "test_result": "False"
  },
  "2345": {
    "question_id": "mbpp/234",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_set_number(n):\n    mask = 0xAAAAAAAA  # This is a 32-bit mask where all even bits are set (bits 1,3,5,...)\n    return n | mask",
    "test_output": "FAILED: expect 10,in fact 2863311530",
    "test_result": "False"
  },
  "2346": {
    "question_id": "mbpp/234",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_set_number(n):\n    mask = 0xAAAAAAAA  # 0b10101010101010101010101010101010 in 32 bits\n    return n | mask",
    "test_output": "FAILED: expect 10,in fact 2863311530",
    "test_result": "False"
  },
  "2347": {
    "question_id": "mbpp/234",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_set_number(n):\n    mask = 0xAAAAAAAA  # 0b10101010101010101010101010101010\n    return n | mask",
    "test_output": "FAILED: expect 10,in fact 2863311530",
    "test_result": "False"
  },
  "2348": {
    "question_id": "mbpp/234",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_set_number(n):\n    mask = 0x55555555  # This is 0101 0101 ... in binary for 32 bits\n    return n | mask",
    "test_output": "FAILED: expect 10,in fact 1431655775",
    "test_result": "False"
  },
  "2349": {
    "question_id": "mbpp/234",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_set_number(n):\n    mask = 0x55555555  # This is a mask where all even bits are set (0x55555555 in hex is 0101 0101 ... in binary)\n    return n | mask",
    "test_output": "FAILED: expect 10,in fact 1431655775",
    "test_result": "False"
  },
  "2350": {
    "question_id": "mbpp/235",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_Triangle(N, K):\n    if K > N or K <= 0:\n        return 0\n    return (N - K + 1) * (N - K + 2) // 2",
    "test_output": "FAILED: expect 7,in fact 6",
    "test_result": "False"
  },
  "2351": {
    "question_id": "mbpp/235",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_Triangle(N, K):\n    if K > N or K <= 0:\n        return 0\n    return (N - K + 1) * (N - K + 2) // 2",
    "test_output": "FAILED: expect 7,in fact 6",
    "test_result": "False"
  },
  "2352": {
    "question_id": "mbpp/235",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_Triangle(N, K):\n    if K > N or K <= 0:\n        return 0\n    return (N - K + 1) * (N - K + 2) // 2",
    "test_output": "FAILED: expect 7,in fact 6",
    "test_result": "False"
  },
  "2353": {
    "question_id": "mbpp/235",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_Triangle(n, k):\n    if k > n:\n        return 0\n    if k == 1:\n        return (n * (n + 1)) // 2\n    if k == n:\n        return 1\n    total = 0\n    for i in range(k, n + 1):\n        total += (i - k + 1) * (i - k + 2) // 2\n    return total",
    "test_output": "FAILED: expect 7,in fact 10",
    "test_result": "False"
  },
  "2354": {
    "question_id": "mbpp/235",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_Triangle(N, K):\n    if K > N:\n        return 0\n    if K == N:\n        return 1\n    total = 0\n    for i in range(K, N + 1):\n        total += (i - K + 1) ** 2\n    return total",
    "test_output": "FAILED: expect 7,in fact 14",
    "test_result": "False"
  },
  "2355": {
    "question_id": "mbpp/235",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_Triangle(N, K):\n    if K > N:\n        return 0\n    if K == N:\n        return 1\n    if K == 1:\n        return (N * (N + 1)) // 2\n    total = 0\n    for i in range(K, N + 1):\n        total += (i - K + 1) * (i - K + 2) // 2\n    return total",
    "test_output": "FAILED: expect 7,in fact 10",
    "test_result": "False"
  },
  "2356": {
    "question_id": "mbpp/235",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_Triangle(N, K):\n    if K > N:\n        return 0\n    m = N - K + 1\n    return m * (m + 1) // 2",
    "test_output": "FAILED: expect 7,in fact 6",
    "test_result": "False"
  },
  "2357": {
    "question_id": "mbpp/235",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_Triangle(N, K):\n    if K > N:\n        return 0\n    count = 0\n    for i in range(1, N - K + 2):\n        count += i * i\n    return count",
    "test_output": "FAILED: expect 7,in fact 14",
    "test_result": "False"
  },
  "2358": {
    "question_id": "mbpp/235",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_Triangle(N, K):\n    if K > N or K <= 0:\n        return 0\n    count = 0\n    for i in range(1, N - K + 2):\n        count += i * i\n    return count",
    "test_output": "FAILED: expect 7,in fact 14",
    "test_result": "False"
  },
  "2359": {
    "question_id": "mbpp/235",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_Triangle(N, K):\n    if K > N:\n        return 0\n    if K == N:\n        return 1\n    total = 0\n    for i in range(K, N + 1):\n        total += (i - K + 1) * (i - K + 1)\n    return total",
    "test_output": "FAILED: expect 7,in fact 14",
    "test_result": "False"
  },
  "2360": {
    "question_id": "mbpp/236",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_occurences(tuples_list):\n    occurrence_dict = {}\n    for t in tuples_list:\n        sorted_t = tuple(sorted(t))\n        occurrence_dict[sorted_t] = occurrence_dict.get(sorted_t, 0) + 1\n    result = {}\n    for key in occurrence_dict:\n        if occurrence_dict[key] > 1:\n            result[key] = occurrence_dict[key]\n    return result",
    "test_output": "FAILED: expect {(1, 3): 2, (2, 5): 2, (3, 6): 1},in fact {(1, 3): 2, (2, 5): 2}",
    "test_result": "False"
  },
  "2361": {
    "question_id": "mbpp/236",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_occurences(tuples_list):\n    occurrence_dict = {}\n    for t in tuples_list:\n        sorted_t = tuple(sorted(t))\n        occurrence_dict[sorted_t] = occurrence_dict.get(sorted_t, 0) + 1\n    return occurrence_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2362": {
    "question_id": "mbpp/236",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_occurences(tuples_list):\n    occurrence_dict = {}\n    for t in tuples_list:\n        sorted_t = tuple(sorted(t))\n        occurrence_dict[sorted_t] = occurrence_dict.get(sorted_t, 0) + 1\n    return occurrence_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2363": {
    "question_id": "mbpp/236",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_occurences(tuples_list):\n    occurrence_dict = {}\n    for t in tuples_list:\n        sorted_t = tuple(sorted(t))\n        occurrence_dict[sorted_t] = occurrence_dict.get(sorted_t, 0) + 1\n    return occurrence_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2364": {
    "question_id": "mbpp/236",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_occurences(tuples_list):\n    occurrence_dict = {}\n    for t in tuples_list:\n        sorted_t = tuple(sorted(t))\n        occurrence_dict[sorted_t] = occurrence_dict.get(sorted_t, 0) + 1\n    return occurrence_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2365": {
    "question_id": "mbpp/236",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_occurences(tuples_list):\n    occurrence_dict = {}\n    for t in tuples_list:\n        sorted_t = tuple(sorted(t))\n        if sorted_t in occurrence_dict:\n            occurrence_dict[sorted_t] += 1\n        else:\n            occurrence_dict[sorted_t] = 1\n    return occurrence_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2366": {
    "question_id": "mbpp/236",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_occurences(tuples_list):\n    occurrence_dict = {}\n    for t in tuples_list:\n        sorted_t = tuple(sorted(t))\n        occurrence_dict[sorted_t] = occurrence_dict.get(sorted_t, 0) + 1\n    result = {}\n    for key in occurrence_dict:\n        if occurrence_dict[key] > 1:\n            result[key] = occurrence_dict[key]\n        else:\n            result[key] = 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2367": {
    "question_id": "mbpp/236",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_occurences(tuples_list):\n    occurrence_dict = {}\n    for t in tuples_list:\n        sorted_t = tuple(sorted(t))\n        occurrence_dict[sorted_t] = occurrence_dict.get(sorted_t, 0) + 1\n    result = {}\n    for key in occurrence_dict:\n        if len(key) == 2:\n            result[key] = occurrence_dict[key]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2368": {
    "question_id": "mbpp/236",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_occurences(tuples_list):\n    occurrence_dict = {}\n    for t in tuples_list:\n        sorted_t = tuple(sorted(t))\n        occurrence_dict[sorted_t] = occurrence_dict.get(sorted_t, 0) + 1\n    return occurrence_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2369": {
    "question_id": "mbpp/236",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_occurences(tuples_list):\n    occurrence_dict = {}\n    for t in tuples_list:\n        sorted_t = tuple(sorted(t))\n        occurrence_dict[sorted_t] = occurrence_dict.get(sorted_t, 0) + 1\n    return occurrence_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2370": {
    "question_id": "mbpp/237",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2371": {
    "question_id": "mbpp/237",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2372": {
    "question_id": "mbpp/237",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2373": {
    "question_id": "mbpp/237",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2374": {
    "question_id": "mbpp/237",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2375": {
    "question_id": "mbpp/237",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2376": {
    "question_id": "mbpp/237",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2377": {
    "question_id": "mbpp/237",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2378": {
    "question_id": "mbpp/237",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2379": {
    "question_id": "mbpp/237",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2380": {
    "question_id": "mbpp/238",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 0\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            k = 2 * j\n            if k > m:\n                continue\n            for l in range(k, m + 1):\n                dp[i][j] += dp[i - 1][l]\n    \n    total = 0\n    for j in range(1, m + 1):\n        total += dp[n][j]\n    \n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2381": {
    "question_id": "mbpp/238",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 0\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            k = 2 * j\n            if k <= m:\n                dp[i][j] = dp[i-1][k]\n            if j + 1 <= m:\n                dp[i][j] += dp[i][j+1]\n    \n    total = 0\n    for j in range(1, m + 1):\n        total += dp[n][j]\n    \n    return total",
    "test_output": "FAILED: expect 4,in fact 1",
    "test_result": "False"
  },
  "2382": {
    "question_id": "mbpp/238",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            k = 2 * j\n            if k > m:\n                continue\n            for l in range(k, m + 1):\n                dp[i][j] += dp[i-1][l]\n    \n    total = 0\n    for j in range(1, m + 1):\n        total += dp[n][j]\n    \n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2383": {
    "question_id": "mbpp/238",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_total_number_of_sequences(n, m):\n    if n == 1:\n        return m\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            k = 2 * j\n            if k <= m:\n                dp[i][j] = dp[i-1][k]\n            if j * 2 - 1 <= m:\n                dp[i][j] += dp[i][j+1] if j < m else 0\n    \n    total = 0\n    for j in range(1, m + 1):\n        total += dp[n][j]\n    \n    return total",
    "test_output": "FAILED: expect 4,in fact 0",
    "test_result": "False"
  },
  "2384": {
    "question_id": "mbpp/238",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_total_number_of_sequences(n, m):\n    if n == 1:\n        return m\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            k = 2 * j\n            if k <= m:\n                dp[i][j] = dp[i-1][k] + dp[i][j+1] if j < m else dp[i-1][k]\n            else:\n                dp[i][j] = 0\n    \n    total = 0\n    for j in range(1, m + 1):\n        total += dp[n][j]\n    \n    return total",
    "test_output": "FAILED: expect 4,in fact 0",
    "test_result": "False"
  },
  "2385": {
    "question_id": "mbpp/238",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 0\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            k = 2 * j\n            if k > m:\n                continue\n            for l in range(k, m + 1):\n                dp[i][j] += dp[i-1][l]\n    \n    total = 0\n    for j in range(1, m + 1):\n        total += dp[n][j]\n    \n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2386": {
    "question_id": "mbpp/238",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            k = 2 * j\n            if k <= m:\n                dp[i][j] = dp[i-1][k]\n            if j + 1 <= m:\n                dp[i][j] += dp[i][j+1]\n    \n    total = 0\n    for j in range(1, m + 1):\n        total += dp[n][j]\n    \n    return total",
    "test_output": "FAILED: expect 4,in fact 1",
    "test_result": "False"
  },
  "2387": {
    "question_id": "mbpp/238",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 0\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            k = 2 * j\n            if k > m:\n                continue\n            for l in range(k, m + 1):\n                dp[i][j] += dp[i-1][l]\n    \n    total = 0\n    for j in range(1, m + 1):\n        total += dp[n][j]\n    \n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2388": {
    "question_id": "mbpp/238",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 0\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            k = 2 * j\n            if k <= m:\n                dp[i][j] = dp[i-1][k]\n            if j * 2 - 1 <= m:\n                dp[i][j] += dp[i][j+1] if j + 1 <= m else 0\n    \n    total = 0\n    for j in range(1, m + 1):\n        total += dp[n][j]\n    return total",
    "test_output": "FAILED: expect 4,in fact 1",
    "test_result": "False"
  },
  "2389": {
    "question_id": "mbpp/238",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_total_number_of_sequences(n, m):\n    if n == 1:\n        return m\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            k = 2 * j\n            if k <= m:\n                dp[i][j] = dp[i-1][k]\n            if j * 2 - 1 <= m:\n                dp[i][j] += dp[i][j+1] if j + 1 <= m else 0\n    \n    total = 0\n    for j in range(1, m + 1):\n        total += dp[n][j]\n    return total",
    "test_output": "FAILED: expect 4,in fact 0",
    "test_result": "False"
  },
  "2390": {
    "question_id": "mbpp/239",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_list(lst, new_elements):\n    if not lst:\n        return new_elements\n    return lst[:-1] + new_elements",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2391": {
    "question_id": "mbpp/239",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_list(lst1, lst2):\n    if not lst1:\n        return lst2\n    return lst1[:-1] + lst2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2392": {
    "question_id": "mbpp/239",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_list(lst, new_elements):\n    if not lst:\n        return new_elements\n    lst[-1:] = new_elements\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2393": {
    "question_id": "mbpp/239",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_list(lst1, lst2):\n    if not lst1:\n        return lst2\n    return lst1[:-1] + lst2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2394": {
    "question_id": "mbpp/239",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_list(lst1, lst2):\n    if not lst1:\n        return lst2\n    return lst1[:-1] + lst2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2395": {
    "question_id": "mbpp/239",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_list(lst, new_elements):\n    if not lst:\n        return new_elements\n    return lst[:-1] + new_elements",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2396": {
    "question_id": "mbpp/239",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_list(lst1, lst2):\n    if not lst1:\n        return lst2\n    return lst1[:-1] + lst2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2397": {
    "question_id": "mbpp/239",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_list(lst1, lst2):\n    if not lst1:\n        return lst2\n    return lst1[:-1] + lst2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2398": {
    "question_id": "mbpp/239",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_list(lst, new_elements):\n    if not lst:\n        return new_elements\n    return lst[:-1] + new_elements",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2399": {
    "question_id": "mbpp/239",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_list(lst1, lst2):\n    if not lst1:\n        return lst2\n    return lst1[:-1] + lst2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2400": {
    "question_id": "mbpp/240",
    "model": "deepseek-v3-250324",
    "generation_code": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2401": {
    "question_id": "mbpp/240",
    "model": "deepseek-v3-250324",
    "generation_code": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2402": {
    "question_id": "mbpp/240",
    "model": "deepseek-v3-250324",
    "generation_code": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2403": {
    "question_id": "mbpp/240",
    "model": "deepseek-v3-250324",
    "generation_code": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2404": {
    "question_id": "mbpp/240",
    "model": "deepseek-v3-250324",
    "generation_code": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2405": {
    "question_id": "mbpp/240",
    "model": "deepseek-v3-250324",
    "generation_code": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2406": {
    "question_id": "mbpp/240",
    "model": "deepseek-v3-250324",
    "generation_code": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2407": {
    "question_id": "mbpp/240",
    "model": "deepseek-v3-250324",
    "generation_code": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2408": {
    "question_id": "mbpp/240",
    "model": "deepseek-v3-250324",
    "generation_code": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2409": {
    "question_id": "mbpp/240",
    "model": "deepseek-v3-250324",
    "generation_code": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2410": {
    "question_id": "mbpp/241",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_charac(string):\n    return len(string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2411": {
    "question_id": "mbpp/241",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_charac(string):\n    return len(string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2412": {
    "question_id": "mbpp/241",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_charac(string):\n    return len(string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2413": {
    "question_id": "mbpp/241",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_charac(string):\n    return len(string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2414": {
    "question_id": "mbpp/241",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_charac(string):\n    return len(string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2415": {
    "question_id": "mbpp/241",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_charac(string):\n    return len(string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2416": {
    "question_id": "mbpp/241",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_charac(string):\n    return len(string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2417": {
    "question_id": "mbpp/241",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_charac(string):\n    return len(string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2418": {
    "question_id": "mbpp/241",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_charac(string):\n    return len(string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2419": {
    "question_id": "mbpp/241",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_charac(string):\n    return len(string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2420": {
    "question_id": "mbpp/242",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_on_occurence(lst):\n    if not lst:\n        return []\n    \n    # Create a dictionary to count occurrences of the first element\n    count_dict = {}\n    for tup in lst:\n        key = tup[0]\n        if key in count_dict:\n            count_dict[key] += 1\n        else:\n            count_dict[key] = 1\n    \n    # Group tuples by their first element\n    group_dict = {}\n    for tup in lst:\n        key = tup[0]\n        if key in group_dict:\n            group_dict[key].append(tup[1])\n        else:\n            group_dict[key] = [tup[1]]\n    \n    # Prepare the result list\n    result = []\n    for key in sorted(count_dict.keys(), key=lambda x: (-count_dict[x], x)):\n        items = [key] + group_dict[key] + [count_dict[key]]\n        result.append(tuple(items))\n    \n    return result",
    "test_output": "FAILED: expect [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)],in fact [('a', 'arm', 'ant', 2), ('b', 'ball', 'b', 2)]",
    "test_result": "False"
  },
  "2421": {
    "question_id": "mbpp/242",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_on_occurence(lst):\n    if not lst:\n        return []\n    \n    # Create a dictionary to count occurrences of the first element\n    count_dict = {}\n    for tup in lst:\n        key = tup[0]\n        if key in count_dict:\n            count_dict[key] += 1\n        else:\n            count_dict[key] = 1\n    \n    # Group tuples by their first element\n    group_dict = {}\n    for tup in lst:\n        key = tup[0]\n        if key in group_dict:\n            group_dict[key].append(tup[1])\n        else:\n            group_dict[key] = [tup[1]]\n    \n    # Prepare the result list\n    result = []\n    for key in sorted(count_dict.keys(), key=lambda x: -count_dict[x]):\n        items = [key] + group_dict[key] + [count_dict[key]]\n        result.append(tuple(items))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2422": {
    "question_id": "mbpp/242",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_on_occurence(lst):\n    if not lst:\n        return []\n    \n    # Create a dictionary to count occurrences of the first element\n    count_dict = {}\n    for tup in lst:\n        key = tup[0]\n        if key in count_dict:\n            count_dict[key] += 1\n        else:\n            count_dict[key] = 1\n    \n    # Group tuples by their first element\n    group_dict = {}\n    for tup in lst:\n        key = tup[0]\n        if key in group_dict:\n            group_dict[key].append(tup[1])\n        else:\n            group_dict[key] = [tup[1]]\n    \n    # Prepare the result list\n    result = []\n    for key in sorted(count_dict.keys()):\n        items = [key] + group_dict[key] + [count_dict[key]]\n        result.append(tuple(items))\n    \n    return result",
    "test_output": "FAILED: expect [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)],in fact [('a', 'arm', 'ant', 2), ('b', 'ball', 'b', 2)]",
    "test_result": "False"
  },
  "2423": {
    "question_id": "mbpp/242",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_on_occurence(lst):\n    if not lst:\n        return []\n    \n    freq = {}\n    for tup in lst:\n        key = tup[0]\n        if key in freq:\n            freq[key].append(tup[1])\n        else:\n            freq[key] = [tup[1]]\n    \n    result = []\n    for key in sorted(freq.keys(), key=lambda k: len(freq[k]), reverse=True):\n        elements = [key] + freq[key] + [len(freq[key])]\n        result.append(tuple(elements))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2424": {
    "question_id": "mbpp/242",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_on_occurence(lst):\n    if not lst:\n        return []\n    \n    # Create a dictionary to count occurrences of the first element\n    count_dict = {}\n    for tup in lst:\n        key = tup[0]\n        if key in count_dict:\n            count_dict[key] += 1\n        else:\n            count_dict[key] = 1\n    \n    # Group tuples by their first element\n    group_dict = {}\n    for tup in lst:\n        key = tup[0]\n        if key in group_dict:\n            group_dict[key].append(tup[1])\n        else:\n            group_dict[key] = [tup[1]]\n    \n    # Prepare the result list\n    result = []\n    for key in sorted(count_dict.keys(), key=lambda x: (-count_dict[x], x)):\n        group = [key] + group_dict[key] + [count_dict[key]]\n        result.append(tuple(group))\n    \n    return result",
    "test_output": "FAILED: expect [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)],in fact [('a', 'arm', 'ant', 2), ('b', 'ball', 'b', 2)]",
    "test_result": "False"
  },
  "2425": {
    "question_id": "mbpp/242",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_on_occurence(lst):\n    if not lst:\n        return []\n    \n    freq = {}\n    for tup in lst:\n        key = tup[0]\n        if key in freq:\n            freq[key].append(tup[1])\n        else:\n            freq[key] = [tup[1]]\n    \n    result = []\n    for key in sorted(freq.keys()):\n        items = freq[key]\n        new_tuple = (key,) + tuple(items) + (len(items),)\n        result.append(new_tuple)\n    \n    return result",
    "test_output": "FAILED: expect [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)],in fact [('a', 'arm', 'ant', 2), ('b', 'ball', 'b', 2)]",
    "test_result": "False"
  },
  "2426": {
    "question_id": "mbpp/242",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_on_occurence(lst):\n    if not lst:\n        return []\n    \n    # Create a dictionary to count occurrences of the first element\n    count_dict = {}\n    for tup in lst:\n        key = tup[0]\n        if key in count_dict:\n            count_dict[key].append(tup[1])\n        else:\n            count_dict[key] = [tup[1]]\n    \n    # Sort the keys based on the count of occurrences in descending order\n    sorted_keys = sorted(count_dict.keys(), key=lambda k: len(count_dict[k]), reverse=True)\n    \n    # Build the result list\n    result = []\n    for key in sorted_keys:\n        values = count_dict[key]\n        result_item = [key] + values + [len(values)]\n        result.append(tuple(result_item))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2427": {
    "question_id": "mbpp/242",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_on_occurence(lst):\n    if not lst:\n        return []\n    \n    # Create a dictionary to count occurrences of the first element\n    count_dict = {}\n    for tup in lst:\n        key = tup[0]\n        if key in count_dict:\n            count_dict[key].append(tup[1])\n        else:\n            count_dict[key] = [tup[1]]\n    \n    # Sort the keys based on the count of their occurrences (descending)\n    sorted_keys = sorted(count_dict.keys(), key=lambda k: len(count_dict[k]), reverse=True)\n    \n    # Build the result list\n    result = []\n    for key in sorted_keys:\n        names = count_dict[key]\n        count = len(names)\n        result_tuple = (key,) + tuple(names) + (count,)\n        result.append(result_tuple)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2428": {
    "question_id": "mbpp/242",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_on_occurence(lst):\n    if not lst:\n        return []\n    \n    freq = {}\n    for tup in lst:\n        key = tup[0]\n        if key in freq:\n            freq[key].append(tup[1])\n        else:\n            freq[key] = [tup[1]]\n    \n    sorted_items = sorted(freq.items(), key=lambda item: (-len(item[1]), item[0]))\n    \n    result = []\n    for key, names in sorted_items:\n        new_tuple = (key,) + tuple(names) + (len(names),)\n        result.append(new_tuple)\n    \n    return result",
    "test_output": "FAILED: expect [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)],in fact [('a', 'arm', 'ant', 2), ('b', 'ball', 'b', 2)]",
    "test_result": "False"
  },
  "2429": {
    "question_id": "mbpp/242",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_on_occurence(lst):\n    if not lst:\n        return []\n    \n    # Create a dictionary to count occurrences of the first element\n    count_dict = {}\n    for tup in lst:\n        key = tup[0]\n        if key in count_dict:\n            count_dict[key] += 1\n        else:\n            count_dict[key] = 1\n    \n    # Group tuples by their first element\n    group_dict = {}\n    for tup in lst:\n        key = tup[0]\n        if key in group_dict:\n            group_dict[key].append(tup[1])\n        else:\n            group_dict[key] = [tup[1]]\n    \n    # Prepare the result list\n    result = []\n    for key in sorted(count_dict.keys()):\n        items = [key] + group_dict[key] + [count_dict[key]]\n        result.append(tuple(items))\n    \n    return result",
    "test_output": "FAILED: expect [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)],in fact [('a', 'arm', 'ant', 2), ('b', 'ball', 'b', 2)]",
    "test_result": "False"
  },
  "2430": {
    "question_id": "mbpp/243",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef next_Perfect_Square(num):\n    if num < 0:\n        return 0\n    root = math.isqrt(num)\n    if root * root == num:\n        return (root + 1) ** 2\n    else:\n        return (root + 1) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2431": {
    "question_id": "mbpp/243",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef next_Perfect_Square(num):\n    if num < 0:\n        return 0\n    root = math.isqrt(num)\n    next_square = (root + 1) ** 2\n    return next_square",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2432": {
    "question_id": "mbpp/243",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef next_Perfect_Square(num):\n    if num < 0:\n        return 0\n    root = math.isqrt(num)\n    if root * root == num:\n        return (root + 1) ** 2\n    else:\n        return (root + 1) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2433": {
    "question_id": "mbpp/243",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef next_Perfect_Square(num):\n    if num < 0:\n        return 0\n    root = math.isqrt(num)\n    if root * root == num:\n        return (root + 1) ** 2\n    else:\n        return (root + 1) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2434": {
    "question_id": "mbpp/243",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef next_Perfect_Square(num):\n    if num < 0:\n        return 0\n    root = math.isqrt(num)\n    if root * root == num:\n        return (root + 1) ** 2\n    else:\n        return (root + 1) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2435": {
    "question_id": "mbpp/243",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef next_Perfect_Square(num):\n    if num < 0:\n        return 0\n    root = math.isqrt(num)\n    next_square = (root + 1) ** 2\n    return next_square",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2436": {
    "question_id": "mbpp/243",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef next_Perfect_Square(num):\n    if num < 0:\n        return 0\n    root = math.isqrt(num)\n    if root * root == num:\n        return (root + 1) ** 2\n    else:\n        return (root + 1) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2437": {
    "question_id": "mbpp/243",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef next_Perfect_Square(num):\n    if num < 0:\n        return 0\n    root = math.isqrt(num)\n    if root * root == num:\n        return (root + 1) ** 2\n    else:\n        return (root + 1) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2438": {
    "question_id": "mbpp/243",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef next_Perfect_Square(num):\n    if num < 0:\n        return 0\n    sqrt_num = math.isqrt(num)\n    next_square = (sqrt_num + 1) ** 2\n    return next_square",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2439": {
    "question_id": "mbpp/243",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef next_Perfect_Square(num):\n    if num < 0:\n        return 0\n    root = math.isqrt(num)\n    next_root = root + 1\n    return next_root * next_root",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2440": {
    "question_id": "mbpp/244",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(arr, n):\n    # Create two arrays to store the increasing and decreasing subsequence sums\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Compute maximum sum increasing subsequence ending at each index\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                if inc[j] + arr[i] > inc[i]:\n                    inc[i] = inc[j] + arr[i]\n    \n    # Compute maximum sum decreasing subsequence starting from each index\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                if dec[j] + arr[i] > dec[i]:\n                    dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bi-tonic subsequence\n    max_sum_val = 0\n    for i in range(n):\n        current_sum = inc[i] + dec[i] - arr[i]\n        if current_sum > max_sum_val:\n            max_sum_val = current_sum\n    \n    return max_sum_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2441": {
    "question_id": "mbpp/244",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(arr, n):\n    # Create two arrays to store the increasing and decreasing subsequence sums\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Compute maximum sum increasing subsequence ending at each index\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and inc[j] + arr[i] > inc[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Compute maximum sum decreasing subsequence starting at each index\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i] and dec[j] + arr[i] > dec[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bi-tonic subsequence\n    max_sum_val = 0\n    for i in range(n):\n        current_sum = inc[i] + dec[i] - arr[i]\n        if current_sum > max_sum_val:\n            max_sum_val = current_sum\n    \n    return max_sum_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2442": {
    "question_id": "mbpp/244",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(arr, n):\n    # Create two arrays to store the increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Compute the increasing subsequence values\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and inc[j] + arr[i] > inc[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Compute the decreasing subsequence values\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i] and dec[j] + arr[i] > dec[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of inc[i] + dec[i] - arr[i]\n    max_val = 0\n    for i in range(n):\n        current_sum = inc[i] + dec[i] - arr[i]\n        if current_sum > max_val:\n            max_val = current_sum\n    \n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2443": {
    "question_id": "mbpp/244",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(arr, n):\n    # Create two arrays to store the increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Compute the increasing subsequence values\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and inc[j] + arr[i] > inc[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Compute the decreasing subsequence values\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i] and dec[j] + arr[i] > dec[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of inc[i] + dec[i] - arr[i]\n    max_val = 0\n    for i in range(n):\n        current_sum = inc[i] + dec[i] - arr[i]\n        if current_sum > max_val:\n            max_val = current_sum\n    \n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2444": {
    "question_id": "mbpp/244",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(arr, n):\n    # Create two arrays to store increasing and decreasing subsequence sums\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Compute maximum sum increasing subsequence ending at each index\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and inc[j] + arr[i] > inc[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Compute maximum sum decreasing subsequence starting at each index\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i] and dec[j] + arr[i] > dec[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of inc[i] + dec[i] - arr[i]\n    max_sum_val = 0\n    for i in range(n):\n        current_sum = inc[i] + dec[i] - arr[i]\n        if current_sum > max_sum_val:\n            max_sum_val = current_sum\n    \n    return max_sum_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2445": {
    "question_id": "mbpp/244",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(arr, n):\n    if n == 0:\n        return 0\n    \n    # Initialize two arrays to store increasing and decreasing subsequence sums\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Compute maximum sum increasing subsequence ending at each index\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                if inc[j] + arr[i] > inc[i]:\n                    inc[i] = inc[j] + arr[i]\n    \n    # Compute maximum sum decreasing subsequence starting at each index\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                if dec[j] + arr[i] > dec[i]:\n                    dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of inc[i] + dec[i] - arr[i]\n    max_sum_val = 0\n    for i in range(n):\n        current_sum = inc[i] + dec[i] - arr[i]\n        if current_sum > max_sum_val:\n            max_sum_val = current_sum\n    \n    return max_sum_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2446": {
    "question_id": "mbpp/244",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(arr, n):\n    # Create two arrays to store the increasing and decreasing subsequence sums\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Compute the maximum increasing subsequence sum ending at each index\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and inc[j] + arr[i] > inc[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Compute the maximum decreasing subsequence sum starting at each index\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i] and dec[j] + arr[i] > dec[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bi-tonic subsequence\n    max_sum = 0\n    for i in range(n):\n        current_sum = inc[i] + dec[i] - arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2447": {
    "question_id": "mbpp/244",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(arr, n):\n    # Create two arrays to store the increasing and decreasing subsequence sums\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Compute the maximum increasing subsequence sum ending at each index\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                if inc[i] < inc[j] + arr[i]:\n                    inc[i] = inc[j] + arr[i]\n    \n    # Compute the maximum decreasing subsequence sum starting at each index\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                if dec[i] < dec[j] + arr[i]:\n                    dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bi-tonic subsequence\n    max_sum = 0\n    for i in range(n):\n        current_sum = inc[i] + dec[i] - arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2448": {
    "question_id": "mbpp/244",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(arr, n):\n    # Create two arrays to store the increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Compute the increasing subsequence values\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Compute the decreasing subsequence values\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bi-tonic subsequence\n    max_sum_val = 0\n    for i in range(n):\n        current_sum = inc[i] + dec[i] - arr[i]\n        if current_sum > max_sum_val:\n            max_sum_val = current_sum\n    \n    return max_sum_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2449": {
    "question_id": "mbpp/244",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum(arr, n):\n    # Create two arrays to store the increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Compute the increasing subsequence values\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Compute the decreasing subsequence values\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bi-tonic subsequence\n    max_sum = 0\n    for i in range(n):\n        current_sum = inc[i] + dec[i] - arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2450": {
    "question_id": "mbpp/245",
    "model": "deepseek-v3-250324",
    "generation_code": "def babylonian_squareroot(number):\n    if number < 0:\n        return float('nan')\n    if number == 0:\n        return 0.0\n    \n    guess = number / 2.0\n    tolerance = 1e-10\n    while True:\n        new_guess = (guess + number / guess) / 2.0\n        if abs(new_guess - guess) < tolerance:\n            break\n        guess = new_guess\n    return new_guess",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2451": {
    "question_id": "mbpp/245",
    "model": "deepseek-v3-250324",
    "generation_code": "def babylonian_squareroot(number):\n    if number < 0:\n        return None\n    if number == 0:\n        return 0\n    guess = number / 2.0\n    while True:\n        new_guess = (guess + number / guess) / 2.0\n        if abs(new_guess - guess) < 1e-10:\n            return new_guess\n        guess = new_guess",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2452": {
    "question_id": "mbpp/245",
    "model": "deepseek-v3-250324",
    "generation_code": "def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Square root of negative number is not defined\")\n    if number == 0:\n        return 0\n    guess = number / 2.0\n    tolerance = 1e-10\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < tolerance:\n            break\n        guess = new_guess\n    return new_guess",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2453": {
    "question_id": "mbpp/245",
    "model": "deepseek-v3-250324",
    "generation_code": "def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Number must be non-negative\")\n    if number == 0:\n        return 0\n    guess = number / 2.0\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 1e-10:  # convergence threshold\n            return new_guess\n        guess = new_guess",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2454": {
    "question_id": "mbpp/245",
    "model": "deepseek-v3-250324",
    "generation_code": "def babylonian_squareroot(number):\n    if number < 0:\n        return float('nan')\n    if number == 0:\n        return 0.0\n    \n    guess = number / 2.0\n    tolerance = 1e-10\n    while True:\n        new_guess = (guess + number / guess) / 2.0\n        if abs(new_guess - guess) < tolerance:\n            break\n        guess = new_guess\n    return new_guess",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2455": {
    "question_id": "mbpp/245",
    "model": "deepseek-v3-250324",
    "generation_code": "def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Number must be non-negative\")\n    if number == 0:\n        return 0.0\n    \n    guess = number / 2.0\n    tolerance = 1e-10\n    while True:\n        new_guess = (guess + number / guess) / 2.0\n        if abs(new_guess - guess) < tolerance:\n            break\n        guess = new_guess\n    return new_guess",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2456": {
    "question_id": "mbpp/245",
    "model": "deepseek-v3-250324",
    "generation_code": "def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Number must be non-negative\")\n    if number == 0:\n        return 0\n    guess = number / 2.0\n    tolerance = 1e-10\n    while True:\n        new_guess = (guess + number / guess) / 2.0\n        if abs(new_guess - guess) < tolerance:\n            break\n        guess = new_guess\n    return new_guess",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2457": {
    "question_id": "mbpp/245",
    "model": "deepseek-v3-250324",
    "generation_code": "def babylonian_squareroot(number, tolerance=1e-10):\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of negative number\")\n    if number == 0:\n        return 0.0\n    guess = number / 2.0\n    while True:\n        new_guess = (guess + number / guess) / 2.0\n        if abs(new_guess - guess) < tolerance:\n            return new_guess\n        guess = new_guess",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2458": {
    "question_id": "mbpp/245",
    "model": "deepseek-v3-250324",
    "generation_code": "def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Number must be non-negative\")\n    if number == 0:\n        return 0\n    guess = number / 2.0\n    while True:\n        new_guess = (guess + number / guess) / 2.0\n        if abs(new_guess - guess) < 1e-10:\n            return new_guess\n        guess = new_guess",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2459": {
    "question_id": "mbpp/245",
    "model": "deepseek-v3-250324",
    "generation_code": "def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Number must be non-negative\")\n    if number == 0:\n        return 0.0\n    guess = number / 2.0\n    while True:\n        new_guess = (guess + number / guess) / 2.0\n        if abs(new_guess - guess) < 1e-10:\n            return new_guess\n        guess = new_guess",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2460": {
    "question_id": "mbpp/246",
    "model": "deepseek-v3-250324",
    "generation_code": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2461": {
    "question_id": "mbpp/246",
    "model": "deepseek-v3-250324",
    "generation_code": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1] if i+1 <= j-1 else 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2462": {
    "question_id": "mbpp/246",
    "model": "deepseek-v3-250324",
    "generation_code": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2463": {
    "question_id": "mbpp/246",
    "model": "deepseek-v3-250324",
    "generation_code": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2464": {
    "question_id": "mbpp/246",
    "model": "deepseek-v3-250324",
    "generation_code": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1] if i+1 <= j-1 else 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2465": {
    "question_id": "mbpp/246",
    "model": "deepseek-v3-250324",
    "generation_code": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1] if i+1 <= j-1 else 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2466": {
    "question_id": "mbpp/246",
    "model": "deepseek-v3-250324",
    "generation_code": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2467": {
    "question_id": "mbpp/246",
    "model": "deepseek-v3-250324",
    "generation_code": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1] if i+1 <= j-1 else 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2468": {
    "question_id": "mbpp/246",
    "model": "deepseek-v3-250324",
    "generation_code": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1] if i+1 <= j-1 else 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2469": {
    "question_id": "mbpp/246",
    "model": "deepseek-v3-250324",
    "generation_code": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1] if i+1 <= j-1 else 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2470": {
    "question_id": "mbpp/247",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total",
    "test_output": "FAILED: expect 2.5928571428571425,in fact 2.4499999999999997",
    "test_result": "False"
  },
  "2471": {
    "question_id": "mbpp/247",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total",
    "test_output": "FAILED: expect 2.5928571428571425,in fact 2.4499999999999997",
    "test_result": "False"
  },
  "2472": {
    "question_id": "mbpp/247",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total",
    "test_output": "FAILED: expect 2.5928571428571425,in fact 2.4499999999999997",
    "test_result": "False"
  },
  "2473": {
    "question_id": "mbpp/247",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total",
    "test_output": "FAILED: expect 2.5928571428571425,in fact 2.4499999999999997",
    "test_result": "False"
  },
  "2474": {
    "question_id": "mbpp/247",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1 / i\n    return total",
    "test_output": "FAILED: expect 2.5928571428571425,in fact 2.4499999999999997",
    "test_result": "False"
  },
  "2475": {
    "question_id": "mbpp/247",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total",
    "test_output": "FAILED: expect 2.5928571428571425,in fact 2.4499999999999997",
    "test_result": "False"
  },
  "2476": {
    "question_id": "mbpp/247",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1 / i\n    return total",
    "test_output": "FAILED: expect 2.5928571428571425,in fact 2.4499999999999997",
    "test_result": "False"
  },
  "2477": {
    "question_id": "mbpp/247",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1 / i\n    return total",
    "test_output": "FAILED: expect 2.5928571428571425,in fact 2.4499999999999997",
    "test_result": "False"
  },
  "2478": {
    "question_id": "mbpp/247",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1 / i\n    return total",
    "test_output": "FAILED: expect 2.5928571428571425,in fact 2.4499999999999997",
    "test_result": "False"
  },
  "2479": {
    "question_id": "mbpp/247",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1 / i\n    return total",
    "test_output": "FAILED: expect 2.5928571428571425,in fact 2.4499999999999997",
    "test_result": "False"
  },
  "2480": {
    "question_id": "mbpp/248",
    "model": "deepseek-v3-250324",
    "generation_code": "intersection_array = lambda a, b: list(filter(lambda x: x in b, a))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2481": {
    "question_id": "mbpp/248",
    "model": "deepseek-v3-250324",
    "generation_code": "intersection_array = lambda a, b: list(filter(lambda x: x in b, a))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2482": {
    "question_id": "mbpp/248",
    "model": "deepseek-v3-250324",
    "generation_code": "intersection_array = lambda a, b: list(set(a) & set(b))",
    "test_output": "FAILED: expect [1, 2, 8, 9],in fact [8, 1, 2, 9]",
    "test_result": "False"
  },
  "2483": {
    "question_id": "mbpp/248",
    "model": "deepseek-v3-250324",
    "generation_code": "intersection_array = lambda arr1, arr2: list(filter(lambda x: x in arr2, arr1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2484": {
    "question_id": "mbpp/248",
    "model": "deepseek-v3-250324",
    "generation_code": "intersection_array = lambda a, b: list(filter(lambda x: x in b, a))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2485": {
    "question_id": "mbpp/248",
    "model": "deepseek-v3-250324",
    "generation_code": "intersection_array = lambda a, b: list(filter(lambda x: x in b, a))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2486": {
    "question_id": "mbpp/248",
    "model": "deepseek-v3-250324",
    "generation_code": "intersection_array = lambda a, b: list(filter(lambda x: x in b, a))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2487": {
    "question_id": "mbpp/248",
    "model": "deepseek-v3-250324",
    "generation_code": "intersection_array = lambda arr1, arr2: list(filter(lambda x: x in arr2, arr1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2488": {
    "question_id": "mbpp/248",
    "model": "deepseek-v3-250324",
    "generation_code": "intersection_array = lambda a, b: list(filter(lambda x: x in b, a))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2489": {
    "question_id": "mbpp/248",
    "model": "deepseek-v3-250324",
    "generation_code": "intersection_array = lambda a, b: list(filter(lambda x: x in b, a))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2490": {
    "question_id": "mbpp/249",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_X(tup, X):\n    return tup.count(X)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2491": {
    "question_id": "mbpp/249",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_X(tup, X):\n    return tup.count(X)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2492": {
    "question_id": "mbpp/249",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_X(tup, X):\n    return tup.count(X)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2493": {
    "question_id": "mbpp/249",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_X(tup, X):\n    return tup.count(X)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2494": {
    "question_id": "mbpp/249",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_X(tup, X):\n    return tup.count(X)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2495": {
    "question_id": "mbpp/249",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_X(tup, X):\n    return tup.count(X)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2496": {
    "question_id": "mbpp/249",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_X(tup, X):\n    return tup.count(X)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2497": {
    "question_id": "mbpp/249",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_X(tup, X):\n    return tup.count(X)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2498": {
    "question_id": "mbpp/249",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_X(tup, X):\n    return tup.count(X)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2499": {
    "question_id": "mbpp/249",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_X(tup, X):\n    return tup.count(X)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2500": {
    "question_id": "mbpp/250",
    "model": "deepseek-v3-250324",
    "generation_code": "def insert_element(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2501": {
    "question_id": "mbpp/250",
    "model": "deepseek-v3-250324",
    "generation_code": "def insert_element(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2502": {
    "question_id": "mbpp/250",
    "model": "deepseek-v3-250324",
    "generation_code": "def insert_element(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2503": {
    "question_id": "mbpp/250",
    "model": "deepseek-v3-250324",
    "generation_code": "def insert_element(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2504": {
    "question_id": "mbpp/250",
    "model": "deepseek-v3-250324",
    "generation_code": "def insert_element(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2505": {
    "question_id": "mbpp/250",
    "model": "deepseek-v3-250324",
    "generation_code": "def insert_element(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2506": {
    "question_id": "mbpp/250",
    "model": "deepseek-v3-250324",
    "generation_code": "def insert_element(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2507": {
    "question_id": "mbpp/250",
    "model": "deepseek-v3-250324",
    "generation_code": "def insert_element(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2508": {
    "question_id": "mbpp/250",
    "model": "deepseek-v3-250324",
    "generation_code": "def insert_element(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2509": {
    "question_id": "mbpp/250",
    "model": "deepseek-v3-250324",
    "generation_code": "def insert_element(lst, element):\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2510": {
    "question_id": "mbpp/251",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef convert(complex_num):\n    if not isinstance(complex_num, complex):\n        complex_num = complex(complex_num, 0)\n    r = abs(complex_num)\n    theta = cmath.phase(complex_num)\n    return (r, theta)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2511": {
    "question_id": "mbpp/251",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef convert(z):\n    if isinstance(z, (int, float)):\n        z = complex(z)\n    r = abs(z)\n    theta = cmath.phase(z)\n    return (r, theta)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2512": {
    "question_id": "mbpp/251",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef convert(complex_num):\n    if isinstance(complex_num, (int, float)):\n        complex_num = complex(complex_num)\n    r = abs(complex_num)\n    theta = cmath.phase(complex_num)\n    return (r, theta)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2513": {
    "question_id": "mbpp/251",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef convert(complex_num):\n    if isinstance(complex_num, (int, float)):\n        complex_num = complex(complex_num)\n    r = abs(complex_num)\n    phi = cmath.phase(complex_num)\n    return (r, phi)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2514": {
    "question_id": "mbpp/251",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef convert(complex_num):\n    if isinstance(complex_num, (int, float)):\n        complex_num = complex(complex_num)\n    r = abs(complex_num)\n    theta = cmath.phase(complex_num)\n    return (r, theta)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2515": {
    "question_id": "mbpp/251",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef convert(complex_num):\n    if isinstance(complex_num, (int, float)):\n        complex_num = complex(complex_num)\n    r = abs(complex_num)\n    theta = cmath.phase(complex_num)\n    return (r, theta)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2516": {
    "question_id": "mbpp/251",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef convert(complex_num):\n    if isinstance(complex_num, (int, float)):\n        complex_num = complex(complex_num)\n    r = abs(complex_num)\n    phi = cmath.phase(complex_num)\n    return (r, phi)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2517": {
    "question_id": "mbpp/251",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef convert(complex_num):\n    if isinstance(complex_num, (int, float)):\n        complex_num = complex(complex_num)\n    r = abs(complex_num)\n    phi = cmath.phase(complex_num)\n    return (r, phi)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2518": {
    "question_id": "mbpp/251",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef convert(complex_num):\n    if isinstance(complex_num, (int, float)):\n        complex_num = complex(complex_num)\n    r = abs(complex_num)\n    theta = cmath.phase(complex_num)\n    return (r, theta)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2519": {
    "question_id": "mbpp/251",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\n\ndef convert(z):\n    if isinstance(z, (int, float)):\n        z = complex(z)\n    r = abs(z)\n    phi = cmath.phase(z)\n    return (r, phi)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2520": {
    "question_id": "mbpp/252",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2521": {
    "question_id": "mbpp/252",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2522": {
    "question_id": "mbpp/252",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2523": {
    "question_id": "mbpp/252",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2524": {
    "question_id": "mbpp/252",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2525": {
    "question_id": "mbpp/252",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2526": {
    "question_id": "mbpp/252",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2527": {
    "question_id": "mbpp/252",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2528": {
    "question_id": "mbpp/252",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2529": {
    "question_id": "mbpp/252",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2530": {
    "question_id": "mbpp/253",
    "model": "deepseek-v3-250324",
    "generation_code": "def words_ae(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > 0 and (word[0].lower() == 'a' or word[0].lower() == 'e'):\n            result.append(word)\n    return result",
    "test_output": "FAILED: expect ['ame'],in fact []",
    "test_result": "False"
  },
  "2531": {
    "question_id": "mbpp/253",
    "model": "deepseek-v3-250324",
    "generation_code": "def words_ae(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > 0 and (word[0].lower() == 'a' or word[0].lower() == 'e'):\n            result.append(word)\n    return result",
    "test_output": "FAILED: expect ['ame'],in fact []",
    "test_result": "False"
  },
  "2532": {
    "question_id": "mbpp/253",
    "model": "deepseek-v3-250324",
    "generation_code": "def words_ae(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > 0 and (word[0].lower() == 'a' or word[0].lower() == 'e'):\n            result.append(word)\n    return result",
    "test_output": "FAILED: expect ['ame'],in fact []",
    "test_result": "False"
  },
  "2533": {
    "question_id": "mbpp/253",
    "model": "deepseek-v3-250324",
    "generation_code": "def words_ae(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > 0 and (word[0].lower() == 'a' or word[0].lower() == 'e'):\n            result.append(word)\n    return result",
    "test_output": "FAILED: expect ['ame'],in fact []",
    "test_result": "False"
  },
  "2534": {
    "question_id": "mbpp/253",
    "model": "deepseek-v3-250324",
    "generation_code": "def words_ae(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > 0 and (word[0].lower() == 'a' or word[0].lower() == 'e'):\n            result.append(word)\n    return result",
    "test_output": "FAILED: expect ['ame'],in fact []",
    "test_result": "False"
  },
  "2535": {
    "question_id": "mbpp/253",
    "model": "deepseek-v3-250324",
    "generation_code": "def words_ae(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > 0 and (word[0].lower() == 'a' or word[0].lower() == 'e'):\n            result.append(word)\n    return result",
    "test_output": "FAILED: expect ['ame'],in fact []",
    "test_result": "False"
  },
  "2536": {
    "question_id": "mbpp/253",
    "model": "deepseek-v3-250324",
    "generation_code": "def words_ae(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > 0 and (word[0].lower() == 'a' or word[0].lower() == 'e'):\n            result.append(word)\n    return result",
    "test_output": "FAILED: expect ['ame'],in fact []",
    "test_result": "False"
  },
  "2537": {
    "question_id": "mbpp/253",
    "model": "deepseek-v3-250324",
    "generation_code": "def words_ae(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > 0 and (word[0].lower() == 'a' or word[0].lower() == 'e'):\n            result.append(word)\n    return result",
    "test_output": "FAILED: expect ['ame'],in fact []",
    "test_result": "False"
  },
  "2538": {
    "question_id": "mbpp/253",
    "model": "deepseek-v3-250324",
    "generation_code": "def words_ae(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > 0 and (word[0].lower() == 'a' or word[0].lower() == 'e'):\n            result.append(word)\n    return result",
    "test_output": "FAILED: expect ['ame'],in fact []",
    "test_result": "False"
  },
  "2539": {
    "question_id": "mbpp/253",
    "model": "deepseek-v3-250324",
    "generation_code": "def words_ae(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > 0 and (word[0].lower() == 'a' or word[0].lower() == 'e'):\n            result.append(word)\n    return result",
    "test_output": "FAILED: expect ['ame'],in fact []",
    "test_result": "False"
  },
  "2540": {
    "question_id": "mbpp/254",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_colors(colors, n):\n    from itertools import product\n    if n <= 0:\n        return []\n    return list(product(colors, repeat=n))",
    "test_output": "FAILED: expect [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')],in fact [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]",
    "test_result": "False"
  },
  "2541": {
    "question_id": "mbpp/254",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_colors(colors, n):\n    from itertools import product\n    if n <= 0:\n        return []\n    return list(product(colors, repeat=n))",
    "test_output": "FAILED: expect [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')],in fact [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]",
    "test_result": "False"
  },
  "2542": {
    "question_id": "mbpp/254",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_colors(colors, n):\n    from itertools import product\n    if n <= 0:\n        return []\n    return list(product(colors, repeat=n))",
    "test_output": "FAILED: expect [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')],in fact [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]",
    "test_result": "False"
  },
  "2543": {
    "question_id": "mbpp/254",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_colors(colors, n):\n    from itertools import product\n    if n <= 0 or not colors:\n        return []\n    return list(product(colors, repeat=n))",
    "test_output": "FAILED: expect [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')],in fact [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]",
    "test_result": "False"
  },
  "2544": {
    "question_id": "mbpp/254",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_colors(colors, n):\n    from itertools import product\n    if n <= 0 or not colors:\n        return []\n    return list(product(colors, repeat=n))",
    "test_output": "FAILED: expect [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')],in fact [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]",
    "test_result": "False"
  },
  "2545": {
    "question_id": "mbpp/254",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_colors(colors, n):\n    from itertools import product\n    if n <= 0:\n        return []\n    return list(product(colors, repeat=n))",
    "test_output": "FAILED: expect [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')],in fact [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]",
    "test_result": "False"
  },
  "2546": {
    "question_id": "mbpp/254",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_colors(colors, n):\n    from itertools import product\n    if n <= 0:\n        return []\n    return list(product(colors, repeat=n))",
    "test_output": "FAILED: expect [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')],in fact [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]",
    "test_result": "False"
  },
  "2547": {
    "question_id": "mbpp/254",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_colors(colors, n):\n    from itertools import product\n    if n <= 0:\n        return []\n    return list(product(colors, repeat=n))",
    "test_output": "FAILED: expect [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')],in fact [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]",
    "test_result": "False"
  },
  "2548": {
    "question_id": "mbpp/254",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_colors(colors, n):\n    from itertools import product\n    if n <= 0:\n        return []\n    return list(product(colors, repeat=n))",
    "test_output": "FAILED: expect [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')],in fact [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]",
    "test_result": "False"
  },
  "2549": {
    "question_id": "mbpp/254",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_colors(colors, n):\n    from itertools import product\n    if n <= 0:\n        return []\n    return list(product(colors, repeat=n))",
    "test_output": "FAILED: expect [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')],in fact [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]",
    "test_result": "False"
  },
  "2550": {
    "question_id": "mbpp/255",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for current in range(2, int(n ** 0.5) + 1):\n        if sieve[current]:\n            sieve[current*current : n : current] = [False] * len(sieve[current*current : n : current])\n    return sum(sieve)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2551": {
    "question_id": "mbpp/255",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            sieve[i*i : n : i] = [False] * len(sieve[i*i : n : i])\n    return sum(sieve)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2552": {
    "question_id": "mbpp/255",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            sieve[i*i : n : i] = [False] * len(sieve[i*i : n : i])\n    return sum(sieve)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2553": {
    "question_id": "mbpp/255",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for current in range(2, int(n ** 0.5) + 1):\n        if sieve[current]:\n            sieve[current*current : n : current] = [False] * len(sieve[current*current : n : current])\n    return sum(sieve)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2554": {
    "question_id": "mbpp/255",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            sieve[i*i : n : i] = [False] * len(sieve[i*i : n : i])\n    return sum(sieve)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2555": {
    "question_id": "mbpp/255",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            sieve[i*i : n : i] = [False] * len(sieve[i*i : n : i])\n    return sum(sieve)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2556": {
    "question_id": "mbpp/255",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for current in range(2, int(n ** 0.5) + 1):\n        if sieve[current]:\n            sieve[current*current : n : current] = [False] * len(sieve[current*current : n : current])\n    return sum(sieve)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2557": {
    "question_id": "mbpp/255",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            sieve[i*i : n : i] = [False] * len(sieve[i*i : n : i])\n    return sum(sieve)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2558": {
    "question_id": "mbpp/255",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for current in range(2, int(n ** 0.5) + 1):\n        if sieve[current]:\n            sieve[current*current : n : current] = [False] * len(sieve[current*current : n : current])\n    return sum(sieve)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2559": {
    "question_id": "mbpp/255",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            sieve[i*i : n : i] = [False] * len(sieve[i*i : n : i])\n    return sum(sieve)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2560": {
    "question_id": "mbpp/256",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_numbers(a, b):\n    return (b, a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2561": {
    "question_id": "mbpp/256",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_numbers(a, b):\n    return (b, a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2562": {
    "question_id": "mbpp/256",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_numbers(a, b):\n    return b, a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2563": {
    "question_id": "mbpp/256",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_numbers(a, b):\n    return (b, a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2564": {
    "question_id": "mbpp/256",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_numbers(a, b):\n    return (b, a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2565": {
    "question_id": "mbpp/256",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_numbers(a, b):\n    return (b, a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2566": {
    "question_id": "mbpp/256",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_numbers(a, b):\n    return b, a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2567": {
    "question_id": "mbpp/256",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_numbers(a, b):\n    return (b, a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2568": {
    "question_id": "mbpp/256",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_numbers(a, b):\n    return (b, a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2569": {
    "question_id": "mbpp/256",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_numbers(a, b):\n    return (b, a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2570": {
    "question_id": "mbpp/257",
    "model": "deepseek-v3-250324",
    "generation_code": "count_odd = lambda lst: len(list(filter(lambda x: x % 2 != 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2571": {
    "question_id": "mbpp/257",
    "model": "deepseek-v3-250324",
    "generation_code": "count_odd = lambda lst: len(list(filter(lambda x: x % 2 != 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2572": {
    "question_id": "mbpp/257",
    "model": "deepseek-v3-250324",
    "generation_code": "count_odd = lambda lst: len(list(filter(lambda x: x % 2 != 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2573": {
    "question_id": "mbpp/257",
    "model": "deepseek-v3-250324",
    "generation_code": "count_odd = lambda lst: len(list(filter(lambda x: x % 2 != 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2574": {
    "question_id": "mbpp/257",
    "model": "deepseek-v3-250324",
    "generation_code": "count_odd = lambda lst: len(list(filter(lambda x: x % 2 != 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2575": {
    "question_id": "mbpp/257",
    "model": "deepseek-v3-250324",
    "generation_code": "count_odd = lambda lst: len(list(filter(lambda x: x % 2 != 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2576": {
    "question_id": "mbpp/257",
    "model": "deepseek-v3-250324",
    "generation_code": "count_odd = lambda lst: len(list(filter(lambda x: x % 2 != 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2577": {
    "question_id": "mbpp/257",
    "model": "deepseek-v3-250324",
    "generation_code": "count_odd = lambda lst: len(list(filter(lambda x: x % 2 != 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2578": {
    "question_id": "mbpp/257",
    "model": "deepseek-v3-250324",
    "generation_code": "count_odd = lambda lst: len(list(filter(lambda x: x % 2 != 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2579": {
    "question_id": "mbpp/257",
    "model": "deepseek-v3-250324",
    "generation_code": "count_odd = lambda lst: len(list(filter(lambda x: x % 2 != 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2580": {
    "question_id": "mbpp/258",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximize_elements(tuple1, tuple2):\n    max_tuple = tuple(\n        tuple(max(a, b) for a, b in zip(t1, t2))\n        for t1, t2 in zip(tuple1, tuple2)\n    )\n    return max_tuple",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2581": {
    "question_id": "mbpp/258",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximize_elements(tuple1, tuple2):\n    return tuple(\n        tuple(max(a, b) for a, b in zip(t1, t2))\n        for t1, t2 in zip(tuple1, tuple2)\n    )",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2582": {
    "question_id": "mbpp/258",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximize_elements(tuple1, tuple2):\n    return tuple(\n        tuple(max(a, b) for a, b in zip(t1, t2))\n        for t1, t2 in zip(tuple1, tuple2)\n    )",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2583": {
    "question_id": "mbpp/258",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximize_elements(tuple1, tuple2):\n    return tuple(\n        tuple(max(a, b) for a, b in zip(t1, t2))\n        for t1, t2 in zip(tuple1, tuple2)\n    )",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2584": {
    "question_id": "mbpp/258",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximize_elements(tuple1, tuple2):\n    return tuple(\n        tuple(max(a, b) for a, b in zip(t1, t2))\n        for t1, t2 in zip(tuple1, tuple2)\n    )",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2585": {
    "question_id": "mbpp/258",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximize_elements(tuple1, tuple2):\n    return tuple(\n        tuple(max(a, b) for a, b in zip(t1, t2))\n        for t1, t2 in zip(tuple1, tuple2)\n    )",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2586": {
    "question_id": "mbpp/258",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximize_elements(tuple1, tuple2):\n    max_tuple = tuple(\n        tuple(max(a, b) for a, b in zip(t1, t2))\n        for t1, t2 in zip(tuple1, tuple2)\n    )\n    return max_tuple",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2587": {
    "question_id": "mbpp/258",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximize_elements(tuple1, tuple2):\n    return tuple(\n        tuple(max(a, b) for a, b in zip(t1, t2))\n        for t1, t2 in zip(tuple1, tuple2)\n    )",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2588": {
    "question_id": "mbpp/258",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximize_elements(tuple1, tuple2):\n    return tuple(\n        tuple(max(a, b) for a, b in zip(t1, t2))\n        for t1, t2 in zip(tuple1, tuple2)\n    )",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2589": {
    "question_id": "mbpp/258",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximize_elements(tuple1, tuple2):\n    result = []\n    for t1, t2 in zip(tuple1, tuple2):\n        max_t = tuple(max(a, b) for a, b in zip(t1, t2))\n        result.append(max_t)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2590": {
    "question_id": "mbpp/259",
    "model": "deepseek-v3-250324",
    "generation_code": "def newman_prime(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2591": {
    "question_id": "mbpp/259",
    "model": "deepseek-v3-250324",
    "generation_code": "def newman_prime(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n+1):\n        c = 2 * b + a\n        a, b = b, c\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2592": {
    "question_id": "mbpp/259",
    "model": "deepseek-v3-250324",
    "generation_code": "def newman_prime(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n+1):\n        a, b = b, 2 * a + b\n    return b",
    "test_output": "FAILED: expect 7,in fact 5",
    "test_result": "False"
  },
  "2593": {
    "question_id": "mbpp/259",
    "model": "deepseek-v3-250324",
    "generation_code": "def newman_prime(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * a + b\n    return b",
    "test_output": "FAILED: expect 7,in fact 5",
    "test_result": "False"
  },
  "2594": {
    "question_id": "mbpp/259",
    "model": "deepseek-v3-250324",
    "generation_code": "def newman_prime(n):\n    if n == 0:\n        return 0\n    a, b = 1, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * a + b\n    return b",
    "test_output": "FAILED: expect 7,in fact 5",
    "test_result": "False"
  },
  "2595": {
    "question_id": "mbpp/259",
    "model": "deepseek-v3-250324",
    "generation_code": "def newman_prime(n):\n    if n == 0:\n        return 0\n    a, b = 1, 1\n    for _ in range(2, n+1):\n        a, b = b, 2 * a + b\n    return b",
    "test_output": "FAILED: expect 7,in fact 5",
    "test_result": "False"
  },
  "2596": {
    "question_id": "mbpp/259",
    "model": "deepseek-v3-250324",
    "generation_code": "def newman_prime(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n+1):\n        c = 2 * a + b\n        a, b = b, c\n    return b",
    "test_output": "FAILED: expect 7,in fact 5",
    "test_result": "False"
  },
  "2597": {
    "question_id": "mbpp/259",
    "model": "deepseek-v3-250324",
    "generation_code": "def newman_prime(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n+1):\n        a, b = b, 2 * a + b\n    return b",
    "test_output": "FAILED: expect 7,in fact 5",
    "test_result": "False"
  },
  "2598": {
    "question_id": "mbpp/259",
    "model": "deepseek-v3-250324",
    "generation_code": "def newman_prime(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * a + b\n    return b",
    "test_output": "FAILED: expect 7,in fact 5",
    "test_result": "False"
  },
  "2599": {
    "question_id": "mbpp/259",
    "model": "deepseek-v3-250324",
    "generation_code": "def newman_prime(n):\n    if n == 0:\n        return 0\n    a, b = 1, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * a + b\n    return b",
    "test_output": "FAILED: expect 7,in fact 5",
    "test_result": "False"
  },
  "2600": {
    "question_id": "mbpp/260",
    "model": "deepseek-v3-250324",
    "generation_code": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2601": {
    "question_id": "mbpp/260",
    "model": "deepseek-v3-250324",
    "generation_code": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2602": {
    "question_id": "mbpp/260",
    "model": "deepseek-v3-250324",
    "generation_code": "def division_elements(tuple1, tuple2):\n    return tuple(x // y for x, y in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2603": {
    "question_id": "mbpp/260",
    "model": "deepseek-v3-250324",
    "generation_code": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2604": {
    "question_id": "mbpp/260",
    "model": "deepseek-v3-250324",
    "generation_code": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2605": {
    "question_id": "mbpp/260",
    "model": "deepseek-v3-250324",
    "generation_code": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2606": {
    "question_id": "mbpp/260",
    "model": "deepseek-v3-250324",
    "generation_code": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2607": {
    "question_id": "mbpp/260",
    "model": "deepseek-v3-250324",
    "generation_code": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2608": {
    "question_id": "mbpp/260",
    "model": "deepseek-v3-250324",
    "generation_code": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2609": {
    "question_id": "mbpp/260",
    "model": "deepseek-v3-250324",
    "generation_code": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2610": {
    "question_id": "mbpp/261",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_two_parts(lst, n):\n    return (lst[:n], lst[n:])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2611": {
    "question_id": "mbpp/261",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_two_parts(lst, n):\n    return (lst[:n], lst[n:])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2612": {
    "question_id": "mbpp/261",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_two_parts(lst, n):\n    return (lst[:n], lst[n:])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2613": {
    "question_id": "mbpp/261",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_two_parts(lst, n):\n    return (lst[:n], lst[n:])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2614": {
    "question_id": "mbpp/261",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_two_parts(lst, n):\n    return (lst[:n], lst[n:])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2615": {
    "question_id": "mbpp/261",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_two_parts(lst, n):\n    return (lst[:n], lst[n:])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2616": {
    "question_id": "mbpp/261",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_two_parts(lst, n):\n    return (lst[:n], lst[n:])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2617": {
    "question_id": "mbpp/261",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_two_parts(lst, n):\n    if n <= 0:\n        return ([], lst)\n    if n >= len(lst):\n        return (lst.copy(), [])\n    return (lst[:n], lst[n:])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2618": {
    "question_id": "mbpp/261",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_two_parts(lst, n):\n    if n <= 0:\n        return ([], lst)\n    if n >= len(lst):\n        return (lst, [])\n    return (lst[:n], lst[n:])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2619": {
    "question_id": "mbpp/261",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_two_parts(lst, n):\n    if n < 0:\n        n = 0\n    if n > len(lst):\n        n = len(lst)\n    return (lst[:n], lst[n:])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2620": {
    "question_id": "mbpp/262",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dict(dict1, dict2):\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2621": {
    "question_id": "mbpp/262",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dict(dict1, dict2):\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2622": {
    "question_id": "mbpp/262",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dict(dict1, dict2):\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2623": {
    "question_id": "mbpp/262",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dict(dict1, dict2):\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2624": {
    "question_id": "mbpp/262",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dict(dict1, dict2):\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2625": {
    "question_id": "mbpp/262",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dict(dict1, dict2):\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2626": {
    "question_id": "mbpp/262",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dict(dict1, dict2):\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2627": {
    "question_id": "mbpp/262",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dict(dict1, dict2):\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2628": {
    "question_id": "mbpp/262",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dict(dict1, dict2):\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2629": {
    "question_id": "mbpp/262",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dict(dict1, dict2):\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2630": {
    "question_id": "mbpp/263",
    "model": "deepseek-v3-250324",
    "generation_code": "def dog_age(human_years):\n    if human_years <= 0:\n        return 0\n    elif human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 24\n    else:\n        return 24 + (human_years - 2) * 5",
    "test_output": "FAILED: expect 61,in fact 74",
    "test_result": "False"
  },
  "2631": {
    "question_id": "mbpp/263",
    "model": "deepseek-v3-250324",
    "generation_code": "def dog_age(human_years):\n    if human_years <= 0:\n        return 0\n    elif human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 24\n    else:\n        return 24 + (human_years - 2) * 5",
    "test_output": "FAILED: expect 61,in fact 74",
    "test_result": "False"
  },
  "2632": {
    "question_id": "mbpp/263",
    "model": "deepseek-v3-250324",
    "generation_code": "def dog_age(human_years):\n    if human_years <= 0:\n        return 0\n    elif human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 24\n    else:\n        return 24 + (human_years - 2) * 5",
    "test_output": "FAILED: expect 61,in fact 74",
    "test_result": "False"
  },
  "2633": {
    "question_id": "mbpp/263",
    "model": "deepseek-v3-250324",
    "generation_code": "def dog_age(human_years):\n    if human_years <= 0:\n        return 0\n    elif human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 24\n    else:\n        return 24 + (human_years - 2) * 5",
    "test_output": "FAILED: expect 61,in fact 74",
    "test_result": "False"
  },
  "2634": {
    "question_id": "mbpp/263",
    "model": "deepseek-v3-250324",
    "generation_code": "def dog_age(human_age):\n    if human_age <= 0:\n        return 0\n    elif human_age == 1:\n        return 15\n    elif human_age == 2:\n        return 24\n    else:\n        return 24 + (human_age - 2) * 5",
    "test_output": "FAILED: expect 61,in fact 74",
    "test_result": "False"
  },
  "2635": {
    "question_id": "mbpp/263",
    "model": "deepseek-v3-250324",
    "generation_code": "def dog_age(human_years):\n    if human_years <= 0:\n        return 0\n    elif human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 24\n    else:\n        return 24 + (human_years - 2) * 5",
    "test_output": "FAILED: expect 61,in fact 74",
    "test_result": "False"
  },
  "2636": {
    "question_id": "mbpp/263",
    "model": "deepseek-v3-250324",
    "generation_code": "def dog_age(human_years):\n    if human_years <= 0:\n        return 0\n    elif human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 24\n    else:\n        return 24 + (human_years - 2) * 5",
    "test_output": "FAILED: expect 61,in fact 74",
    "test_result": "False"
  },
  "2637": {
    "question_id": "mbpp/263",
    "model": "deepseek-v3-250324",
    "generation_code": "def dog_age(human_years):\n    if human_years <= 0:\n        return 0\n    elif human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 24\n    else:\n        return 24 + (human_years - 2) * 5",
    "test_output": "FAILED: expect 61,in fact 74",
    "test_result": "False"
  },
  "2638": {
    "question_id": "mbpp/263",
    "model": "deepseek-v3-250324",
    "generation_code": "def dog_age(human_years):\n    if human_years <= 0:\n        return 0\n    elif human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 24\n    else:\n        return 24 + (human_years - 2) * 5",
    "test_output": "FAILED: expect 61,in fact 74",
    "test_result": "False"
  },
  "2639": {
    "question_id": "mbpp/263",
    "model": "deepseek-v3-250324",
    "generation_code": "def dog_age(human_years):\n    if human_years <= 0:\n        return 0\n    elif human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 24\n    else:\n        return 24 + (human_years - 2) * 5",
    "test_output": "FAILED: expect 61,in fact 74",
    "test_result": "False"
  },
  "2640": {
    "question_id": "mbpp/264",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_split(lst, n):\n    if not lst or n <= 0:\n        return []\n    result = [[] for _ in range(n)]\n    for i, item in enumerate(lst):\n        result[i % n].append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2641": {
    "question_id": "mbpp/264",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_split(lst, n):\n    if not lst or n <= 0:\n        return []\n    result = [[] for _ in range(n)]\n    for i in range(len(lst)):\n        result[i % n].append(lst[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2642": {
    "question_id": "mbpp/264",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_split(lst, n):\n    if n <= 0:\n        return []\n    result = [[] for _ in range(n)]\n    for i, item in enumerate(lst):\n        result[i % n].append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2643": {
    "question_id": "mbpp/264",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_split(lst, n):\n    if not lst or n <= 0:\n        return []\n    result = [[] for _ in range(n)]\n    for i, item in enumerate(lst):\n        result[i % n].append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2644": {
    "question_id": "mbpp/264",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_split(lst, n):\n    if not lst or n <= 0:\n        return []\n    result = [[] for _ in range(n)]\n    for i, item in enumerate(lst):\n        result[i % n].append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2645": {
    "question_id": "mbpp/264",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_split(lst, n):\n    if not lst or n <= 0:\n        return []\n    result = [[] for _ in range(n)]\n    for i, item in enumerate(lst):\n        result[i % n].append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2646": {
    "question_id": "mbpp/264",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_split(lst, n):\n    if not lst or n <= 0:\n        return []\n    result = [[] for _ in range(n)]\n    for i, item in enumerate(lst):\n        result[i % n].append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2647": {
    "question_id": "mbpp/264",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_split(lst, n):\n    if n <= 0:\n        return []\n    result = [[] for _ in range(n)]\n    for i, item in enumerate(lst):\n        result[i % n].append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2648": {
    "question_id": "mbpp/264",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_split(lst, n):\n    if not lst or n <= 0:\n        return []\n    result = [[] for _ in range(n)]\n    for i, item in enumerate(lst):\n        result[i % n].append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2649": {
    "question_id": "mbpp/264",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_split(lst, n):\n    if not lst or n <= 0:\n        return []\n    result = [[] for _ in range(n)]\n    for i in range(len(lst)):\n        result[i % n].append(lst[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2650": {
    "question_id": "mbpp/265",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cube(length):\n    if length <= 0:\n        return 0\n    return 4 * length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2651": {
    "question_id": "mbpp/265",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cube(length):\n    if length <= 0:\n        return 0\n    return 4 * length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2652": {
    "question_id": "mbpp/265",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cube(length):\n    if length <= 0:\n        return 0\n    return 4 * (length ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2653": {
    "question_id": "mbpp/265",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cube(length):\n    if length <= 0:\n        return 0\n    return 4 * (length ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2654": {
    "question_id": "mbpp/265",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cube(length):\n    if length <= 0:\n        return 0\n    return 4 * (length ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2655": {
    "question_id": "mbpp/265",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cube(length):\n    if length <= 0:\n        return 0\n    return 4 * (length ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2656": {
    "question_id": "mbpp/265",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cube(length):\n    if length <= 0:\n        return 0\n    return 4 * (length ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2657": {
    "question_id": "mbpp/265",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cube(length):\n    if length <= 0:\n        return 0\n    return 4 * length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2658": {
    "question_id": "mbpp/265",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cube(length):\n    if length <= 0:\n        return 0\n    return 4 * length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2659": {
    "question_id": "mbpp/265",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cube(length):\n    if length <= 0:\n        return 0\n    return 4 * (length ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2660": {
    "question_id": "mbpp/266",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    return sum((2*i + 1)**2 for i in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2661": {
    "question_id": "mbpp/266",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    return sum((2*i + 1)**2 for i in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2662": {
    "question_id": "mbpp/266",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    return sum((2*i + 1)**2 for i in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2663": {
    "question_id": "mbpp/266",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    return sum((2*i + 1)**2 for i in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2664": {
    "question_id": "mbpp/266",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    if n <= 0:\n        return 0\n    return sum((2*i - 1)**2 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2665": {
    "question_id": "mbpp/266",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    return sum((2*i + 1)**2 for i in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2666": {
    "question_id": "mbpp/266",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    return sum((2*i + 1)**2 for i in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2667": {
    "question_id": "mbpp/266",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    return sum((2*i + 1)**2 for i in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2668": {
    "question_id": "mbpp/266",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    sum_squares = 0\n    for i in range(1, 2*n + 1, 2):\n        sum_squares += i * i\n    return sum_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2669": {
    "question_id": "mbpp/266",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    sum_squares = 0\n    for i in range(1, 2*n + 1, 2):\n        sum_squares += i * i\n    return sum_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2670": {
    "question_id": "mbpp/267",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_star_num(n):\n    if n < 1:\n        return None\n    return 6 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2671": {
    "question_id": "mbpp/267",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_star_num(n):\n    return 6 * n * n - 6 * n + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2672": {
    "question_id": "mbpp/267",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_star_num(n):\n    if n < 1:\n        return None\n    return 6 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2673": {
    "question_id": "mbpp/267",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_star_num(n):\n    return 6 * n * n - 6 * n + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2674": {
    "question_id": "mbpp/267",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_star_num(n):\n    if n < 1:\n        return None\n    return 6 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2675": {
    "question_id": "mbpp/267",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_star_num(n):\n    if n < 1:\n        return None\n    return 6 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2676": {
    "question_id": "mbpp/267",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2677": {
    "question_id": "mbpp/267",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_star_num(n):\n    if n < 1:\n        return None\n    return 6 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2678": {
    "question_id": "mbpp/267",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_star_num(n):\n    return 6 * n * n - 6 * n + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2679": {
    "question_id": "mbpp/267",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_star_num(n):\n    if n < 1:\n        return None\n    return 6 * n * (n - 1) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2680": {
    "question_id": "mbpp/268",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value(char):\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n    return ord(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2681": {
    "question_id": "mbpp/268",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value(char):\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n    return ord(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2682": {
    "question_id": "mbpp/268",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value(char):\n    return ord(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2683": {
    "question_id": "mbpp/268",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value(char):\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n    return ord(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2684": {
    "question_id": "mbpp/268",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value(char):\n    return ord(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2685": {
    "question_id": "mbpp/268",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value(char):\n    return ord(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2686": {
    "question_id": "mbpp/268",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value(char):\n    return ord(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2687": {
    "question_id": "mbpp/268",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value(char):\n    return ord(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2688": {
    "question_id": "mbpp/268",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value(char):\n    return ord(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2689": {
    "question_id": "mbpp/268",
    "model": "deepseek-v3-250324",
    "generation_code": "def ascii_value(char):\n    if len(char) != 1:\n        return None\n    return ord(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2690": {
    "question_id": "mbpp/269",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2691": {
    "question_id": "mbpp/269",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2692": {
    "question_id": "mbpp/269",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2693": {
    "question_id": "mbpp/269",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2694": {
    "question_id": "mbpp/269",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2695": {
    "question_id": "mbpp/269",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2696": {
    "question_id": "mbpp/269",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2697": {
    "question_id": "mbpp/269",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2698": {
    "question_id": "mbpp/269",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2699": {
    "question_id": "mbpp/269",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2700": {
    "question_id": "mbpp/270",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 5\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2701": {
    "question_id": "mbpp/270",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 5\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2702": {
    "question_id": "mbpp/270",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 5\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2703": {
    "question_id": "mbpp/270",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 5\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2704": {
    "question_id": "mbpp/270",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 5\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2705": {
    "question_id": "mbpp/270",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 5\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2706": {
    "question_id": "mbpp/270",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 5\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2707": {
    "question_id": "mbpp/270",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 5\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2708": {
    "question_id": "mbpp/270",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n + 1):\n        even_num = 2 * i\n        sum_power += even_num ** 5\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2709": {
    "question_id": "mbpp/270",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 5\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2710": {
    "question_id": "mbpp/271",
    "model": "deepseek-v3-250324",
    "generation_code": "def rear_extract(records):\n    return [t[-1] for t in records]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2711": {
    "question_id": "mbpp/271",
    "model": "deepseek-v3-250324",
    "generation_code": "def rear_extract(records):\n    return [t[-1] for t in records]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2712": {
    "question_id": "mbpp/271",
    "model": "deepseek-v3-250324",
    "generation_code": "def rear_extract(records):\n    return [t[-1] for t in records]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2713": {
    "question_id": "mbpp/271",
    "model": "deepseek-v3-250324",
    "generation_code": "def rear_extract(records):\n    return [t[-1] for t in records]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2714": {
    "question_id": "mbpp/271",
    "model": "deepseek-v3-250324",
    "generation_code": "def rear_extract(records):\n    return [t[-1] for t in records]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2715": {
    "question_id": "mbpp/271",
    "model": "deepseek-v3-250324",
    "generation_code": "def rear_extract(records):\n    return [t[-1] for t in records]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2716": {
    "question_id": "mbpp/271",
    "model": "deepseek-v3-250324",
    "generation_code": "def rear_extract(records):\n    return [t[-1] for t in records]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2717": {
    "question_id": "mbpp/271",
    "model": "deepseek-v3-250324",
    "generation_code": "def rear_extract(records):\n    return [t[-1] for t in records]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2718": {
    "question_id": "mbpp/271",
    "model": "deepseek-v3-250324",
    "generation_code": "def rear_extract(records):\n    return [t[-1] for t in records]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2719": {
    "question_id": "mbpp/271",
    "model": "deepseek-v3-250324",
    "generation_code": "def rear_extract(records):\n    return [t[-1] for t in records]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2720": {
    "question_id": "mbpp/272",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2721": {
    "question_id": "mbpp/272",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2722": {
    "question_id": "mbpp/272",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2723": {
    "question_id": "mbpp/272",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2724": {
    "question_id": "mbpp/272",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2725": {
    "question_id": "mbpp/272",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2726": {
    "question_id": "mbpp/272",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2727": {
    "question_id": "mbpp/272",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2728": {
    "question_id": "mbpp/272",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2729": {
    "question_id": "mbpp/272",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2730": {
    "question_id": "mbpp/273",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_binomial_Coeff_Sum(n):\n    if n == 0:\n        return 1\n    return 2 ** (n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2731": {
    "question_id": "mbpp/273",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_binomial_Coeff_Sum(n):\n    return 2 ** (n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2732": {
    "question_id": "mbpp/273",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_binomial_Coeff_Sum(n):\n    return 2 ** (n - 1) if n != 0 else 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2733": {
    "question_id": "mbpp/273",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_binomial_Coeff_Sum(n):\n    if n == 0:\n        return 1\n    return 2 ** (n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2734": {
    "question_id": "mbpp/273",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_binomial_Coeff_Sum(n):\n    return 2 ** (n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2735": {
    "question_id": "mbpp/273",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_binomial_Coeff_Sum(n):\n    return 2 ** (n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2736": {
    "question_id": "mbpp/273",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_binomial_Coeff_Sum(n):\n    if n == 0:\n        return 1\n    return 2 ** (n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2737": {
    "question_id": "mbpp/273",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_binomial_Coeff_Sum(n):\n    if n == 0:\n        return 1\n    return 2 ** (n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2738": {
    "question_id": "mbpp/273",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_binomial_Coeff_Sum(n):\n    return 2 ** (n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2739": {
    "question_id": "mbpp/273",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_binomial_Coeff_Sum(n):\n    return 2 ** (n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2740": {
    "question_id": "mbpp/274",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Position(arr, n, k):\n    if not arr or n <= 0 or k <= 0:\n        return -1\n    index = 0\n    for _ in range(n - 1):\n        index = (index + k - 1) % len(arr)\n        arr.pop(index)\n    return index",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "2741": {
    "question_id": "mbpp/274",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Position(arr, n, k):\n    if not arr or n <= 0 or k <= 0:\n        return -1\n    last = 0\n    for i in range(2, n + 1):\n        last = (last + k) % i\n    return last",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "2742": {
    "question_id": "mbpp/274",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Position(arr, n, k):\n    if not arr or n <= 0 or k <= 0:\n        return -1\n    index = 0\n    for i in range(n):\n        index = (index + k) % len(arr)\n        removed = arr.pop(index)\n    return removed",
    "test_output": "FAILED: expect 2,in fact 5",
    "test_result": "False"
  },
  "2743": {
    "question_id": "mbpp/274",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Position(arr, n, k):\n    if not arr or n <= 0 or k <= 0:\n        return -1\n    last = 0\n    for i in range(2, n + 1):\n        last = (last + k) % i\n    return last",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "2744": {
    "question_id": "mbpp/274",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Position(arr, n, k):\n    if not arr or n <= 0 or k <= 0:\n        return -1\n    index = 0\n    for i in range(n):\n        index = (index + k) % len(arr)\n        removed = arr.pop(index)\n    return removed",
    "test_output": "FAILED: expect 2,in fact 5",
    "test_result": "False"
  },
  "2745": {
    "question_id": "mbpp/274",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Position(arr, n, k):\n    if not arr or n <= 0 or k <= 0:\n        return -1\n    last = 0\n    for i in range(2, n + 1):\n        last = (last + k) % i\n    return last",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "2746": {
    "question_id": "mbpp/274",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Position(arr, n, k):\n    if not arr or n <= 0 or k <= 0:\n        return -1\n    index = 0\n    for _ in range(n - 1):\n        index = (index + k - 1) % len(arr)\n        arr.pop(index)\n    return arr[0]",
    "test_output": "FAILED: expect 2,in fact 4",
    "test_result": "False"
  },
  "2747": {
    "question_id": "mbpp/274",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Position(arr, n, k):\n    if not arr or n <= 0 or k <= 0:\n        return -1\n    last = 0\n    for i in range(2, n + 1):\n        last = (last + k) % i\n    return last",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "2748": {
    "question_id": "mbpp/274",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Position(arr, n, k):\n    if not arr or n <= 0 or k <= 0:\n        return -1\n    index = 0\n    for _ in range(n - 1):\n        index = (index + k) % len(arr)\n        arr.pop(index)\n    return index",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "2749": {
    "question_id": "mbpp/274",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Position(arr, n, k):\n    if not arr or n <= 0 or k <= 0:\n        return -1\n    index = 0\n    for _ in range(n - 1):\n        index = (index + k - 1) % len(arr)\n        arr.pop(index)\n    return index",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "2750": {
    "question_id": "mbpp/275",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height",
    "test_output": "FAILED: expect 1570.7500000000002,in fact 1570.7963267948967",
    "test_result": "False"
  },
  "2751": {
    "question_id": "mbpp/275",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height",
    "test_output": "FAILED: expect 1570.7500000000002,in fact 1570.7963267948967",
    "test_result": "False"
  },
  "2752": {
    "question_id": "mbpp/275",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height",
    "test_output": "FAILED: expect 1570.7500000000002,in fact 1570.7963267948967",
    "test_result": "False"
  },
  "2753": {
    "question_id": "mbpp/275",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height",
    "test_output": "FAILED: expect 1570.7500000000002,in fact 1570.7963267948967",
    "test_result": "False"
  },
  "2754": {
    "question_id": "mbpp/275",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height",
    "test_output": "FAILED: expect 1570.7500000000002,in fact 1570.7963267948967",
    "test_result": "False"
  },
  "2755": {
    "question_id": "mbpp/275",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height",
    "test_output": "FAILED: expect 1570.7500000000002,in fact 1570.7963267948967",
    "test_result": "False"
  },
  "2756": {
    "question_id": "mbpp/275",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height",
    "test_output": "FAILED: expect 1570.7500000000002,in fact 1570.7963267948967",
    "test_result": "False"
  },
  "2757": {
    "question_id": "mbpp/275",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height",
    "test_output": "FAILED: expect 1570.7500000000002,in fact 1570.7963267948967",
    "test_result": "False"
  },
  "2758": {
    "question_id": "mbpp/275",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height",
    "test_output": "FAILED: expect 1570.7500000000002,in fact 1570.7963267948967",
    "test_result": "False"
  },
  "2759": {
    "question_id": "mbpp/275",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height",
    "test_output": "FAILED: expect 1570.7500000000002,in fact 1570.7963267948967",
    "test_result": "False"
  },
  "2760": {
    "question_id": "mbpp/276",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_filter(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2761": {
    "question_id": "mbpp/276",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_filter(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2762": {
    "question_id": "mbpp/276",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_filter(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2763": {
    "question_id": "mbpp/276",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_filter(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2764": {
    "question_id": "mbpp/276",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_filter(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2765": {
    "question_id": "mbpp/276",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_filter(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2766": {
    "question_id": "mbpp/276",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_filter(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2767": {
    "question_id": "mbpp/276",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_filter(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2768": {
    "question_id": "mbpp/276",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_filter(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2769": {
    "question_id": "mbpp/276",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_filter(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2770": {
    "question_id": "mbpp/277",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2771": {
    "question_id": "mbpp/277",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2772": {
    "question_id": "mbpp/277",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2773": {
    "question_id": "mbpp/277",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2774": {
    "question_id": "mbpp/277",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2775": {
    "question_id": "mbpp/277",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2776": {
    "question_id": "mbpp/277",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2777": {
    "question_id": "mbpp/277",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2778": {
    "question_id": "mbpp/277",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2779": {
    "question_id": "mbpp/277",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2780": {
    "question_id": "mbpp/278",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_decagonal(n):\n    if n < 1:\n        return 0\n    return n * (4 * n - 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2781": {
    "question_id": "mbpp/278",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_decagonal(n):\n    if n < 1:\n        return 0\n    return n * (4 * n - 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2782": {
    "question_id": "mbpp/278",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_decagonal(n):\n    return n * (4 * n - 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2783": {
    "question_id": "mbpp/278",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_decagonal(n):\n    if n < 1:\n        return 0\n    return n * (4 * n - 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2784": {
    "question_id": "mbpp/278",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_decagonal(n):\n    if n < 1:\n        return 0\n    return n * (4 * n - 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2785": {
    "question_id": "mbpp/278",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_decagonal(n):\n    if n < 1:\n        return 0\n    return n * (4 * n - 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2786": {
    "question_id": "mbpp/278",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_decagonal(n):\n    if n < 1:\n        return 0\n    return n * (4 * n - 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2787": {
    "question_id": "mbpp/278",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_decagonal(n):\n    if n < 1:\n        return 0\n    return n * (4 * n - 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2788": {
    "question_id": "mbpp/278",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_decagonal(n):\n    if n < 1:\n        return 0\n    return n * (4 * n - 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2789": {
    "question_id": "mbpp/278",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_num_decagonal(n):\n    if n < 1:\n        return 0\n    return n * (4 * n - 3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2790": {
    "question_id": "mbpp/279",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2791": {
    "question_id": "mbpp/279",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2792": {
    "question_id": "mbpp/279",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2793": {
    "question_id": "mbpp/279",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2794": {
    "question_id": "mbpp/279",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2795": {
    "question_id": "mbpp/279",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2796": {
    "question_id": "mbpp/279",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2797": {
    "question_id": "mbpp/279",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2798": {
    "question_id": "mbpp/279",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2799": {
    "question_id": "mbpp/279",
    "model": "deepseek-v3-250324",
    "generation_code": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2800": {
    "question_id": "mbpp/280",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2801": {
    "question_id": "mbpp/280",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2802": {
    "question_id": "mbpp/280",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2803": {
    "question_id": "mbpp/280",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2804": {
    "question_id": "mbpp/280",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2805": {
    "question_id": "mbpp/280",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2806": {
    "question_id": "mbpp/280",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2807": {
    "question_id": "mbpp/280",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2808": {
    "question_id": "mbpp/280",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2809": {
    "question_id": "mbpp/280",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2810": {
    "question_id": "mbpp/281",
    "model": "deepseek-v3-250324",
    "generation_code": "sub_list = lambda list1, list2: list(map(lambda x, y: x - y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2811": {
    "question_id": "mbpp/281",
    "model": "deepseek-v3-250324",
    "generation_code": "sub_list = lambda list1, list2: list(map(lambda x, y: x - y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2812": {
    "question_id": "mbpp/281",
    "model": "deepseek-v3-250324",
    "generation_code": "sub_list = lambda list1, list2: list(map(lambda x, y: x - y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2813": {
    "question_id": "mbpp/281",
    "model": "deepseek-v3-250324",
    "generation_code": "sub_list = lambda list1, list2: list(map(lambda x, y: x - y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2814": {
    "question_id": "mbpp/281",
    "model": "deepseek-v3-250324",
    "generation_code": "sub_list = lambda a, b: list(map(lambda x, y: x - y, a, b))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2815": {
    "question_id": "mbpp/281",
    "model": "deepseek-v3-250324",
    "generation_code": "sub_list = lambda list1, list2: list(map(lambda x, y: x - y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2816": {
    "question_id": "mbpp/281",
    "model": "deepseek-v3-250324",
    "generation_code": "sub_list = lambda list1, list2: list(map(lambda x, y: x - y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2817": {
    "question_id": "mbpp/281",
    "model": "deepseek-v3-250324",
    "generation_code": "sub_list = lambda list1, list2: list(map(lambda x, y: x - y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2818": {
    "question_id": "mbpp/281",
    "model": "deepseek-v3-250324",
    "generation_code": "sub_list = lambda list1, list2: list(map(lambda x, y: x - y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2819": {
    "question_id": "mbpp/281",
    "model": "deepseek-v3-250324",
    "generation_code": "sub_list = lambda list1, list2: list(map(lambda x, y: x - y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2820": {
    "question_id": "mbpp/282",
    "model": "deepseek-v3-250324",
    "generation_code": "def validate(n):\n    num_str = str(n)\n    digit_counts = {}\n    for digit in num_str:\n        d = int(digit)\n        digit_counts[d] = digit_counts.get(d, 0) + 1\n    \n    for digit, count in digit_counts.items():\n        if count > digit:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2821": {
    "question_id": "mbpp/282",
    "model": "deepseek-v3-250324",
    "generation_code": "def validate(n):\n    num_str = str(n)\n    digit_counts = {}\n    \n    for digit in num_str:\n        d = int(digit)\n        digit_counts[d] = digit_counts.get(d, 0) + 1\n    \n    for digit, count in digit_counts.items():\n        if count > digit:\n            return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2822": {
    "question_id": "mbpp/282",
    "model": "deepseek-v3-250324",
    "generation_code": "def validate(n):\n    num_str = str(n)\n    digit_counts = {}\n    \n    for digit in num_str:\n        d = int(digit)\n        digit_counts[d] = digit_counts.get(d, 0) + 1\n    \n    for digit, count in digit_counts.items():\n        if count > digit:\n            return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2823": {
    "question_id": "mbpp/282",
    "model": "deepseek-v3-250324",
    "generation_code": "def validate(n):\n    num_str = str(n)\n    digit_counts = {}\n    \n    for digit in num_str:\n        d = int(digit)\n        digit_counts[d] = digit_counts.get(d, 0) + 1\n    \n    for digit, count in digit_counts.items():\n        if count > digit:\n            return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2824": {
    "question_id": "mbpp/282",
    "model": "deepseek-v3-250324",
    "generation_code": "def validate(n):\n    num_str = str(n)\n    digit_counts = {}\n    \n    for digit in num_str:\n        d = int(digit)\n        digit_counts[d] = digit_counts.get(d, 0) + 1\n    \n    for digit, count in digit_counts.items():\n        if count > digit:\n            return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2825": {
    "question_id": "mbpp/282",
    "model": "deepseek-v3-250324",
    "generation_code": "def validate(n):\n    num_str = str(n)\n    digit_counts = {}\n    for digit in num_str:\n        d = int(digit)\n        digit_counts[d] = digit_counts.get(d, 0) + 1\n    \n    for digit, count in digit_counts.items():\n        if count > digit:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2826": {
    "question_id": "mbpp/282",
    "model": "deepseek-v3-250324",
    "generation_code": "def validate(n):\n    from collections import defaultdict\n    \n    digit_counts = defaultdict(int)\n    for digit in str(n):\n        d = int(digit)\n        digit_counts[d] += 1\n    \n    for digit, count in digit_counts.items():\n        if count > digit:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2827": {
    "question_id": "mbpp/282",
    "model": "deepseek-v3-250324",
    "generation_code": "def validate(n):\n    num_str = str(n)\n    digit_counts = {}\n    for digit in num_str:\n        d = int(digit)\n        digit_counts[d] = digit_counts.get(d, 0) + 1\n    \n    for digit, count in digit_counts.items():\n        if count > digit:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2828": {
    "question_id": "mbpp/282",
    "model": "deepseek-v3-250324",
    "generation_code": "def validate(n):\n    num_str = str(n)\n    digit_counts = {}\n    \n    for digit in num_str:\n        d = int(digit)\n        digit_counts[d] = digit_counts.get(d, 0) + 1\n    \n    for digit, count in digit_counts.items():\n        if count > digit:\n            return False\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2829": {
    "question_id": "mbpp/282",
    "model": "deepseek-v3-250324",
    "generation_code": "def validate(n):\n    num_str = str(n)\n    digit_counts = {}\n    for digit in num_str:\n        d = int(digit)\n        digit_counts[d] = digit_counts.get(d, 0) + 1\n    \n    for digit, count in digit_counts.items():\n        if count > digit:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2830": {
    "question_id": "mbpp/283",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, s):\n    if not lst:\n        return False\n    return all(item == s for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2831": {
    "question_id": "mbpp/283",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, s):\n    if not lst:\n        return False\n    return all(item == s for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2832": {
    "question_id": "mbpp/283",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, s):\n    if not lst:\n        return False\n    return all(item == s for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2833": {
    "question_id": "mbpp/283",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, s):\n    if not lst:\n        return False\n    return all(item == s for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2834": {
    "question_id": "mbpp/283",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, s):\n    if not lst:\n        return False\n    return all(item == s for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2835": {
    "question_id": "mbpp/283",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, s):\n    if not lst:\n        return False\n    return all(item == s for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2836": {
    "question_id": "mbpp/283",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, s):\n    if not lst:\n        return False\n    return all(item == s for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2837": {
    "question_id": "mbpp/283",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, s):\n    if not lst:\n        return False\n    return all(item == s for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2838": {
    "question_id": "mbpp/283",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, string):\n    if not lst:\n        return False\n    return all(item == string for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2839": {
    "question_id": "mbpp/283",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, s):\n    if not lst:\n        return False\n    return all(item == s for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2840": {
    "question_id": "mbpp/284",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_two_three(text):\n    if re.search(r'ab{2,3}', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "2841": {
    "question_id": "mbpp/284",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_two_three(text):\n    if re.search(r'ab{2,3}', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "2842": {
    "question_id": "mbpp/284",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.fullmatch(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "2843": {
    "question_id": "mbpp/284",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_two_three(text):\n    if re.search(r'ab{2,3}', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "2844": {
    "question_id": "mbpp/284",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_two_three(text):\n    if re.search(r'ab{2,3}', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "2845": {
    "question_id": "mbpp/284",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_two_three(text):\n    if re.search(r'ab{2,3}', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "2846": {
    "question_id": "mbpp/284",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_two_three(text):\n    if re.search(r'ab{2,3}', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "2847": {
    "question_id": "mbpp/284",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_two_three(text):\n    if re.search(r'ab{2,3}', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "2848": {
    "question_id": "mbpp/284",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_two_three(text):\n    if re.search(r'ab{2,3}$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "2849": {
    "question_id": "mbpp/284",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_two_three(text):\n    if re.search(r'ab{2,3}$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "2850": {
    "question_id": "mbpp/285",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum_repeated(arr, n, k):\n    if not arr or k == 0:\n        return 0\n    \n    max_subarray = current = arr[0]\n    total_sum = sum(arr)\n    \n    # Find max subarray in single array\n    for num in arr[1:]:\n        current = max(num, current + num)\n        max_subarray = max(max_subarray, current)\n    \n    if k == 1:\n        return max_subarray\n    \n    # Find max prefix and max suffix\n    max_prefix = current_prefix = arr[0]\n    for num in arr[1:]:\n        current_prefix += num\n        max_prefix = max(max_prefix, current_prefix)\n    \n    max_suffix = current_suffix = arr[-1]\n    for num in reversed(arr[:-1]):\n        current_suffix += num\n        max_suffix = max(max_suffix, current_suffix)\n    \n    if total_sum > 0:\n        return max(max_subarray, max_suffix + max_prefix + total_sum * (k - 2))\n    else:\n        return max(max_subarray, max_suffix + max_prefix)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2851": {
    "question_id": "mbpp/285",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum_repeated(arr, n, k):\n    if n == 0 or k == 0:\n        return 0\n    \n    max_subarray = current = arr[0]\n    total_sum = sum(arr)\n    \n    # Compute max subarray sum for single array\n    for num in arr[1:]:\n        current = max(num, current + num)\n        max_subarray = max(max_subarray, current)\n    \n    if k == 1:\n        return max_subarray\n    \n    # Compute max prefix and max suffix\n    max_prefix = current_prefix = arr[0]\n    for num in arr[1:]:\n        current_prefix += num\n        max_prefix = max(max_prefix, current_prefix)\n    \n    max_suffix = current_suffix = arr[-1]\n    for num in reversed(arr[:-1]):\n        current_suffix += num\n        max_suffix = max(max_suffix, current_suffix)\n    \n    if total_sum > 0:\n        return max(max_subarray, max_suffix + max_prefix + total_sum * (k - 2))\n    else:\n        return max(max_subarray, max_suffix + max_prefix)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2852": {
    "question_id": "mbpp/285",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum_repeated(arr, n, k):\n    if not arr or n == 0 or k == 0:\n        return 0\n    \n    max_subarray = current = arr[0]\n    total_sum = sum(arr)\n    \n    # Find max subarray in single array\n    for num in arr[1:]:\n        current = max(num, current + num)\n        max_subarray = max(max_subarray, current)\n    \n    if k == 1:\n        return max_subarray\n    \n    # Find max prefix and max suffix\n    max_prefix = current_prefix = arr[0]\n    for num in arr[1:]:\n        current_prefix += num\n        max_prefix = max(max_prefix, current_prefix)\n    \n    max_suffix = current_suffix = arr[-1]\n    for num in reversed(arr[:-1]):\n        current_suffix += num\n        max_suffix = max(max_suffix, current_suffix)\n    \n    if total_sum > 0:\n        return max(max_subarray, max_suffix + max_prefix + total_sum * (k - 2))\n    else:\n        return max(max_subarray, max_suffix + max_prefix)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2853": {
    "question_id": "mbpp/285",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum_repeated(arr, n, k):\n    if not arr or n == 0 or k == 0:\n        return 0\n    \n    max_subarray = current = arr[0]\n    for num in arr[1:]:\n        current = max(num, current + num)\n        max_subarray = max(max_subarray, current)\n    \n    if k == 1:\n        return max_subarray\n    \n    total_sum = sum(arr)\n    max_prefix = current_prefix = 0\n    for num in arr:\n        current_prefix += num\n        max_prefix = max(max_prefix, current_prefix)\n    \n    max_suffix = current_suffix = 0\n    for num in reversed(arr):\n        current_suffix += num\n        max_suffix = max(max_suffix, current_suffix)\n    \n    if total_sum > 0:\n        return max(max_subarray, max_suffix + max_prefix + total_sum * (k - 2))\n    else:\n        return max(max_subarray, max_suffix + max_prefix)",
    "test_output": "FAILED: expect -1,in fact 0",
    "test_result": "False"
  },
  "2854": {
    "question_id": "mbpp/285",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum_repeated(arr, n, k):\n    if n == 0 or k == 0:\n        return 0\n    \n    max_kadane = kadane(arr)\n    if k == 1:\n        return max_kadane\n    \n    total_sum = sum(arr)\n    max_prefix = max_prefix_sum(arr)\n    max_suffix = max_suffix_sum(arr)\n    \n    if total_sum > 0:\n        return max(max_suffix + max_prefix + total_sum * (k - 2), max_kadane)\n    else:\n        return max(max_suffix + max_prefix, max_kadane)\n\ndef kadane(arr):\n    max_current = max_global = arr[0] if arr else 0\n    for num in arr[1:]:\n        max_current = max(num, max_current + num)\n        if max_current > max_global:\n            max_global = max_current\n    return max_global\n\ndef max_prefix_sum(arr):\n    max_sum = current_sum = arr[0] if arr else 0\n    for num in arr[1:]:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n\ndef max_suffix_sum(arr):\n    max_sum = current_sum = arr[-1] if arr else 0\n    for num in reversed(arr[:-1]):\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2855": {
    "question_id": "mbpp/285",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum_repeated(arr, n, k):\n    if not arr or n == 0 or k == 0:\n        return 0\n    \n    max_single = current_max = arr[0]\n    for num in arr[1:]:\n        current_max = max(num, current_max + num)\n        max_single = max(max_single, current_max)\n    \n    if k == 1:\n        return max_single\n    \n    total_sum = sum(arr)\n    max_prefix = prefix_sum = 0\n    for num in arr:\n        prefix_sum += num\n        max_prefix = max(max_prefix, prefix_sum)\n    \n    max_suffix = suffix_sum = 0\n    for num in reversed(arr):\n        suffix_sum += num\n        max_suffix = max(max_suffix, suffix_sum)\n    \n    if total_sum > 0:\n        return max(max_single, max_prefix + max_suffix + total_sum * (k - 2))\n    else:\n        return max(max_single, max_prefix + max_suffix)",
    "test_output": "FAILED: expect -1,in fact 0",
    "test_result": "False"
  },
  "2856": {
    "question_id": "mbpp/285",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum_repeated(arr, n, k):\n    if not arr or k == 0:\n        return 0\n    \n    max_single = current_max = arr[0]\n    total_sum = sum(arr)\n    \n    # Compute max subarray sum for single array\n    for num in arr[1:]:\n        current_max = max(num, current_max + num)\n        max_single = max(max_single, current_max)\n    \n    if k == 1:\n        return max_single\n    \n    # Compute max prefix and max suffix\n    max_prefix = prefix_sum = arr[0]\n    for num in arr[1:]:\n        prefix_sum += num\n        max_prefix = max(max_prefix, prefix_sum)\n    \n    max_suffix = suffix_sum = arr[-1]\n    for num in reversed(arr[:-1]):\n        suffix_sum += num\n        max_suffix = max(max_suffix, suffix_sum)\n    \n    if total_sum > 0:\n        return max(max_single, max_prefix + max_suffix + total_sum * (k - 2))\n    else:\n        return max(max_single, max_prefix + max_suffix)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2857": {
    "question_id": "mbpp/285",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum_repeated(arr, n, k):\n    if not arr or n == 0 or k == 0:\n        return 0\n    \n    max_subarray = current = arr[0]\n    for num in arr[1:]:\n        current = max(num, current + num)\n        max_subarray = max(max_subarray, current)\n    \n    if k == 1:\n        return max_subarray\n    \n    total_sum = sum(arr)\n    max_prefix = current_prefix = 0\n    for num in arr:\n        current_prefix += num\n        max_prefix = max(max_prefix, current_prefix)\n    \n    max_suffix = current_suffix = 0\n    for num in reversed(arr):\n        current_suffix += num\n        max_suffix = max(max_suffix, current_suffix)\n    \n    if total_sum > 0:\n        return max(max_subarray, max_suffix + max_prefix + total_sum * (k - 2))\n    else:\n        return max(max_subarray, max_suffix + max_prefix)",
    "test_output": "FAILED: expect -1,in fact 0",
    "test_result": "False"
  },
  "2858": {
    "question_id": "mbpp/285",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum_repeated(arr, n, k):\n    if n == 0 or k == 0:\n        return 0\n    \n    max_subarray = current = arr[0]\n    total_sum = sum(arr)\n    \n    # Find max subarray in single array\n    for num in arr[1:]:\n        current = max(num, current + num)\n        max_subarray = max(max_subarray, current)\n    \n    if k == 1:\n        return max_subarray\n    \n    # Find max prefix and suffix sums\n    max_prefix = current_prefix = arr[0]\n    for num in arr[1:]:\n        current_prefix += num\n        max_prefix = max(max_prefix, current_prefix)\n    \n    max_suffix = current_suffix = arr[-1]\n    for num in reversed(arr[:-1]):\n        current_suffix += num\n        max_suffix = max(max_suffix, current_suffix)\n    \n    if total_sum > 0:\n        return max(max_subarray, max_suffix + max_prefix + total_sum * (k - 2))\n    else:\n        return max(max_subarray, max_suffix + max_prefix)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2859": {
    "question_id": "mbpp/285",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum_repeated(arr, n, k):\n    if not arr or n == 0 or k == 0:\n        return 0\n    \n    max_subarray = current = arr[0]\n    total_sum = sum(arr)\n    \n    # Find max subarray in single array\n    for num in arr[1:]:\n        current = max(num, current + num)\n        max_subarray = max(max_subarray, current)\n    \n    if k == 1:\n        return max_subarray\n    \n    # Find max prefix and suffix sums\n    max_prefix = current_prefix = arr[0]\n    for num in arr[1:]:\n        current_prefix += num\n        max_prefix = max(max_prefix, current_prefix)\n    \n    max_suffix = current_suffix = arr[-1]\n    for num in reversed(arr[:-1]):\n        current_suffix += num\n        max_suffix = max(max_suffix, current_suffix)\n    \n    if total_sum > 0:\n        return max(max_subarray, max_suffix + max_prefix + total_sum * (k - 2))\n    else:\n        return max(max_subarray, max_suffix + max_prefix)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2860": {
    "question_id": "mbpp/286",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2 * i) ** 2\n    return sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2861": {
    "question_id": "mbpp/286",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    sum_squares = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_squares += even_num ** 2\n    return sum_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2862": {
    "question_id": "mbpp/286",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    sum_squares = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_squares += even_num ** 2\n    return sum_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2863": {
    "question_id": "mbpp/286",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    if n <= 0:\n        return 0\n    return sum((2 * i) ** 2 for i in range(1, n + 1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2864": {
    "question_id": "mbpp/286",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    if n <= 0:\n        return 0\n    return sum((2 * i) ** 2 for i in range(1, n + 1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2865": {
    "question_id": "mbpp/286",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    if n <= 0:\n        return 0\n    return sum((2 * i) ** 2 for i in range(1, n + 1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2866": {
    "question_id": "mbpp/286",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2 * i) ** 2\n    return sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2867": {
    "question_id": "mbpp/286",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    if n <= 0:\n        return 0\n    return sum((2 * i) ** 2 for i in range(1, n + 1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2868": {
    "question_id": "mbpp/286",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    sum_squares = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_squares += even_num ** 2\n    return sum_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2869": {
    "question_id": "mbpp/286",
    "model": "deepseek-v3-250324",
    "generation_code": "def square_Sum(n):\n    if n <= 0:\n        return 0\n    return sum((2 * i) ** 2 for i in range(1, n + 1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2870": {
    "question_id": "mbpp/287",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_inverse(arr, n, p):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if (num * num) % p == 1:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2871": {
    "question_id": "mbpp/287",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_inverse(arr, n, p):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        inverse = pow(num, p-2, p)\n        if inverse == num % p:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "2872": {
    "question_id": "mbpp/287",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_inverse(arr, n, p):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if (num * num) % p == 1:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2873": {
    "question_id": "mbpp/287",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_inverse(arr, n, p):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if (num * num) % p == 1:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2874": {
    "question_id": "mbpp/287",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_inverse(arr, n, p):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if (num * num) % p == 1:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2875": {
    "question_id": "mbpp/287",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_inverse(arr, n, p):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        inverse = pow(num, p-2, p)\n        if inverse == num % p:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "2876": {
    "question_id": "mbpp/287",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_inverse(arr, n, p):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if (num * num) % p == 1:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2877": {
    "question_id": "mbpp/287",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_inverse(arr, n, p):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if (num * num) % p == 1:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2878": {
    "question_id": "mbpp/287",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_inverse(arr, n, p):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if (num * num) % p == 1:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2879": {
    "question_id": "mbpp/287",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_inverse(arr, n, p):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if (num * num) % p == 1:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2880": {
    "question_id": "mbpp/288",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Days(year):\n    if year % 400 == 0:\n        return 0\n    elif year % 100 == 0:\n        return 5\n    elif year % 4 == 0:\n        return 2\n    else:\n        return 1",
    "test_output": "FAILED: expect 6,in fact 1",
    "test_result": "False"
  },
  "2881": {
    "question_id": "mbpp/288",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Days(year):\n    if year % 400 == 0:\n        return 0\n    elif year % 100 == 0:\n        return 5\n    elif year % 4 == 0:\n        return 2\n    else:\n        return 1",
    "test_output": "FAILED: expect 6,in fact 1",
    "test_result": "False"
  },
  "2882": {
    "question_id": "mbpp/288",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Days(year):\n    if year % 400 == 0:\n        return 0\n    elif year % 100 == 0:\n        return 5\n    elif year % 4 == 0:\n        return 2\n    else:\n        return 1",
    "test_output": "FAILED: expect 6,in fact 1",
    "test_result": "False"
  },
  "2883": {
    "question_id": "mbpp/288",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Days(year):\n    if year % 400 == 0:\n        return 0\n    elif year % 100 == 0:\n        return 5\n    elif year % 4 == 0:\n        return 2\n    else:\n        return 1",
    "test_output": "FAILED: expect 6,in fact 1",
    "test_result": "False"
  },
  "2884": {
    "question_id": "mbpp/288",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Days(year):\n    if year % 400 == 0:\n        return 0\n    elif year % 100 == 0:\n        return 5\n    elif year % 4 == 0:\n        return 2\n    else:\n        return 1",
    "test_output": "FAILED: expect 6,in fact 1",
    "test_result": "False"
  },
  "2885": {
    "question_id": "mbpp/288",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Days(year):\n    if year % 400 == 0:\n        return 0\n    elif year % 100 == 0:\n        return 5\n    elif year % 4 == 0:\n        return 2\n    else:\n        return 1",
    "test_output": "FAILED: expect 6,in fact 1",
    "test_result": "False"
  },
  "2886": {
    "question_id": "mbpp/288",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Days(year):\n    if year % 400 == 0:\n        return 0\n    elif year % 100 == 0:\n        return 5\n    elif year % 4 == 0:\n        return 2\n    else:\n        return 1",
    "test_output": "FAILED: expect 6,in fact 1",
    "test_result": "False"
  },
  "2887": {
    "question_id": "mbpp/288",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Days(year):\n    if year % 400 == 0:\n        return 0\n    elif year % 100 == 0:\n        return 5\n    elif year % 4 == 0:\n        return 2\n    else:\n        return 1",
    "test_output": "FAILED: expect 6,in fact 1",
    "test_result": "False"
  },
  "2888": {
    "question_id": "mbpp/288",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Days(year):\n    if year % 400 == 0:\n        return 0\n    elif year % 100 == 0:\n        return 5\n    elif year % 4 == 0:\n        return 2\n    else:\n        return 1",
    "test_output": "FAILED: expect 6,in fact 1",
    "test_result": "False"
  },
  "2889": {
    "question_id": "mbpp/288",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Days(year):\n    if year % 400 == 0:\n        return 0\n    elif year % 100 == 0:\n        return 5\n    elif year % 4 == 0:\n        return 2\n    else:\n        return 1",
    "test_output": "FAILED: expect 6,in fact 1",
    "test_result": "False"
  },
  "2890": {
    "question_id": "mbpp/289",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_length(lists):\n    if not lists:\n        return (0, [])\n    max_len = max(len(lst) for lst in lists)\n    max_lists = [lst for lst in lists if len(lst) == max_len]\n    return (max_len, max_lists[0] if max_lists else [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2891": {
    "question_id": "mbpp/289",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_length(lst):\n    if not lst:\n        return (0, [])\n    max_len = max(len(sublist) for sublist in lst)\n    max_sublists = [sublist for sublist in lst if len(sublist) == max_len]\n    return (max_len, max_sublists[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2892": {
    "question_id": "mbpp/289",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_length(lst):\n    if not lst:\n        return (0, [])\n    max_len = max(len(sublist) for sublist in lst)\n    max_sublists = [sublist for sublist in lst if len(sublist) == max_len]\n    return (max_len, max_sublists[0] if max_sublists else [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2893": {
    "question_id": "mbpp/289",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_length(lists):\n    if not lists:\n        return (0, [])\n    max_len = max(len(lst) for lst in lists)\n    max_list = [lst for lst in lists if len(lst) == max_len][0]\n    return (max_len, max_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2894": {
    "question_id": "mbpp/289",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_length(lists):\n    if not lists:\n        return (0, [])\n    max_len = max(len(lst) for lst in lists)\n    max_list = next(lst for lst in lists if len(lst) == max_len)\n    return (max_len, max_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2895": {
    "question_id": "mbpp/289",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_length(lst):\n    if not lst:\n        return (0, [])\n    max_len = max(len(sublist) for sublist in lst)\n    max_sublists = [sublist for sublist in lst if len(sublist) == max_len]\n    return (max_len, max_sublists[0] if max_sublists else [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2896": {
    "question_id": "mbpp/289",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_length(lists):\n    if not lists:\n        return (0, [])\n    max_list = max(lists, key=lambda x: len(x))\n    return (len(max_list), max_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2897": {
    "question_id": "mbpp/289",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_length(lst):\n    if not lst:\n        return (0, [])\n    max_len = max(len(sublist) for sublist in lst)\n    max_sublists = [sublist for sublist in lst if len(sublist) == max_len]\n    return (max_len, max_sublists[0] if max_sublists else [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2898": {
    "question_id": "mbpp/289",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_length(lst):\n    if not lst:\n        return (0, [])\n    max_len = max(len(sublist) for sublist in lst)\n    max_lists = [sublist for sublist in lst if len(sublist) == max_len]\n    return (max_len, max_lists[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2899": {
    "question_id": "mbpp/289",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_length(lists):\n    if not lists:\n        return (0, [])\n    max_list = max(lists, key=lambda x: len(x))\n    return (len(max_list), max_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2900": {
    "question_id": "mbpp/290",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n    return same + diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2901": {
    "question_id": "mbpp/290",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n    return same + diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2902": {
    "question_id": "mbpp/290",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n    return same + diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2903": {
    "question_id": "mbpp/290",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n    return same + diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2904": {
    "question_id": "mbpp/290",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        new_same = diff\n        new_diff = (same + diff) * (k - 1)\n        same, diff = new_same, new_diff\n    return same + diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2905": {
    "question_id": "mbpp/290",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n    return same + diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2906": {
    "question_id": "mbpp/290",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n    return same + diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2907": {
    "question_id": "mbpp/290",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n    return same + diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2908": {
    "question_id": "mbpp/290",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n    return same + diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2909": {
    "question_id": "mbpp/290",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n    return same + diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2910": {
    "question_id": "mbpp/291",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n    return a // b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2911": {
    "question_id": "mbpp/291",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n    return a // b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2912": {
    "question_id": "mbpp/291",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n    return a // b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2913": {
    "question_id": "mbpp/291",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n    return a // b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2914": {
    "question_id": "mbpp/291",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n    return a // b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2915": {
    "question_id": "mbpp/291",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n    return a // b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2916": {
    "question_id": "mbpp/291",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n    return a // b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2917": {
    "question_id": "mbpp/291",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        return None\n    return a // b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2918": {
    "question_id": "mbpp/291",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n    return a // b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2919": {
    "question_id": "mbpp/291",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        return None\n    return a // b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2920": {
    "question_id": "mbpp/292",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef otherside_rightangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0.0\n    return math.sqrt(a**2 + b**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2921": {
    "question_id": "mbpp/292",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef otherside_rightangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0\n    return math.sqrt(a**2 + b**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2922": {
    "question_id": "mbpp/292",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef otherside_rightangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0\n    return math.sqrt(a**2 + b**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2923": {
    "question_id": "mbpp/292",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef otherside_rightangle(side1, side2):\n    return math.sqrt(side1 ** 2 + side2 ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2924": {
    "question_id": "mbpp/292",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef otherside_rightangle(side1, side2):\n    return math.sqrt(side1**2 + side2**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2925": {
    "question_id": "mbpp/292",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef otherside_rightangle(side1, side2):\n    return math.sqrt(side1**2 + side2**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2926": {
    "question_id": "mbpp/292",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef otherside_rightangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0.0\n    return math.sqrt(a**2 + b**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2927": {
    "question_id": "mbpp/292",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2928": {
    "question_id": "mbpp/292",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef otherside_rightangle(side1, side2):\n    return math.sqrt(side1**2 + side2**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2929": {
    "question_id": "mbpp/292",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef otherside_rightangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0\n    return math.sqrt(a**2 + b**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2930": {
    "question_id": "mbpp/293",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2931": {
    "question_id": "mbpp/293",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2932": {
    "question_id": "mbpp/293",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2933": {
    "question_id": "mbpp/293",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return max(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2934": {
    "question_id": "mbpp/293",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2935": {
    "question_id": "mbpp/293",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return max(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2936": {
    "question_id": "mbpp/293",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return max(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2937": {
    "question_id": "mbpp/293",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2938": {
    "question_id": "mbpp/293",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return max(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2939": {
    "question_id": "mbpp/293",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2940": {
    "question_id": "mbpp/294",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_div(num):\n    if num <= 0:\n        return 0\n    total = 0\n    for i in range(1, num):\n        if num % i == 0:\n            total += i\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2941": {
    "question_id": "mbpp/294",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_div(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2942": {
    "question_id": "mbpp/294",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_div(num):\n    if num <= 0:\n        return 0\n    total = 0\n    for i in range(1, num):\n        if num % i == 0:\n            total += i\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2943": {
    "question_id": "mbpp/294",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_div(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2944": {
    "question_id": "mbpp/294",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_div(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2945": {
    "question_id": "mbpp/294",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_div(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2946": {
    "question_id": "mbpp/294",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_div(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2947": {
    "question_id": "mbpp/294",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_div(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2948": {
    "question_id": "mbpp/294",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_div(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2949": {
    "question_id": "mbpp/294",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_div(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2950": {
    "question_id": "mbpp/295",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2951": {
    "question_id": "mbpp/295",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2952": {
    "question_id": "mbpp/295",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2953": {
    "question_id": "mbpp/295",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2954": {
    "question_id": "mbpp/295",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2955": {
    "question_id": "mbpp/295",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2956": {
    "question_id": "mbpp/295",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2957": {
    "question_id": "mbpp/295",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2958": {
    "question_id": "mbpp/295",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2959": {
    "question_id": "mbpp/295",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2960": {
    "question_id": "mbpp/296",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2961": {
    "question_id": "mbpp/296",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2962": {
    "question_id": "mbpp/296",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2963": {
    "question_id": "mbpp/296",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2964": {
    "question_id": "mbpp/296",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2965": {
    "question_id": "mbpp/296",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2966": {
    "question_id": "mbpp/296",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2967": {
    "question_id": "mbpp/296",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2968": {
    "question_id": "mbpp/296",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2969": {
    "question_id": "mbpp/296",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2970": {
    "question_id": "mbpp/297",
    "model": "deepseek-v3-250324",
    "generation_code": "def intersection_nested_lists(lst, nested_lst):\n    result = []\n    for sublist in nested_lst:\n        intersection = [elem for elem in sublist if elem in lst]\n        result.append(intersection)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2971": {
    "question_id": "mbpp/297",
    "model": "deepseek-v3-250324",
    "generation_code": "def intersection_nested_lists(lst, nested_lst):\n    result = []\n    for sublist in nested_lst:\n        intersection = [elem for elem in sublist if elem in lst]\n        result.append(intersection)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2972": {
    "question_id": "mbpp/297",
    "model": "deepseek-v3-250324",
    "generation_code": "def intersection_nested_lists(lst, nested_lst):\n    result = []\n    for sublist in nested_lst:\n        intersection = [elem for elem in sublist if elem in lst]\n        result.append(intersection)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2973": {
    "question_id": "mbpp/297",
    "model": "deepseek-v3-250324",
    "generation_code": "def intersection_nested_lists(lst, nested_lst):\n    result = []\n    for sublist in nested_lst:\n        common_elements = [elem for elem in sublist if elem in lst]\n        result.append(common_elements)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2974": {
    "question_id": "mbpp/297",
    "model": "deepseek-v3-250324",
    "generation_code": "def intersection_nested_lists(lst, nested_lst):\n    result = []\n    for sublist in nested_lst:\n        intersection = [elem for elem in sublist if elem in lst]\n        result.append(intersection)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2975": {
    "question_id": "mbpp/297",
    "model": "deepseek-v3-250324",
    "generation_code": "def intersection_nested_lists(lst, nested_lst):\n    result = []\n    for sublist in nested_lst:\n        intersection = [elem for elem in sublist if elem in lst]\n        result.append(intersection)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2976": {
    "question_id": "mbpp/297",
    "model": "deepseek-v3-250324",
    "generation_code": "def intersection_nested_lists(lst, nested_lst):\n    result = []\n    for sublist in nested_lst:\n        intersection = [elem for elem in sublist if elem in lst]\n        result.append(intersection)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2977": {
    "question_id": "mbpp/297",
    "model": "deepseek-v3-250324",
    "generation_code": "def intersection_nested_lists(lst, nested_lst):\n    result = []\n    for sublist in nested_lst:\n        intersection = [elem for elem in sublist if elem in lst]\n        result.append(intersection)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2978": {
    "question_id": "mbpp/297",
    "model": "deepseek-v3-250324",
    "generation_code": "def intersection_nested_lists(lst, nested_lst):\n    result = []\n    for sublist in nested_lst:\n        common_elements = [elem for elem in sublist if elem in lst]\n        result.append(common_elements)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2979": {
    "question_id": "mbpp/297",
    "model": "deepseek-v3-250324",
    "generation_code": "def intersection_nested_lists(lst, nested_lst):\n    result = []\n    for sublist in nested_lst:\n        intersection = [elem for elem in sublist if elem in lst]\n        result.append(intersection)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2980": {
    "question_id": "mbpp/298",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_aggregate(tuples_list):\n    aggregate = {}\n    for name, value in tuples_list:\n        if name in aggregate:\n            aggregate[name] += value\n        else:\n            aggregate[name] = value\n    max_name = max(aggregate.items(), key=lambda x: x[1])\n    return max_name",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2981": {
    "question_id": "mbpp/298",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_aggregate(tuples_list):\n    aggregate = {}\n    for name, score in tuples_list:\n        if name in aggregate:\n            aggregate[name] += score\n        else:\n            aggregate[name] = score\n    max_name = max(aggregate.items(), key=lambda x: x[1])\n    return max_name",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2982": {
    "question_id": "mbpp/298",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_aggregate(tuples_list):\n    aggregate = {}\n    for name, score in tuples_list:\n        if name in aggregate:\n            aggregate[name] += score\n        else:\n            aggregate[name] = score\n    max_name = max(aggregate.items(), key=lambda x: x[1])\n    return max_name",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2983": {
    "question_id": "mbpp/298",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_aggregate(tuples_list):\n    aggregate = {}\n    for name, score in tuples_list:\n        if name in aggregate:\n            aggregate[name] += score\n        else:\n            aggregate[name] = score\n    if not aggregate:\n        return None\n    max_name = max(aggregate.items(), key=lambda x: x[1])\n    return max_name",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2984": {
    "question_id": "mbpp/298",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_aggregate(tuples_list):\n    aggregate = {}\n    for name, value in tuples_list:\n        if name in aggregate:\n            aggregate[name] += value\n        else:\n            aggregate[name] = value\n    max_name = max(aggregate.items(), key=lambda x: x[1])\n    return max_name",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2985": {
    "question_id": "mbpp/298",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_aggregate(tuples_list):\n    aggregate = {}\n    for name, value in tuples_list:\n        if name in aggregate:\n            aggregate[name] += value\n        else:\n            aggregate[name] = value\n    max_name = max(aggregate.items(), key=lambda x: x[1])\n    return max_name",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2986": {
    "question_id": "mbpp/298",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_aggregate(tuples_list):\n    aggregate = {}\n    for name, value in tuples_list:\n        if name in aggregate:\n            aggregate[name] += value\n        else:\n            aggregate[name] = value\n    max_name = max(aggregate.items(), key=lambda x: x[1])\n    return max_name",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2987": {
    "question_id": "mbpp/298",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_aggregate(tuples_list):\n    aggregate = {}\n    for name, value in tuples_list:\n        if name in aggregate:\n            aggregate[name] += value\n        else:\n            aggregate[name] = value\n    max_name = max(aggregate.items(), key=lambda x: x[1])\n    return max_name",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2988": {
    "question_id": "mbpp/298",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_aggregate(tuples_list):\n    aggregate = {}\n    for name, value in tuples_list:\n        if name in aggregate:\n            aggregate[name] += value\n        else:\n            aggregate[name] = value\n    max_name = max(aggregate.items(), key=lambda x: x[1])\n    return max_name",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2989": {
    "question_id": "mbpp/298",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_aggregate(tuples_list):\n    aggregate = {}\n    for name, value in tuples_list:\n        if name in aggregate:\n            aggregate[name] += value\n        else:\n            aggregate[name] = value\n    max_name = max(aggregate.items(), key=lambda x: x[1])\n    return max_name",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2990": {
    "question_id": "mbpp/299",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 0.0\n    total = 0\n    for k in range(0, n+1):\n        c = math.comb(n, k)\n        total += c * c\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2991": {
    "question_id": "mbpp/299",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 0.0\n    total = 0\n    for k in range(0, n+1):\n        c = math.comb(n, k)\n        total += c * c\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2992": {
    "question_id": "mbpp/299",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 0.0\n    total = 0.0\n    for k in range(0, n+1):\n        c = math.comb(n, k)\n        total += c * c\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2993": {
    "question_id": "mbpp/299",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 0.0\n    total = 0.0\n    for k in range(0, n+1):\n        c = math.comb(n, k)\n        total += c * c\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2994": {
    "question_id": "mbpp/299",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 0.0\n    total = 0.0\n    for k in range(0, n+1):\n        c = math.comb(n, k)\n        total += c * c\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2995": {
    "question_id": "mbpp/299",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 0.0\n    total = 0.0\n    for k in range(0, n+1):\n        c = math.comb(n, k)\n        total += c * c\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2996": {
    "question_id": "mbpp/299",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 0.0\n    total = 0\n    for k in range(0, n+1):\n        c = math.comb(n, k)\n        total += c * c\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2997": {
    "question_id": "mbpp/299",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 0.0\n    total = 0\n    for k in range(0, n+1):\n        c = math.comb(n, k)\n        total += c * c\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2998": {
    "question_id": "mbpp/299",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 0.0\n    total = 0\n    for k in range(n + 1):\n        c = math.comb(n, k)\n        total += c * c\n    return float(total)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "2999": {
    "question_id": "mbpp/299",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 0.0\n    total = 0\n    for k in range(0, n+1):\n        c = math.comb(n, k)\n        total += c * c\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3000": {
    "question_id": "mbpp/300",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    max_depth = 1\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth = dict_depth(d[key]) + 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n    return max_depth",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "3001": {
    "question_id": "mbpp/300",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    max_depth = 1\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth = dict_depth(d[key]) + 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n    return max_depth",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "3002": {
    "question_id": "mbpp/300",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    max_depth = 1\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth = dict_depth(d[key]) + 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n    return max_depth",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "3003": {
    "question_id": "mbpp/300",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    max_depth = 1\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth = dict_depth(d[key]) + 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n    return max_depth",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "3004": {
    "question_id": "mbpp/300",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    max_depth = 1\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth = dict_depth(d[key]) + 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n    return max_depth",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "3005": {
    "question_id": "mbpp/300",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    max_depth = 1\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth = 1 + dict_depth(d[key])\n            if current_depth > max_depth:\n                max_depth = current_depth\n    return max_depth",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "3006": {
    "question_id": "mbpp/300",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    max_depth = 1\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth = dict_depth(d[key]) + 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n    return max_depth",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "3007": {
    "question_id": "mbpp/300",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    max_depth = 0\n    for key in d:\n        current_depth = dict_depth(d[key])\n        if current_depth > max_depth:\n            max_depth = current_depth\n    return max_depth + 1",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "3008": {
    "question_id": "mbpp/300",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    max_depth = 1\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth = dict_depth(d[key]) + 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n    return max_depth",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "3009": {
    "question_id": "mbpp/300",
    "model": "deepseek-v3-250324",
    "generation_code": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    max_depth = 1\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth = 1 + dict_depth(d[key])\n            if current_depth > max_depth:\n                max_depth = current_depth\n    return max_depth",
    "test_output": "FAILED: expect 4,in fact 3",
    "test_result": "False"
  },
  "3010": {
    "question_id": "mbpp/301",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 1\n    while msb * 2 <= n:\n        msb *= 2\n    return msb",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3011": {
    "question_id": "mbpp/301",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 1\n    while msb * 2 <= n:\n        msb *= 2\n    return msb",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3012": {
    "question_id": "mbpp/301",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 1\n    while msb * 2 <= n:\n        msb *= 2\n    return msb",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3013": {
    "question_id": "mbpp/301",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 1\n    while msb * 2 <= n:\n        msb *= 2\n    return msb",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3014": {
    "question_id": "mbpp/301",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 1\n    while msb * 2 <= n:\n        msb *= 2\n    return msb",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3015": {
    "question_id": "mbpp/301",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 1\n    while msb * 2 <= n:\n        msb *= 2\n    return msb",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3016": {
    "question_id": "mbpp/301",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 1\n    while msb * 2 <= n:\n        msb *= 2\n    return msb",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3017": {
    "question_id": "mbpp/301",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 1\n    while msb * 2 <= n:\n        msb *= 2\n    return msb",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3018": {
    "question_id": "mbpp/301",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 1\n    while msb * 2 <= n:\n        msb *= 2\n    return msb",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3019": {
    "question_id": "mbpp/301",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 1\n    while msb * 2 <= n:\n        msb *= 2\n    return msb",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3020": {
    "question_id": "mbpp/302",
    "model": "deepseek-v3-250324",
    "generation_code": "def solve(arr, n):\n    count_01 = 0\n    count_02 = 0\n    count_12 = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                if arr[i] == 1 and arr[j] == 0:\n                    count_01 += 1\n                elif arr[i] == 2 and arr[j] == 0:\n                    count_02 += 1\n                elif arr[i] == 2 and arr[j] == 1:\n                    count_12 += 1\n    \n    return count_01 == count_12",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3021": {
    "question_id": "mbpp/302",
    "model": "deepseek-v3-250324",
    "generation_code": "def solve(arr, n):\n    count1 = 0\n    count0 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                if arr[i] == 1:\n                    count1 += 1\n                elif arr[i] == 0:\n                    count0 += 1\n    return count1 == count0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3022": {
    "question_id": "mbpp/302",
    "model": "deepseek-v3-250324",
    "generation_code": "def solve(arr, n):\n    count1 = 0\n    count0 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                if arr[i] == 1:\n                    count1 += 1\n                elif arr[i] == 0:\n                    count0 += 1\n    return count1 == count0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3023": {
    "question_id": "mbpp/302",
    "model": "deepseek-v3-250324",
    "generation_code": "def solve(arr, n):\n    count1 = 0\n    count0 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                if arr[i] == 1:\n                    count1 += 1\n                elif arr[i] == 0:\n                    count0 += 1\n    return count1 == count0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3024": {
    "question_id": "mbpp/302",
    "model": "deepseek-v3-250324",
    "generation_code": "def solve(arr, n):\n    count1 = 0\n    count0 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                if arr[i] == 1:\n                    count1 += 1\n                elif arr[i] == 0:\n                    count0 += 1\n    return count1 == count0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3025": {
    "question_id": "mbpp/302",
    "model": "deepseek-v3-250324",
    "generation_code": "def solve(arr, n):\n    count1 = 0\n    count0 = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                if arr[i] == 1:\n                    count1 += 1\n                elif arr[i] == 0:\n                    count0 += 1\n    \n    return count1 == count0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3026": {
    "question_id": "mbpp/302",
    "model": "deepseek-v3-250324",
    "generation_code": "def solve(arr, n):\n    count1 = 0\n    count0 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                if arr[i] == 1:\n                    count1 += 1\n                elif arr[i] == 0:\n                    count0 += 1\n    return count1 == count0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3027": {
    "question_id": "mbpp/302",
    "model": "deepseek-v3-250324",
    "generation_code": "def solve(arr, n):\n    count1 = 0\n    count0 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                if arr[i] == 1 and arr[j] == 0:\n                    count1 += 1\n                elif arr[i] == 2 and arr[j] == 0:\n                    count0 += 1\n                elif arr[i] == 2 and arr[j] == 1:\n                    count0 += 1\n    return count1 == count0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3028": {
    "question_id": "mbpp/302",
    "model": "deepseek-v3-250324",
    "generation_code": "def solve(arr, n):\n    count_01 = 0\n    count_10 = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == 0 and arr[j] == 1:\n                count_01 += 1\n            elif arr[i] == 1 and arr[j] == 0:\n                count_10 += 1\n                \n    return count_01 == count_10",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3029": {
    "question_id": "mbpp/302",
    "model": "deepseek-v3-250324",
    "generation_code": "def solve(arr, n):\n    count1 = 0\n    count0 = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                if arr[i] == 1 and arr[j] == 0:\n                    count1 += 1\n                elif arr[i] == 0 and arr[j] == 1:\n                    count0 += 1\n    \n    return count1 == count0",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3030": {
    "question_id": "mbpp/303",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in range(rotations):\n        start, end = ranges[i % len(ranges)]\n        arr = arr[:start] + arr[start:end+1][::-1] + arr[end+1:]\n    return arr[index]",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "3031": {
    "question_id": "mbpp/303",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Element(arr, ranges, rotations, index):\n    for i in range(rotations):\n        l, r = ranges[i % len(ranges)]\n        arr = arr[:l] + arr[l:r+1][::-1] + arr[r+1:]\n    return arr[index]",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "3032": {
    "question_id": "mbpp/303",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Element(arr, ranges, rotations, index):\n    for i in range(rotations):\n        start, end = ranges[i % len(ranges)]\n        arr = arr[:start] + arr[start:end+1][::-1] + arr[end+1:]\n    return arr[index]",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "3033": {
    "question_id": "mbpp/303",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in range(rotations):\n        start, end = ranges[i % len(ranges)]\n        arr = arr[:start] + arr[start:end+1][::-1] + arr[end+1:]\n    return arr[index]",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "3034": {
    "question_id": "mbpp/303",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Element(arr, ranges, rotations, index):\n    for i in range(rotations):\n        start, end = ranges[i % len(ranges)]\n        arr = arr[:start] + arr[start:end+1][::-1] + arr[end+1:]\n    return arr[index]",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "3035": {
    "question_id": "mbpp/303",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Element(arr, ranges, rotations, index):\n    for _ in range(rotations):\n        for r in ranges:\n            start, end = r\n            if start < 0 or end >= len(arr) or start > end:\n                continue\n            arr[start:end+1] = arr[start:end+1][::-1]\n    return arr[index]",
    "test_output": "FAILED: expect 3,in fact 4",
    "test_result": "False"
  },
  "3036": {
    "question_id": "mbpp/303",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Element(arr, ranges, rotations, index):\n    for _ in range(rotations):\n        for r in ranges:\n            start, end = r\n            if start < 0 or end >= len(arr) or start > end:\n                continue\n            arr[start:end+1] = arr[start:end+1][::-1]\n    return arr[index]",
    "test_output": "FAILED: expect 3,in fact 4",
    "test_result": "False"
  },
  "3037": {
    "question_id": "mbpp/303",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in range(rotations):\n        start, end = ranges[i % len(ranges)]\n        arr = arr[:start] + arr[start:end+1][::-1] + arr[end+1:]\n    return arr[index]",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "3038": {
    "question_id": "mbpp/303",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in range(rotations):\n        l, r = ranges[i % len(ranges)]\n        arr = arr[:l] + arr[l:r+1][::-1] + arr[r+1:]\n    return arr[index]",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "3039": {
    "question_id": "mbpp/303",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Element(arr, ranges, rotations, index):\n    for _ in range(rotations):\n        for r in ranges:\n            start, end = r\n            if start < 0 or end >= len(arr) or start > end:\n                continue\n            arr[start:end+1] = arr[start:end+1][::-1]\n    return arr[index]",
    "test_output": "FAILED: expect 3,in fact 4",
    "test_result": "False"
  },
  "3040": {
    "question_id": "mbpp/304",
    "model": "deepseek-v3-250324",
    "generation_code": "def start_withp(words):\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.startswith('p') or word.startswith('P'):\n                p_words.append(word)\n    if len(p_words) >= 2:\n        return (p_words[0], p_words[1])\n    else:\n        return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3041": {
    "question_id": "mbpp/304",
    "model": "deepseek-v3-250324",
    "generation_code": "def start_withp(words):\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                p_words.append(word)\n    if len(p_words) >= 2:\n        return (p_words[0], p_words[1])\n    else:\n        return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3042": {
    "question_id": "mbpp/304",
    "model": "deepseek-v3-250324",
    "generation_code": "def start_withp(words):\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                p_words.append(word)\n    if len(p_words) >= 2:\n        return (p_words[0], p_words[1])\n    else:\n        return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3043": {
    "question_id": "mbpp/304",
    "model": "deepseek-v3-250324",
    "generation_code": "def start_withp(words):\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.startswith('p') or word.startswith('P'):\n                p_words.append(word)\n    if len(p_words) >= 2:\n        return (p_words[0], p_words[1])\n    else:\n        return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3044": {
    "question_id": "mbpp/304",
    "model": "deepseek-v3-250324",
    "generation_code": "def start_withp(words):\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.startswith('p') or word.startswith('P'):\n                p_words.append(word)\n    if len(p_words) >= 2:\n        return (p_words[0], p_words[1])\n    else:\n        return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3045": {
    "question_id": "mbpp/304",
    "model": "deepseek-v3-250324",
    "generation_code": "def start_withp(words):\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                p_words.append(word)\n    if len(p_words) >= 2:\n        return (p_words[0], p_words[1])\n    else:\n        return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3046": {
    "question_id": "mbpp/304",
    "model": "deepseek-v3-250324",
    "generation_code": "def start_withp(words):\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                p_words.append(word)\n    if len(p_words) >= 2:\n        return tuple(p_words[:2])\n    else:\n        return (None, None)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3047": {
    "question_id": "mbpp/304",
    "model": "deepseek-v3-250324",
    "generation_code": "def start_withp(words):\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                p_words.append(word)\n    if len(p_words) >= 2:\n        return (p_words[0], p_words[1])\n    else:\n        return (None, None)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3048": {
    "question_id": "mbpp/304",
    "model": "deepseek-v3-250324",
    "generation_code": "def start_withp(words):\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                p_words.append(word)\n    if len(p_words) >= 2:\n        return (p_words[0], p_words[1])\n    else:\n        return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3049": {
    "question_id": "mbpp/304",
    "model": "deepseek-v3-250324",
    "generation_code": "def start_withp(words):\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                p_words.append(word)\n    if len(p_words) >= 2:\n        return (p_words[0], p_words[1])\n    else:\n        return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3050": {
    "question_id": "mbpp/305",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= n or k >= n or i >= k:\n        return 0\n    \n    # Initialize dp array where dp[j] represents the maximum sum of increasing subsequence ending at arr[j]\n    dp = arr.copy()\n    \n    # Iterate from the start up to i\n    for j in range(1, i + 1):\n        for l in range(j):\n            if arr[l] < arr[j] and dp[j] < dp[l] + arr[j]:\n                dp[j] = dp[l] + arr[j]\n    \n    # Now, include the kth element\n    max_sum = 0\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            if dp[j] + arr[k] > max_sum:\n                max_sum = dp[j] + arr[k]\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3051": {
    "question_id": "mbpp/305",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= n or k >= n or i >= k:\n        return 0\n    \n    # Initialize dp array where dp[j] represents the maximum sum of increasing subsequence ending at arr[j]\n    dp = arr.copy()\n    \n    # Iterate from the start up to i\n    for j in range(1, i + 1):\n        for l in range(j):\n            if arr[l] < arr[j] and dp[j] < dp[l] + arr[j]:\n                dp[j] = dp[l] + arr[j]\n    \n    # Now, include the k-th element\n    max_sum = 0\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            if dp[j] + arr[k] > max_sum:\n                max_sum = dp[j] + arr[k]\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3052": {
    "question_id": "mbpp/305",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= n or k >= n or i >= k:\n        return 0\n    \n    # Initialize dp array where dp[j] represents the maximum sum of increasing subsequence ending at arr[j]\n    dp = arr.copy()\n    \n    # Iterate from the start up to i\n    for j in range(1, i + 1):\n        for l in range(j):\n            if arr[l] < arr[j] and dp[j] < dp[l] + arr[j]:\n                dp[j] = dp[l] + arr[j]\n    \n    max_sum = 0\n    \n    # Now, find the maximum sum up to i that can be extended to include arr[k]\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            if dp[j] + arr[k] > max_sum:\n                max_sum = dp[j] + arr[k]\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3053": {
    "question_id": "mbpp/305",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= n or k >= n or i >= k:\n        return 0\n    \n    # Initialize dp array where dp[j] is the maximum sum of increasing subsequence ending at arr[j]\n    dp = arr.copy()\n    \n    # Compute dp for elements up to i\n    for j in range(1, i + 1):\n        for l in range(j):\n            if arr[l] < arr[j] and dp[j] < dp[l] + arr[j]:\n                dp[j] = dp[l] + arr[j]\n    \n    # Now include the k-th element and compute the maximum sum\n    max_sum = 0\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            if dp[j] + arr[k] > max_sum:\n                max_sum = dp[j] + arr[k]\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3054": {
    "question_id": "mbpp/305",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= k or k >= n or i < 0 or k < 0:\n        return 0\n    \n    # Initialize dp array where dp[j] represents the maximum sum of increasing subsequence ending at arr[j]\n    dp = arr.copy()\n    \n    # Compute dp for elements from 0 to i\n    for j in range(1, i + 1):\n        for l in range(j):\n            if arr[l] < arr[j] and dp[j] < dp[l] + arr[j]:\n                dp[j] = dp[l] + arr[j]\n    \n    # Now, include the k-th element and compute the maximum sum\n    max_sum = 0\n    if arr[k] > arr[i]:\n        max_sum = dp[i] + arr[k]\n    \n    # Also check if there's a better subsequence ending at k from elements before i\n    for j in range(i + 1):\n        if arr[j] < arr[k] and dp[j] + arr[k] > max_sum:\n            max_sum = dp[j] + arr[k]\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3055": {
    "question_id": "mbpp/305",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= k or k >= n:\n        return 0\n    \n    # Initialize dp array where dp[j] represents the maximum sum of increasing subsequence ending at arr[j]\n    dp = arr.copy()\n    \n    # Iterate from the start to the ith index\n    for j in range(1, i + 1):\n        for l in range(j):\n            if arr[l] < arr[j] and dp[j] < dp[l] + arr[j]:\n                dp[j] = dp[l] + arr[j]\n    \n    max_sum = 0\n    \n    # Now, include the kth element and find the maximum sum\n    if arr[k] > arr[i]:\n        max_sum = dp[i] + arr[k]\n    \n    # Also check if there's a better subsequence ending before i that can include arr[k]\n    for j in range(i + 1):\n        if arr[j] < arr[k] and (dp[j] + arr[k]) > max_sum:\n            max_sum = dp[j] + arr[k]\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3056": {
    "question_id": "mbpp/305",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subseq(arr, n, k, i):\n    if i >= k or k >= n or i < 0 or k < 0 or n <= 0:\n        return 0\n    \n    # Initialize dp array where dp[j] represents the maximum sum of increasing subsequence ending at arr[j]\n    dp = arr.copy()\n    \n    # Iterate from the start up to i-th index\n    for j in range(1, i + 1):\n        for l in range(j):\n            if arr[l] < arr[j] and dp[j] < dp[l] + arr[j]:\n                dp[j] = dp[l] + arr[j]\n    \n    # Now, include the k-th element (must be included)\n    max_sum = 0\n    # Check all possible sequences ending before k and ensure arr[j] < arr[k]\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            if dp[j] + arr[k] > max_sum:\n                max_sum = dp[j] + arr[k]\n    \n    return max_sum",
    "test_output": "FAILED: expect 11,in fact 0",
    "test_result": "False"
  },
  "3057": {
    "question_id": "mbpp/305",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= n or k >= n or i >= k:\n        return 0\n    \n    # Create a DP array to store the maximum sum of increasing subsequence ending at each index\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    # Fill DP array up to index i\n    for j in range(1, i + 1):\n        dp[j] = arr[j]\n        for l in range(j):\n            if arr[l] < arr[j] and dp[j] < dp[l] + arr[j]:\n                dp[j] = dp[l] + arr[j]\n    \n    # Now, find the maximum sum up to i that can be extended to include k\n    max_sum = 0\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            if dp[j] > max_sum:\n                max_sum = dp[j]\n    \n    # Add the kth element to the max_sum\n    if max_sum == 0:\n        return arr[k]\n    else:\n        return max_sum + arr[k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3058": {
    "question_id": "mbpp/305",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= n or k >= n or i >= k:\n        return 0\n    \n    # Create a DP array to store the maximum sum of increasing subsequence ending at each index\n    dp = [0] * (i + 1)\n    dp[0] = arr[0] if arr[0] < arr[k] else 0\n    \n    for j in range(1, i + 1):\n        dp[j] = arr[j] if arr[j] < arr[k] else 0\n        for l in range(j):\n            if arr[l] < arr[j] and arr[j] < arr[k]:\n                if dp[l] + arr[j] > dp[j]:\n                    dp[j] = dp[l] + arr[j]\n    \n    max_sum = max(dp) if dp else 0\n    return max_sum + arr[k] if max_sum != 0 else arr[k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3059": {
    "question_id": "mbpp/305",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= n or k >= n or i >= k:\n        return 0\n    \n    # Initialize dp array where dp[j] represents the maximum sum of increasing subsequence ending at arr[j]\n    dp = arr.copy()\n    \n    # Iterate from the start up to i\n    for j in range(1, i + 1):\n        for l in range(j):\n            if arr[l] < arr[j] and dp[j] < dp[l] + arr[j]:\n                dp[j] = dp[l] + arr[j]\n    \n    # Now, include the k-th element and find the maximum sum up to i that can be extended to k\n    max_sum = 0\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            if dp[j] + arr[k] > max_sum:\n                max_sum = dp[j] + arr[k]\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3060": {
    "question_id": "mbpp/306",
    "model": "deepseek-v3-250324",
    "generation_code": "def colon_tuplex(tuplex, index, value):\n    if not isinstance(tuplex, tuple) or index < 0 or index >= len(tuplex):\n        return tuplex\n    temp_list = list(tuplex)\n    temp_list[index] = value\n    return tuple(temp_list)",
    "test_output": "FAILED: expect ('HELLO', 5, [50], True),in fact ('HELLO', 5, 50, True)",
    "test_result": "False"
  },
  "3061": {
    "question_id": "mbpp/306",
    "model": "deepseek-v3-250324",
    "generation_code": "def colon_tuplex(tuplex, index, value):\n    if index < 0 or index >= len(tuplex):\n        return tuplex\n    temp_list = list(tuplex)\n    temp_list[index] = value\n    return tuple(temp_list)",
    "test_output": "FAILED: expect ('HELLO', 5, [50], True),in fact ('HELLO', 5, 50, True)",
    "test_result": "False"
  },
  "3062": {
    "question_id": "mbpp/306",
    "model": "deepseek-v3-250324",
    "generation_code": "def colon_tuplex(tuplex, index, value):\n    if index < 0 or index >= len(tuplex):\n        return tuplex\n    temp_list = list(tuplex)\n    temp_list[index] = value\n    return tuple(temp_list)",
    "test_output": "FAILED: expect ('HELLO', 5, [50], True),in fact ('HELLO', 5, 50, True)",
    "test_result": "False"
  },
  "3063": {
    "question_id": "mbpp/306",
    "model": "deepseek-v3-250324",
    "generation_code": "def colon_tuplex(tuplex, index, value):\n    if index < 0 or index >= len(tuplex):\n        return tuplex\n    temp_list = list(tuplex)\n    temp_list[index] = value\n    return tuple(temp_list)",
    "test_output": "FAILED: expect ('HELLO', 5, [50], True),in fact ('HELLO', 5, 50, True)",
    "test_result": "False"
  },
  "3064": {
    "question_id": "mbpp/306",
    "model": "deepseek-v3-250324",
    "generation_code": "def colon_tuplex(tuplex, index, value):\n    if index < 0 or index >= len(tuplex):\n        return tuplex\n    temp_list = list(tuplex)\n    temp_list[index] = value\n    return tuple(temp_list)",
    "test_output": "FAILED: expect ('HELLO', 5, [50], True),in fact ('HELLO', 5, 50, True)",
    "test_result": "False"
  },
  "3065": {
    "question_id": "mbpp/306",
    "model": "deepseek-v3-250324",
    "generation_code": "def colon_tuplex(tuplex, index, value):\n    if not isinstance(tuplex, tuple) or index < 0 or index >= len(tuplex):\n        return tuplex\n    temp_list = list(tuplex)\n    temp_list[index] = value\n    return tuple(temp_list)",
    "test_output": "FAILED: expect ('HELLO', 5, [50], True),in fact ('HELLO', 5, 50, True)",
    "test_result": "False"
  },
  "3066": {
    "question_id": "mbpp/306",
    "model": "deepseek-v3-250324",
    "generation_code": "def colon_tuplex(tuplex, index, value):\n    if not isinstance(tuplex, tuple) or index < 0 or index >= len(tuplex):\n        return tuplex\n    temp_list = list(tuplex)\n    temp_list[index] = value\n    return tuple(temp_list)",
    "test_output": "FAILED: expect ('HELLO', 5, [50], True),in fact ('HELLO', 5, 50, True)",
    "test_result": "False"
  },
  "3067": {
    "question_id": "mbpp/306",
    "model": "deepseek-v3-250324",
    "generation_code": "def colon_tuplex(tuplex, index, value):\n    if index < 0 or index >= len(tuplex):\n        return tuplex\n    temp_list = list(tuplex)\n    temp_list[index] = value\n    return tuple(temp_list)",
    "test_output": "FAILED: expect ('HELLO', 5, [50], True),in fact ('HELLO', 5, 50, True)",
    "test_result": "False"
  },
  "3068": {
    "question_id": "mbpp/306",
    "model": "deepseek-v3-250324",
    "generation_code": "def colon_tuplex(tuplex, index, value):\n    if not isinstance(tuplex, tuple) or index < 0 or index >= len(tuplex):\n        return tuplex\n    temp_list = list(tuplex)\n    temp_list[index] = value\n    return tuple(temp_list)",
    "test_output": "FAILED: expect ('HELLO', 5, [50], True),in fact ('HELLO', 5, 50, True)",
    "test_result": "False"
  },
  "3069": {
    "question_id": "mbpp/306",
    "model": "deepseek-v3-250324",
    "generation_code": "def colon_tuplex(tuplex, index, value):\n    if index < 0 or index >= len(tuplex):\n        return tuplex\n    temp_list = list(tuplex)\n    temp_list[index] = value\n    return tuple(temp_list)",
    "test_output": "FAILED: expect ('HELLO', 5, [50], True),in fact ('HELLO', 5, 50, True)",
    "test_result": "False"
  },
  "3070": {
    "question_id": "mbpp/307",
    "model": "deepseek-v3-250324",
    "generation_code": "def large_product(list1, list2, n):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    products = sorted(products, reverse=True)\n    return products[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3071": {
    "question_id": "mbpp/307",
    "model": "deepseek-v3-250324",
    "generation_code": "def large_product(list1, list2, n):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    products = sorted(products, reverse=True)\n    return products[:n] if n <= len(products) else products",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3072": {
    "question_id": "mbpp/307",
    "model": "deepseek-v3-250324",
    "generation_code": "def large_product(list1, list2, n):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    products = sorted(products, reverse=True)\n    return products[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3073": {
    "question_id": "mbpp/307",
    "model": "deepseek-v3-250324",
    "generation_code": "def large_product(list1, list2, n):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    products = sorted(products, reverse=True)\n    return products[:n] if n <= len(products) else products",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3074": {
    "question_id": "mbpp/307",
    "model": "deepseek-v3-250324",
    "generation_code": "def large_product(list1, list2, n):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    products = sorted(products, reverse=True)\n    return products[:n] if n <= len(products) else products",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3075": {
    "question_id": "mbpp/307",
    "model": "deepseek-v3-250324",
    "generation_code": "def large_product(list1, list2, n):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    products = sorted(products, reverse=True)\n    return products[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3076": {
    "question_id": "mbpp/307",
    "model": "deepseek-v3-250324",
    "generation_code": "def large_product(list1, list2, n):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    products = sorted(products, reverse=True)\n    return products[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3077": {
    "question_id": "mbpp/307",
    "model": "deepseek-v3-250324",
    "generation_code": "def large_product(list1, list2, n):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    products = sorted(products, reverse=True)\n    return products[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3078": {
    "question_id": "mbpp/307",
    "model": "deepseek-v3-250324",
    "generation_code": "def large_product(list1, list2, n):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    products = sorted(products, reverse=True)\n    return products[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3079": {
    "question_id": "mbpp/307",
    "model": "deepseek-v3-250324",
    "generation_code": "def large_product(list1, list2, n):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    products = sorted(products, reverse=True)\n    return products[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3080": {
    "question_id": "mbpp/308",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3081": {
    "question_id": "mbpp/308",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3082": {
    "question_id": "mbpp/308",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3083": {
    "question_id": "mbpp/308",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3084": {
    "question_id": "mbpp/308",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3085": {
    "question_id": "mbpp/308",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3086": {
    "question_id": "mbpp/308",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3087": {
    "question_id": "mbpp/308",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3088": {
    "question_id": "mbpp/308",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3089": {
    "question_id": "mbpp/308",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3090": {
    "question_id": "mbpp/309",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "3091": {
    "question_id": "mbpp/309",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "3092": {
    "question_id": "mbpp/309",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "3093": {
    "question_id": "mbpp/309",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "3094": {
    "question_id": "mbpp/309",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "3095": {
    "question_id": "mbpp/309",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "3096": {
    "question_id": "mbpp/309",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "3097": {
    "question_id": "mbpp/309",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "3098": {
    "question_id": "mbpp/309",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "3099": {
    "question_id": "mbpp/309",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_to_tuple(s):\n    return tuple(s)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "3100": {
    "question_id": "mbpp/310",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    mask = 1 << (num.bit_length() - 1)\n    while mask > 0:\n        if (num & mask) == 0:\n            return num | mask\n        mask >>= 1\n    return num | (1 << num.bit_length())",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "3101": {
    "question_id": "mbpp/310",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    mask = 1 << (num.bit_length() - 1)\n    while mask > 0:\n        if (num & mask) == 0:\n            return num | mask\n        mask >>= 1\n    return num | (1 << num.bit_length())",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "3102": {
    "question_id": "mbpp/310",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    temp = num\n    mask = 1 << (temp.bit_length() - 1)\n    while mask > 0:\n        if (num & mask) == 0:\n            return num | mask\n        mask >>= 1\n    return num | (1 << temp.bit_length())",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "3103": {
    "question_id": "mbpp/310",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    mask = 1 << (num.bit_length() - 1)\n    while mask > 0:\n        if (num & mask) == 0:\n            return num | mask\n        mask >>= 1\n    return num | (1 << num.bit_length())",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "3104": {
    "question_id": "mbpp/310",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    temp = num\n    mask = 1 << (temp.bit_length() - 1)\n    while mask > 0:\n        if (num & mask) == 0:\n            return num | mask\n        mask >>= 1\n    return num | (1 << temp.bit_length())",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "3105": {
    "question_id": "mbpp/310",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    temp = num\n    mask = 1 << (temp.bit_length() - 1)\n    while mask > 0:\n        if (num & mask) == 0:\n            return num | mask\n        mask >>= 1\n    return num | (1 << temp.bit_length())",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "3106": {
    "question_id": "mbpp/310",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    n = num\n    mask = 1 << (n.bit_length() - 1)\n    while mask > 0:\n        if (n & mask) == 0:\n            return num | mask\n        mask >>= 1\n    return num | (1 << n.bit_length())",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "3107": {
    "question_id": "mbpp/310",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    temp = num\n    mask = 1 << (temp.bit_length() - 1)\n    while mask > 0:\n        if (num & mask) == 0:\n            return num | mask\n        mask >>= 1\n    return num | (1 << temp.bit_length())",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "3108": {
    "question_id": "mbpp/310",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    temp = num\n    mask = 1 << (temp.bit_length() - 1)\n    while mask > 0:\n        if (num & mask) == 0:\n            return num | mask\n        mask >>= 1\n    return num | (1 << temp.bit_length())",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "3109": {
    "question_id": "mbpp/310",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    temp = num\n    mask = 1 << (num.bit_length() - 1)\n    while temp & mask:\n        mask >>= 1\n        if mask == 0:\n            return num\n    return num | mask",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3110": {
    "question_id": "mbpp/311",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height",
    "test_output": "FAILED: expect 6426.651371693521,in fact 6426.65137169352",
    "test_result": "False"
  },
  "3111": {
    "question_id": "mbpp/311",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height",
    "test_output": "FAILED: expect 6426.651371693521,in fact 6426.65137169352",
    "test_result": "False"
  },
  "3112": {
    "question_id": "mbpp/311",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height",
    "test_output": "FAILED: expect 6426.651371693521,in fact 6426.65137169352",
    "test_result": "False"
  },
  "3113": {
    "question_id": "mbpp/311",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius ** 2 * height",
    "test_output": "FAILED: expect 6426.651371693521,in fact 6426.65137169352",
    "test_result": "False"
  },
  "3114": {
    "question_id": "mbpp/311",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cone(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    return (1/3) * math.pi * (radius ** 2) * height",
    "test_output": "FAILED: expect 6426.651371693521,in fact 6426.65137169352",
    "test_result": "False"
  },
  "3115": {
    "question_id": "mbpp/311",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height",
    "test_output": "FAILED: expect 6426.651371693521,in fact 6426.65137169352",
    "test_result": "False"
  },
  "3116": {
    "question_id": "mbpp/311",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cone(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    return (1/3) * math.pi * radius**2 * height",
    "test_output": "FAILED: expect 6426.651371693521,in fact 6426.65137169352",
    "test_result": "False"
  },
  "3117": {
    "question_id": "mbpp/311",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height",
    "test_output": "FAILED: expect 6426.651371693521,in fact 6426.65137169352",
    "test_result": "False"
  },
  "3118": {
    "question_id": "mbpp/311",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height",
    "test_output": "FAILED: expect 6426.651371693521,in fact 6426.65137169352",
    "test_result": "False"
  },
  "3119": {
    "question_id": "mbpp/311",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height",
    "test_output": "FAILED: expect 6426.651371693521,in fact 6426.65137169352",
    "test_result": "False"
  },
  "3120": {
    "question_id": "mbpp/312",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_nos(lst):\n    return [num for num in lst if num > 0]",
    "test_output": "FAILED: expect (1, 2),in fact [1, 2]",
    "test_result": "False"
  },
  "3121": {
    "question_id": "mbpp/312",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_nos(lst):\n    return [num for num in lst if num > 0]",
    "test_output": "FAILED: expect (1, 2),in fact [1, 2]",
    "test_result": "False"
  },
  "3122": {
    "question_id": "mbpp/312",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_nos(lst):\n    return [num for num in lst if num > 0]",
    "test_output": "FAILED: expect (1, 2),in fact [1, 2]",
    "test_result": "False"
  },
  "3123": {
    "question_id": "mbpp/312",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_nos(lst):\n    return [num for num in lst if num > 0]",
    "test_output": "FAILED: expect (1, 2),in fact [1, 2]",
    "test_result": "False"
  },
  "3124": {
    "question_id": "mbpp/312",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_nos(lst):\n    return [num for num in lst if num > 0]",
    "test_output": "FAILED: expect (1, 2),in fact [1, 2]",
    "test_result": "False"
  },
  "3125": {
    "question_id": "mbpp/312",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_nos(lst):\n    return [num for num in lst if num > 0]",
    "test_output": "FAILED: expect (1, 2),in fact [1, 2]",
    "test_result": "False"
  },
  "3126": {
    "question_id": "mbpp/312",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_nos(lst):\n    return [num for num in lst if num > 0]",
    "test_output": "FAILED: expect (1, 2),in fact [1, 2]",
    "test_result": "False"
  },
  "3127": {
    "question_id": "mbpp/312",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_nos(lst):\n    return [num for num in lst if num > 0]",
    "test_output": "FAILED: expect (1, 2),in fact [1, 2]",
    "test_result": "False"
  },
  "3128": {
    "question_id": "mbpp/312",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_nos(lst):\n    return [num for num in lst if num > 0]",
    "test_output": "FAILED: expect (1, 2),in fact [1, 2]",
    "test_result": "False"
  },
  "3129": {
    "question_id": "mbpp/312",
    "model": "deepseek-v3-250324",
    "generation_code": "def pos_nos(lst):\n    return [num for num in lst if num > 0]",
    "test_output": "FAILED: expect (1, 2),in fact [1, 2]",
    "test_result": "False"
  },
  "3130": {
    "question_id": "mbpp/313",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    dp = [0] * n\n    dp[0] = max(grid[0][0], grid[1][0])\n    dp[1] = max(dp[0], grid[0][1], grid[1][1])\n    \n    for i in range(2, n):\n        current_max = max(grid[0][i], grid[1][i])\n        dp[i] = max(dp[i-1], dp[i-2] + current_max)\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3131": {
    "question_id": "mbpp/313",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    dp = [[0] * n for _ in range(2)]\n    dp[0][0] = grid[0][0]\n    dp[1][0] = grid[1][0]\n    \n    if n > 1:\n        dp[0][1] = max(grid[0][1], grid[1][0])\n        dp[1][1] = max(grid[1][1], grid[0][0])\n    \n    for i in range(2, n):\n        dp[0][i] = grid[0][i] + max(dp[1][i-1], dp[0][i-2] if i >= 2 else 0, dp[1][i-2] if i >= 2 else 0)\n        dp[1][i] = grid[1][i] + max(dp[0][i-1], dp[1][i-2] if i >= 2 else 0, dp[0][i-2] if i >= 2 else 0)\n    \n    return max(dp[0][n-1], dp[1][n-1])",
    "test_output": "FAILED: expect 24,in fact 28",
    "test_result": "False"
  },
  "3132": {
    "question_id": "mbpp/313",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    dp = [0] * n\n    dp[0] = max(grid[0][0], grid[1][0])\n    if n >= 2:\n        dp[1] = max(dp[0], max(grid[0][1], grid[1][1]))\n    \n    for i in range(2, n):\n        current_max = max(grid[0][i], grid[1][i])\n        dp[i] = max(dp[i-1], dp[i-2] + current_max)\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3133": {
    "question_id": "mbpp/313",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    dp = [[0]*n for _ in range(2)]\n    dp[0][0] = grid[0][0]\n    dp[1][0] = grid[1][0]\n    \n    if n > 1:\n        dp[0][1] = max(grid[0][1], grid[1][0] + grid[0][1], dp[0][0])\n        dp[1][1] = max(grid[1][1], grid[0][0] + grid[1][1], dp[1][0])\n    \n    for i in range(2, n):\n        dp[0][i] = max(dp[0][i-1], dp[1][i-2] + grid[0][i], dp[0][i-2] + grid[0][i])\n        dp[1][i] = max(dp[1][i-1], dp[0][i-2] + grid[1][i], dp[1][i-2] + grid[1][i])\n    \n    return max(dp[0][n-1], dp[1][n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3134": {
    "question_id": "mbpp/313",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    dp = [[0]*n for _ in range(2)]\n    dp[0][0] = grid[0][0]\n    dp[1][0] = grid[1][0]\n    \n    for i in range(1, n):\n        if i == 1:\n            dp[0][i] = max(grid[0][i], dp[1][i-1] + grid[0][i], dp[0][i-1])\n            dp[1][i] = max(grid[1][i], dp[0][i-1] + grid[1][i], dp[1][i-1])\n        else:\n            dp[0][i] = max(\n                grid[0][i] + max(dp[1][i-1], dp[0][i-2], dp[1][i-2]),\n                dp[0][i-1]\n            )\n            dp[1][i] = max(\n                grid[1][i] + max(dp[0][i-1], dp[0][i-2], dp[1][i-2]),\n                dp[1][i-1]\n            )\n    \n    return max(dp[0][n-1], dp[1][n-1])",
    "test_output": "FAILED: expect 24,in fact 30",
    "test_result": "False"
  },
  "3135": {
    "question_id": "mbpp/313",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    dp = [0] * n\n    dp[0] = max(grid[0][0], grid[1][0])\n    if n >= 2:\n        dp[1] = max(dp[0], max(grid[0][1], grid[1][1]))\n    \n    for i in range(2, n):\n        current_max = max(grid[0][i], grid[1][i])\n        dp[i] = max(dp[i-1], dp[i-2] + current_max)\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3136": {
    "question_id": "mbpp/313",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    dp = [0] * n\n    dp[0] = max(grid[0][0], grid[1][0])\n    if n > 1:\n        dp[1] = max(grid[0][1], grid[1][1], dp[0])\n    \n    for i in range(2, n):\n        current_max = max(grid[0][i], grid[1][i])\n        dp[i] = max(dp[i-1], current_max + dp[i-2])\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3137": {
    "question_id": "mbpp/313",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    dp = [[0] * n for _ in range(2)]\n    dp[0][0] = grid[0][0]\n    dp[1][0] = grid[1][0]\n    \n    if n > 1:\n        dp[0][1] = max(grid[0][1], grid[1][0] + grid[0][1], dp[0][0])\n        dp[1][1] = max(grid[1][1], grid[0][0] + grid[1][1], dp[1][0])\n    \n    for i in range(2, n):\n        dp[0][i] = max(\n            grid[0][i] + max(dp[1][i-1], dp[0][i-2], dp[1][i-2]),\n            dp[0][i-1]\n        )\n        dp[1][i] = max(\n            grid[1][i] + max(dp[0][i-1], dp[1][i-2], dp[0][i-2]),\n            dp[1][i-1]\n        )\n    \n    return max(dp[0][n-1], dp[1][n-1])",
    "test_output": "FAILED: expect 24,in fact 30",
    "test_result": "False"
  },
  "3138": {
    "question_id": "mbpp/313",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    dp = [0] * n\n    dp[0] = max(grid[0][0], grid[1][0])\n    if n >= 2:\n        dp[1] = max(dp[0], max(grid[0][1], grid[1][1]))\n    \n    for i in range(2, n):\n        current_max = max(grid[0][i], grid[1][i])\n        dp[i] = max(dp[i-1], dp[i-2] + current_max)\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3139": {
    "question_id": "mbpp/313",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    dp = [0] * n\n    dp[0] = max(grid[0][0], grid[1][0])\n    if n >= 2:\n        dp[1] = max(grid[0][1], grid[1][1], dp[0])\n    \n    for i in range(2, n):\n        current_max = max(grid[0][i], grid[1][i])\n        dp[i] = max(dp[i-1], dp[i-2] + current_max)\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3140": {
    "question_id": "mbpp/314",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    result = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            result = word\n    return result",
    "test_output": "FAILED: expect -1,in fact ",
    "test_result": "False"
  },
  "3141": {
    "question_id": "mbpp/314",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    result = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            result = word\n    return result",
    "test_output": "FAILED: expect -1,in fact ",
    "test_result": "False"
  },
  "3142": {
    "question_id": "mbpp/314",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    result = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            result = word\n    return result",
    "test_output": "FAILED: expect -1,in fact ",
    "test_result": "False"
  },
  "3143": {
    "question_id": "mbpp/314",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = -1\n    result = \"\"\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                result = word\n    return result if max_len != -1 else None",
    "test_output": "FAILED: expect -1,in fact None",
    "test_result": "False"
  },
  "3144": {
    "question_id": "mbpp/314",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    result = \"\"\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                result = word\n    return result",
    "test_output": "FAILED: expect -1,in fact ",
    "test_result": "False"
  },
  "3145": {
    "question_id": "mbpp/314",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    result = \"\"\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                result = word\n    return result",
    "test_output": "FAILED: expect -1,in fact ",
    "test_result": "False"
  },
  "3146": {
    "question_id": "mbpp/314",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    result = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            result = word\n    return result",
    "test_output": "FAILED: expect -1,in fact ",
    "test_result": "False"
  },
  "3147": {
    "question_id": "mbpp/314",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    result = \"\"\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                result = word\n    return result",
    "test_output": "FAILED: expect -1,in fact ",
    "test_result": "False"
  },
  "3148": {
    "question_id": "mbpp/314",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    result = \"\"\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                result = word\n    return result",
    "test_output": "FAILED: expect -1,in fact ",
    "test_result": "False"
  },
  "3149": {
    "question_id": "mbpp/314",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    result = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            result = word\n    return result",
    "test_output": "FAILED: expect -1,in fact ",
    "test_result": "False"
  },
  "3150": {
    "question_id": "mbpp/315",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3151": {
    "question_id": "mbpp/315",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3152": {
    "question_id": "mbpp/315",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3153": {
    "question_id": "mbpp/315",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    last_occurrence = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            last_occurrence = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return last_occurrence",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3154": {
    "question_id": "mbpp/315",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3155": {
    "question_id": "mbpp/315",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3156": {
    "question_id": "mbpp/315",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3157": {
    "question_id": "mbpp/315",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3158": {
    "question_id": "mbpp/315",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    last_occurrence = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            last_occurrence = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return last_occurrence",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3159": {
    "question_id": "mbpp/315",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3160": {
    "question_id": "mbpp/316",
    "model": "deepseek-v3-250324",
    "generation_code": "def modified_encode(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = lst[0]\n    count = 1\n    \n    for item in lst[1:]:\n        if item == current:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, current])\n            else:\n                result.append(current)\n            current = item\n            count = 1\n    \n    if count > 1:\n        result.append([count, current])\n    else:\n        result.append(current)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3161": {
    "question_id": "mbpp/316",
    "model": "deepseek-v3-250324",
    "generation_code": "def modified_encode(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = lst[0]\n    count = 1\n    \n    for item in lst[1:]:\n        if item == current:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, current])\n            else:\n                result.append(current)\n            current = item\n            count = 1\n    \n    if count > 1:\n        result.append([count, current])\n    else:\n        result.append(current)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3162": {
    "question_id": "mbpp/316",
    "model": "deepseek-v3-250324",
    "generation_code": "def modified_encode(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = lst[0]\n    count = 1\n    \n    for item in lst[1:]:\n        if item == current:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, current])\n            else:\n                result.append(current)\n            current = item\n            count = 1\n    \n    if count > 1:\n        result.append([count, current])\n    else:\n        result.append(current)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3163": {
    "question_id": "mbpp/316",
    "model": "deepseek-v3-250324",
    "generation_code": "def modified_encode(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = lst[0]\n    count = 1\n    \n    for item in lst[1:]:\n        if item == current:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, current])\n            else:\n                result.append(current)\n            current = item\n            count = 1\n    \n    if count > 1:\n        result.append([count, current])\n    else:\n        result.append(current)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3164": {
    "question_id": "mbpp/316",
    "model": "deepseek-v3-250324",
    "generation_code": "def modified_encode(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = lst[0]\n    count = 1\n    \n    for item in lst[1:]:\n        if item == current:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, current])\n            else:\n                result.append(current)\n            current = item\n            count = 1\n    \n    if count > 1:\n        result.append([count, current])\n    else:\n        result.append(current)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3165": {
    "question_id": "mbpp/316",
    "model": "deepseek-v3-250324",
    "generation_code": "def modified_encode(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = lst[0]\n    count = 1\n    \n    for item in lst[1:]:\n        if item == current:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, current])\n            else:\n                result.append(current)\n            current = item\n            count = 1\n    \n    if count > 1:\n        result.append([count, current])\n    else:\n        result.append(current)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3166": {
    "question_id": "mbpp/316",
    "model": "deepseek-v3-250324",
    "generation_code": "def modified_encode(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = lst[0]\n    count = 1\n    \n    for item in lst[1:]:\n        if item == current:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, current])\n            else:\n                result.append(current)\n            current = item\n            count = 1\n    \n    if count > 1:\n        result.append([count, current])\n    else:\n        result.append(current)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3167": {
    "question_id": "mbpp/316",
    "model": "deepseek-v3-250324",
    "generation_code": "def modified_encode(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = lst[0]\n    count = 1\n    \n    for item in lst[1:]:\n        if item == current:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, current])\n            else:\n                result.append(current)\n            current = item\n            count = 1\n    \n    if count > 1:\n        result.append([count, current])\n    else:\n        result.append(current)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3168": {
    "question_id": "mbpp/316",
    "model": "deepseek-v3-250324",
    "generation_code": "def modified_encode(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = lst[0]\n    count = 1\n    \n    for item in lst[1:]:\n        if item == current:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, current])\n            else:\n                result.append(current)\n            current = item\n            count = 1\n    \n    if count > 1:\n        result.append([count, current])\n    else:\n        result.append(current)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3169": {
    "question_id": "mbpp/316",
    "model": "deepseek-v3-250324",
    "generation_code": "def modified_encode(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = lst[0]\n    count = 1\n    \n    for item in lst[1:]:\n        if item == current:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, current])\n            else:\n                result.append(current)\n            current = item\n            count = 1\n    \n    if count > 1:\n        result.append([count, current])\n    else:\n        result.append(current)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3170": {
    "question_id": "mbpp/317",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_volume(s):\n    max_vol = 0\n    for a in range(1, s // 3 + 1):\n        for b in range(a, (s - a) // 2 + 1):\n            c = s - a - b\n            vol = a * b * c\n            if vol > max_vol:\n                max_vol = vol\n    return max_vol",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3171": {
    "question_id": "mbpp/317",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_volume(s):\n    max_vol = 0\n    for a in range(1, s // 3 + 1):\n        for b in range(a, (s - a) // 2 + 1):\n            c = s - a - b\n            vol = a * b * c\n            if vol > max_vol:\n                max_vol = vol\n    return max_vol",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3172": {
    "question_id": "mbpp/317",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_volume(s):\n    max_vol = 0\n    for a in range(1, s // 3 + 1):\n        remaining = s - a\n        for b in range(a, remaining // 2 + 1):\n            c = remaining - b\n            if c >= b:\n                vol = a * b * c\n                if vol > max_vol:\n                    max_vol = vol\n    return max_vol",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3173": {
    "question_id": "mbpp/317",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_volume(s):\n    max_vol = 0\n    for a in range(1, s // 3 + 1):\n        for b in range(a, (s - a) // 2 + 1):\n            c = s - a - b\n            vol = a * b * c\n            if vol > max_vol:\n                max_vol = vol\n    return max_vol",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3174": {
    "question_id": "mbpp/317",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_volume(s):\n    max_vol = 0\n    for a in range(1, s // 3 + 1):\n        for b in range(a, (s - a) // 2 + 1):\n            c = s - a - b\n            vol = a * b * c\n            if vol > max_vol:\n                max_vol = vol\n    return max_vol",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3175": {
    "question_id": "mbpp/317",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_volume(s):\n    max_vol = 0\n    for a in range(1, s // 3 + 1):\n        for b in range(a, (s - a) // 2 + 1):\n            c = s - a - b\n            vol = a * b * c\n            if vol > max_vol:\n                max_vol = vol\n    return max_vol",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3176": {
    "question_id": "mbpp/317",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_volume(s):\n    max_vol = 0\n    for a in range(1, s // 3 + 1):\n        for b in range(a, (s - a) // 2 + 1):\n            c = s - a - b\n            vol = a * b * c\n            if vol > max_vol:\n                max_vol = vol\n    return max_vol",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3177": {
    "question_id": "mbpp/317",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_volume(s):\n    max_vol = 0\n    for a in range(1, s // 3 + 1):\n        remaining = s - a\n        for b in range(a, remaining // 2 + 1):\n            c = remaining - b\n            if c >= b:\n                volume = a * b * c\n                if volume > max_vol:\n                    max_vol = volume\n    return max_vol",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3178": {
    "question_id": "mbpp/317",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_volume(s):\n    max_vol = 0\n    for a in range(1, s // 3 + 1):\n        for b in range(a, (s - a) // 2 + 1):\n            c = s - a - b\n            vol = a * b * c\n            if vol > max_vol:\n                max_vol = vol\n    return max_vol",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3179": {
    "question_id": "mbpp/317",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_volume(s):\n    max_vol = 0\n    for a in range(1, s // 3 + 1):\n        for b in range(a, (s - a) // 2 + 1):\n            c = s - a - b\n            vol = a * b * c\n            if vol > max_vol:\n                max_vol = vol\n    return max_vol",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3180": {
    "question_id": "mbpp/318",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3181": {
    "question_id": "mbpp/318",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3182": {
    "question_id": "mbpp/318",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3183": {
    "question_id": "mbpp/318",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3184": {
    "question_id": "mbpp/318",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3185": {
    "question_id": "mbpp/318",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_long_word(s):\n    return re.findall(r'\\b\\w{5}\\b', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3186": {
    "question_id": "mbpp/318",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_long_word(s):\n    return re.findall(r'\\b\\w{5}\\b', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3187": {
    "question_id": "mbpp/318",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3188": {
    "question_id": "mbpp/318",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_long_word(s):\n    return re.findall(r'\\b\\w{5}\\b', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3189": {
    "question_id": "mbpp/318",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3190": {
    "question_id": "mbpp/319",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    square_of_sum = sum(range(1, n+1)) ** 2\n    return square_of_sum - sum_of_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3191": {
    "question_id": "mbpp/319",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_difference(n):\n    sum_squared = (n * (n + 1) // 2) ** 2\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    return sum_squared - sum_of_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3192": {
    "question_id": "mbpp/319",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    square_of_sum = sum(range(1, n+1)) ** 2\n    return square_of_sum - sum_of_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3193": {
    "question_id": "mbpp/319",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_difference(n):\n    sum_squared = (n * (n + 1) // 2) ** 2\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    return sum_squared - sum_of_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3194": {
    "question_id": "mbpp/319",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    square_of_sum = sum(range(1, n+1)) ** 2\n    return square_of_sum - sum_of_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3195": {
    "question_id": "mbpp/319",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    square_of_sum = sum(range(1, n+1)) ** 2\n    return square_of_sum - sum_of_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3196": {
    "question_id": "mbpp/319",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    square_of_sum = sum(range(1, n+1)) ** 2\n    return square_of_sum - sum_of_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3197": {
    "question_id": "mbpp/319",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    square_of_sum = sum(range(1, n+1)) ** 2\n    return square_of_sum - sum_of_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3198": {
    "question_id": "mbpp/319",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_difference(n):\n    sum_squared = (n * (n + 1) // 2) ** 2\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    return sum_squared - sum_of_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3199": {
    "question_id": "mbpp/319",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    square_of_sum = sum(range(1, n+1)) ** 2\n    return square_of_sum - sum_of_squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3200": {
    "question_id": "mbpp/320",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_demlo(number_str):\n    n = len(number_str)\n    if n == 0:\n        return \"\"\n    left = \"\"\n    for i in range(1, n + 1):\n        left += str(i)\n    right = left[:-1][::-1]\n    demlo = left + right\n    return demlo",
    "test_output": "FAILED: expect 123456789101110987654321,in fact 1234567891011101987654321",
    "test_result": "False"
  },
  "3201": {
    "question_id": "mbpp/320",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_demlo(number_str):\n    n = len(number_str)\n    if not all(c == '1' for c in number_str):\n        return \"\"\n    demlo = \"\"\n    for i in range(1, n + 1):\n        demlo += str(i)\n    for i in range(n - 1, 0, -1):\n        demlo += str(i)\n    return demlo",
    "test_output": "FAILED: expect 123456789101110987654321,in fact ",
    "test_result": "False"
  },
  "3202": {
    "question_id": "mbpp/320",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_demlo(num_str):\n    n = len(num_str)\n    if n == 0:\n        return \"\"\n    left = \"\"\n    for i in range(1, n + 1):\n        left += str(i)\n    right = left[:-1][::-1]\n    demlo = left + right\n    return demlo",
    "test_output": "FAILED: expect 123456789101110987654321,in fact 1234567891011101987654321",
    "test_result": "False"
  },
  "3203": {
    "question_id": "mbpp/320",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_demlo(number_str):\n    n = len(number_str)\n    if n == 0:\n        return \"\"\n    left = \"\"\n    for i in range(1, n + 1):\n        left += str(i)\n    right = left[:-1][::-1]\n    demlo = left + right\n    return demlo",
    "test_output": "FAILED: expect 123456789101110987654321,in fact 1234567891011101987654321",
    "test_result": "False"
  },
  "3204": {
    "question_id": "mbpp/320",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_demlo(number_str):\n    n = len(number_str)\n    if not all(c == '1' for c in number_str):\n        return \"\"\n    \n    left_part = ''.join(str(i) for i in range(1, n+1))\n    right_part = ''.join(str(i) for i in range(n-1, 0, -1))\n    demlo_number = left_part + right_part\n    \n    return demlo_number",
    "test_output": "FAILED: expect 123456789101110987654321,in fact ",
    "test_result": "False"
  },
  "3205": {
    "question_id": "mbpp/320",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_demlo(number_str):\n    n = len(number_str)\n    if n == 0:\n        return \"\"\n    left = \"\"\n    for i in range(1, n + 1):\n        left += str(i)\n    right = left[:-1][::-1]\n    demlo = left + right\n    return demlo",
    "test_output": "FAILED: expect 123456789101110987654321,in fact 1234567891011101987654321",
    "test_result": "False"
  },
  "3206": {
    "question_id": "mbpp/320",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_demlo(number_str):\n    n = len(number_str)\n    if n == 0:\n        return \"\"\n    left = \"\"\n    for i in range(1, n + 1):\n        left += str(i)\n    right = left[:-1][::-1]\n    demlo = left + right\n    return demlo",
    "test_output": "FAILED: expect 123456789101110987654321,in fact 1234567891011101987654321",
    "test_result": "False"
  },
  "3207": {
    "question_id": "mbpp/320",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_demlo(num_str):\n    n = len(num_str)\n    if not all(c == '1' for c in num_str):\n        return \"\"\n    \n    left = \"\"\n    for i in range(1, n + 1):\n        left += str(i)\n    \n    right = left[:-1][::-1]\n    demlo = left + right\n    \n    return demlo",
    "test_output": "FAILED: expect 123456789101110987654321,in fact ",
    "test_result": "False"
  },
  "3208": {
    "question_id": "mbpp/320",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_demlo(num_str):\n    n = len(num_str)\n    if not all(c == '1' for c in num_str):\n        return \"\"\n    \n    left = \"\"\n    for i in range(1, n + 1):\n        left += str(i)\n    \n    right = left[:-1][::-1]\n    demlo = left + right\n    return demlo",
    "test_output": "FAILED: expect 123456789101110987654321,in fact ",
    "test_result": "False"
  },
  "3209": {
    "question_id": "mbpp/320",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_demlo(num_str):\n    n = len(num_str)\n    if n == 0:\n        return \"\"\n    \n    left = \"\"\n    for i in range(1, n + 1):\n        left += str(i)\n    \n    right = left[:-1][::-1]\n    demlo = left + right\n    \n    return demlo",
    "test_output": "FAILED: expect 123456789101110987654321,in fact 1234567891011101987654321",
    "test_result": "False"
  },
  "3210": {
    "question_id": "mbpp/321",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_min(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3211": {
    "question_id": "mbpp/321",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_min(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3212": {
    "question_id": "mbpp/321",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_min(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3213": {
    "question_id": "mbpp/321",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_min(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3214": {
    "question_id": "mbpp/321",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_min(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3215": {
    "question_id": "mbpp/321",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_min(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3216": {
    "question_id": "mbpp/321",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_min(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3217": {
    "question_id": "mbpp/321",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_min(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3218": {
    "question_id": "mbpp/321",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_min(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3219": {
    "question_id": "mbpp/321",
    "model": "deepseek-v3-250324",
    "generation_code": "def position_min(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3220": {
    "question_id": "mbpp/322",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n    \n    # Initialize pointers for both lists\n    i = j = k = 0\n    result = []\n    \n    # Alternate between positive and negative numbers\n    while i < len(neg) and j < len(pos):\n        result.append(neg[i])\n        result.append(pos[j])\n        i += 1\n        j += 1\n    \n    # Add remaining negative numbers\n    while i < len(neg):\n        result.append(neg[i])\n        i += 1\n    \n    # Add remaining positive numbers\n    while j < len(pos):\n        result.append(pos[j])\n        j += 1\n    \n    # Handle zeros (they are not positive or negative)\n    zeros = [x for x in arr if x == 0]\n    result.extend(zeros)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3221": {
    "question_id": "mbpp/322",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n    \n    # Initialize pointers for both lists\n    i = j = k = 0\n    result = []\n    \n    # Alternate between positive and negative\n    while i < len(neg) and j < len(pos):\n        result.append(neg[i])\n        result.append(pos[j])\n        i += 1\n        j += 1\n    \n    # Append remaining negatives\n    while i < len(neg):\n        result.append(neg[i])\n        i += 1\n    \n    # Append remaining positives\n    while j < len(pos):\n        result.append(pos[j])\n        j += 1\n    \n    # Handle zeros (they are not positive or negative)\n    zeros = [x for x in arr if x == 0]\n    result.extend(zeros)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3222": {
    "question_id": "mbpp/322",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n    \n    # Initialize pointers for pos and neg arrays\n    i = j = k = 0\n    \n    # Alternate between positive and negative numbers\n    while i < len(neg) and j < len(pos):\n        arr[k] = neg[i]\n        k += 1\n        i += 1\n        arr[k] = pos[j]\n        k += 1\n        j += 1\n    \n    # Add remaining negative numbers\n    while i < len(neg):\n        arr[k] = neg[i]\n        k += 1\n        i += 1\n    \n    # Add remaining positive numbers\n    while j < len(pos):\n        arr[k] = pos[j]\n        k += 1\n        j += 1\n    \n    return arr",
    "test_output": "FAILED: expect [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0],in fact [-5, 5, -2, 2, -8, 4, 7, 1, 8, -8]",
    "test_result": "False"
  },
  "3223": {
    "question_id": "mbpp/322",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n    \n    # Initialize pointers for pos and neg\n    i = j = k = 0\n    result = []\n    \n    # Alternate between positive and negative\n    while i < len(neg) and j < len(pos):\n        result.append(neg[i])\n        result.append(pos[j])\n        i += 1\n        j += 1\n    \n    # Add remaining negatives\n    while i < len(neg):\n        result.append(neg[i])\n        i += 1\n    \n    # Add remaining positives\n    while j < len(pos):\n        result.append(pos[j])\n        j += 1\n    \n    # Handle zeros (they are not in pos or neg)\n    zeros = [x for x in arr if x == 0]\n    result.extend(zeros)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3224": {
    "question_id": "mbpp/322",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n    \n    # Initialize pointers for both lists\n    i = j = k = 0\n    result = []\n    \n    # Alternate between positive and negative numbers\n    while i < len(neg) and j < len(pos):\n        result.append(neg[i])\n        result.append(pos[j])\n        i += 1\n        j += 1\n    \n    # Append remaining negative numbers\n    while i < len(neg):\n        result.append(neg[i])\n        i += 1\n    \n    # Append remaining positive numbers\n    while j < len(pos):\n        result.append(pos[j])\n        j += 1\n    \n    # Append zeros if any (they are not considered positive or negative)\n    zeros = [x for x in arr if x == 0]\n    result.extend(zeros)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3225": {
    "question_id": "mbpp/322",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n    \n    # Initialize pointers for both lists\n    i = j = k = 0\n    result = []\n    \n    # Alternate between positive and negative\n    while i < len(neg) and j < len(pos):\n        result.append(neg[i])\n        result.append(pos[j])\n        i += 1\n        j += 1\n    \n    # Add remaining negative numbers\n    while i < len(neg):\n        result.append(neg[i])\n        i += 1\n    \n    # Add remaining positive numbers\n    while j < len(pos):\n        result.append(pos[j])\n        j += 1\n    \n    # Handle zeros (they are not positive or negative)\n    zeros = [x for x in arr if x == 0]\n    result.extend(zeros)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3226": {
    "question_id": "mbpp/322",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n    \n    # Initialize pointers for both lists\n    i = j = k = 0\n    result = []\n    \n    # Alternate between positive and negative\n    while i < len(neg) and j < len(pos):\n        result.append(neg[i])\n        result.append(pos[j])\n        i += 1\n        j += 1\n    \n    # Add remaining negatives\n    while i < len(neg):\n        result.append(neg[i])\n        i += 1\n    \n    # Add remaining positives\n    while j < len(pos):\n        result.append(pos[j])\n        j += 1\n    \n    # Handle zeros (they are not positive or negative, so append at end)\n    zeros = [x for x in arr if x == 0]\n    result.extend(zeros)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3227": {
    "question_id": "mbpp/322",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n    \n    # Initialize pointers for both lists\n    i = j = k = 0\n    result = []\n    \n    # Alternate between positive and negative\n    while i < len(neg) and j < len(pos):\n        result.append(neg[i])\n        result.append(pos[j])\n        i += 1\n        j += 1\n    \n    # Add remaining negatives\n    while i < len(neg):\n        result.append(neg[i])\n        i += 1\n    \n    # Add remaining positives\n    while j < len(pos):\n        result.append(pos[j])\n        j += 1\n    \n    # Handle zeros (they are not positive or negative, so they are added at the end)\n    zeros = [x for x in arr if x == 0]\n    result.extend(zeros)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3228": {
    "question_id": "mbpp/322",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n    \n    # Initialize pointers for both lists and the result\n    i = j = k = 0\n    result = []\n    \n    # Alternate between positive and negative numbers\n    while i < len(neg) and j < len(pos):\n        result.append(neg[i])\n        result.append(pos[j])\n        i += 1\n        j += 1\n    \n    # Append remaining negative numbers\n    while i < len(neg):\n        result.append(neg[i])\n        i += 1\n    \n    # Append remaining positive numbers\n    while j < len(pos):\n        result.append(pos[j])\n        j += 1\n    \n    # Append zeros if any (they are not considered positive or negative)\n    zeros = [x for x in arr if x == 0]\n    result.extend(zeros)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3229": {
    "question_id": "mbpp/322",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n    \n    # Determine the smaller list to alternate\n    min_len = min(len(pos), len(neg))\n    \n    # Initialize the result list\n    result = []\n    for i in range(min_len):\n        result.append(neg[i])\n        result.append(pos[i])\n    \n    # Add remaining elements\n    if len(neg) > min_len:\n        result += neg[min_len:]\n    elif len(pos) > min_len:\n        result += pos[min_len:]\n    \n    # Handle zeros (they are not considered in pos or neg)\n    zeros = [x for x in arr if x == 0]\n    result += zeros\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3230": {
    "question_id": "mbpp/323",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_alternates(tuples):\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(tuples)):\n        if i % 2 == 0:\n            sum1 += tuples[i]\n        else:\n            sum2 += tuples[i]\n    return (sum1, sum2)",
    "test_output": "FAILED: expect (46, 18),in fact (18, 46)",
    "test_result": "False"
  },
  "3231": {
    "question_id": "mbpp/323",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_alternates(t):\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(t)):\n        if i % 2 == 0:\n            sum1 += t[i]\n        else:\n            sum2 += t[i]\n    return (sum1, sum2)",
    "test_output": "FAILED: expect (46, 18),in fact (18, 46)",
    "test_result": "False"
  },
  "3232": {
    "question_id": "mbpp/323",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_alternates(t):\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(t)):\n        if i % 2 == 0:\n            sum1 += t[i]\n        else:\n            sum2 += t[i]\n    return (sum1, sum2)",
    "test_output": "FAILED: expect (46, 18),in fact (18, 46)",
    "test_result": "False"
  },
  "3233": {
    "question_id": "mbpp/323",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_alternates(tuples):\n    sum_even = 0\n    sum_odd = 0\n    for i in range(len(tuples)):\n        if i % 2 == 0:\n            sum_even += tuples[i]\n        else:\n            sum_odd += tuples[i]\n    return (sum_even, sum_odd)",
    "test_output": "FAILED: expect (46, 18),in fact (18, 46)",
    "test_result": "False"
  },
  "3234": {
    "question_id": "mbpp/323",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_alternates(tuples):\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(tuples)):\n        if i % 2 == 0:\n            sum1 += tuples[i]\n        else:\n            sum2 += tuples[i]\n    return (sum1, sum2)",
    "test_output": "FAILED: expect (46, 18),in fact (18, 46)",
    "test_result": "False"
  },
  "3235": {
    "question_id": "mbpp/323",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_alternates(tup):\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(tup)):\n        if i % 2 == 0:\n            sum1 += tup[i]\n        else:\n            sum2 += tup[i]\n    return (sum1, sum2)",
    "test_output": "FAILED: expect (46, 18),in fact (18, 46)",
    "test_result": "False"
  },
  "3236": {
    "question_id": "mbpp/323",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_alternates(tuples):\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(tuples)):\n        if i % 2 == 0:\n            sum1 += tuples[i]\n        else:\n            sum2 += tuples[i]\n    return (sum1, sum2)",
    "test_output": "FAILED: expect (46, 18),in fact (18, 46)",
    "test_result": "False"
  },
  "3237": {
    "question_id": "mbpp/323",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_alternates(t):\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(t)):\n        if i % 2 == 0:\n            sum1 += t[i]\n        else:\n            sum2 += t[i]\n    return (sum1, sum2)",
    "test_output": "FAILED: expect (46, 18),in fact (18, 46)",
    "test_result": "False"
  },
  "3238": {
    "question_id": "mbpp/323",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_alternates(t):\n    sum_even = 0\n    sum_odd = 0\n    for i in range(len(t)):\n        if i % 2 == 0:\n            sum_even += t[i]\n        else:\n            sum_odd += t[i]\n    return (sum_even, sum_odd)",
    "test_output": "FAILED: expect (46, 18),in fact (18, 46)",
    "test_result": "False"
  },
  "3239": {
    "question_id": "mbpp/323",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_alternates(t):\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(t)):\n        if i % 2 == 0:\n            sum1 += t[i]\n        else:\n            sum2 += t[i]\n    return (sum1, sum2)",
    "test_output": "FAILED: expect (46, 18),in fact (18, 46)",
    "test_result": "False"
  },
  "3240": {
    "question_id": "mbpp/324",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    \n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    \n    for i in range(4, n + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            temp = j * j\n            if temp > i:\n                break\n            dp[i] = min(dp[i], 1 + dp[i - temp])\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3241": {
    "question_id": "mbpp/324",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    \n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    \n    for i in range(4, n + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            temp = j * j\n            if temp > i:\n                break\n            dp[i] = min(dp[i], 1 + dp[i - temp])\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3242": {
    "question_id": "mbpp/324",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    \n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    \n    for i in range(4, n + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            temp = j * j\n            if temp > i:\n                break\n            dp[i] = min(dp[i], 1 + dp[i - temp])\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3243": {
    "question_id": "mbpp/324",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    \n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    \n    for i in range(4, n + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            temp = j * j\n            if temp > i:\n                break\n            dp[i] = min(dp[i], 1 + dp[i - temp])\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3244": {
    "question_id": "mbpp/324",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    \n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    \n    for i in range(4, n + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            temp = j * j\n            if temp > i:\n                break\n            dp[i] = min(dp[i], 1 + dp[i - temp])\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3245": {
    "question_id": "mbpp/324",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    \n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    \n    for i in range(4, n + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            temp = j * j\n            if temp > i:\n                break\n            dp[i] = min(dp[i], 1 + dp[i - temp])\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3246": {
    "question_id": "mbpp/324",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    \n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    \n    for i in range(4, n + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            temp = j * j\n            if temp > i:\n                break\n            dp[i] = min(dp[i], 1 + dp[i - temp])\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3247": {
    "question_id": "mbpp/324",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    \n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    \n    for i in range(4, n + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            temp = j * j\n            if temp > i:\n                break\n            dp[i] = min(dp[i], 1 + dp[i - temp])\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3248": {
    "question_id": "mbpp/324",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    \n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    \n    for i in range(4, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3249": {
    "question_id": "mbpp/324",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    \n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    \n    for i in range(4, n + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            temp = j * j\n            if temp > i:\n                break\n            dp[i] = min(dp[i], 1 + dp[i - temp])\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3250": {
    "question_id": "mbpp/325",
    "model": "deepseek-v3-250324",
    "generation_code": "def most_occurrences(strings_list):\n    word_counts = {}\n    for string in strings_list:\n        words = string.split()\n        for word in words:\n            if word in word_counts:\n                word_counts[word] += 1\n            else:\n                word_counts[word] = 1\n    if not word_counts:\n        return None\n    max_count = max(word_counts.values())\n    most_common_words = [word for word, count in word_counts.items() if count == max_count]\n    return most_common_words[0] if most_common_words else None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3251": {
    "question_id": "mbpp/325",
    "model": "deepseek-v3-250324",
    "generation_code": "def most_occurrences(strings_list):\n    word_counts = {}\n    for string in strings_list:\n        words = string.split()\n        for word in words:\n            if word in word_counts:\n                word_counts[word] += 1\n            else:\n                word_counts[word] = 1\n    if not word_counts:\n        return None\n    max_count = max(word_counts.values())\n    most_common_words = [word for word, count in word_counts.items() if count == max_count]\n    return most_common_words[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3252": {
    "question_id": "mbpp/325",
    "model": "deepseek-v3-250324",
    "generation_code": "def most_occurrences(strings):\n    word_counts = {}\n    for s in strings:\n        words = s.split()\n        for word in words:\n            if word in word_counts:\n                word_counts[word] += 1\n            else:\n                word_counts[word] = 1\n    max_count = 0\n    result = None\n    for word, count in word_counts.items():\n        if count > max_count or (count == max_count and word < result):\n            max_count = count\n            result = word\n    return result",
    "test_output": "FAILED: expect can,in fact be",
    "test_result": "False"
  },
  "3253": {
    "question_id": "mbpp/325",
    "model": "deepseek-v3-250324",
    "generation_code": "def most_occurrences(strings_list):\n    word_counts = {}\n    for string in strings_list:\n        words = string.split()\n        for word in words:\n            if word in word_counts:\n                word_counts[word] += 1\n            else:\n                word_counts[word] = 1\n    if not word_counts:\n        return None\n    max_count = max(word_counts.values())\n    most_common_words = [word for word, count in word_counts.items() if count == max_count]\n    return most_common_words[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3254": {
    "question_id": "mbpp/325",
    "model": "deepseek-v3-250324",
    "generation_code": "def most_occurrences(strings_list):\n    word_counts = {}\n    for string in strings_list:\n        words = string.split()\n        for word in words:\n            if word in word_counts:\n                word_counts[word] += 1\n            else:\n                word_counts[word] = 1\n    max_count = 0\n    most_common_word = None\n    for word, count in word_counts.items():\n        if count > max_count or (count == max_count and word < most_common_word):\n            max_count = count\n            most_common_word = word\n    return most_common_word",
    "test_output": "FAILED: expect can,in fact be",
    "test_result": "False"
  },
  "3255": {
    "question_id": "mbpp/325",
    "model": "deepseek-v3-250324",
    "generation_code": "def most_occurrences(strings_list):\n    word_counts = {}\n    for string in strings_list:\n        words = string.split()\n        for word in words:\n            if word in word_counts:\n                word_counts[word] += 1\n            else:\n                word_counts[word] = 1\n    max_count = 0\n    most_common_word = None\n    for word, count in word_counts.items():\n        if count > max_count or (count == max_count and word < most_common_word):\n            max_count = count\n            most_common_word = word\n    return most_common_word",
    "test_output": "FAILED: expect can,in fact be",
    "test_result": "False"
  },
  "3256": {
    "question_id": "mbpp/325",
    "model": "deepseek-v3-250324",
    "generation_code": "def most_occurrences(strings_list):\n    word_counts = {}\n    for string in strings_list:\n        words = string.split()\n        for word in words:\n            if word in word_counts:\n                word_counts[word] += 1\n            else:\n                word_counts[word] = 1\n    max_count = 0\n    most_common_word = None\n    for word, count in word_counts.items():\n        if count > max_count or (count == max_count and word < most_common_word):\n            max_count = count\n            most_common_word = word\n    return most_common_word",
    "test_output": "FAILED: expect can,in fact be",
    "test_result": "False"
  },
  "3257": {
    "question_id": "mbpp/325",
    "model": "deepseek-v3-250324",
    "generation_code": "def most_occurrences(strings_list):\n    word_counts = {}\n    for string in strings_list:\n        words = string.split()\n        for word in words:\n            if word in word_counts:\n                word_counts[word] += 1\n            else:\n                word_counts[word] = 1\n    if not word_counts:\n        return None\n    max_count = max(word_counts.values())\n    most_common_words = [word for word, count in word_counts.items() if count == max_count]\n    return most_common_words[0] if most_common_words else None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3258": {
    "question_id": "mbpp/325",
    "model": "deepseek-v3-250324",
    "generation_code": "def most_occurrences(strings_list):\n    word_counts = {}\n    for string in strings_list:\n        words = string.split()\n        for word in words:\n            if word in word_counts:\n                word_counts[word] += 1\n            else:\n                word_counts[word] = 1\n    if not word_counts:\n        return None\n    max_count = max(word_counts.values())\n    most_common_words = [word for word, count in word_counts.items() if count == max_count]\n    return most_common_words[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3259": {
    "question_id": "mbpp/325",
    "model": "deepseek-v3-250324",
    "generation_code": "def most_occurrences(strings_list):\n    word_counts = {}\n    for string in strings_list:\n        words = string.split()\n        for word in words:\n            if word in word_counts:\n                word_counts[word] += 1\n            else:\n                word_counts[word] = 1\n    if not word_counts:\n        return None\n    max_count = max(word_counts.values())\n    most_common_words = [word for word, count in word_counts.items() if count == max_count]\n    return most_common_words[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3260": {
    "question_id": "mbpp/326",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return a == b or a == c or b == c",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3261": {
    "question_id": "mbpp/326",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3262": {
    "question_id": "mbpp/326",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return (a == b) or (a == c) or (b == c)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3263": {
    "question_id": "mbpp/326",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3264": {
    "question_id": "mbpp/326",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return (a == b) or (a == c) or (b == c)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3265": {
    "question_id": "mbpp/326",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return (a == b) or (a == c) or (b == c)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3266": {
    "question_id": "mbpp/326",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return a == b or b == c or a == c",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3267": {
    "question_id": "mbpp/326",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return (a == b) or (a == c) or (b == c)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3268": {
    "question_id": "mbpp/326",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return (a == b) or (a == c) or (b == c)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "3269": {
    "question_id": "mbpp/326",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3270": {
    "question_id": "mbpp/327",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_left(lst, n, m):\n    if not lst or n <= 0 or m <= 0:\n        return lst.copy() if lst else []\n    rotated = lst[n:] + lst[:n]\n    return rotated + rotated[:m]",
    "test_output": "FAILED: expect [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4],in fact [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
    "test_result": "False"
  },
  "3271": {
    "question_id": "mbpp/327",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_left(lst, k, n):\n    if not lst or k <= 0 or n <= 0:\n        return lst.copy() if lst else []\n    k = k % len(lst) if len(lst) > 0 else 0\n    rotated = lst[k:] + lst[:k]\n    return rotated + lst[:n]",
    "test_output": "FAILED: expect [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4],in fact [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 1, 2, 3, 4]",
    "test_result": "False"
  },
  "3272": {
    "question_id": "mbpp/327",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_left(lst, k, n):\n    if not lst or k <= 0 or n <= 0:\n        return lst.copy() if lst else []\n    rotated = lst[k:] + lst[:k]\n    return rotated + lst[:n]",
    "test_output": "FAILED: expect [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4],in fact [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 1, 2, 3, 4]",
    "test_result": "False"
  },
  "3273": {
    "question_id": "mbpp/327",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_left(lst, m, n):\n    if not lst or m < 0 or n <= 0:\n        return lst.copy() if lst else []\n    m = m % len(lst) if len(lst) != 0 else 0\n    rotated = lst[m:] + lst[:m]\n    return rotated + rotated[:n]",
    "test_output": "FAILED: expect [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4],in fact [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
    "test_result": "False"
  },
  "3274": {
    "question_id": "mbpp/327",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_left(lst, n, m):\n    if not lst or n <= 0 or m <= 0:\n        return lst.copy() if lst else []\n    rotated = lst[n:] + lst[:n]\n    return rotated + rotated[:m]",
    "test_output": "FAILED: expect [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4],in fact [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
    "test_result": "False"
  },
  "3275": {
    "question_id": "mbpp/327",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_left(lst, n, m):\n    if not lst or n <= 0 or m <= 0:\n        return lst.copy() if lst else []\n    n = n % len(lst) if len(lst) > 0 else 0\n    rotated = lst[n:] + lst[:n]\n    return rotated + rotated[:m]",
    "test_output": "FAILED: expect [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4],in fact [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
    "test_result": "False"
  },
  "3276": {
    "question_id": "mbpp/327",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_left(lst, n, m):\n    if not lst or n <= 0 or m <= 0:\n        return lst.copy()\n    rotated = lst[n:] + lst[:n]\n    return rotated + lst[:m]",
    "test_output": "FAILED: expect [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4],in fact [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 1, 2, 3, 4]",
    "test_result": "False"
  },
  "3277": {
    "question_id": "mbpp/327",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_left(lst, n, m):\n    if not lst or n <= 0 or m <= 0:\n        return lst.copy() if lst else []\n    n = n % len(lst) if len(lst) > 0 else 0\n    rotated = lst[n:] + lst[:n]\n    return rotated + lst[:m]",
    "test_output": "FAILED: expect [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4],in fact [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 1, 2, 3, 4]",
    "test_result": "False"
  },
  "3278": {
    "question_id": "mbpp/327",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_left(lst, n, m):\n    if not lst or n <= 0 or m <= 0:\n        return lst.copy() if lst else []\n    rotated = lst[n:] + lst[:n]\n    return rotated + rotated[:m]",
    "test_output": "FAILED: expect [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4],in fact [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
    "test_result": "False"
  },
  "3279": {
    "question_id": "mbpp/327",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_left(lst, k, n):\n    if not lst or k <= 0 or n <= 0:\n        return lst.copy() if lst else []\n    k = k % len(lst) if len(lst) > 0 else 0\n    rotated = lst[k:] + lst[:k]\n    return rotated + lst[:n]",
    "test_output": "FAILED: expect [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4],in fact [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 1, 2, 3, 4]",
    "test_result": "False"
  },
  "3280": {
    "question_id": "mbpp/328",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3281": {
    "question_id": "mbpp/328",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3282": {
    "question_id": "mbpp/328",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3283": {
    "question_id": "mbpp/328",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3284": {
    "question_id": "mbpp/328",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3285": {
    "question_id": "mbpp/328",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3286": {
    "question_id": "mbpp/328",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3287": {
    "question_id": "mbpp/328",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3288": {
    "question_id": "mbpp/328",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3289": {
    "question_id": "mbpp/328",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3290": {
    "question_id": "mbpp/329",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char(s):\n    return re.findall(r'\\b\\w{3,5}\\b', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3291": {
    "question_id": "mbpp/329",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char(s):\n    return re.findall(r'\\b\\w{3,5}\\b', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3292": {
    "question_id": "mbpp/329",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char(text):\n    return re.findall(r'\\b\\w{3,5}\\b', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3293": {
    "question_id": "mbpp/329",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char(s):\n    return re.findall(r'\\b\\w{3,5}\\b', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3294": {
    "question_id": "mbpp/329",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char(s):\n    return re.findall(r'\\b\\w{3,5}\\b', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3295": {
    "question_id": "mbpp/329",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char(s):\n    return re.findall(r'\\b\\w{3,5}\\b', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3296": {
    "question_id": "mbpp/329",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char(s):\n    return re.findall(r'\\b\\w{3,5}\\b', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3297": {
    "question_id": "mbpp/329",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char(s):\n    return re.findall(r'\\b\\w{3,5}\\b', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3298": {
    "question_id": "mbpp/329",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char(s):\n    return re.findall(r'\\b\\w{3,5}\\b', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3299": {
    "question_id": "mbpp/329",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_char(s):\n    return re.findall(r'\\b\\w{3,5}\\b', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3300": {
    "question_id": "mbpp/330",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_unset_bits(num):\n    if num < 0:\n        return 0\n    binary = bin(num)[2:]\n    return binary.count('0')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3301": {
    "question_id": "mbpp/330",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_unset_bits(num):\n    if num < 0:\n        return 0\n    binary_str = bin(num)[2:]\n    return binary_str.count('0')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3302": {
    "question_id": "mbpp/330",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_unset_bits(num):\n    if num < 0:\n        return 0\n    binary = bin(num)[2:]\n    return binary.count('0')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3303": {
    "question_id": "mbpp/330",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_unset_bits(num):\n    if num < 0:\n        return 0\n    binary = bin(num)[2:]\n    return binary.count('0')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3304": {
    "question_id": "mbpp/330",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_unset_bits(num):\n    if num < 0:\n        return 0\n    binary = bin(num)[2:]\n    return binary.count('0')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3305": {
    "question_id": "mbpp/330",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_unset_bits(num):\n    if num < 0:\n        return 0\n    binary = bin(num)[2:]\n    return binary.count('0')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3306": {
    "question_id": "mbpp/330",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_unset_bits(num):\n    if num < 0:\n        return 0\n    binary = bin(num)[2:]\n    return binary.count('0')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3307": {
    "question_id": "mbpp/330",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_unset_bits(num):\n    if num < 0:\n        return 0\n    binary = bin(num)[2:]\n    return binary.count('0')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3308": {
    "question_id": "mbpp/330",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_unset_bits(num):\n    if num < 0:\n        return 0\n    binary = bin(num)[2:]\n    return binary.count('0')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3309": {
    "question_id": "mbpp/330",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_unset_bits(number):\n    if number < 0:\n        return 0\n    binary_str = bin(number)[2:]\n    return binary_str.count('0')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3310": {
    "question_id": "mbpp/331",
    "model": "deepseek-v3-250324",
    "generation_code": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3311": {
    "question_id": "mbpp/331",
    "model": "deepseek-v3-250324",
    "generation_code": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3312": {
    "question_id": "mbpp/331",
    "model": "deepseek-v3-250324",
    "generation_code": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3313": {
    "question_id": "mbpp/331",
    "model": "deepseek-v3-250324",
    "generation_code": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3314": {
    "question_id": "mbpp/331",
    "model": "deepseek-v3-250324",
    "generation_code": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3315": {
    "question_id": "mbpp/331",
    "model": "deepseek-v3-250324",
    "generation_code": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3316": {
    "question_id": "mbpp/331",
    "model": "deepseek-v3-250324",
    "generation_code": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3317": {
    "question_id": "mbpp/331",
    "model": "deepseek-v3-250324",
    "generation_code": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3318": {
    "question_id": "mbpp/331",
    "model": "deepseek-v3-250324",
    "generation_code": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3319": {
    "question_id": "mbpp/331",
    "model": "deepseek-v3-250324",
    "generation_code": "def char_frequency(string):\n    frequency = {}\n    for char in string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3320": {
    "question_id": "mbpp/332",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3321": {
    "question_id": "mbpp/332",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3322": {
    "question_id": "mbpp/332",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3323": {
    "question_id": "mbpp/332",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3324": {
    "question_id": "mbpp/332",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3325": {
    "question_id": "mbpp/332",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3326": {
    "question_id": "mbpp/332",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3327": {
    "question_id": "mbpp/332",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3328": {
    "question_id": "mbpp/332",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3329": {
    "question_id": "mbpp/332",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3330": {
    "question_id": "mbpp/333",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Validity(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return (a + b > c) and (a + c > b) and (b + c > a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3331": {
    "question_id": "mbpp/333",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Validity(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return (a + b > c) and (a + c > b) and (b + c > a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3332": {
    "question_id": "mbpp/333",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Validity(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return a + b > c and a + c > b and b + c > a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3333": {
    "question_id": "mbpp/333",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Validity(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return (a + b > c) and (a + c > b) and (b + c > a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3334": {
    "question_id": "mbpp/333",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Validity(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return a + b > c and a + c > b and b + c > a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3335": {
    "question_id": "mbpp/333",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3336": {
    "question_id": "mbpp/333",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Validity(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return (a + b > c) and (a + c > b) and (b + c > a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3337": {
    "question_id": "mbpp/333",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Validity(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return (a + b > c) and (a + c > b) and (b + c > a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3338": {
    "question_id": "mbpp/333",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3339": {
    "question_id": "mbpp/333",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Validity(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return (a + b > c) and (a + c > b) and (b + c > a)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3340": {
    "question_id": "mbpp/334",
    "model": "deepseek-v3-250324",
    "generation_code": "def ap_sum(a1, n, d):\n    return n * (2 * a1 + (n - 1) * d) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3341": {
    "question_id": "mbpp/334",
    "model": "deepseek-v3-250324",
    "generation_code": "def ap_sum(a1, an, n):\n    return n * (a1 + an) // 2",
    "test_output": "FAILED: expect 25,in fact 6",
    "test_result": "False"
  },
  "3342": {
    "question_id": "mbpp/334",
    "model": "deepseek-v3-250324",
    "generation_code": "def ap_sum(a1, an, n):\n    return n * (a1 + an) // 2",
    "test_output": "FAILED: expect 25,in fact 6",
    "test_result": "False"
  },
  "3343": {
    "question_id": "mbpp/334",
    "model": "deepseek-v3-250324",
    "generation_code": "def ap_sum(a1, an, n):\n    return n * (a1 + an) // 2",
    "test_output": "FAILED: expect 25,in fact 6",
    "test_result": "False"
  },
  "3344": {
    "question_id": "mbpp/334",
    "model": "deepseek-v3-250324",
    "generation_code": "def ap_sum(a1, an, n):\n    return n * (a1 + an) // 2",
    "test_output": "FAILED: expect 25,in fact 6",
    "test_result": "False"
  },
  "3345": {
    "question_id": "mbpp/334",
    "model": "deepseek-v3-250324",
    "generation_code": "def ap_sum(a1, an, n):\n    return n * (a1 + an) // 2",
    "test_output": "FAILED: expect 25,in fact 6",
    "test_result": "False"
  },
  "3346": {
    "question_id": "mbpp/334",
    "model": "deepseek-v3-250324",
    "generation_code": "def ap_sum(a1, an, n):\n    if n == 0:\n        return 0\n    return n * (a1 + an) // 2",
    "test_output": "FAILED: expect 25,in fact 6",
    "test_result": "False"
  },
  "3347": {
    "question_id": "mbpp/334",
    "model": "deepseek-v3-250324",
    "generation_code": "def ap_sum(a1, an, n):\n    return n * (a1 + an) // 2",
    "test_output": "FAILED: expect 25,in fact 6",
    "test_result": "False"
  },
  "3348": {
    "question_id": "mbpp/334",
    "model": "deepseek-v3-250324",
    "generation_code": "def ap_sum(a1, an, n):\n    return n * (a1 + an) // 2",
    "test_output": "FAILED: expect 25,in fact 6",
    "test_result": "False"
  },
  "3349": {
    "question_id": "mbpp/334",
    "model": "deepseek-v3-250324",
    "generation_code": "def ap_sum(a1, an, n):\n    return n * (a1 + an) // 2",
    "test_output": "FAILED: expect 25,in fact 6",
    "test_result": "False"
  },
  "3350": {
    "question_id": "mbpp/335",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum(month):\n    return month.lower() == \"february\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3351": {
    "question_id": "mbpp/335",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum(month_name):\n    return month_name.lower() == \"february\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3352": {
    "question_id": "mbpp/335",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum(month):\n    return month.lower() == \"february\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3353": {
    "question_id": "mbpp/335",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum(month):\n    return month.lower() == \"february\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3354": {
    "question_id": "mbpp/335",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum(month):\n    return month.lower() == \"february\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3355": {
    "question_id": "mbpp/335",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum(month_name):\n    return month_name.lower() == \"february\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3356": {
    "question_id": "mbpp/335",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum(month):\n    return month.lower() == \"february\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3357": {
    "question_id": "mbpp/335",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum(month):\n    return month.lower() == \"february\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3358": {
    "question_id": "mbpp/335",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum(month):\n    return month.lower() == \"february\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3359": {
    "question_id": "mbpp/335",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum(month):\n    return month.lower() == \"february\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3360": {
    "question_id": "mbpp/336",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_word(text):\n    if re.search(r'\\bpython\\b[^\\w]*$', text, re.IGNORECASE):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3361": {
    "question_id": "mbpp/336",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_word(text):\n    pattern = r'\\b\\w+\\b[^\\w]*$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Not matched!,in fact Found a match!",
    "test_result": "False"
  },
  "3362": {
    "question_id": "mbpp/336",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_word(text):\n    if re.search(r'\\b\\w+\\b[^\\w]*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Not matched!,in fact Found a match!",
    "test_result": "False"
  },
  "3363": {
    "question_id": "mbpp/336",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_word(text):\n    pattern = r'\\b\\w+\\b[.!?,;]*$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3364": {
    "question_id": "mbpp/336",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_word(text):\n    pattern = r'\\b\\w+\\b[^\\w]*$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Not matched!,in fact Found a match!",
    "test_result": "False"
  },
  "3365": {
    "question_id": "mbpp/336",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_word(text):\n    if re.search(r'\\bpython\\b[^\\w]*$', text, re.IGNORECASE):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3366": {
    "question_id": "mbpp/336",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_word(text):\n    pattern = r'\\b\\w+\\b[.!?,;]*$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3367": {
    "question_id": "mbpp/336",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_word(text):\n    if re.search(r'\\bpython\\b[^\\w]*$', text, re.IGNORECASE):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3368": {
    "question_id": "mbpp/336",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_word(text):\n    if re.search(r'\\bpython\\b[^\\w]*$', text, re.IGNORECASE):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3369": {
    "question_id": "mbpp/336",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_word(text):\n    if re.search(r'\\bpython\\b[^\\w]*$', text, re.IGNORECASE):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3370": {
    "question_id": "mbpp/337",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3371": {
    "question_id": "mbpp/337",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3372": {
    "question_id": "mbpp/337",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3373": {
    "question_id": "mbpp/337",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3374": {
    "question_id": "mbpp/337",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3375": {
    "question_id": "mbpp/337",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3376": {
    "question_id": "mbpp/337",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3377": {
    "question_id": "mbpp/337",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3378": {
    "question_id": "mbpp/337",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3379": {
    "question_id": "mbpp/337",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3380": {
    "question_id": "mbpp/338",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Divisor(a, b):\n    if a > b:\n        return None\n    \n    divisor_counts = {}\n    \n    for num in range(a, b + 1):\n        for d in range(1, num + 1):\n            if num % d == 0:\n                if d in divisor_counts:\n                    divisor_counts[d] += 1\n                else:\n                    divisor_counts[d] = 1\n    \n    if not divisor_counts:\n        return None\n    \n    max_count = max(divisor_counts.values())\n    max_divisors = [d for d, count in divisor_counts.items() if count == max_count]\n    \n    return max(max_divisors)",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3381": {
    "question_id": "mbpp/338",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Divisor(start, end):\n    if start > end:\n        return None\n    if start == end:\n        return start\n    \n    divisor_counts = {}\n    \n    for num in range(start, end + 1):\n        for d in range(1, num + 1):\n            if num % d == 0:\n                if d in divisor_counts:\n                    divisor_counts[d] += 1\n                else:\n                    divisor_counts[d] = 1\n    \n    max_count = -1\n    max_divisor = None\n    \n    for d, count in divisor_counts.items():\n        if count > max_count or (count == max_count and d > max_divisor):\n            max_count = count\n            max_divisor = d\n    \n    return max_divisor",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3382": {
    "question_id": "mbpp/338",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Divisor(start, end):\n    if start > end:\n        return None\n    if start == end:\n        return start\n    \n    divisor_counts = {}\n    \n    for num in range(start, end + 1):\n        for i in range(1, num + 1):\n            if num % i == 0:\n                if i in divisor_counts:\n                    divisor_counts[i] += 1\n                else:\n                    divisor_counts[i] = 1\n    \n    max_count = -1\n    max_divisor = None\n    \n    for divisor, count in divisor_counts.items():\n        if count > max_count or (count == max_count and divisor > max_divisor):\n            max_count = count\n            max_divisor = divisor\n    \n    return max_divisor",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3383": {
    "question_id": "mbpp/338",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Divisor(a, b):\n    if a > b:\n        return None\n    \n    divisor_counts = {}\n    \n    for num in range(a, b + 1):\n        for i in range(1, num + 1):\n            if num % i == 0:\n                if i in divisor_counts:\n                    divisor_counts[i] += 1\n                else:\n                    divisor_counts[i] = 1\n    \n    if not divisor_counts:\n        return None\n    \n    max_count = max(divisor_counts.values())\n    max_divisors = [k for k, v in divisor_counts.items() if v == max_count]\n    \n    return max(max_divisors)",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3384": {
    "question_id": "mbpp/338",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Divisor(a, b):\n    if a > b:\n        return None\n    \n    divisor_counts = {}\n    \n    for num in range(a, b + 1):\n        for i in range(1, num + 1):\n            if num % i == 0:\n                if i in divisor_counts:\n                    divisor_counts[i] += 1\n                else:\n                    divisor_counts[i] = 1\n    \n    if not divisor_counts:\n        return None\n    \n    max_count = max(divisor_counts.values())\n    max_divisors = [k for k, v in divisor_counts.items() if v == max_count]\n    \n    return max(max_divisors)",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3385": {
    "question_id": "mbpp/338",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Divisor(a, b):\n    if a > b:\n        return None\n    \n    divisor_counts = {}\n    \n    for num in range(a, b + 1):\n        for i in range(1, num + 1):\n            if num % i == 0:\n                if i in divisor_counts:\n                    divisor_counts[i] += 1\n                else:\n                    divisor_counts[i] = 1\n    \n    if not divisor_counts:\n        return None\n    \n    max_count = max(divisor_counts.values())\n    max_divisors = [k for k, v in divisor_counts.items() if v == max_count]\n    \n    return max(max_divisors)",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3386": {
    "question_id": "mbpp/338",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Divisor(start, end):\n    if start > end:\n        return None\n    if start == end:\n        return start\n    \n    divisor_counts = {}\n    \n    for num in range(start, end + 1):\n        for d in range(1, num + 1):\n            if num % d == 0:\n                if d in divisor_counts:\n                    divisor_counts[d] += 1\n                else:\n                    divisor_counts[d] = 1\n    \n    max_count = -1\n    max_divisor = None\n    \n    for divisor, count in divisor_counts.items():\n        if count > max_count or (count == max_count and divisor > max_divisor):\n            max_count = count\n            max_divisor = divisor\n    \n    return max_divisor",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3387": {
    "question_id": "mbpp/338",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Divisor(a, b):\n    if a > b:\n        return None\n    \n    divisor_counts = {}\n    \n    for num in range(a, b + 1):\n        for i in range(1, num + 1):\n            if num % i == 0:\n                if i in divisor_counts:\n                    divisor_counts[i] += 1\n                else:\n                    divisor_counts[i] = 1\n    \n    if not divisor_counts:\n        return None\n    \n    max_count = max(divisor_counts.values())\n    max_divisors = [k for k, v in divisor_counts.items() if v == max_count]\n    \n    return max(max_divisors)",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3388": {
    "question_id": "mbpp/338",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Divisor(a, b):\n    if a > b:\n        return None\n    \n    divisor_counts = {}\n    \n    for num in range(a, b + 1):\n        for i in range(1, num + 1):\n            if num % i == 0:\n                if i in divisor_counts:\n                    divisor_counts[i] += 1\n                else:\n                    divisor_counts[i] = 1\n    \n    if not divisor_counts:\n        return None\n    \n    max_count = max(divisor_counts.values())\n    max_divisors = [k for k, v in divisor_counts.items() if v == max_count]\n    \n    return max(max_divisors)",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3389": {
    "question_id": "mbpp/338",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Divisor(a, b):\n    if a > b:\n        a, b = b, a\n    \n    max_count = 0\n    result = 1\n    \n    for num in range(a, b + 1):\n        if num == 0:\n            continue\n        for d in range(1, abs(num) + 1):\n            if num % d == 0:\n                divisor = d\n                count = 0\n                for n in range(a, b + 1):\n                    if n != 0 and n % divisor == 0:\n                        count += 1\n                if count > max_count or (count == max_count and divisor > result):\n                    max_count = count\n                    result = divisor\n    return result",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3390": {
    "question_id": "mbpp/339",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_three_smallest_nums(lst):\n    positive_numbers = [num for num in lst if num > 0]\n    if len(positive_numbers) < 3:\n        return sum(positive_numbers)\n    sorted_numbers = sorted(positive_numbers)\n    return sum(sorted_numbers[:3])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3391": {
    "question_id": "mbpp/339",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_three_smallest_nums(lst):\n    positive_numbers = [num for num in lst if num > 0]\n    if len(positive_numbers) < 3:\n        return sum(positive_numbers)\n    sorted_numbers = sorted(positive_numbers)\n    return sum(sorted_numbers[:3])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3392": {
    "question_id": "mbpp/339",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_three_smallest_nums(lst):\n    positive_numbers = [num for num in lst if num > 0]\n    if len(positive_numbers) < 3:\n        return sum(positive_numbers)\n    sorted_numbers = sorted(positive_numbers)\n    return sum(sorted_numbers[:3])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3393": {
    "question_id": "mbpp/339",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_three_smallest_nums(lst):\n    positive_numbers = [num for num in lst if num > 0]\n    if len(positive_numbers) < 3:\n        return sum(positive_numbers)\n    sorted_positives = sorted(positive_numbers)\n    return sum(sorted_positives[:3])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3394": {
    "question_id": "mbpp/339",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_three_smallest_nums(lst):\n    positive_numbers = [num for num in lst if num > 0]\n    if len(positive_numbers) < 3:\n        return sum(positive_numbers)\n    sorted_positive = sorted(positive_numbers)\n    return sum(sorted_positive[:3])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3395": {
    "question_id": "mbpp/339",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_three_smallest_nums(lst):\n    positive_numbers = [num for num in lst if num > 0]\n    if len(positive_numbers) < 3:\n        return sum(positive_numbers)\n    positive_numbers.sort()\n    return sum(positive_numbers[:3])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3396": {
    "question_id": "mbpp/339",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_three_smallest_nums(lst):\n    positive_nums = [num for num in lst if num > 0]\n    if len(positive_nums) < 3:\n        return sum(positive_nums)\n    positive_nums.sort()\n    return sum(positive_nums[:3])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3397": {
    "question_id": "mbpp/339",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_three_smallest_nums(lst):\n    positive_numbers = [num for num in lst if num > 0]\n    if len(positive_numbers) < 3:\n        return sum(positive_numbers)\n    sorted_numbers = sorted(positive_numbers)\n    return sum(sorted_numbers[:3])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3398": {
    "question_id": "mbpp/339",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_three_smallest_nums(lst):\n    positive_numbers = [num for num in lst if num > 0]\n    if len(positive_numbers) < 3:\n        return sum(positive_numbers)\n    positive_numbers.sort()\n    return sum(positive_numbers[:3])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3399": {
    "question_id": "mbpp/339",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_three_smallest_nums(lst):\n    positive_numbers = [num for num in lst if num > 0]\n    if len(positive_numbers) < 3:\n        return sum(positive_numbers)\n    sorted_numbers = sorted(positive_numbers)\n    return sum(sorted_numbers[:3])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3400": {
    "question_id": "mbpp/340",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_to_tuple(s):\n    return tuple(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3401": {
    "question_id": "mbpp/340",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_to_tuple(s):\n    return tuple(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3402": {
    "question_id": "mbpp/340",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_to_tuple(s):\n    return tuple(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3403": {
    "question_id": "mbpp/340",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_to_tuple(s):\n    return tuple(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3404": {
    "question_id": "mbpp/340",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_to_tuple(s):\n    return tuple(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3405": {
    "question_id": "mbpp/340",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_to_tuple(s):\n    return tuple(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3406": {
    "question_id": "mbpp/340",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_to_tuple(s):\n    return tuple(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3407": {
    "question_id": "mbpp/340",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_to_tuple(s):\n    return tuple(sorted(s)) if s else ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3408": {
    "question_id": "mbpp/340",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_to_tuple(s):\n    return tuple(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3409": {
    "question_id": "mbpp/340",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_to_tuple(s):\n    return tuple(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3410": {
    "question_id": "mbpp/341",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef find_minimum_range(arrays):\n    if not arrays:\n        return (0, 0)\n    \n    min_heap = []\n    current_max = -float('inf')\n    pointers = [0] * len(arrays)\n    \n    # Initialize the heap with the first element of each array\n    for i in range(len(arrays)):\n        if not arrays[i]:\n            return (0, 0)\n        heapq.heappush(min_heap, (arrays[i][0], i))\n        current_max = max(current_max, arrays[i][0])\n    \n    min_range = (-float('inf'), float('inf'))\n    \n    while True:\n        current_min, array_idx = heapq.heappop(min_heap)\n        \n        # Update the minimum range if current range is smaller\n        if current_max - current_min < min_range[1] - min_range[0]:\n            min_range = (current_min, current_max)\n        \n        # Move the pointer of the array that had the min element\n        pointers[array_idx] += 1\n        \n        # If any array is exhausted, break the loop\n        if pointers[array_idx] >= len(arrays[array_idx]):\n            break\n        \n        # Push the next element from the same array into the heap\n        next_element = arrays[array_idx][pointers[array_idx]]\n        heapq.heappush(min_heap, (next_element, array_idx))\n        current_max = max(current_max, next_element)\n    \n    return min_range",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3411": {
    "question_id": "mbpp/341",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef find_minimum_range(arrays):\n    if not arrays:\n        return (0, 0)\n    \n    min_heap = []\n    current_max = -float('inf')\n    pointers = [0] * len(arrays)\n    \n    # Initialize the heap with the first element of each array\n    for i in range(len(arrays)):\n        if not arrays[i]:\n            return (0, 0)\n        heapq.heappush(min_heap, (arrays[i][0], i))\n        current_max = max(current_max, arrays[i][0])\n    \n    min_range = -float('inf'), float('inf')\n    \n    while True:\n        current_min, array_idx = heapq.heappop(min_heap)\n        if current_max - current_min < min_range[1] - min_range[0]:\n            min_range = (current_min, current_max)\n        \n        # Move the pointer of the array that had the min element\n        pointers[array_idx] += 1\n        if pointers[array_idx] == len(arrays[array_idx]):\n            break\n        \n        next_element = arrays[array_idx][pointers[array_idx]]\n        heapq.heappush(min_heap, (next_element, array_idx))\n        current_max = max(current_max, next_element)\n    \n    return min_range",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3412": {
    "question_id": "mbpp/341",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef find_minimum_range(arrays):\n    if not arrays:\n        return (0, 0)\n    \n    min_heap = []\n    current_max = -float('inf')\n    pointers = [0] * len(arrays)\n    \n    # Initialize the heap with the first element of each array\n    for i in range(len(arrays)):\n        if not arrays[i]:\n            return (0, 0)\n        heapq.heappush(min_heap, (arrays[i][0], i))\n        current_max = max(current_max, arrays[i][0])\n    \n    min_range = -float('inf'), float('inf')\n    \n    while True:\n        current_min, array_idx = heapq.heappop(min_heap)\n        if current_max - current_min < min_range[1] - min_range[0]:\n            min_range = (current_min, current_max)\n        \n        pointers[array_idx] += 1\n        if pointers[array_idx] >= len(arrays[array_idx]):\n            break\n        \n        next_val = arrays[array_idx][pointers[array_idx]]\n        heapq.heappush(min_heap, (next_val, array_idx))\n        current_max = max(current_max, next_val)\n    \n    return min_range",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3413": {
    "question_id": "mbpp/341",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef find_minimum_range(arrays):\n    if not arrays:\n        return (0, 0)\n    \n    min_heap = []\n    current_max = -float('inf')\n    range_start = -float('inf')\n    range_end = float('inf')\n    \n    # Initialize the heap with the first element of each array\n    for i in range(len(arrays)):\n        if not arrays[i]:\n            return (0, 0)\n        first_element = arrays[i][0]\n        heapq.heappush(min_heap, (first_element, i, 0))\n        current_max = max(current_max, first_element)\n    \n    while True:\n        current_min, arr_idx, elem_idx = heapq.heappop(min_heap)\n        \n        # Update the smallest range\n        if current_max - current_min < range_end - range_start:\n            range_start = current_min\n            range_end = current_max\n        \n        # Move to the next element in the array\n        next_elem_idx = elem_idx + 1\n        if next_elem_idx >= len(arrays[arr_idx]):\n            break\n        \n        next_element = arrays[arr_idx][next_elem_idx]\n        heapq.heappush(min_heap, (next_element, arr_idx, next_elem_idx))\n        current_max = max(current_max, next_element)\n    \n    return (range_start, range_end)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3414": {
    "question_id": "mbpp/341",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef find_minimum_range(arrays):\n    if not arrays:\n        return (0, 0)\n    \n    min_heap = []\n    current_max = -float('inf')\n    pointers = [0] * len(arrays)\n    \n    # Initialize the heap with the first element of each array\n    for i in range(len(arrays)):\n        if not arrays[i]:\n            return (0, 0)\n        heapq.heappush(min_heap, (arrays[i][0], i))\n        current_max = max(current_max, arrays[i][0])\n    \n    min_range = -float('inf'), float('inf')\n    \n    while True:\n        current_min, array_idx = heapq.heappop(min_heap)\n        if current_max - current_min < min_range[1] - min_range[0]:\n            min_range = (current_min, current_max)\n        \n        # Move the pointer of the array from which the min was taken\n        pointers[array_idx] += 1\n        if pointers[array_idx] >= len(arrays[array_idx]):\n            break\n        \n        next_val = arrays[array_idx][pointers[array_idx]]\n        heapq.heappush(min_heap, (next_val, array_idx))\n        current_max = max(current_max, next_val)\n    \n    return min_range",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3415": {
    "question_id": "mbpp/341",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef find_minimum_range(arrays):\n    if not arrays:\n        return (0, 0)\n    \n    min_heap = []\n    current_max = -float('inf')\n    range_start = -float('inf')\n    range_end = float('inf')\n    \n    # Initialize the heap with the first element of each array\n    for i in range(len(arrays)):\n        if not arrays[i]:\n            return (0, 0)\n        first_element = arrays[i][0]\n        heapq.heappush(min_heap, (first_element, i, 0))\n        current_max = max(current_max, first_element)\n    \n    while True:\n        current_min, arr_idx, elem_idx = heapq.heappop(min_heap)\n        \n        # Update the smallest range\n        if current_max - current_min < range_end - range_start:\n            range_start = current_min\n            range_end = current_max\n        \n        # Move to the next element in the array\n        next_elem_idx = elem_idx + 1\n        if next_elem_idx >= len(arrays[arr_idx]):\n            break\n        \n        next_element = arrays[arr_idx][next_elem_idx]\n        heapq.heappush(min_heap, (next_element, arr_idx, next_elem_idx))\n        current_max = max(current_max, next_element)\n    \n    return (range_start, range_end)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3416": {
    "question_id": "mbpp/341",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef find_minimum_range(arrays):\n    if not arrays:\n        return (0, 0)\n    \n    min_heap = []\n    current_max = -float('inf')\n    pointers = [0] * len(arrays)\n    \n    # Initialize the heap with the first element of each array\n    for i in range(len(arrays)):\n        if not arrays[i]:\n            return (0, 0)\n        heapq.heappush(min_heap, (arrays[i][0], i))\n        current_max = max(current_max, arrays[i][0])\n    \n    min_range = (-float('inf'), float('inf'))\n    \n    while True:\n        current_min, array_idx = heapq.heappop(min_heap)\n        if current_max - current_min < min_range[1] - min_range[0]:\n            min_range = (current_min, current_max)\n        \n        # Move the pointer of the array that had the min element\n        pointers[array_idx] += 1\n        if pointers[array_idx] >= len(arrays[array_idx]):\n            break\n        \n        next_element = arrays[array_idx][pointers[array_idx]]\n        heapq.heappush(min_heap, (next_element, array_idx))\n        current_max = max(current_max, next_element)\n    \n    return min_range",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3417": {
    "question_id": "mbpp/341",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef find_minimum_range(arrays):\n    if not arrays:\n        return (0, 0)\n    \n    min_heap = []\n    current_max = -float('inf')\n    pointers = [0] * len(arrays)\n    \n    # Initialize the heap with the first element of each array\n    for i in range(len(arrays)):\n        if not arrays[i]:\n            return (0, 0)\n        heapq.heappush(min_heap, (arrays[i][0], i))\n        current_max = max(current_max, arrays[i][0])\n    \n    min_range = -float('inf'), float('inf')\n    \n    while True:\n        current_min, array_idx = heapq.heappop(min_heap)\n        \n        # Update the minimum range\n        if current_max - current_min < min_range[1] - min_range[0]:\n            min_range = (current_min, current_max)\n        \n        # Move the pointer of the array from which the min was taken\n        pointers[array_idx] += 1\n        if pointers[array_idx] == len(arrays[array_idx]):\n            break\n        \n        next_val = arrays[array_idx][pointers[array_idx]]\n        heapq.heappush(min_heap, (next_val, array_idx))\n        current_max = max(current_max, next_val)\n    \n    return min_range",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3418": {
    "question_id": "mbpp/341",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef find_minimum_range(arrays):\n    min_heap = []\n    max_val = -float('inf')\n    range_start = -1\n    range_end = -1\n    min_range = float('inf')\n    \n    # Initialize the heap with the first element of each array\n    for i in range(len(arrays)):\n        if len(arrays[i]) == 0:\n            return (0, 0)\n        heapq.heappush(min_heap, (arrays[i][0], i, 0))\n        max_val = max(max_val, arrays[i][0])\n    \n    # Merge the arrays\n    while True:\n        min_val, arr_idx, elem_idx = heapq.heappop(min_heap)\n        current_range = max_val - min_val\n        if current_range < min_range:\n            min_range = current_range\n            range_start = min_val\n            range_end = max_val\n        \n        # Move to the next element in the array\n        if elem_idx + 1 >= len(arrays[arr_idx]):\n            break\n        next_val = arrays[arr_idx][elem_idx + 1]\n        heapq.heappush(min_heap, (next_val, arr_idx, elem_idx + 1))\n        max_val = max(max_val, next_val)\n    \n    return (range_start, range_end)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3419": {
    "question_id": "mbpp/341",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef find_minimum_range(arrays):\n    if not arrays:\n        return (0, 0)\n    \n    min_heap = []\n    current_max = -float('inf')\n    pointers = [0] * len(arrays)\n    \n    # Initialize the heap with the first element of each array\n    for i in range(len(arrays)):\n        if not arrays[i]:\n            return (0, 0)\n        heapq.heappush(min_heap, (arrays[i][0], i))\n        current_max = max(current_max, arrays[i][0])\n    \n    min_range = -float('inf'), float('inf')\n    \n    while True:\n        current_min, array_idx = heapq.heappop(min_heap)\n        current_range = current_max - current_min\n        \n        if current_range < (min_range[1] - min_range[0]):\n            min_range = (current_min, current_max)\n        \n        pointers[array_idx] += 1\n        if pointers[array_idx] >= len(arrays[array_idx]):\n            break\n        \n        next_val = arrays[array_idx][pointers[array_idx]]\n        heapq.heappush(min_heap, (next_val, array_idx))\n        current_max = max(current_max, next_val)\n    \n    return min_range",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3420": {
    "question_id": "mbpp/342",
    "model": "deepseek-v3-250324",
    "generation_code": "def dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (letters, digits)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3421": {
    "question_id": "mbpp/342",
    "model": "deepseek-v3-250324",
    "generation_code": "def dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (letters, digits)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3422": {
    "question_id": "mbpp/342",
    "model": "deepseek-v3-250324",
    "generation_code": "def dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (letters, digits)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3423": {
    "question_id": "mbpp/342",
    "model": "deepseek-v3-250324",
    "generation_code": "def dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (letters, digits)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3424": {
    "question_id": "mbpp/342",
    "model": "deepseek-v3-250324",
    "generation_code": "def dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (letters, digits)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3425": {
    "question_id": "mbpp/342",
    "model": "deepseek-v3-250324",
    "generation_code": "def dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (letters, digits)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3426": {
    "question_id": "mbpp/342",
    "model": "deepseek-v3-250324",
    "generation_code": "def dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (letters, digits)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3427": {
    "question_id": "mbpp/342",
    "model": "deepseek-v3-250324",
    "generation_code": "def dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (letters, digits)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3428": {
    "question_id": "mbpp/342",
    "model": "deepseek-v3-250324",
    "generation_code": "def dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (letters, digits)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3429": {
    "question_id": "mbpp/342",
    "model": "deepseek-v3-250324",
    "generation_code": "def dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (letters, digits)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3430": {
    "question_id": "mbpp/343",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Odd_Squares(l, r):\n    lower = math.ceil(math.sqrt(l))\n    upper = math.floor(math.sqrt(r))\n    return upper - lower + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3431": {
    "question_id": "mbpp/343",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Odd_Squares(start, end):\n    lower = math.ceil(math.sqrt(start))\n    upper = math.floor(math.sqrt(end))\n    return upper - lower + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3432": {
    "question_id": "mbpp/343",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Odd_Squares(l, r):\n    lower = math.ceil(math.sqrt(l))\n    upper = math.floor(math.sqrt(r))\n    return upper - lower + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3433": {
    "question_id": "mbpp/343",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Odd_Squares(start, end):\n    lower = math.ceil(math.sqrt(start))\n    upper = math.floor(math.sqrt(end))\n    return upper - lower + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3434": {
    "question_id": "mbpp/343",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Odd_Squares(start, end):\n    lower = math.ceil(math.sqrt(start))\n    upper = math.floor(math.sqrt(end))\n    return max(0, upper - lower + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3435": {
    "question_id": "mbpp/343",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Odd_Squares(l, r):\n    lower = math.ceil(math.sqrt(l))\n    upper = math.floor(math.sqrt(r))\n    return max(0, upper - lower + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3436": {
    "question_id": "mbpp/343",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Odd_Squares(start, end):\n    lower = math.ceil(math.sqrt(start))\n    upper = math.floor(math.sqrt(end))\n    return upper - lower + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3437": {
    "question_id": "mbpp/343",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Odd_Squares(l, r):\n    lower = math.ceil(math.sqrt(l))\n    upper = math.floor(math.sqrt(r))\n    return upper - lower + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3438": {
    "question_id": "mbpp/343",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Odd_Squares(l, r):\n    lower = math.ceil(math.sqrt(l))\n    upper = math.floor(math.sqrt(r))\n    return upper - lower + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3439": {
    "question_id": "mbpp/343",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Odd_Squares(l, r):\n    lower = math.ceil(math.sqrt(l))\n    upper = math.floor(math.sqrt(r))\n    return upper - lower + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3440": {
    "question_id": "mbpp/344",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3441": {
    "question_id": "mbpp/344",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3442": {
    "question_id": "mbpp/344",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3443": {
    "question_id": "mbpp/344",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3444": {
    "question_id": "mbpp/344",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3445": {
    "question_id": "mbpp/344",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3446": {
    "question_id": "mbpp/344",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3447": {
    "question_id": "mbpp/344",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3448": {
    "question_id": "mbpp/344",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3449": {
    "question_id": "mbpp/344",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3450": {
    "question_id": "mbpp/345",
    "model": "deepseek-v3-250324",
    "generation_code": "def entringer(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    if k > n:\n        return 0\n    return entringer(n, k-1) + entringer(n-1, n-k)",
    "test_output": "FAILED: NameError: name 'zigzag' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 276, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'zigzag' is not defined\n",
    "test_result": "False"
  },
  "3451": {
    "question_id": "mbpp/345",
    "model": "deepseek-v3-250324",
    "generation_code": "def zigzag(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k < 0 or k > n:\n        return 0\n    return zigzag(n, k-1) + zigzag(n-1, n-k)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3452": {
    "question_id": "mbpp/345",
    "model": "deepseek-v3-250324",
    "generation_code": "def zigzag(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    if k > n:\n        return 0\n    return zigzag(n, k-1) + zigzag(n-1, n-k)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3453": {
    "question_id": "mbpp/345",
    "model": "deepseek-v3-250324",
    "generation_code": "def zigzag(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    if k == n:\n        return zigzag(n, n-1)\n    return zigzag(n, k-1) + zigzag(n-1, n-k)",
    "test_output": "FAILED: expect 5,in fact 0",
    "test_result": "False"
  },
  "3454": {
    "question_id": "mbpp/345",
    "model": "deepseek-v3-250324",
    "generation_code": "def zigzag(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    if k > n:\n        return 0\n    return zigzag(n, k-1) + zigzag(n-1, n-k)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3455": {
    "question_id": "mbpp/345",
    "model": "deepseek-v3-250324",
    "generation_code": "def zigzag(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    if k > n:\n        return 0\n    return zigzag(n, k-1) + zigzag(n-1, n-k)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3456": {
    "question_id": "mbpp/345",
    "model": "deepseek-v3-250324",
    "generation_code": "def entringer(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    if k > n:\n        return 0\n    return entringer(n, k-1) + entringer(n-1, n-k)",
    "test_output": "FAILED: NameError: name 'zigzag' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'zigzag' is not defined\n",
    "test_result": "False"
  },
  "3457": {
    "question_id": "mbpp/345",
    "model": "deepseek-v3-250324",
    "generation_code": "def zigzag(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    if k > n:\n        return 0\n    return zigzag(n, k-1) + zigzag(n-1, n-k)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3458": {
    "question_id": "mbpp/345",
    "model": "deepseek-v3-250324",
    "generation_code": "def zigzag(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    if k > n:\n        return 0\n    return zigzag(n, k-1) + zigzag(n-1, n-k)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3459": {
    "question_id": "mbpp/345",
    "model": "deepseek-v3-250324",
    "generation_code": "def zigzag(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    if k > n:\n        return 0\n    return zigzag(n, k-1) + zigzag(n-1, n-k)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3460": {
    "question_id": "mbpp/346",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(m, n):\n    if m <= 0 or n <= 0:\n        return 0\n    total = 0\n    min_dim = min(m, n)\n    for i in range(1, min_dim + 1):\n        total += (m - i + 1) * (n - i + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3461": {
    "question_id": "mbpp/346",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(n, m):\n    if n <= 0 or m <= 0:\n        return 0\n    total = 0\n    min_dim = min(n, m)\n    for k in range(1, min_dim + 1):\n        total += (n - k + 1) * (m - k + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3462": {
    "question_id": "mbpp/346",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(m, n):\n    total = 0\n    for i in range(1, min(m, n) + 1):\n        total += (m - i + 1) * (n - i + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3463": {
    "question_id": "mbpp/346",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(n, m):\n    if n == 0 or m == 0:\n        return 0\n    total = 0\n    min_dim = min(n, m)\n    for k in range(1, min_dim + 1):\n        total += (n - k + 1) * (m - k + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3464": {
    "question_id": "mbpp/346",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(n, m):\n    if n < 1 or m < 1:\n        return 0\n    total = 0\n    min_dim = min(n, m)\n    for i in range(1, min_dim + 1):\n        total += (n - i + 1) * (m - i + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3465": {
    "question_id": "mbpp/346",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(n, m):\n    if n <= 0 or m <= 0:\n        return 0\n    total = 0\n    min_dim = min(n, m)\n    for i in range(1, min_dim + 1):\n        total += (n - i + 1) * (m - i + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3466": {
    "question_id": "mbpp/346",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(a, b):\n    count = 0\n    while a > 0 and b > 0:\n        count += a * b\n        a -= 1\n        b -= 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3467": {
    "question_id": "mbpp/346",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(n, m):\n    if n == 0 or m == 0:\n        return 0\n    total = 0\n    min_dim = min(n, m)\n    for i in range(1, min_dim + 1):\n        total += (n - i + 1) * (m - i + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3468": {
    "question_id": "mbpp/346",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(n, m):\n    if n < 1 or m < 1:\n        return 0\n    total = 0\n    for k in range(1, min(n, m) + 1):\n        total += (n - k + 1) * (m - k + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3469": {
    "question_id": "mbpp/346",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Squares(n, m):\n    total = 0\n    min_dim = min(n, m)\n    for k in range(1, min_dim + 1):\n        total += (n - k + 1) * (m - k + 1)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3470": {
    "question_id": "mbpp/347",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_ways(n):\n    if n % 2 != 0:\n        return 0\n    from math import comb\n    return comb(n, n // 2) // (n // 2 + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3471": {
    "question_id": "mbpp/347",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_ways(n):\n    if n % 2 != 0:\n        return 0\n    from math import comb\n    return comb(n, n // 2) // (n // 2 + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3472": {
    "question_id": "mbpp/347",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_ways(n):\n    if n % 2 != 0:\n        return 0\n    from math import comb\n    return comb(n, n // 2) // (n // 2 + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3473": {
    "question_id": "mbpp/347",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_ways(n):\n    if n % 2 != 0:\n        return 0\n    if n == 0:\n        return 1\n    return find_ways(n - 2) * (n - 1) * 2 // (n // 2 + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3474": {
    "question_id": "mbpp/347",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_ways(n):\n    if n == 0:\n        return 1\n    if n % 2 != 0:\n        return 0\n    k = n // 2\n    numerator = 1\n    for i in range(1, 2*k + 1):\n        numerator *= i\n    denominator = 1\n    for i in range(1, k + 1):\n        denominator *= i\n    denominator_squared = denominator * denominator\n    ways = numerator // denominator_squared\n    return ways // (k + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3475": {
    "question_id": "mbpp/347",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_ways(n):\n    if n % 2 != 0:\n        return 0\n    from math import comb\n    return comb(n, n // 2) // (n // 2 + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3476": {
    "question_id": "mbpp/347",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_ways(n):\n    if n % 2 != 0:\n        return 0\n    from math import comb\n    return comb(n, n // 2) // (n // 2 + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3477": {
    "question_id": "mbpp/347",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_ways(n):\n    if n % 2 != 0:\n        return 0\n    from math import comb\n    return comb(n, n // 2) // (n // 2 + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3478": {
    "question_id": "mbpp/347",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_ways(n):\n    if n % 2 != 0:\n        return 0\n    from math import comb\n    return comb(n, n // 2) // (n // 2 + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3479": {
    "question_id": "mbpp/347",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_ways(n):\n    if n % 2 != 0:\n        return 0\n    from math import comb\n    return comb(n, n // 2) // (n // 2 + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3480": {
    "question_id": "mbpp/348",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    if all(c in '01' for c in s):\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3481": {
    "question_id": "mbpp/348",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    if not s:\n        return \"No\"\n    for char in s:\n        if char not in {'0', '1'}:\n            return \"No\"\n    return \"Yes\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3482": {
    "question_id": "mbpp/348",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    if not s:\n        return \"No\"\n    for char in s:\n        if char not in {'0', '1'}:\n            return \"No\"\n    return \"Yes\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3483": {
    "question_id": "mbpp/348",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    if not s:\n        return \"No\"\n    for char in s:\n        if char not in {'0', '1'}:\n            return \"No\"\n    return \"Yes\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3484": {
    "question_id": "mbpp/348",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    if not s:\n        return \"No\"\n    for char in s:\n        if char not in {'0', '1'}:\n            return \"No\"\n    return \"Yes\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3485": {
    "question_id": "mbpp/348",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    if not s:\n        return \"No\"\n    for char in s:\n        if char not in {'0', '1'}:\n            return \"No\"\n    return \"Yes\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3486": {
    "question_id": "mbpp/348",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    if not s:\n        return \"No\"\n    for char in s:\n        if char not in {'0', '1'}:\n            return \"No\"\n    return \"Yes\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3487": {
    "question_id": "mbpp/348",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    if all(c in '01' for c in s):\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3488": {
    "question_id": "mbpp/348",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    if all(c in '01' for c in s):\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3489": {
    "question_id": "mbpp/348",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(string):\n    if not string:\n        return \"No\"\n    for char in string:\n        if char not in {'0', '1'}:\n            return \"No\"\n    return \"Yes\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3490": {
    "question_id": "mbpp/349",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum_Length(s):\n    if not s:\n        return 0\n    min_len = len(s)\n    for char in set(s):\n        new_s = s.replace(char, '')\n        current_len = len(new_s)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3491": {
    "question_id": "mbpp/349",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum_Length(s):\n    if not s:\n        return 0\n    min_len = len(s)\n    for c in set(s):\n        temp = s.replace(c, '')\n        current_len = len(temp)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3492": {
    "question_id": "mbpp/349",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum_Length(s):\n    if not s:\n        return 0\n    min_len = len(s)\n    for c in set(s):\n        new_s = s.replace(c, '')\n        current_len = len(new_s)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3493": {
    "question_id": "mbpp/349",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum_Length(s):\n    if not s:\n        return 0\n    min_len = len(s)\n    for c in set(s):\n        current = s.replace(c, '')\n        if len(current) < min_len:\n            min_len = len(current)\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3494": {
    "question_id": "mbpp/349",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum_Length(s):\n    if not s:\n        return 0\n    min_len = len(s)\n    for c in set(s):\n        new_s = s.replace(c, '')\n        current_len = len(new_s)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3495": {
    "question_id": "mbpp/349",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum_Length(s):\n    if not s:\n        return 0\n    min_len = len(s)\n    for c in set(s):\n        new_s = s.replace(c, '')\n        current_len = len(new_s)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3496": {
    "question_id": "mbpp/349",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum_Length(s):\n    if not s:\n        return 0\n    min_len = len(s)\n    for c in set(s):\n        new_s = s.replace(c, '')\n        current_len = len(new_s)\n        if current_len < min_len:\n            min_len = current_len\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3497": {
    "question_id": "mbpp/349",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum_Length(s):\n    if not s:\n        return 0\n    min_len = len(s)\n    for char in set(s):\n        temp = s.replace(char, '')\n        if len(temp) < min_len:\n            min_len = len(temp)\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3498": {
    "question_id": "mbpp/349",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum_Length(s):\n    if not s:\n        return 0\n    min_len = len(s)\n    for c in set(s):\n        current = s.replace(c, '')\n        if len(current) < min_len:\n            min_len = len(current)\n    return min_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3499": {
    "question_id": "mbpp/349",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum_Length(s):\n    if not s:\n        return 0\n    left = 0\n    right = len(s) - 1\n    while left < right and s[left] == s[right]:\n        char = s[left]\n        while left <= right and s[left] == char:\n            left += 1\n        while left <= right and s[right] == char:\n            right -= 1\n    return right - left + 1",
    "test_output": "FAILED: expect 2,in fact 4",
    "test_result": "False"
  },
  "3500": {
    "question_id": "mbpp/350",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Element(arr, n, k):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n        if frequency[num] == k:\n            return num\n    return -1",
    "test_output": "FAILED: expect 2,in fact 3",
    "test_result": "False"
  },
  "3501": {
    "question_id": "mbpp/350",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Element(arr, n, k):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n        if frequency[num] == k:\n            return num\n    return -1",
    "test_output": "FAILED: expect 2,in fact 3",
    "test_result": "False"
  },
  "3502": {
    "question_id": "mbpp/350",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Element(arr, n, k):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    for num in arr:\n        if frequency[num] == k:\n            return num\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3503": {
    "question_id": "mbpp/350",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Element(arr, n, k):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    for num in arr:\n        if frequency[num] == k:\n            return num\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3504": {
    "question_id": "mbpp/350",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Element(arr, n, k):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    for num in arr:\n        if frequency[num] == k:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3505": {
    "question_id": "mbpp/350",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Element(arr, n, k):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    for num in arr:\n        if frequency[num] == k:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3506": {
    "question_id": "mbpp/350",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Element(arr, n, k):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    for num in arr:\n        if frequency[num] == k:\n            return num\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3507": {
    "question_id": "mbpp/350",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Element(arr, n, k):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n        if frequency[num] == k:\n            return num\n    return -1",
    "test_output": "FAILED: expect 2,in fact 3",
    "test_result": "False"
  },
  "3508": {
    "question_id": "mbpp/350",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Element(arr, n, k):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    for num in arr:\n        if frequency[num] == k:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3509": {
    "question_id": "mbpp/350",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Element(arr, n, k):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n        if frequency[num] == k:\n            return num\n    return -1",
    "test_output": "FAILED: expect 2,in fact 3",
    "test_result": "False"
  },
  "3510": {
    "question_id": "mbpp/351",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Characters(s):\n    return len(set(s)) == len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3511": {
    "question_id": "mbpp/351",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Characters(s):\n    return len(set(s)) == len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3512": {
    "question_id": "mbpp/351",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Characters(s):\n    return len(set(s)) == len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3513": {
    "question_id": "mbpp/351",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Characters(s):\n    return len(set(s)) == len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3514": {
    "question_id": "mbpp/351",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Characters(s):\n    return len(set(s)) == len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3515": {
    "question_id": "mbpp/351",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Characters(s):\n    return len(set(s)) == len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3516": {
    "question_id": "mbpp/351",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Characters(s):\n    return len(set(s)) == len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3517": {
    "question_id": "mbpp/351",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Characters(s):\n    return len(set(s)) == len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3518": {
    "question_id": "mbpp/351",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Characters(s):\n    return len(set(s)) == len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3519": {
    "question_id": "mbpp/351",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Characters(s):\n    return len(set(s)) == len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3520": {
    "question_id": "mbpp/352",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_column(matrix, col):\n    return [row[:col] + row[col+1:] for row in matrix]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3521": {
    "question_id": "mbpp/352",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_column(matrix, col):\n    return [row[:col] + row[col+1:] for row in matrix]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3522": {
    "question_id": "mbpp/352",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_column(matrix, col):\n    if not matrix or col < 0 or col >= len(matrix[0]):\n        return matrix\n    return [row[:col] + row[col+1:] for row in matrix]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3523": {
    "question_id": "mbpp/352",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_column(lst, col):\n    return [row[:col] + row[col+1:] for row in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3524": {
    "question_id": "mbpp/352",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_column(matrix, col):\n    return [row[:col] + row[col+1:] for row in matrix]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3525": {
    "question_id": "mbpp/352",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_column(matrix, col):\n    return [row[:col] + row[col+1:] for row in matrix]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3526": {
    "question_id": "mbpp/352",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_column(matrix, col):\n    if not matrix or col < 0 or col >= len(matrix[0]):\n        return []\n    return [row[:col] + row[col+1:] for row in matrix]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3527": {
    "question_id": "mbpp/352",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_column(list1, n):\n    return [row[:n] + row[n+1:] for row in list1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3528": {
    "question_id": "mbpp/352",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_column(matrix, col):\n    return [row[:col] + row[col+1:] for row in matrix]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3529": {
    "question_id": "mbpp/352",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_column(matrix, col):\n    if not matrix or col < 0 or col >= len(matrix[0]):\n        return matrix\n    return [row[:col] + row[col+1:] for row in matrix]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3530": {
    "question_id": "mbpp/353",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_ap(a, d, n):\n    return a + (n - 1) * d",
    "test_output": "FAILED: expect 9,in fact 6",
    "test_result": "False"
  },
  "3531": {
    "question_id": "mbpp/353",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_ap(a, d, n):\n    return a + (n - 1) * d",
    "test_output": "FAILED: expect 9,in fact 6",
    "test_result": "False"
  },
  "3532": {
    "question_id": "mbpp/353",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_ap(a, d, n):\n    return a + (n - 1) * d",
    "test_output": "FAILED: expect 9,in fact 6",
    "test_result": "False"
  },
  "3533": {
    "question_id": "mbpp/353",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_ap(a1, d, n):\n    return a1 + (n - 1) * d",
    "test_output": "FAILED: expect 9,in fact 6",
    "test_result": "False"
  },
  "3534": {
    "question_id": "mbpp/353",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_ap(a, d, n):\n    return a + (n - 1) * d",
    "test_output": "FAILED: expect 9,in fact 6",
    "test_result": "False"
  },
  "3535": {
    "question_id": "mbpp/353",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_ap(a, d, n):\n    return a + (n - 1) * d",
    "test_output": "FAILED: expect 9,in fact 6",
    "test_result": "False"
  },
  "3536": {
    "question_id": "mbpp/353",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_ap(a, d, n):\n    return a + (n - 1) * d",
    "test_output": "FAILED: expect 9,in fact 6",
    "test_result": "False"
  },
  "3537": {
    "question_id": "mbpp/353",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_ap(a, d, n):\n    return a + (n - 1) * d",
    "test_output": "FAILED: expect 9,in fact 6",
    "test_result": "False"
  },
  "3538": {
    "question_id": "mbpp/353",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_ap(a, d, n):\n    return a + (n - 1) * d",
    "test_output": "FAILED: expect 9,in fact 6",
    "test_result": "False"
  },
  "3539": {
    "question_id": "mbpp/353",
    "model": "deepseek-v3-250324",
    "generation_code": "def tn_ap(a, d, n):\n    return a + (n - 1) * d",
    "test_output": "FAILED: expect 9,in fact 6",
    "test_result": "False"
  },
  "3540": {
    "question_id": "mbpp/354",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Rectangles(r):\n    count = 0\n    for a in range(1, 2 * r + 1):\n        for b in range(1, 2 * r + 1):\n            if (a * a + b * b) <= (4 * r * r):\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3541": {
    "question_id": "mbpp/354",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Rectangles(r):\n    count = 0\n    for a in range(1, 2 * r + 1):\n        for b in range(1, 2 * r + 1):\n            if a * a + b * b <= 4 * r * r:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3542": {
    "question_id": "mbpp/354",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Rectangles(r):\n    count = 0\n    for a in range(1, 2 * r + 1):\n        for b in range(1, 2 * r + 1):\n            diagonal = math.sqrt(a**2 + b**2)\n            if diagonal <= 2 * r:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3543": {
    "question_id": "mbpp/354",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Rectangles(r):\n    count = 0\n    for a in range(1, 2 * r + 1):\n        for b in range(1, 2 * r + 1):\n            diagonal = math.sqrt(a**2 + b**2)\n            if diagonal <= 2 * r:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3544": {
    "question_id": "mbpp/354",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Rectangles(r):\n    count = 0\n    r_squared = r * r\n    for x1 in range(1, r + 1):\n        for y1 in range(1, r + 1):\n            if x1 * x1 + y1 * y1 > r_squared:\n                continue\n            for x2 in range(x1 + 1, r + 1):\n                for y2 in range(y1 + 1, r + 1):\n                    if x2 * x2 + y2 * y2 <= r_squared:\n                        count += 1\n    return count",
    "test_output": "FAILED: expect 8,in fact 0",
    "test_result": "False"
  },
  "3545": {
    "question_id": "mbpp/354",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Rectangles(r):\n    count = 0\n    for a in range(1, 2 * r + 1):\n        for b in range(1, 2 * r + 1):\n            diagonal = math.sqrt(a**2 + b**2)\n            if diagonal <= 2 * r:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3546": {
    "question_id": "mbpp/354",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Rectangles(r):\n    count = 0\n    for a in range(1, 2 * r + 1):\n        for b in range(1, 2 * r + 1):\n            if (a * a + b * b) <= (4 * r * r):\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3547": {
    "question_id": "mbpp/354",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Rectangles(r):\n    count = 0\n    for a in range(1, 2 * r + 1):\n        for b in range(1, 2 * r + 1):\n            if (a/2)**2 + (b/2)**2 <= r**2:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3548": {
    "question_id": "mbpp/354",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Rectangles(r):\n    count = 0\n    diameter = 2 * r\n    for a in range(1, diameter + 1):\n        for b in range(1, diameter + 1):\n            if a * a + b * b <= diameter * diameter:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3549": {
    "question_id": "mbpp/354",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Rectangles(r):\n    count = 0\n    diameter = 2 * r\n    for a in range(1, diameter + 1):\n        for b in range(1, diameter + 1):\n            if a * a + b * b <= diameter * diameter:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3550": {
    "question_id": "mbpp/355",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3551": {
    "question_id": "mbpp/355",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_angle(a, b):\n    return 180 - a - b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3552": {
    "question_id": "mbpp/355",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_angle(a, b):\n    return 180 - a - b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3553": {
    "question_id": "mbpp/355",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_angle(a, b):\n    return 180 - a - b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3554": {
    "question_id": "mbpp/355",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3555": {
    "question_id": "mbpp/355",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_angle(a, b):\n    return 180 - a - b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3556": {
    "question_id": "mbpp/355",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_angle(a, b):\n    return 180 - a - b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3557": {
    "question_id": "mbpp/355",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3558": {
    "question_id": "mbpp/355",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_angle(a, b):\n    return 180 - a - b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3559": {
    "question_id": "mbpp/355",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3560": {
    "question_id": "mbpp/356",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max(tuples_list):\n    if not tuples_list:\n        return None\n    max_element = float('-inf')\n    for t in tuples_list:\n        current_max = max(t)\n        if current_max > max_element:\n            max_element = current_max\n    return max_element",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3561": {
    "question_id": "mbpp/356",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max(tuples_list):\n    if not tuples_list:\n        return None\n    max_val = float('-inf')\n    for t in tuples_list:\n        current_max = max(t)\n        if current_max > max_val:\n            max_val = current_max\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3562": {
    "question_id": "mbpp/356",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max(tuples_list):\n    if not tuples_list:\n        return None\n    max_element = tuples_list[0][0]\n    for t in tuples_list:\n        current_max = max(t)\n        if current_max > max_element:\n            max_element = current_max\n    return max_element",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3563": {
    "question_id": "mbpp/356",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max(tuples_list):\n    if not tuples_list:\n        return None\n    max_val = tuples_list[0][0]\n    for t in tuples_list:\n        current_max = max(t)\n        if current_max > max_val:\n            max_val = current_max\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3564": {
    "question_id": "mbpp/356",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max(records):\n    if not records:\n        return None\n    max_val = records[0][0]\n    for tup in records:\n        current_max = max(tup)\n        if current_max > max_val:\n            max_val = current_max\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3565": {
    "question_id": "mbpp/356",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max(tuples_list):\n    if not tuples_list:\n        return None\n    max_val = float('-inf')\n    for t in tuples_list:\n        current_max = max(t)\n        if current_max > max_val:\n            max_val = current_max\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3566": {
    "question_id": "mbpp/356",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max(tuples_list):\n    if not tuples_list:\n        return None\n    max_val = float('-inf')\n    for tup in tuples_list:\n        current_max = max(tup)\n        if current_max > max_val:\n            max_val = current_max\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3567": {
    "question_id": "mbpp/356",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max(tuples):\n    if not tuples:\n        return None\n    max_val = tuples[0][0]\n    for t in tuples:\n        current_max = max(t)\n        if current_max > max_val:\n            max_val = current_max\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3568": {
    "question_id": "mbpp/356",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max(tuples_list):\n    if not tuples_list:\n        return None\n    max_element = tuples_list[0][0]\n    for t in tuples_list:\n        current_max = max(t)\n        if current_max > max_element:\n            max_element = current_max\n    return max_element",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3569": {
    "question_id": "mbpp/356",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max(records):\n    if not records:\n        return None\n    max_val = records[0][0]\n    for tup in records:\n        current_max = max(tup)\n        if current_max > max_val:\n            max_val = current_max\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3570": {
    "question_id": "mbpp/357",
    "model": "deepseek-v3-250324",
    "generation_code": "moddiv_list = lambda x, y: list(map(lambda a, b: a % b if b != 0 else None, x, y))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3571": {
    "question_id": "mbpp/357",
    "model": "deepseek-v3-250324",
    "generation_code": "moddiv_list = lambda x, y: list(map(lambda a, b: a % b, x, y))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3572": {
    "question_id": "mbpp/357",
    "model": "deepseek-v3-250324",
    "generation_code": "moddiv_list = lambda x, y: list(map(lambda a, b: a % b if b != 0 else None, x, y))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3573": {
    "question_id": "mbpp/357",
    "model": "deepseek-v3-250324",
    "generation_code": "moddiv_list = lambda x, y: list(map(lambda a, b: a % b, x, y))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3574": {
    "question_id": "mbpp/357",
    "model": "deepseek-v3-250324",
    "generation_code": "moddiv_list = lambda x, y: list(map(lambda a, b: a % b, x, y))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3575": {
    "question_id": "mbpp/357",
    "model": "deepseek-v3-250324",
    "generation_code": "moddiv_list = lambda x, y: list(map(lambda a, b: a % b if b != 0 else None, x, y))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3576": {
    "question_id": "mbpp/357",
    "model": "deepseek-v3-250324",
    "generation_code": "moddiv_list = lambda x, y: list(map(lambda a, b: a % b if b != 0 else None, x, y))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3577": {
    "question_id": "mbpp/357",
    "model": "deepseek-v3-250324",
    "generation_code": "moddiv_list = lambda x, y: list(map(lambda a, b: a % b if b != 0 else None, x, y))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3578": {
    "question_id": "mbpp/357",
    "model": "deepseek-v3-250324",
    "generation_code": "moddiv_list = lambda x, y: list(map(lambda a, b: a % b if b != 0 else None, x, y))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3579": {
    "question_id": "mbpp/357",
    "model": "deepseek-v3-250324",
    "generation_code": "moddiv_list = lambda x, y: list(map(lambda a, b: a % b if b != 0 else None, x, y))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3580": {
    "question_id": "mbpp/358",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    \n    sqrt_discriminant = discriminant ** 0.5\n    root1 = (-b + sqrt_discriminant) / (2*a)\n    root2 = (-b - sqrt_discriminant) / (2*a)\n    \n    if (root1 == 2 * root2) or (root2 == 2 * root1):\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3581": {
    "question_id": "mbpp/358",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    \n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    \n    if (root1 == 2 * root2) or (root2 == 2 * root1):\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3582": {
    "question_id": "mbpp/358",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    \n    root1 = (-b + (discriminant)**0.5) / (2*a)\n    root2 = (-b - (discriminant)**0.5) / (2*a)\n    \n    if (root1 == 2 * root2) or (root2 == 2 * root1):\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3583": {
    "question_id": "mbpp/358",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    \n    root1 = (-b + (discriminant)**0.5) / (2*a)\n    root2 = (-b - (discriminant)**0.5) / (2*a)\n    \n    if (root1 == 2 * root2) or (root2 == 2 * root1):\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3584": {
    "question_id": "mbpp/358",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    \n    root1 = (-b + (discriminant)**0.5) / (2*a)\n    root2 = (-b - (discriminant)**0.5) / (2*a)\n    \n    if (root1 == 2 * root2) or (root2 == 2 * root1):\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3585": {
    "question_id": "mbpp/358",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    \n    root1 = (-b + (discriminant)**0.5) / (2*a)\n    root2 = (-b - (discriminant)**0.5) / (2*a)\n    \n    if (root1 == 2 * root2) or (root2 == 2 * root1):\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3586": {
    "question_id": "mbpp/358",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    \n    sqrt_discriminant = discriminant ** 0.5\n    root1 = (-b + sqrt_discriminant) / (2*a)\n    root2 = (-b - sqrt_discriminant) / (2*a)\n    \n    if (root1 == 2 * root2) or (root2 == 2 * root1):\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3587": {
    "question_id": "mbpp/358",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    \n    sqrt_discriminant = discriminant ** 0.5\n    root1 = (-b + sqrt_discriminant) / (2*a)\n    root2 = (-b - sqrt_discriminant) / (2*a)\n    \n    if (root1 == 2 * root2) or (root2 == 2 * root1):\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3588": {
    "question_id": "mbpp/358",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    \n    sqrt_discriminant = discriminant ** 0.5\n    root1 = (-b + sqrt_discriminant) / (2*a)\n    root2 = (-b - sqrt_discriminant) / (2*a)\n    \n    if (root1 == 2 * root2) or (root2 == 2 * root1):\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3589": {
    "question_id": "mbpp/358",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    \n    sqrt_discriminant = discriminant ** 0.5\n    root1 = (-b + sqrt_discriminant) / (2*a)\n    root2 = (-b - sqrt_discriminant) / (2*a)\n    \n    if (root1 == 2 * root2) or (root2 == 2 * root1):\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3590": {
    "question_id": "mbpp/359",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_carol(n):\n    return (2**n - 1)**2 - 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3591": {
    "question_id": "mbpp/359",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_carol(n):\n    return (2**n - 1)**2 - 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3592": {
    "question_id": "mbpp/359",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_carol(n):\n    return (2**n - 1)**2 - 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3593": {
    "question_id": "mbpp/359",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_carol(n):\n    return (2**n - 1)**2 - 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3594": {
    "question_id": "mbpp/359",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_carol(n):\n    return (2**n - 1)**2 - 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3595": {
    "question_id": "mbpp/359",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_carol(n):\n    return (2**n - 1)**2 - 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3596": {
    "question_id": "mbpp/359",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_carol(n):\n    if n < 1:\n        return None\n    return (2**n - 1)**2 - 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3597": {
    "question_id": "mbpp/359",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_carol(n):\n    return (2**n - 1)**2 - 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3598": {
    "question_id": "mbpp/359",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_carol(n):\n    return (2**n - 1)**2 - 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3599": {
    "question_id": "mbpp/359",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_carol(n):\n    return (2**n - 1)**2 - 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3600": {
    "question_id": "mbpp/360",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(lst):\n    return [item for item in lst if item != []]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3601": {
    "question_id": "mbpp/360",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(lst):\n    return [item for item in lst if item != []]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3602": {
    "question_id": "mbpp/360",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(lst):\n    return [item for item in lst if item != []]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3603": {
    "question_id": "mbpp/360",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(lst):\n    return [item for item in lst if item != []]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3604": {
    "question_id": "mbpp/360",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(lst):\n    return [item for item in lst if item != []]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3605": {
    "question_id": "mbpp/360",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(lst):\n    return [item for item in lst if item != []]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3606": {
    "question_id": "mbpp/360",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(lst):\n    return [x for x in lst if x != []]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3607": {
    "question_id": "mbpp/360",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(lst):\n    return [x for x in lst if x != []]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3608": {
    "question_id": "mbpp/360",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(lst):\n    return [item for item in lst if item != []]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3609": {
    "question_id": "mbpp/360",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(lst):\n    return [item for item in lst if item != []]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3610": {
    "question_id": "mbpp/361",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    for item, count in frequency.items():\n        if count == max_count:\n            return item",
    "test_output": "FAILED: expect (1, 0),in fact 1",
    "test_result": "False"
  },
  "3611": {
    "question_id": "mbpp/361",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    for item, count in frequency.items():\n        if count == max_count:\n            return item",
    "test_output": "FAILED: expect (1, 0),in fact 1",
    "test_result": "False"
  },
  "3612": {
    "question_id": "mbpp/361",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    for item, count in frequency.items():\n        if count == max_count:\n            return item",
    "test_output": "FAILED: expect (1, 0),in fact 1",
    "test_result": "False"
  },
  "3613": {
    "question_id": "mbpp/361",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    for item, count in frequency.items():\n        if count == max_count:\n            return item",
    "test_output": "FAILED: expect (1, 0),in fact 1",
    "test_result": "False"
  },
  "3614": {
    "question_id": "mbpp/361",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    for item, count in frequency.items():\n        if count == max_count:\n            return item",
    "test_output": "FAILED: expect (1, 0),in fact 1",
    "test_result": "False"
  },
  "3615": {
    "question_id": "mbpp/361",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    for item, count in frequency.items():\n        if count == max_count:\n            return item",
    "test_output": "FAILED: expect (1, 0),in fact 1",
    "test_result": "False"
  },
  "3616": {
    "question_id": "mbpp/361",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    max_items = [k for k, v in frequency.items() if v == max_count]\n    return max_items[0]",
    "test_output": "FAILED: expect (1, 0),in fact 1",
    "test_result": "False"
  },
  "3617": {
    "question_id": "mbpp/361",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    for item, count in frequency.items():\n        if count == max_count:\n            return item",
    "test_output": "FAILED: expect (1, 0),in fact 1",
    "test_result": "False"
  },
  "3618": {
    "question_id": "mbpp/361",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    for item, count in frequency.items():\n        if count == max_count:\n            return item",
    "test_output": "FAILED: expect (1, 0),in fact 1",
    "test_result": "False"
  },
  "3619": {
    "question_id": "mbpp/361",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    for item, count in frequency.items():\n        if count == max_count:\n            return item",
    "test_output": "FAILED: expect (1, 0),in fact 1",
    "test_result": "False"
  },
  "3620": {
    "question_id": "mbpp/362",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_K_element(tuples_list, k):\n    return [tuple(x + k for x in t) for t in tuples_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3621": {
    "question_id": "mbpp/362",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_K_element(tuples_list, k):\n    return [tuple(x + k for x in t) for t in tuples_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3622": {
    "question_id": "mbpp/362",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_K_element(tuples_list, k):\n    return [tuple(x + k for x in t) for t in tuples_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3623": {
    "question_id": "mbpp/362",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_K_element(tuples_list, k):\n    return [tuple(x + k for x in t) for t in tuples_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3624": {
    "question_id": "mbpp/362",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_K_element(tuples_list, k):\n    return [tuple(x + k for x in t) for t in tuples_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3625": {
    "question_id": "mbpp/362",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_K_element(tuples_list, k):\n    return [tuple(x + k for x in t) for t in tuples_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3626": {
    "question_id": "mbpp/362",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_K_element(tuples_list, k):\n    return [tuple(x + k for x in t) for t in tuples_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3627": {
    "question_id": "mbpp/362",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_K_element(tuples_list, k):\n    return [tuple(x + k for x in t) for t in tuples_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3628": {
    "question_id": "mbpp/362",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_K_element(tuples_list, k):\n    return [tuple(x + k for x in t) for t in tuples_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3629": {
    "question_id": "mbpp/362",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_K_element(tuples_list, k):\n    return [tuple(x + k for x in t) for t in tuples_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3630": {
    "question_id": "mbpp/363",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_flip_to_make_string_alternate(s):\n    flip1 = 0  # starts with '0'\n    flip2 = 0  # starts with '1'\n    \n    for i in range(len(s)):\n        expected_char1 = '0' if i % 2 == 0 else '1'\n        expected_char2 = '1' if i % 2 == 0 else '0'\n        \n        if s[i] != expected_char1:\n            flip1 += 1\n        if s[i] != expected_char2:\n            flip2 += 1\n    \n    return min(flip1, flip2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3631": {
    "question_id": "mbpp/363",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_flip_to_make_string_alternate(s):\n    flip1 = 0  # starts with '0'\n    flip2 = 0  # starts with '1'\n    \n    for i in range(len(s)):\n        expected_char1 = '0' if i % 2 == 0 else '1'\n        expected_char2 = '1' if i % 2 == 0 else '0'\n        \n        if s[i] != expected_char1:\n            flip1 += 1\n        if s[i] != expected_char2:\n            flip2 += 1\n    \n    return min(flip1, flip2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3632": {
    "question_id": "mbpp/363",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_flip_to_make_string_alternate(s):\n    flip1 = 0  # starts with '0'\n    flip2 = 0  # starts with '1'\n    \n    for i in range(len(s)):\n        expected_char1 = '0' if i % 2 == 0 else '1'\n        expected_char2 = '1' if i % 2 == 0 else '0'\n        \n        if s[i] != expected_char1:\n            flip1 += 1\n        if s[i] != expected_char2:\n            flip2 += 1\n    \n    return min(flip1, flip2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3633": {
    "question_id": "mbpp/363",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_flip_to_make_string_alternate(s):\n    flip1 = 0  # starts with '0'\n    flip2 = 0  # starts with '1'\n    \n    for i in range(len(s)):\n        expected_char1 = '0' if i % 2 == 0 else '1'\n        expected_char2 = '1' if i % 2 == 0 else '0'\n        \n        if s[i] != expected_char1:\n            flip1 += 1\n        if s[i] != expected_char2:\n            flip2 += 1\n    \n    return min(flip1, flip2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3634": {
    "question_id": "mbpp/363",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_flip_to_make_string_alternate(s):\n    flip1 = 0  # starts with '0'\n    flip2 = 0  # starts with '1'\n    \n    for i in range(len(s)):\n        expected_char1 = '0' if i % 2 == 0 else '1'\n        expected_char2 = '1' if i % 2 == 0 else '0'\n        \n        if s[i] != expected_char1:\n            flip1 += 1\n        if s[i] != expected_char2:\n            flip2 += 1\n    \n    return min(flip1, flip2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3635": {
    "question_id": "mbpp/363",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_flip_to_make_string_alternate(s):\n    flip1 = 0  # starts with '0'\n    flip2 = 0  # starts with '1'\n    \n    for i in range(len(s)):\n        expected_char1 = '0' if i % 2 == 0 else '1'\n        expected_char2 = '1' if i % 2 == 0 else '0'\n        \n        if s[i] != expected_char1:\n            flip1 += 1\n        if s[i] != expected_char2:\n            flip2 += 1\n    \n    return min(flip1, flip2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3636": {
    "question_id": "mbpp/363",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_flip_to_make_string_alternate(s):\n    flip1 = 0  # starts with '0'\n    flip2 = 0  # starts with '1'\n    \n    for i in range(len(s)):\n        expected_char1 = '0' if i % 2 == 0 else '1'\n        expected_char2 = '1' if i % 2 == 0 else '0'\n        \n        if s[i] != expected_char1:\n            flip1 += 1\n        if s[i] != expected_char2:\n            flip2 += 1\n    \n    return min(flip1, flip2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3637": {
    "question_id": "mbpp/363",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_flip_to_make_string_alternate(s):\n    flip1 = 0  # starts with '0'\n    flip2 = 0  # starts with '1'\n    \n    for i in range(len(s)):\n        expected_char1 = '0' if i % 2 == 0 else '1'\n        expected_char2 = '1' if i % 2 == 0 else '0'\n        \n        if s[i] != expected_char1:\n            flip1 += 1\n        if s[i] != expected_char2:\n            flip2 += 1\n    \n    return min(flip1, flip2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3638": {
    "question_id": "mbpp/363",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_flip_to_make_string_alternate(s):\n    flip1 = 0  # starts with '0'\n    flip2 = 0  # starts with '1'\n    \n    for i in range(len(s)):\n        expected_char1 = '0' if i % 2 == 0 else '1'\n        expected_char2 = '1' if i % 2 == 0 else '0'\n        \n        if s[i] != expected_char1:\n            flip1 += 1\n        if s[i] != expected_char2:\n            flip2 += 1\n    \n    return min(flip1, flip2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3639": {
    "question_id": "mbpp/363",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_flip_to_make_string_alternate(s):\n    flip1 = 0  # starts with '0'\n    flip2 = 0  # starts with '1'\n    \n    for i in range(len(s)):\n        expected_char1 = '0' if i % 2 == 0 else '1'\n        expected_char2 = '1' if i % 2 == 0 else '0'\n        \n        if s[i] != expected_char1:\n            flip1 += 1\n        if s[i] != expected_char2:\n            flip2 += 1\n    \n    return min(flip1, flip2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3640": {
    "question_id": "mbpp/364",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Digit(n):\n    if n == 0:\n        return 1\n    count = 0\n    n = abs(n)\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3641": {
    "question_id": "mbpp/364",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Digit(n):\n    if n == 0:\n        return 1\n    count = 0\n    n = abs(n)\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3642": {
    "question_id": "mbpp/364",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Digit(n):\n    if n == 0:\n        return 1\n    count = 0\n    n = abs(n)\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3643": {
    "question_id": "mbpp/364",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Digit(n):\n    if n == 0:\n        return 1\n    count = 0\n    n = abs(n)\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3644": {
    "question_id": "mbpp/364",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Digit(n):\n    if n == 0:\n        return 1\n    count = 0\n    n = abs(n)\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3645": {
    "question_id": "mbpp/364",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Digit(n):\n    return len(str(abs(n)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3646": {
    "question_id": "mbpp/364",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Digit(n):\n    if n == 0:\n        return 1\n    count = 0\n    n = abs(n)\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3647": {
    "question_id": "mbpp/364",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Digit(n):\n    if n == 0:\n        return 1\n    count = 0\n    n = abs(n)\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3648": {
    "question_id": "mbpp/364",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Digit(n):\n    return len(str(abs(n)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3649": {
    "question_id": "mbpp/364",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Digit(n):\n    if n == 0:\n        return 1\n    count = 0\n    n = abs(n)\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3650": {
    "question_id": "mbpp/365",
    "model": "deepseek-v3-250324",
    "generation_code": "def adjacent_num_product(nums):\n    if len(nums) < 2:\n        return None\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        current_product = nums[i] * nums[i+1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3651": {
    "question_id": "mbpp/365",
    "model": "deepseek-v3-250324",
    "generation_code": "def adjacent_num_product(nums):\n    if len(nums) < 2:\n        return None\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        current_product = nums[i] * nums[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3652": {
    "question_id": "mbpp/365",
    "model": "deepseek-v3-250324",
    "generation_code": "def adjacent_num_product(nums):\n    if len(nums) < 2:\n        return None\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        current_product = nums[i] * nums[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3653": {
    "question_id": "mbpp/365",
    "model": "deepseek-v3-250324",
    "generation_code": "def adjacent_num_product(lst):\n    if len(lst) < 2:\n        return None\n    max_product = lst[0] * lst[1]\n    for i in range(1, len(lst) - 1):\n        current_product = lst[i] * lst[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3654": {
    "question_id": "mbpp/365",
    "model": "deepseek-v3-250324",
    "generation_code": "def adjacent_num_product(nums):\n    if len(nums) < 2:\n        return None\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        current_product = nums[i] * nums[i+1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3655": {
    "question_id": "mbpp/365",
    "model": "deepseek-v3-250324",
    "generation_code": "def adjacent_num_product(lst):\n    if len(lst) < 2:\n        return None\n    max_product = lst[0] * lst[1]\n    for i in range(1, len(lst) - 1):\n        current_product = lst[i] * lst[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3656": {
    "question_id": "mbpp/365",
    "model": "deepseek-v3-250324",
    "generation_code": "def adjacent_num_product(nums):\n    if len(nums) < 2:\n        return None\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        current_product = nums[i] * nums[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3657": {
    "question_id": "mbpp/365",
    "model": "deepseek-v3-250324",
    "generation_code": "def adjacent_num_product(nums):\n    if len(nums) < 2:\n        return None\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        current_product = nums[i] * nums[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3658": {
    "question_id": "mbpp/365",
    "model": "deepseek-v3-250324",
    "generation_code": "def adjacent_num_product(lst):\n    if len(lst) < 2:\n        return None\n    max_product = lst[0] * lst[1]\n    for i in range(1, len(lst) - 1):\n        current_product = lst[i] * lst[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3659": {
    "question_id": "mbpp/365",
    "model": "deepseek-v3-250324",
    "generation_code": "def adjacent_num_product(nums):\n    if len(nums) < 2:\n        return None\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        current_product = nums[i] * nums[i + 1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3660": {
    "question_id": "mbpp/366",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        left_height = check_height(node.left)\n        if left_height == -1:\n            return -1\n        right_height = check_height(node.right)\n        if right_height == -1:\n            return -1\n        if abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 276, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "3661": {
    "question_id": "mbpp/366",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        left_height = check_height(node.left)\n        right_height = check_height(node.right)\n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "3662": {
    "question_id": "mbpp/366",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        left_height = check_height(node.left)\n        if left_height == -1:\n            return -1\n        right_height = check_height(node.right)\n        if right_height == -1:\n            return -1\n        if abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "3663": {
    "question_id": "mbpp/366",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        left_height = check_height(node.left)\n        if left_height == -1:\n            return -1\n        right_height = check_height(node.right)\n        if right_height == -1:\n            return -1\n        if abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "3664": {
    "question_id": "mbpp/366",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        left_height = check_height(node.left)\n        right_height = check_height(node.right)\n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "3665": {
    "question_id": "mbpp/366",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        left_height = check_height(node.left)\n        right_height = check_height(node.right)\n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "3666": {
    "question_id": "mbpp/366",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        left_height = check_height(node.left)\n        right_height = check_height(node.right)\n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "3667": {
    "question_id": "mbpp/366",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        left_height = check_height(node.left)\n        right_height = check_height(node.right)\n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "3668": {
    "question_id": "mbpp/366",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        left_height = check_height(node.left)\n        right_height = check_height(node.right)\n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "3669": {
    "question_id": "mbpp/366",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        left_height = check_height(node.left)\n        right_height = check_height(node.right)\n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "3670": {
    "question_id": "mbpp/367",
    "model": "deepseek-v3-250324",
    "generation_code": "def repeat_tuples(tup, n):\n    return tup * n",
    "test_output": "FAILED: expect ((1, 3), (1, 3), (1, 3), (1, 3)),in fact (1, 3, 1, 3, 1, 3, 1, 3)",
    "test_result": "False"
  },
  "3671": {
    "question_id": "mbpp/367",
    "model": "deepseek-v3-250324",
    "generation_code": "def repeat_tuples(tup, n):\n    return tuple(tup for _ in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3672": {
    "question_id": "mbpp/367",
    "model": "deepseek-v3-250324",
    "generation_code": "def repeat_tuples(tup, n):\n    return tup * n",
    "test_output": "FAILED: expect ((1, 3), (1, 3), (1, 3), (1, 3)),in fact (1, 3, 1, 3, 1, 3, 1, 3)",
    "test_result": "False"
  },
  "3673": {
    "question_id": "mbpp/367",
    "model": "deepseek-v3-250324",
    "generation_code": "def repeat_tuples(tup, n):\n    return tup * n",
    "test_output": "FAILED: expect ((1, 3), (1, 3), (1, 3), (1, 3)),in fact (1, 3, 1, 3, 1, 3, 1, 3)",
    "test_result": "False"
  },
  "3674": {
    "question_id": "mbpp/367",
    "model": "deepseek-v3-250324",
    "generation_code": "def repeat_tuples(tup, n):\n    return tup * n",
    "test_output": "FAILED: expect ((1, 3), (1, 3), (1, 3), (1, 3)),in fact (1, 3, 1, 3, 1, 3, 1, 3)",
    "test_result": "False"
  },
  "3675": {
    "question_id": "mbpp/367",
    "model": "deepseek-v3-250324",
    "generation_code": "def repeat_tuples(tup, n):\n    return tuple(tup for _ in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3676": {
    "question_id": "mbpp/367",
    "model": "deepseek-v3-250324",
    "generation_code": "def repeat_tuples(tup, n):\n    return tup * n",
    "test_output": "FAILED: expect ((1, 3), (1, 3), (1, 3), (1, 3)),in fact (1, 3, 1, 3, 1, 3, 1, 3)",
    "test_result": "False"
  },
  "3677": {
    "question_id": "mbpp/367",
    "model": "deepseek-v3-250324",
    "generation_code": "def repeat_tuples(tup, n):\n    return tuple(tup for _ in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3678": {
    "question_id": "mbpp/367",
    "model": "deepseek-v3-250324",
    "generation_code": "def repeat_tuples(tup, n):\n    return tup * n",
    "test_output": "FAILED: expect ((1, 3), (1, 3), (1, 3), (1, 3)),in fact (1, 3, 1, 3, 1, 3, 1, 3)",
    "test_result": "False"
  },
  "3679": {
    "question_id": "mbpp/367",
    "model": "deepseek-v3-250324",
    "generation_code": "def repeat_tuples(tup, n):\n    return tup * n",
    "test_output": "FAILED: expect ((1, 3), (1, 3), (1, 3), (1, 3)),in fact (1, 3, 1, 3, 1, 3, 1, 3)",
    "test_result": "False"
  },
  "3680": {
    "question_id": "mbpp/368",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cuboid(l, w, h):\n    return 2 * h * (l + w)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3681": {
    "question_id": "mbpp/368",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cuboid(l, w, h):\n    return 2 * h * (l + w)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3682": {
    "question_id": "mbpp/368",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cuboid(l, w, h):\n    return 2 * h * (l + w)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3683": {
    "question_id": "mbpp/368",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cuboid(l, b, h):\n    return 2 * h * (l + b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3684": {
    "question_id": "mbpp/368",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cuboid(l, w, h):\n    return 2 * h * (l + w)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3685": {
    "question_id": "mbpp/368",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cuboid(l, w, h):\n    return 2 * h * (l + w)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3686": {
    "question_id": "mbpp/368",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cuboid(l, w, h):\n    return 2 * h * (l + w)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3687": {
    "question_id": "mbpp/368",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cuboid(l, w, h):\n    return 2 * h * (l + w)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3688": {
    "question_id": "mbpp/368",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cuboid(l, b, h):\n    return 2 * h * (l + b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3689": {
    "question_id": "mbpp/368",
    "model": "deepseek-v3-250324",
    "generation_code": "def lateralsurface_cuboid(l, b, h):\n    return 2 * h * (l + b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3690": {
    "question_id": "mbpp/369",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_sort(tuples_list):\n    return sorted(tuples_list, key=lambda x: float(x[1]), reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3691": {
    "question_id": "mbpp/369",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_sort(tuples_list):\n    return sorted(tuples_list, key=lambda x: float(x[1]), reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3692": {
    "question_id": "mbpp/369",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_sort(tuples_list):\n    return sorted(tuples_list, key=lambda x: float(x[1]), reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3693": {
    "question_id": "mbpp/369",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_sort(tuples_list):\n    return sorted(tuples_list, key=lambda x: float(x[1]), reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3694": {
    "question_id": "mbpp/369",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_sort(tuples_list):\n    return sorted(tuples_list, key=lambda x: float(x[1]), reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3695": {
    "question_id": "mbpp/369",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_sort(tuples_list):\n    return sorted(tuples_list, key=lambda x: float(x[1]), reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3696": {
    "question_id": "mbpp/369",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_sort(tuples_list):\n    return sorted(tuples_list, key=lambda x: float(x[1]), reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3697": {
    "question_id": "mbpp/369",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_sort(tuples_list):\n    return sorted(tuples_list, key=lambda x: float(x[1]), reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3698": {
    "question_id": "mbpp/369",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_sort(tuples_list):\n    return sorted(tuples_list, key=lambda x: float(x[1]), reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3699": {
    "question_id": "mbpp/369",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_sort(tuples_list):\n    return sorted(tuples_list, key=lambda x: float(x[1]), reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3700": {
    "question_id": "mbpp/370",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_missing(arr, low, high):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + low:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3701": {
    "question_id": "mbpp/370",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_missing(arr, low, high):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + low:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3702": {
    "question_id": "mbpp/370",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_missing(arr, low, high):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + low:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3703": {
    "question_id": "mbpp/370",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_missing(arr, low, high):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + low:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3704": {
    "question_id": "mbpp/370",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_missing(arr, low, high):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + low:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3705": {
    "question_id": "mbpp/370",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_missing(arr, low, high):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + low:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3706": {
    "question_id": "mbpp/370",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_missing(arr, low, high):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + low:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return left + low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3707": {
    "question_id": "mbpp/370",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_missing(arr, low, high):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + low:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3708": {
    "question_id": "mbpp/370",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_missing(arr, low, high):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + low:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3709": {
    "question_id": "mbpp/370",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_missing(arr, low, high):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid + low:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3710": {
    "question_id": "mbpp/371",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    sorted_list = []\n    while lst:\n        sorted_list.append(heapq.heappop(lst))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3711": {
    "question_id": "mbpp/371",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    sorted_list = []\n    while lst:\n        sorted_list.append(heapq.heappop(lst))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3712": {
    "question_id": "mbpp/371",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    sorted_list = []\n    while lst:\n        sorted_list.append(heapq.heappop(lst))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3713": {
    "question_id": "mbpp/371",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    sorted_list = []\n    while lst:\n        sorted_list.append(heapq.heappop(lst))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3714": {
    "question_id": "mbpp/371",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    sorted_list = []\n    while lst:\n        sorted_list.append(heapq.heappop(lst))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3715": {
    "question_id": "mbpp/371",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    sorted_list = []\n    while lst:\n        sorted_list.append(heapq.heappop(lst))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3716": {
    "question_id": "mbpp/371",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    sorted_list = []\n    while lst:\n        sorted_list.append(heapq.heappop(lst))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3717": {
    "question_id": "mbpp/371",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    sorted_list = []\n    while lst:\n        sorted_list.append(heapq.heappop(lst))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3718": {
    "question_id": "mbpp/371",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    sorted_list = []\n    while lst:\n        sorted_list.append(heapq.heappop(lst))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3719": {
    "question_id": "mbpp/371",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    sorted_list = []\n    while lst:\n        sorted_list.append(heapq.heappop(lst))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3720": {
    "question_id": "mbpp/372",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3721": {
    "question_id": "mbpp/372",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3722": {
    "question_id": "mbpp/372",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3723": {
    "question_id": "mbpp/372",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3724": {
    "question_id": "mbpp/372",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3725": {
    "question_id": "mbpp/372",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3726": {
    "question_id": "mbpp/372",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3727": {
    "question_id": "mbpp/372",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3728": {
    "question_id": "mbpp/372",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3729": {
    "question_id": "mbpp/372",
    "model": "deepseek-v3-250324",
    "generation_code": "def volume_cuboid(length, width, height):\n    return length * width * height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3730": {
    "question_id": "mbpp/373",
    "model": "deepseek-v3-250324",
    "generation_code": "from itertools import permutations\n\ndef permute_string(s):\n    perms = [''.join(p) for p in permutations(s)]\n    return list(set(perms)) if len(s) != len(set(s)) else perms",
    "test_output": "FAILED: expect ['abc', 'bac', 'bca', 'acb', 'cab', 'cba'],in fact ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']",
    "test_result": "False"
  },
  "3731": {
    "question_id": "mbpp/373",
    "model": "deepseek-v3-250324",
    "generation_code": "from itertools import permutations\n\ndef permute_string(s):\n    perms = [''.join(p) for p in permutations(s)]\n    return list(set(perms)) if len(s) != len(set(s)) else perms",
    "test_output": "FAILED: expect ['abc', 'bac', 'bca', 'acb', 'cab', 'cba'],in fact ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']",
    "test_result": "False"
  },
  "3732": {
    "question_id": "mbpp/373",
    "model": "deepseek-v3-250324",
    "generation_code": "from itertools import permutations\n\ndef permute_string(s):\n    perms = [''.join(p) for p in permutations(s)]\n    return list(set(perms)) if len(s) != len(set(s)) else perms",
    "test_output": "FAILED: expect ['abc', 'bac', 'bca', 'acb', 'cab', 'cba'],in fact ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']",
    "test_result": "False"
  },
  "3733": {
    "question_id": "mbpp/373",
    "model": "deepseek-v3-250324",
    "generation_code": "from itertools import permutations\n\ndef permute_string(s):\n    perms = [''.join(p) for p in permutations(s)]\n    return sorted(list(set(perms)))",
    "test_output": "FAILED: expect ['abc', 'bac', 'bca', 'acb', 'cab', 'cba'],in fact ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']",
    "test_result": "False"
  },
  "3734": {
    "question_id": "mbpp/373",
    "model": "deepseek-v3-250324",
    "generation_code": "from itertools import permutations\n\ndef permute_string(s):\n    perms = [''.join(p) for p in permutations(s)]\n    return list(sorted(set(perms)))",
    "test_output": "FAILED: expect ['abc', 'bac', 'bca', 'acb', 'cab', 'cba'],in fact ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']",
    "test_result": "False"
  },
  "3735": {
    "question_id": "mbpp/373",
    "model": "deepseek-v3-250324",
    "generation_code": "from itertools import permutations\n\ndef permute_string(s):\n    perms = [''.join(p) for p in permutations(s)]\n    return sorted(list(set(perms)))",
    "test_output": "FAILED: expect ['abc', 'bac', 'bca', 'acb', 'cab', 'cba'],in fact ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']",
    "test_result": "False"
  },
  "3736": {
    "question_id": "mbpp/373",
    "model": "deepseek-v3-250324",
    "generation_code": "from itertools import permutations\n\ndef permute_string(s):\n    perms = [''.join(p) for p in permutations(s)]\n    return list(set(perms)) if len(s) != len(set(s)) else perms",
    "test_output": "FAILED: expect ['abc', 'bac', 'bca', 'acb', 'cab', 'cba'],in fact ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']",
    "test_result": "False"
  },
  "3737": {
    "question_id": "mbpp/373",
    "model": "deepseek-v3-250324",
    "generation_code": "from itertools import permutations\n\ndef permute_string(s):\n    perms = [''.join(p) for p in permutations(s)]\n    return list(sorted(set(perms)))",
    "test_output": "FAILED: expect ['abc', 'bac', 'bca', 'acb', 'cab', 'cba'],in fact ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']",
    "test_result": "False"
  },
  "3738": {
    "question_id": "mbpp/373",
    "model": "deepseek-v3-250324",
    "generation_code": "from itertools import permutations\n\ndef permute_string(s):\n    perms = [''.join(p) for p in permutations(s)]\n    return list(set(perms)) if len(s) != len(set(s)) else perms",
    "test_output": "FAILED: expect ['abc', 'bac', 'bca', 'acb', 'cab', 'cba'],in fact ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']",
    "test_result": "False"
  },
  "3739": {
    "question_id": "mbpp/373",
    "model": "deepseek-v3-250324",
    "generation_code": "from itertools import permutations\n\ndef permute_string(s):\n    perms = [''.join(p) for p in permutations(s)]\n    return list(sorted(set(perms)))",
    "test_output": "FAILED: expect ['abc', 'bac', 'bca', 'acb', 'cab', 'cba'],in fact ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']",
    "test_result": "False"
  },
  "3740": {
    "question_id": "mbpp/374",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_num(number, multiple):\n    if multiple == 0:\n        return number\n    return multiple * round(number / multiple)",
    "test_output": "FAILED: expect 218,in fact 220",
    "test_result": "False"
  },
  "3741": {
    "question_id": "mbpp/374",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_num(number, multiple):\n    if multiple == 0:\n        return number\n    return multiple * round(number / multiple)",
    "test_output": "FAILED: expect 218,in fact 220",
    "test_result": "False"
  },
  "3742": {
    "question_id": "mbpp/374",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_num(number, multiple):\n    if multiple == 0:\n        return number\n    return multiple * round(number / multiple)",
    "test_output": "FAILED: expect 218,in fact 220",
    "test_result": "False"
  },
  "3743": {
    "question_id": "mbpp/374",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_num(number, multiple):\n    if multiple == 0:\n        return number\n    return multiple * round(number / multiple)",
    "test_output": "FAILED: expect 218,in fact 220",
    "test_result": "False"
  },
  "3744": {
    "question_id": "mbpp/374",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_num(number, multiple):\n    if multiple == 0:\n        return number\n    remainder = number % multiple\n    if remainder >= multiple / 2:\n        return number + (multiple - remainder)\n    else:\n        return number - remainder",
    "test_output": "FAILED: expect 218,in fact 220",
    "test_result": "False"
  },
  "3745": {
    "question_id": "mbpp/374",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_num(number, multiple):\n    if multiple == 0:\n        return number\n    return multiple * round(number / multiple)",
    "test_output": "FAILED: expect 218,in fact 220",
    "test_result": "False"
  },
  "3746": {
    "question_id": "mbpp/374",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_num(number, multiple):\n    if multiple == 0:\n        return number\n    return multiple * round(number / multiple)",
    "test_output": "FAILED: expect 218,in fact 220",
    "test_result": "False"
  },
  "3747": {
    "question_id": "mbpp/374",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_num(number, multiple):\n    if multiple == 0:\n        return number\n    return multiple * round(number / multiple)",
    "test_output": "FAILED: expect 218,in fact 220",
    "test_result": "False"
  },
  "3748": {
    "question_id": "mbpp/374",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_num(number, multiple):\n    if multiple == 0:\n        return number\n    return multiple * round(number / multiple)",
    "test_output": "FAILED: expect 218,in fact 220",
    "test_result": "False"
  },
  "3749": {
    "question_id": "mbpp/374",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_num(number, multiple):\n    if multiple == 0:\n        return number\n    return multiple * round(number / multiple)",
    "test_output": "FAILED: expect 218,in fact 220",
    "test_result": "False"
  },
  "3750": {
    "question_id": "mbpp/375",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_replica(tup):\n    from collections import defaultdict\n    count = defaultdict(int)\n    for num in tup:\n        count[num] += 1\n    result = []\n    for num in tup:\n        if count[num] > 1:\n            result.append('MSP')\n            count[num] -= 1\n        else:\n            result.append(num)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP'),in fact ('MSP', 1, 'MSP', 'MSP', 4, 'MSP', 5, 6, 'MSP', 7)",
    "test_result": "False"
  },
  "3751": {
    "question_id": "mbpp/375",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_replica(tup, custom_value='MSP'):\n    seen = {}\n    result = []\n    for elem in tup:\n        if elem in seen:\n            seen[elem] += 1\n        else:\n            seen[elem] = 1\n    for elem in tup:\n        if seen[elem] > 1:\n            result.append(custom_value)\n        else:\n            result.append(elem)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP'),in fact ('MSP', 'MSP', 'MSP', 'MSP', 'MSP', 'MSP', 'MSP', 6, 'MSP', 'MSP')",
    "test_result": "False"
  },
  "3752": {
    "question_id": "mbpp/375",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_replica(tup, custom_value='MSP'):\n    seen = {}\n    result = []\n    for elem in tup:\n        if elem in seen:\n            seen[elem] += 1\n            result.append(custom_value)\n        else:\n            seen[elem] = 1\n            result.append(elem)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3753": {
    "question_id": "mbpp/375",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_replica(tup):\n    from collections import defaultdict\n    count = defaultdict(int)\n    for num in tup:\n        count[num] += 1\n    result = []\n    for num in tup:\n        if count[num] > 1:\n            if num in result or tup.index(num) != len(result):\n                result.append('MSP')\n            else:\n                result.append(num)\n        else:\n            result.append(num)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3754": {
    "question_id": "mbpp/375",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_replica(tup, custom_value='MSP'):\n    seen = {}\n    result = []\n    for elem in tup:\n        if elem in seen:\n            seen[elem] += 1\n            result.append(custom_value)\n        else:\n            seen[elem] = 1\n            result.append(elem)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3755": {
    "question_id": "mbpp/375",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_replica(tup):\n    from collections import defaultdict\n    count = defaultdict(int)\n    for num in tup:\n        count[num] += 1\n    result = []\n    for num in tup:\n        if count[num] > 1:\n            result.append('MSP')\n            count[num] -= 1\n        else:\n            result.append(num)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP'),in fact ('MSP', 1, 'MSP', 'MSP', 4, 'MSP', 5, 6, 'MSP', 7)",
    "test_result": "False"
  },
  "3756": {
    "question_id": "mbpp/375",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_replica(tup):\n    from collections import defaultdict\n    count = defaultdict(int)\n    for num in tup:\n        count[num] += 1\n    result = []\n    for num in tup:\n        if count[num] > 1:\n            result.append('MSP')\n            count[num] -= 1\n        else:\n            result.append(num)\n    return tuple(result)",
    "test_output": "FAILED: expect (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP'),in fact ('MSP', 1, 'MSP', 'MSP', 4, 'MSP', 5, 6, 'MSP', 7)",
    "test_result": "False"
  },
  "3757": {
    "question_id": "mbpp/375",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_replica(tup):\n    from collections import defaultdict\n    count = defaultdict(int)\n    for num in tup:\n        count[num] += 1\n    result = []\n    seen = set()\n    for num in tup:\n        if count[num] > 1:\n            if num not in seen:\n                result.append(num)\n                seen.add(num)\n            else:\n                result.append('MSP')\n        else:\n            result.append(num)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3758": {
    "question_id": "mbpp/375",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_replica(tup, custom_value='MSP'):\n    seen = {}\n    result = []\n    for elem in tup:\n        if elem in seen:\n            seen[elem] += 1\n            result.append(custom_value)\n        else:\n            seen[elem] = 1\n            result.append(elem)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3759": {
    "question_id": "mbpp/375",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_replica(tup):\n    from collections import defaultdict\n    count = defaultdict(int)\n    for num in tup:\n        count[num] += 1\n    result = []\n    seen = set()\n    for num in tup:\n        if count[num] > 1:\n            if num not in seen:\n                seen.add(num)\n                result.append(num)\n            else:\n                result.append('MSP')\n        else:\n            result.append(num)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3760": {
    "question_id": "mbpp/376",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Char(s, char):\n    return s.replace(char, '')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3761": {
    "question_id": "mbpp/376",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Char(s, char):\n    return s.replace(char, '')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3762": {
    "question_id": "mbpp/376",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Char(s, char):\n    return s.replace(char, '')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3763": {
    "question_id": "mbpp/376",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Char(s, char):\n    return s.replace(char, '')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3764": {
    "question_id": "mbpp/376",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Char(s, char):\n    return s.replace(char, '')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3765": {
    "question_id": "mbpp/376",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Char(s, char):\n    return s.replace(char, '')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3766": {
    "question_id": "mbpp/376",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Char(s, char):\n    return s.replace(char, '')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3767": {
    "question_id": "mbpp/376",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Char(s, char):\n    return s.replace(char, '')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3768": {
    "question_id": "mbpp/376",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Char(s, char):\n    return s.replace(char, '')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3769": {
    "question_id": "mbpp/376",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_Char(string, char):\n    return string.replace(char, '')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3770": {
    "question_id": "mbpp/377",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_first(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else lst\n    return [lst[-1]] + lst[:-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3771": {
    "question_id": "mbpp/377",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_first(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else []\n    return [lst[-1]] + lst[:-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3772": {
    "question_id": "mbpp/377",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_first(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else lst\n    return [lst[-1]] + lst[:-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3773": {
    "question_id": "mbpp/377",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_first(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else []\n    return [lst[-1]] + lst[:-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3774": {
    "question_id": "mbpp/377",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_first(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else []\n    return [lst[-1]] + lst[:-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3775": {
    "question_id": "mbpp/377",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_first(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else []\n    return [lst[-1]] + lst[:-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3776": {
    "question_id": "mbpp/377",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_first(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else []\n    return [lst[-1]] + lst[:-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3777": {
    "question_id": "mbpp/377",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_first(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else []\n    return [lst[-1]] + lst[:-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3778": {
    "question_id": "mbpp/377",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_first(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else []\n    return [lst[-1]] + lst[:-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3779": {
    "question_id": "mbpp/377",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_first(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else lst\n    return [lst[-1]] + lst[:-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3780": {
    "question_id": "mbpp/378",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + l * h + w * h)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3781": {
    "question_id": "mbpp/378",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + l * h + w * h)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3782": {
    "question_id": "mbpp/378",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cuboid(l, w, h):\n    return 2 * (l*w + w*h + l*h)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3783": {
    "question_id": "mbpp/378",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + w * h + h * l)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3784": {
    "question_id": "mbpp/378",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cuboid(l, w, h):\n    return 2 * (l*w + w*h + l*h)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3785": {
    "question_id": "mbpp/378",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + w * h + l * h)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3786": {
    "question_id": "mbpp/378",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + l * h + w * h)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3787": {
    "question_id": "mbpp/378",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + l * h + w * h)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3788": {
    "question_id": "mbpp/378",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cuboid(l, w, h):\n    return 2 * (l*w + w*h + l*h)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3789": {
    "question_id": "mbpp/378",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + l * h + w * h)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3790": {
    "question_id": "mbpp/379",
    "model": "deepseek-v3-250324",
    "generation_code": "def multi_list(m, n):\n    return [[i * j for j in range(n)] for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3791": {
    "question_id": "mbpp/379",
    "model": "deepseek-v3-250324",
    "generation_code": "def multi_list(rows, cols):\n    return [[i * j for j in range(cols)] for i in range(rows)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3792": {
    "question_id": "mbpp/379",
    "model": "deepseek-v3-250324",
    "generation_code": "def multi_list(m, n):\n    return [[i * j for j in range(n)] for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3793": {
    "question_id": "mbpp/379",
    "model": "deepseek-v3-250324",
    "generation_code": "def multi_list(m, n):\n    return [[i * j for j in range(n)] for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3794": {
    "question_id": "mbpp/379",
    "model": "deepseek-v3-250324",
    "generation_code": "def multi_list(m, n):\n    return [[i * j for j in range(n)] for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3795": {
    "question_id": "mbpp/379",
    "model": "deepseek-v3-250324",
    "generation_code": "def multi_list(m, n):\n    return [[i * j for j in range(n)] for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3796": {
    "question_id": "mbpp/379",
    "model": "deepseek-v3-250324",
    "generation_code": "def multi_list(m, n):\n    return [[i * j for j in range(n)] for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3797": {
    "question_id": "mbpp/379",
    "model": "deepseek-v3-250324",
    "generation_code": "def multi_list(m, n):\n    return [[i * j for j in range(n)] for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3798": {
    "question_id": "mbpp/379",
    "model": "deepseek-v3-250324",
    "generation_code": "def multi_list(m, n):\n    return [[i * j for j in range(n)] for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3799": {
    "question_id": "mbpp/379",
    "model": "deepseek-v3-250324",
    "generation_code": "def multi_list(m, n):\n    return [[i * j for j in range(n)] for i in range(m)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3800": {
    "question_id": "mbpp/380",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3801": {
    "question_id": "mbpp/380",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3802": {
    "question_id": "mbpp/380",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3803": {
    "question_id": "mbpp/380",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3804": {
    "question_id": "mbpp/380",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3805": {
    "question_id": "mbpp/380",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3806": {
    "question_id": "mbpp/380",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3807": {
    "question_id": "mbpp/380",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3808": {
    "question_id": "mbpp/380",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3809": {
    "question_id": "mbpp/380",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3810": {
    "question_id": "mbpp/381",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rotation_count(arr):\n    if not arr:\n        return 0\n    left = 0\n    right = len(arr) - 1\n    n = len(arr)\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            return left\n        \n        mid = (left + right) // 2\n        next_mid = (mid + 1) % n\n        prev_mid = (mid - 1 + n) % n\n        \n        if arr[mid] <= arr[next_mid] and arr[mid] <= arr[prev_mid]:\n            return mid\n        \n        if arr[mid] <= arr[right]:\n            right = mid - 1\n        elif arr[mid] >= arr[left]:\n            left = mid + 1\n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3811": {
    "question_id": "mbpp/381",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rotation_count(arr):\n    if not arr:\n        return 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3812": {
    "question_id": "mbpp/381",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rotation_count(arr):\n    if not arr:\n        return 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3813": {
    "question_id": "mbpp/381",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rotation_count(arr):\n    if not arr:\n        return 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3814": {
    "question_id": "mbpp/381",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rotation_count(arr):\n    if not arr:\n        return 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3815": {
    "question_id": "mbpp/381",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rotation_count(arr):\n    if not arr:\n        return 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3816": {
    "question_id": "mbpp/381",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rotation_count(arr):\n    low = 0\n    high = len(arr) - 1\n    n = len(arr)\n    \n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n        \n        mid = (low + high) // 2\n        next_mid = (mid + 1) % n\n        prev_mid = (mid - 1 + n) % n\n        \n        if arr[mid] <= arr[next_mid] and arr[mid] <= arr[prev_mid]:\n            return mid\n        \n        if arr[mid] <= arr[high]:\n            high = mid - 1\n        elif arr[mid] >= arr[low]:\n            low = mid + 1\n    \n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3817": {
    "question_id": "mbpp/381",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rotation_count(arr):\n    if not arr:\n        return 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3818": {
    "question_id": "mbpp/381",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rotation_count(arr):\n    if not arr:\n        return 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3819": {
    "question_id": "mbpp/381",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_rotation_count(arr):\n    if not arr:\n        return 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3820": {
    "question_id": "mbpp/382",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(number):\n    mask = 0x55555555  # This is a mask with all odd bits set (binary 0101...)\n    return number ^ mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "3821": {
    "question_id": "mbpp/382",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(number):\n    mask = 0x55555555  # This is a mask with all odd bits set (binary 0101...)\n    return number ^ mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "3822": {
    "question_id": "mbpp/382",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(number):\n    mask = 0x55555555  # This is a mask with all odd bits set (binary 0101...)\n    return number ^ mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "3823": {
    "question_id": "mbpp/382",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(number):\n    mask = 0x55555555  # This is a mask with all odd bits set (binary: 0101 0101 ...)\n    return number ^ mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "3824": {
    "question_id": "mbpp/382",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(n):\n    mask = 0x55555555  # This is a mask with all odd bits set to 1 (binary 0101 0101 ...)\n    return n ^ mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "3825": {
    "question_id": "mbpp/382",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(number):\n    mask = 0x55555555  # This is a mask with all odd bits set (binary: 0101 0101 ...)\n    return number ^ mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "3826": {
    "question_id": "mbpp/382",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(number):\n    mask = 0x55555555  # Binary: 0101 0101 0101 ... for 32 bits\n    return number ^ mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "3827": {
    "question_id": "mbpp/382",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(number):\n    mask = 0x55555555  # Binary: 0101 0101 0101 ... for 32 bits\n    return number ^ mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "3828": {
    "question_id": "mbpp/382",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(number):\n    mask = 0x55555555  # This is a 32-bit mask with all odd bits set to 1 (binary: 0101 0101 ...)\n    return number ^ mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "3829": {
    "question_id": "mbpp/382",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_bit_toggle_number(number):\n    mask = 0x55555555  # This is a mask with all odd bits set (0x5 is 0101 in binary)\n    return number ^ mask",
    "test_output": "FAILED: expect 15,in fact 1431655775",
    "test_result": "False"
  },
  "3830": {
    "question_id": "mbpp/383",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Smallest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3831": {
    "question_id": "mbpp/383",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Smallest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3832": {
    "question_id": "mbpp/383",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Smallest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3833": {
    "question_id": "mbpp/383",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Smallest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3834": {
    "question_id": "mbpp/383",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Smallest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3835": {
    "question_id": "mbpp/383",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Smallest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3836": {
    "question_id": "mbpp/383",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Smallest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3837": {
    "question_id": "mbpp/383",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Smallest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3838": {
    "question_id": "mbpp/383",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Smallest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3839": {
    "question_id": "mbpp/383",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Smallest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3840": {
    "question_id": "mbpp/384",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3841": {
    "question_id": "mbpp/384",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3842": {
    "question_id": "mbpp/384",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3843": {
    "question_id": "mbpp/384",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3844": {
    "question_id": "mbpp/384",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3845": {
    "question_id": "mbpp/384",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3846": {
    "question_id": "mbpp/384",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3847": {
    "question_id": "mbpp/384",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3848": {
    "question_id": "mbpp/384",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3849": {
    "question_id": "mbpp/384",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3850": {
    "question_id": "mbpp/385",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_count(s):\n    balance = 0\n    swaps = 0\n    for char in s:\n        if char == '[':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                swaps += -balance\n    return swaps",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3851": {
    "question_id": "mbpp/385",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_count(s):\n    balance = 0\n    swaps = 0\n    for char in s:\n        if char == '[':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                swaps += -balance\n    return swaps",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3852": {
    "question_id": "mbpp/385",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_count(s):\n    swaps = 0\n    balance = 0\n    \n    for char in s:\n        if char == '[':\n            balance += 1\n        else:\n            balance -= 1\n        \n        if balance < 0:\n            swaps += 1\n            balance += 2\n    \n    return swaps",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3853": {
    "question_id": "mbpp/385",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_count(s):\n    balance = 0\n    swaps = 0\n    for char in s:\n        if char == '[':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                swaps += -balance\n    return swaps",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3854": {
    "question_id": "mbpp/385",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_count(s):\n    balance = 0\n    swaps = 0\n    for char in s:\n        if char == '[':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                swaps += -balance\n    return swaps",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3855": {
    "question_id": "mbpp/385",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_count(s):\n    swaps = 0\n    balance = 0\n    \n    for char in s:\n        if char == '[':\n            balance += 1\n        else:\n            balance -= 1\n        \n        if balance < 0:\n            swaps += 1\n            balance = 1\n    \n    return swaps",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3856": {
    "question_id": "mbpp/385",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_count(s):\n    balance = 0\n    swaps = 0\n    for char in s:\n        if char == '[':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                swaps += -balance\n    return swaps",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3857": {
    "question_id": "mbpp/385",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_count(s):\n    balance = 0\n    swaps = 0\n    for char in s:\n        if char == '[':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                swaps += -balance\n    return swaps",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3858": {
    "question_id": "mbpp/385",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_count(s):\n    balance = 0\n    swaps = 0\n    for char in s:\n        if char == '[':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            swaps += -balance\n            balance = 1\n    return swaps",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3859": {
    "question_id": "mbpp/385",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_count(s):\n    swaps = 0\n    balance = 0\n    \n    for char in s:\n        if char == '[':\n            balance += 1\n        else:\n            balance -= 1\n        \n        if balance < 0:\n            swaps += 1\n            balance += 2\n    \n    return swaps",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "3860": {
    "question_id": "mbpp/386",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_or_odd(hex_number):\n    last_digit = hex_number[-1].upper()\n    if last_digit in {'0', '2', '4', '6', '8', 'A', 'C', 'E'}:\n        return \"Even\"\n    else:\n        return \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3861": {
    "question_id": "mbpp/386",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_or_odd(hex_number):\n    last_digit = hex_number[-1].upper()\n    if last_digit in {'0', '2', '4', '6', '8', 'A', 'C', 'E'}:\n        return \"Even\"\n    else:\n        return \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3862": {
    "question_id": "mbpp/386",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_or_odd(hex_number):\n    if not hex_number:\n        return \"Odd\"\n    last_digit = hex_number[-1].upper()\n    if last_digit in {'0', '2', '4', '6', '8', 'A', 'C', 'E'}:\n        return \"Even\"\n    else:\n        return \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3863": {
    "question_id": "mbpp/386",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_or_odd(hex_number):\n    last_digit = hex_number[-1].upper()\n    if last_digit in {'0', '2', '4', '6', '8', 'A', 'C', 'E'}:\n        return \"Even\"\n    else:\n        return \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3864": {
    "question_id": "mbpp/386",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_or_odd(hex_number):\n    if not hex_number:\n        return \"Even\"\n    last_digit = hex_number[-1].upper()\n    if last_digit in {'0', '2', '4', '6', '8', 'A', 'C', 'E'}:\n        return \"Even\"\n    else:\n        return \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3865": {
    "question_id": "mbpp/386",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_or_odd(hex_number):\n    if not hex_number:\n        return \"Even\"\n    last_digit = hex_number[-1].upper()\n    if last_digit in {'0', '2', '4', '6', '8', 'A', 'C', 'E'}:\n        return \"Even\"\n    else:\n        return \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3866": {
    "question_id": "mbpp/386",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_or_odd(hex_number):\n    last_digit = hex_number[-1].upper()\n    if last_digit in {'0', '2', '4', '6', '8', 'A', 'C', 'E'}:\n        return \"Even\"\n    else:\n        return \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3867": {
    "question_id": "mbpp/386",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_or_odd(hex_number):\n    last_digit = hex_number[-1].upper()\n    if last_digit in {'0', '2', '4', '6', '8', 'A', 'C', 'E'}:\n        return \"Even\"\n    else:\n        return \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3868": {
    "question_id": "mbpp/386",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_or_odd(hex_number):\n    last_digit = hex_number[-1].upper()\n    if last_digit in {'0', '2', '4', '6', '8', 'A', 'C', 'E'}:\n        return \"Even\"\n    else:\n        return \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3869": {
    "question_id": "mbpp/386",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_or_odd(hex_number):\n    last_digit = hex_number[-1].upper()\n    if last_digit in {'0', '2', '4', '6', '8', 'A', 'C', 'E'}:\n        return \"Even\"\n    else:\n        return \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3870": {
    "question_id": "mbpp/387",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3871": {
    "question_id": "mbpp/387",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3872": {
    "question_id": "mbpp/387",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3873": {
    "question_id": "mbpp/387",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3874": {
    "question_id": "mbpp/387",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3875": {
    "question_id": "mbpp/387",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3876": {
    "question_id": "mbpp/387",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3877": {
    "question_id": "mbpp/387",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3878": {
    "question_id": "mbpp/387",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3879": {
    "question_id": "mbpp/387",
    "model": "deepseek-v3-250324",
    "generation_code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3880": {
    "question_id": "mbpp/388",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3881": {
    "question_id": "mbpp/388",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3882": {
    "question_id": "mbpp/388",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3883": {
    "question_id": "mbpp/388",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3884": {
    "question_id": "mbpp/388",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3885": {
    "question_id": "mbpp/388",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3886": {
    "question_id": "mbpp/388",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3887": {
    "question_id": "mbpp/388",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3888": {
    "question_id": "mbpp/388",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3889": {
    "question_id": "mbpp/388",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3890": {
    "question_id": "mbpp/389",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_string(items, prefix):\n    return [prefix.format(item) for item in items]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3891": {
    "question_id": "mbpp/389",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_string(lst, string):\n    return [string.format(item) for item in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3892": {
    "question_id": "mbpp/389",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_string(items, string):\n    return [string.format(item) for item in items]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3893": {
    "question_id": "mbpp/389",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_string(items, string):\n    return [string.format(item) for item in items]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3894": {
    "question_id": "mbpp/389",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_string(items, string):\n    return [string.format(item) for item in items]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3895": {
    "question_id": "mbpp/389",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_string(items, prefix):\n    return [prefix.format(item) for item in items]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3896": {
    "question_id": "mbpp/389",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_string(lst, string):\n    return [string.format(item) for item in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3897": {
    "question_id": "mbpp/389",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_string(lst, string):\n    return [string.format(item) for item in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3898": {
    "question_id": "mbpp/389",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_string(items, string):\n    return [string.format(item) for item in items]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3899": {
    "question_id": "mbpp/389",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_string(lst, string):\n    return [string.format(item) for item in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3900": {
    "question_id": "mbpp/390",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {names[i]: values[i]}}\n        result.append(nested_dict)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3901": {
    "question_id": "mbpp/390",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {names[i]: values[i]}}\n        result.append(nested_dict)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3902": {
    "question_id": "mbpp/390",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {names[i]: values[i]}}\n        result.append(nested_dict)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3903": {
    "question_id": "mbpp/390",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {names[i]: values[i]}}\n        result.append(nested_dict)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3904": {
    "question_id": "mbpp/390",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {names[i]: values[i]}}\n        result.append(nested_dict)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3905": {
    "question_id": "mbpp/390",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {names[i]: values[i]}\n        outer_dict = {keys[i]: nested_dict}\n        result.append(outer_dict)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3906": {
    "question_id": "mbpp/390",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {names[i]: values[i]}}\n        result.append(nested_dict)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3907": {
    "question_id": "mbpp/390",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {names[i]: values[i]}}\n        result.append(nested_dict)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3908": {
    "question_id": "mbpp/390",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {names[i]: values[i]}}\n        result.append(nested_dict)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3909": {
    "question_id": "mbpp/390",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {names[i]: values[i]}}\n        result.append(nested_dict)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3910": {
    "question_id": "mbpp/391",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 0\n        sum_parts = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        memo[n] = max(sum_parts, n)\n        return memo[n]\n    \n    return helper(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3911": {
    "question_id": "mbpp/391",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 0\n        sum_parts = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        memo[n] = max(sum_parts, n)\n        return memo[n]\n    \n    return helper(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3912": {
    "question_id": "mbpp/391",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 0\n        sum_parts = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        memo[n] = max(sum_parts, n)\n        return memo[n]\n    \n    return helper(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3913": {
    "question_id": "mbpp/391",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 0\n        sum_parts = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        memo[n] = max(sum_parts, n)\n        return memo[n]\n    \n    return helper(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3914": {
    "question_id": "mbpp/391",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 0\n        sum_parts = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        memo[n] = max(sum_parts, n)\n        return memo[n]\n    \n    return helper(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3915": {
    "question_id": "mbpp/391",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 0\n        sum_parts = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        memo[n] = max(sum_parts, n)\n        return memo[n]\n    \n    return helper(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3916": {
    "question_id": "mbpp/391",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 0\n        sum_parts = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        memo[n] = max(sum_parts, n)\n        return memo[n]\n    \n    return helper(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3917": {
    "question_id": "mbpp/391",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 0\n        sum_parts = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        res = max(sum_parts, n)\n        memo[n] = res\n        return res\n    \n    return helper(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3918": {
    "question_id": "mbpp/391",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 0\n        sum_parts = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        memo[n] = max(sum_parts, n)\n        return memo[n]\n    \n    return helper(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3919": {
    "question_id": "mbpp/391",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 0\n        sum_parts = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        memo[n] = max(sum_parts, n)\n        return memo[n]\n    \n    return helper(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3920": {
    "question_id": "mbpp/392",
    "model": "deepseek-v3-250324",
    "generation_code": "max_length_list = lambda lists: (max(len(l) for l in lists), max(lists, key=lambda x: len(x)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3921": {
    "question_id": "mbpp/392",
    "model": "deepseek-v3-250324",
    "generation_code": "max_length_list = lambda lists: (max(len(lst) for lst in lists), max(lists, key=lambda x: len(x))) if lists else (0, [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3922": {
    "question_id": "mbpp/392",
    "model": "deepseek-v3-250324",
    "generation_code": "max_length_list = lambda lists: (max(len(l) for l in lists), max(lists, key=lambda x: len(x))) if lists else (0, [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3923": {
    "question_id": "mbpp/392",
    "model": "deepseek-v3-250324",
    "generation_code": "max_length_list = lambda lists: (max(len(l) for l in lists), max(lists, key=lambda x: len(x))) if lists else (0, [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3924": {
    "question_id": "mbpp/392",
    "model": "deepseek-v3-250324",
    "generation_code": "max_length_list = lambda lists: (max(len(l) for l in lists), max(lists, key=lambda x: len(x))) if lists else (0, [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3925": {
    "question_id": "mbpp/392",
    "model": "deepseek-v3-250324",
    "generation_code": "max_length_list = lambda lists: (max(len(l) for l in lists), max(lists, key=lambda x: len(x))) if lists else (0, [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3926": {
    "question_id": "mbpp/392",
    "model": "deepseek-v3-250324",
    "generation_code": "max_length_list = lambda lists: (max(len(lst) for lst in lists), max(lists, key=lambda x: len(x))) if lists else (0, [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3927": {
    "question_id": "mbpp/392",
    "model": "deepseek-v3-250324",
    "generation_code": "max_length_list = lambda lists: (max(len(lst) for lst in lists), next(lst for lst in lists if len(lst) == max(len(lst) for lst in lists)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3928": {
    "question_id": "mbpp/392",
    "model": "deepseek-v3-250324",
    "generation_code": "max_length_list = lambda lists: (max(len(l) for l in lists), next(l for l in lists if len(l) == max(len(x) for x in lists)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3929": {
    "question_id": "mbpp/392",
    "model": "deepseek-v3-250324",
    "generation_code": "max_length_list = lambda lists: (max(len(l) for l in lists), max(lists, key=lambda x: len(x))) if lists else (0, [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3930": {
    "question_id": "mbpp/393",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_distinct(t):\n    return len(t) == len(set(t))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3931": {
    "question_id": "mbpp/393",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_distinct(t):\n    return len(t) == len(set(t))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3932": {
    "question_id": "mbpp/393",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_distinct(t):\n    return len(t) == len(set(t))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3933": {
    "question_id": "mbpp/393",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_distinct(t):\n    return len(t) == len(set(t))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3934": {
    "question_id": "mbpp/393",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_distinct(t):\n    return len(t) == len(set(t))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3935": {
    "question_id": "mbpp/393",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_distinct(t):\n    return len(t) == len(set(t))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3936": {
    "question_id": "mbpp/393",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_distinct(t):\n    return len(t) == len(set(t))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3937": {
    "question_id": "mbpp/393",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_distinct(t):\n    return len(t) == len(set(t))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3938": {
    "question_id": "mbpp/393",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_distinct(t):\n    return len(t) == len(set(t))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3939": {
    "question_id": "mbpp/393",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_distinct(t):\n    return len(t) == len(set(t))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3940": {
    "question_id": "mbpp/394",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3941": {
    "question_id": "mbpp/394",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3942": {
    "question_id": "mbpp/394",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3943": {
    "question_id": "mbpp/394",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3944": {
    "question_id": "mbpp/394",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3945": {
    "question_id": "mbpp/394",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3946": {
    "question_id": "mbpp/394",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3947": {
    "question_id": "mbpp/394",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3948": {
    "question_id": "mbpp/394",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3949": {
    "question_id": "mbpp/394",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3950": {
    "question_id": "mbpp/395",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_char(string):\n    if len(string) == 0:\n        return \"Invalid\"\n    pattern = r'^(.).*\\1$'\n    if re.match(pattern, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"",
    "test_output": "FAILED: expect Valid,in fact Invalid",
    "test_result": "False"
  },
  "3951": {
    "question_id": "mbpp/395",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_char(string):\n    if len(string) == 0:\n        return \"Invalid\"\n    pattern = r'^(.).*\\1$'\n    if re.match(pattern, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"",
    "test_output": "FAILED: expect Valid,in fact Invalid",
    "test_result": "False"
  },
  "3952": {
    "question_id": "mbpp/395",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_char(s):\n    if len(s) == 0:\n        return \"Invalid\"\n    pattern = r'^(.).*\\1$'\n    if re.match(pattern, s):\n        return \"Valid\"\n    else:\n        return \"Invalid\"",
    "test_output": "FAILED: expect Valid,in fact Invalid",
    "test_result": "False"
  },
  "3953": {
    "question_id": "mbpp/395",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_char(string):\n    if not string:\n        return \"Invalid\"\n    pattern = r'^(.).*\\1$'\n    if re.match(pattern, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"",
    "test_output": "FAILED: expect Valid,in fact Invalid",
    "test_result": "False"
  },
  "3954": {
    "question_id": "mbpp/395",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_char(string):\n    if re.match(r'^(.).*\\1$', string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"",
    "test_output": "FAILED: expect Valid,in fact Invalid",
    "test_result": "False"
  },
  "3955": {
    "question_id": "mbpp/395",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_char(string):\n    if len(string) == 0:\n        return \"Invalid\"\n    pattern = r'^(.).*\\1$'\n    if re.match(pattern, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"",
    "test_output": "FAILED: expect Valid,in fact Invalid",
    "test_result": "False"
  },
  "3956": {
    "question_id": "mbpp/395",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_char(string):\n    if len(string) == 0:\n        return \"Invalid\"\n    pattern = r'^(.).*\\1$'\n    if re.match(pattern, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"",
    "test_output": "FAILED: expect Valid,in fact Invalid",
    "test_result": "False"
  },
  "3957": {
    "question_id": "mbpp/395",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_char(string):\n    if len(string) == 0:\n        return \"Invalid\"\n    pattern = r'^(.).*\\1$'\n    if re.match(pattern, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"",
    "test_output": "FAILED: expect Valid,in fact Invalid",
    "test_result": "False"
  },
  "3958": {
    "question_id": "mbpp/395",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_char(string):\n    if len(string) == 0:\n        return \"Invalid\"\n    pattern = r'^(.).*\\1$'\n    if re.match(pattern, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"",
    "test_output": "FAILED: expect Valid,in fact Invalid",
    "test_result": "False"
  },
  "3959": {
    "question_id": "mbpp/395",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_char(string):\n    if len(string) == 0:\n        return \"Invalid\"\n    pattern = r'^(.).*\\1$'\n    if re.match(pattern, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"",
    "test_output": "FAILED: expect Valid,in fact Invalid",
    "test_result": "False"
  },
  "3960": {
    "question_id": "mbpp/396",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_numbers(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return float(b)\n    elif b <= a <= c or c <= a <= b:\n        return float(a)\n    else:\n        return float(c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3961": {
    "question_id": "mbpp/396",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return float(numbers[1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3962": {
    "question_id": "mbpp/396",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_numbers(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return float(b)\n    elif b <= a <= c or c <= a <= b:\n        return float(a)\n    else:\n        return float(c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3963": {
    "question_id": "mbpp/396",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_numbers(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return float(b)\n    elif b <= a <= c or c <= a <= b:\n        return float(a)\n    else:\n        return float(c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3964": {
    "question_id": "mbpp/396",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_numbers(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return float(b)\n    elif b <= a <= c or c <= a <= b:\n        return float(a)\n    else:\n        return float(c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3965": {
    "question_id": "mbpp/396",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_numbers(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return float(b)\n    elif b <= a <= c or c <= a <= b:\n        return float(a)\n    else:\n        return float(c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3966": {
    "question_id": "mbpp/396",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_numbers(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return float(b)\n    elif b <= a <= c or c <= a <= b:\n        return float(a)\n    else:\n        return float(c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3967": {
    "question_id": "mbpp/396",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_numbers(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return float(b)\n    elif b <= a <= c or c <= a <= b:\n        return float(a)\n    else:\n        return float(c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3968": {
    "question_id": "mbpp/396",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_numbers(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return float(b)\n    elif b <= a <= c or c <= a <= b:\n        return float(a)\n    else:\n        return float(c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3969": {
    "question_id": "mbpp/396",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_numbers(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return float(b)\n    elif b <= a <= c or c <= a <= b:\n        return float(a)\n    else:\n        return float(c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3970": {
    "question_id": "mbpp/397",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_digits(lst):\n    total = 0\n    for num in lst:\n        n = abs(num)\n        while n > 0:\n            total += n % 10\n            n = n // 10\n    return total",
    "test_output": "FAILED: TypeError: bad operand type for abs(): 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 276, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 4, in sum_of_digits\nTypeError: bad operand type for abs(): 'list'\n",
    "test_result": "False"
  },
  "3971": {
    "question_id": "mbpp/397",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_digits(lst):\n    total = 0\n    for num in lst:\n        n = abs(num)\n        while n > 0:\n            total += n % 10\n            n = n // 10\n    return total",
    "test_output": "FAILED: TypeError: bad operand type for abs(): 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 4, in sum_of_digits\nTypeError: bad operand type for abs(): 'list'\n",
    "test_result": "False"
  },
  "3972": {
    "question_id": "mbpp/397",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_digits(lst):\n    total = 0\n    for num in lst:\n        n = abs(num)\n        while n > 0:\n            total += n % 10\n            n = n // 10\n    return total",
    "test_output": "FAILED: TypeError: bad operand type for abs(): 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 4, in sum_of_digits\nTypeError: bad operand type for abs(): 'list'\n",
    "test_result": "False"
  },
  "3973": {
    "question_id": "mbpp/397",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_digits(lst):\n    total = 0\n    for num in lst:\n        n = abs(num)\n        while n > 0:\n            total += n % 10\n            n = n // 10\n    return total",
    "test_output": "FAILED: TypeError: bad operand type for abs(): 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 4, in sum_of_digits\nTypeError: bad operand type for abs(): 'list'\n",
    "test_result": "False"
  },
  "3974": {
    "question_id": "mbpp/397",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_digits(lst):\n    total = 0\n    for num in lst:\n        n = abs(num)\n        while n > 0:\n            total += n % 10\n            n = n // 10\n    return total",
    "test_output": "FAILED: TypeError: bad operand type for abs(): 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 4, in sum_of_digits\nTypeError: bad operand type for abs(): 'list'\n",
    "test_result": "False"
  },
  "3975": {
    "question_id": "mbpp/397",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_digits(numbers):\n    total = 0\n    for num in numbers:\n        n = abs(num)\n        while n > 0:\n            total += n % 10\n            n = n // 10\n    return total",
    "test_output": "FAILED: TypeError: bad operand type for abs(): 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 4, in sum_of_digits\nTypeError: bad operand type for abs(): 'list'\n",
    "test_result": "False"
  },
  "3976": {
    "question_id": "mbpp/397",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_digits(lst):\n    total = 0\n    for num in lst:\n        n = abs(num)\n        while n > 0:\n            total += n % 10\n            n = n // 10\n    return total",
    "test_output": "FAILED: TypeError: bad operand type for abs(): 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 4, in sum_of_digits\nTypeError: bad operand type for abs(): 'list'\n",
    "test_result": "False"
  },
  "3977": {
    "question_id": "mbpp/397",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_digits(lst):\n    total = 0\n    for num in lst:\n        n = abs(num)\n        while n > 0:\n            total += n % 10\n            n = n // 10\n    return total",
    "test_output": "FAILED: TypeError: bad operand type for abs(): 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 4, in sum_of_digits\nTypeError: bad operand type for abs(): 'list'\n",
    "test_result": "False"
  },
  "3978": {
    "question_id": "mbpp/397",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_digits(lst):\n    total = 0\n    for num in lst:\n        n = abs(num)\n        while n > 0:\n            total += n % 10\n            n = n // 10\n    return total",
    "test_output": "FAILED: TypeError: bad operand type for abs(): 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 4, in sum_of_digits\nTypeError: bad operand type for abs(): 'list'\n",
    "test_result": "False"
  },
  "3979": {
    "question_id": "mbpp/397",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_digits(lst):\n    total = 0\n    for num in lst:\n        n = abs(num)\n        while n > 0:\n            total += n % 10\n            n = n // 10\n    return total",
    "test_output": "FAILED: TypeError: bad operand type for abs(): 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 4, in sum_of_digits\nTypeError: bad operand type for abs(): 'list'\n",
    "test_result": "False"
  },
  "3980": {
    "question_id": "mbpp/398",
    "model": "deepseek-v3-250324",
    "generation_code": "def bitwise_xor(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3981": {
    "question_id": "mbpp/398",
    "model": "deepseek-v3-250324",
    "generation_code": "def bitwise_xor(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3982": {
    "question_id": "mbpp/398",
    "model": "deepseek-v3-250324",
    "generation_code": "def bitwise_xor(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3983": {
    "question_id": "mbpp/398",
    "model": "deepseek-v3-250324",
    "generation_code": "def bitwise_xor(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3984": {
    "question_id": "mbpp/398",
    "model": "deepseek-v3-250324",
    "generation_code": "def bitwise_xor(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3985": {
    "question_id": "mbpp/398",
    "model": "deepseek-v3-250324",
    "generation_code": "def bitwise_xor(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3986": {
    "question_id": "mbpp/398",
    "model": "deepseek-v3-250324",
    "generation_code": "def bitwise_xor(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3987": {
    "question_id": "mbpp/398",
    "model": "deepseek-v3-250324",
    "generation_code": "def bitwise_xor(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3988": {
    "question_id": "mbpp/398",
    "model": "deepseek-v3-250324",
    "generation_code": "def bitwise_xor(tuple1, tuple2):\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3989": {
    "question_id": "mbpp/398",
    "model": "deepseek-v3-250324",
    "generation_code": "def bitwise_xor(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3990": {
    "question_id": "mbpp/399",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_freq(lst):\n    unique_tuples = set()\n    for t in lst:\n        sorted_t = tuple(sorted(t))\n        unique_tuples.add(sorted_t)\n    return len(unique_tuples)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3991": {
    "question_id": "mbpp/399",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_freq(lst):\n    unique_tuples = set()\n    for t in lst:\n        sorted_t = tuple(sorted(t))\n        unique_tuples.add(sorted_t)\n    return len(unique_tuples)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3992": {
    "question_id": "mbpp/399",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_freq(lst):\n    unique_tuples = set()\n    for t in lst:\n        sorted_tuple = tuple(sorted(t))\n        unique_tuples.add(sorted_tuple)\n    return len(unique_tuples)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3993": {
    "question_id": "mbpp/399",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_freq(lst):\n    unique_tuples = set()\n    for t in lst:\n        sorted_tuple = tuple(sorted(t))\n        unique_tuples.add(sorted_tuple)\n    return len(unique_tuples)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3994": {
    "question_id": "mbpp/399",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_freq(lst):\n    unique_tuples = set()\n    for t in lst:\n        sorted_tuple = tuple(sorted(t))\n        unique_tuples.add(sorted_tuple)\n    return len(unique_tuples)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3995": {
    "question_id": "mbpp/399",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_freq(lst):\n    unique_tuples = set()\n    for t in lst:\n        sorted_tuple = tuple(sorted(t))\n        unique_tuples.add(sorted_tuple)\n    return len(unique_tuples)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3996": {
    "question_id": "mbpp/399",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_freq(lst):\n    unique_tuples = set()\n    for t in lst:\n        sorted_tuple = tuple(sorted(t))\n        unique_tuples.add(sorted_tuple)\n    return len(unique_tuples)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3997": {
    "question_id": "mbpp/399",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_freq(lst):\n    unique_tuples = set()\n    for t in lst:\n        sorted_t = tuple(sorted(t))\n        unique_tuples.add(sorted_t)\n    return len(unique_tuples)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3998": {
    "question_id": "mbpp/399",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_freq(lst):\n    unique_tuples = set()\n    for t in lst:\n        sorted_t = tuple(sorted(t))\n        unique_tuples.add(sorted_t)\n    return len(unique_tuples)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "3999": {
    "question_id": "mbpp/399",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_freq(lst):\n    unique_tuples = set()\n    for t in lst:\n        sorted_t = tuple(sorted(t))\n        unique_tuples.add(sorted_t)\n    return len(unique_tuples)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4000": {
    "question_id": "mbpp/400",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_nested_tuples(tuple1, tuple2):\n    result = []\n    for t1, t2 in zip(tuple1, tuple2):\n        if len(t1) != len(t2):\n            raise ValueError(\"Tuples must be of the same length\")\n        summed = tuple(a + b for a, b in zip(t1, t2))\n        result.append(summed)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4001": {
    "question_id": "mbpp/400",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_nested_tuples(tuple1, tuple2):\n    result = []\n    for t1, t2 in zip(tuple1, tuple2):\n        if len(t1) != len(t2):\n            raise ValueError(\"Tuples must be of the same length\")\n        summed = tuple(a + b for a, b in zip(t1, t2))\n        result.append(summed)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4002": {
    "question_id": "mbpp/400",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_nested_tuples(tuple1, tuple2):\n    return tuple(tuple(a + b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4003": {
    "question_id": "mbpp/400",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_nested_tuples(tuple1, tuple2):\n    return tuple(tuple(a + b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4004": {
    "question_id": "mbpp/400",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_nested_tuples(tuple1, tuple2):\n    return tuple(tuple(a + b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4005": {
    "question_id": "mbpp/400",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_nested_tuples(tuple1, tuple2):\n    result = []\n    for t1, t2 in zip(tuple1, tuple2):\n        if len(t1) != len(t2):\n            raise ValueError(\"Tuples must have the same length\")\n        summed = tuple(a + b for a, b in zip(t1, t2))\n        result.append(summed)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4006": {
    "question_id": "mbpp/400",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_nested_tuples(tuple1, tuple2):\n    return tuple(tuple(a + b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4007": {
    "question_id": "mbpp/400",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_nested_tuples(tuple1, tuple2):\n    result = []\n    for t1, t2 in zip(tuple1, tuple2):\n        if len(t1) != len(t2):\n            raise ValueError(\"Tuples must be of the same length\")\n        summed = tuple(a + b for a, b in zip(t1, t2))\n        result.append(summed)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4008": {
    "question_id": "mbpp/400",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_nested_tuples(tuple1, tuple2):\n    return tuple(tuple(a + b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4009": {
    "question_id": "mbpp/400",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_nested_tuples(tuple1, tuple2):\n    return tuple(\n        tuple(a + b for a, b in zip(t1, t2))\n        for t1, t2 in zip(tuple1, tuple2)\n    )",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4010": {
    "question_id": "mbpp/401",
    "model": "deepseek-v3-250324",
    "generation_code": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 10,in fact 0",
    "test_result": "False"
  },
  "4011": {
    "question_id": "mbpp/401",
    "model": "deepseek-v3-250324",
    "generation_code": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 10,in fact 0",
    "test_result": "False"
  },
  "4012": {
    "question_id": "mbpp/401",
    "model": "deepseek-v3-250324",
    "generation_code": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 10,in fact 0",
    "test_result": "False"
  },
  "4013": {
    "question_id": "mbpp/401",
    "model": "deepseek-v3-250324",
    "generation_code": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 10,in fact 0",
    "test_result": "False"
  },
  "4014": {
    "question_id": "mbpp/401",
    "model": "deepseek-v3-250324",
    "generation_code": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 10,in fact 0",
    "test_result": "False"
  },
  "4015": {
    "question_id": "mbpp/401",
    "model": "deepseek-v3-250324",
    "generation_code": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 10,in fact 0",
    "test_result": "False"
  },
  "4016": {
    "question_id": "mbpp/401",
    "model": "deepseek-v3-250324",
    "generation_code": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    numerator = 1\n    for i in range(r):\n        numerator = (numerator * (n - i)) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = (denominator * i) % p\n    return (numerator * pow(denominator, p - 2, p)) % p",
    "test_output": "FAILED: expect 10,in fact 0",
    "test_result": "False"
  },
  "4017": {
    "question_id": "mbpp/401",
    "model": "deepseek-v3-250324",
    "generation_code": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 10,in fact 0",
    "test_result": "False"
  },
  "4018": {
    "question_id": "mbpp/401",
    "model": "deepseek-v3-250324",
    "generation_code": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 10,in fact 0",
    "test_result": "False"
  },
  "4019": {
    "question_id": "mbpp/401",
    "model": "deepseek-v3-250324",
    "generation_code": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 10,in fact 0",
    "test_result": "False"
  },
  "4020": {
    "question_id": "mbpp/402",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4021": {
    "question_id": "mbpp/402",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https:// or ftp:// or ftps://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4022": {
    "question_id": "mbpp/402",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https:// or ftp:// or ftps://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4023": {
    "question_id": "mbpp/402",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https:// or ftp:// or ftps://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4024": {
    "question_id": "mbpp/402",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https:// or ftp:// or ftps://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4025": {
    "question_id": "mbpp/402",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https:// or ftp:// or ftps://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4026": {
    "question_id": "mbpp/402",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https:// or ftp:// or ftps://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4027": {
    "question_id": "mbpp/402",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4028": {
    "question_id": "mbpp/402",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https:// or ftp:// or ftps://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4029": {
    "question_id": "mbpp/402",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https:// or ftp:// or ftps://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4030": {
    "question_id": "mbpp/403",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4031": {
    "question_id": "mbpp/403",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4032": {
    "question_id": "mbpp/403",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4033": {
    "question_id": "mbpp/403",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4034": {
    "question_id": "mbpp/403",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4035": {
    "question_id": "mbpp/403",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4036": {
    "question_id": "mbpp/403",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4037": {
    "question_id": "mbpp/403",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4038": {
    "question_id": "mbpp/403",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4039": {
    "question_id": "mbpp/403",
    "model": "deepseek-v3-250324",
    "generation_code": "def minimum(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4040": {
    "question_id": "mbpp/404",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuplex(tuplex, element):\n    return element in tuplex",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4041": {
    "question_id": "mbpp/404",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuplex(tuplex, element):\n    return element in tuplex",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4042": {
    "question_id": "mbpp/404",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuplex(tuplex, element):\n    return element in tuplex",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4043": {
    "question_id": "mbpp/404",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuplex(tuplex, element):\n    return element in tuplex",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4044": {
    "question_id": "mbpp/404",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuplex(tuplex, element):\n    return element in tuplex",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4045": {
    "question_id": "mbpp/404",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuplex(tuplex, element):\n    return element in tuplex",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4046": {
    "question_id": "mbpp/404",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuplex(tuplex, element):\n    return element in tuplex",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4047": {
    "question_id": "mbpp/404",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuplex(tuplex, element):\n    return element in tuplex",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4048": {
    "question_id": "mbpp/404",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuplex(tuplex, element):\n    return element in tuplex",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4049": {
    "question_id": "mbpp/404",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuplex(tuplex, element):\n    return element in tuplex",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4050": {
    "question_id": "mbpp/405",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4051": {
    "question_id": "mbpp/405",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4052": {
    "question_id": "mbpp/405",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4053": {
    "question_id": "mbpp/405",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4054": {
    "question_id": "mbpp/405",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4055": {
    "question_id": "mbpp/405",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4056": {
    "question_id": "mbpp/405",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4057": {
    "question_id": "mbpp/405",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4058": {
    "question_id": "mbpp/405",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4059": {
    "question_id": "mbpp/405",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4060": {
    "question_id": "mbpp/406",
    "model": "deepseek-v3-250324",
    "generation_code": "def rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            pivot = i-1\n            for j in range(len(digits)-1, pivot, -1):\n                if digits[j] > digits[pivot]:\n                    digits[j], digits[pivot] = digits[pivot], digits[j]\n                    break\n            digits[pivot+1:] = sorted(digits[pivot+1:])\n            return int(''.join(digits))\n    return -1",
    "test_output": "FAILED: expect False,in fact -1",
    "test_result": "False"
  },
  "4061": {
    "question_id": "mbpp/406",
    "model": "deepseek-v3-250324",
    "generation_code": "def rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    else:\n        return -1\n    \n    for j in range(len(digits)-1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i+1:] = sorted(digits[i+1:])\n    result = int(''.join(digits))\n    return result if result > n else -1",
    "test_output": "FAILED: expect False,in fact -1",
    "test_result": "False"
  },
  "4062": {
    "question_id": "mbpp/406",
    "model": "deepseek-v3-250324",
    "generation_code": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n    \n    pivot = -1\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            pivot = i\n            break\n    \n    if pivot == -1:\n        return -1\n    \n    for i in range(length - 1, pivot, -1):\n        if digits[i] > digits[pivot]:\n            digits[i], digits[pivot] = digits[pivot], digits[i]\n            break\n    \n    digits[pivot + 1:] = digits[pivot + 1:][::-1]\n    \n    result = int(''.join(digits))\n    return result if result > n else -1",
    "test_output": "FAILED: expect False,in fact -1",
    "test_result": "False"
  },
  "4063": {
    "question_id": "mbpp/406",
    "model": "deepseek-v3-250324",
    "generation_code": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n    \n    pivot = -1\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            pivot = i\n            break\n    \n    if pivot == -1:\n        return -1\n    \n    for j in range(length - 1, pivot, -1):\n        if digits[j] > digits[pivot]:\n            digits[pivot], digits[j] = digits[j], digits[pivot]\n            break\n    \n    digits[pivot + 1:] = reversed(digits[pivot + 1:])\n    \n    result = int(''.join(digits))\n    return result if result > n else -1",
    "test_output": "FAILED: expect False,in fact -1",
    "test_result": "False"
  },
  "4064": {
    "question_id": "mbpp/406",
    "model": "deepseek-v3-250324",
    "generation_code": "def rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            pivot = i-1\n            for j in range(len(digits)-1, pivot, -1):\n                if digits[j] > digits[pivot]:\n                    digits[j], digits[pivot] = digits[pivot], digits[j]\n                    break\n            digits[pivot+1:] = digits[pivot+1:][::-1]\n            return int(''.join(digits))\n    return -1",
    "test_output": "FAILED: expect False,in fact -1",
    "test_result": "False"
  },
  "4065": {
    "question_id": "mbpp/406",
    "model": "deepseek-v3-250324",
    "generation_code": "def rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            pivot = i-1\n            for j in range(len(digits)-1, pivot, -1):\n                if digits[j] > digits[pivot]:\n                    digits[j], digits[pivot] = digits[pivot], digits[j]\n                    break\n            digits[pivot+1:] = sorted(digits[pivot+1:])\n            return int(''.join(digits))\n    return -1",
    "test_output": "FAILED: expect False,in fact -1",
    "test_result": "False"
  },
  "4066": {
    "question_id": "mbpp/406",
    "model": "deepseek-v3-250324",
    "generation_code": "def rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    else:\n        return -1\n    \n    for j in range(len(digits)-1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i+1:] = sorted(digits[i+1:])\n    result = int(''.join(digits))\n    return result if result > n else -1",
    "test_output": "FAILED: expect False,in fact -1",
    "test_result": "False"
  },
  "4067": {
    "question_id": "mbpp/406",
    "model": "deepseek-v3-250324",
    "generation_code": "def rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            break\n    else:\n        return -1\n    \n    pivot = i-1\n    for j in range(len(digits)-1, pivot, -1):\n        if digits[j] > digits[pivot]:\n            break\n    \n    digits[pivot], digits[j] = digits[j], digits[pivot]\n    digits[pivot+1:] = digits[:pivot:-1]\n    \n    result = int(''.join(digits))\n    return result if result > n else -1",
    "test_output": "FAILED: expect False,in fact -1",
    "test_result": "False"
  },
  "4068": {
    "question_id": "mbpp/406",
    "model": "deepseek-v3-250324",
    "generation_code": "def rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            for j in range(len(digits)-1, i, -1):\n                if digits[j] > digits[i]:\n                    digits[i], digits[j] = digits[j], digits[i]\n                    digits[i+1:] = sorted(digits[i+1:])\n                    return int(''.join(digits))\n    return -1",
    "test_output": "FAILED: expect False,in fact -1",
    "test_result": "False"
  },
  "4069": {
    "question_id": "mbpp/406",
    "model": "deepseek-v3-250324",
    "generation_code": "def rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            pivot = digits[i-1]\n            for j in range(len(digits)-1, i-1, -1):\n                if digits[j] > pivot:\n                    digits[i-1], digits[j] = digits[j], digits[i-1]\n                    digits[i:] = sorted(digits[i:])\n                    return int(''.join(digits))\n    return -1",
    "test_output": "FAILED: expect False,in fact -1",
    "test_result": "False"
  },
  "4070": {
    "question_id": "mbpp/407",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for num1 in nums1[:k]:\n        for num2 in nums2[:k]:\n            heapq.heappush(heap, (num1 + num2, [num1, num2]))\n    \n    result = []\n    for _ in range(min(k, len(heap))):\n        _, pair = heapq.heappop(heap)\n        result.append(pair)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4071": {
    "question_id": "mbpp/407",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for num1 in nums1[:k]:\n        for num2 in nums2[:k]:\n            heapq.heappush(heap, (num1 + num2, [num1, num2]))\n    \n    result = []\n    for _ in range(min(k, len(nums1) * len(nums2))):\n        if heap:\n            _, pair = heapq.heappop(heap)\n            result.append(pair)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4072": {
    "question_id": "mbpp/407",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, [num1, num2]))\n    \n    result = []\n    for _ in range(min(k, len(heap))):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4073": {
    "question_id": "mbpp/407",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n    \n    result = []\n    for _ in range(min(k, len(heap))):\n        _, num1, num2 = heapq.heappop(heap)\n        result.append([num1, num2])\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4074": {
    "question_id": "mbpp/407",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for num1 in nums1[:k]:\n        for num2 in nums2[:k]:\n            heapq.heappush(heap, (num1 + num2, [num1, num2]))\n    \n    result = []\n    for _ in range(min(k, len(heap))):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4075": {
    "question_id": "mbpp/407",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for num1 in nums1[:k]:\n        for num2 in nums2[:k]:\n            heapq.heappush(heap, (num1 + num2, [num1, num2]))\n    \n    result = []\n    for _ in range(min(k, len(heap))):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4076": {
    "question_id": "mbpp/407",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, [num1, num2]))\n    \n    result = []\n    for _ in range(min(k, len(heap))):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4077": {
    "question_id": "mbpp/407",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, [num1, num2]))\n    \n    result = []\n    for _ in range(min(k, len(heap))):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4078": {
    "question_id": "mbpp/407",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for num1 in nums1[:k]:\n        for num2 in nums2[:k]:\n            heapq.heappush(heap, (num1 + num2, [num1, num2]))\n    \n    result = []\n    for _ in range(min(k, len(heap))):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4079": {
    "question_id": "mbpp/407",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    for num1 in nums1[:k]:\n        for num2 in nums2[:k]:\n            heapq.heappush(heap, (num1 + num2, [num1, num2]))\n    \n    result = []\n    for _ in range(min(k, len(nums1) * len(nums2))):\n        if heap:\n            _, pair = heapq.heappop(heap)\n            result.append(pair)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4080": {
    "question_id": "mbpp/408",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_product_tuple(lst):\n    if not lst:\n        return None\n    min_product = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4081": {
    "question_id": "mbpp/408",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_product_tuple(lst):\n    if not lst:\n        return None\n    min_prod = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_prod:\n            min_prod = product\n    return min_prod",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4082": {
    "question_id": "mbpp/408",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_product_tuple(lst):\n    if not lst:\n        return None\n    min_product = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4083": {
    "question_id": "mbpp/408",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_product_tuple(lst):\n    if not lst:\n        return None\n    min_product = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4084": {
    "question_id": "mbpp/408",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_product_tuple(lst):\n    if not lst:\n        return None\n    min_prod = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_prod:\n            min_prod = product\n    return min_prod",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4085": {
    "question_id": "mbpp/408",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_product_tuple(lst):\n    if not lst:\n        return None\n    min_product = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4086": {
    "question_id": "mbpp/408",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_product_tuple(lst):\n    if not lst:\n        return None\n    min_product = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4087": {
    "question_id": "mbpp/408",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_product_tuple(lst):\n    if not lst:\n        return None\n    min_product = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4088": {
    "question_id": "mbpp/408",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_product_tuple(lst):\n    if not lst:\n        return None\n    min_product = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4089": {
    "question_id": "mbpp/408",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_product_tuple(tuple_list):\n    if not tuple_list:\n        return None\n    min_product = float('inf')\n    for pair in tuple_list:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4090": {
    "question_id": "mbpp/409",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return min(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4091": {
    "question_id": "mbpp/409",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return min(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4092": {
    "question_id": "mbpp/409",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return min(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4093": {
    "question_id": "mbpp/409",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return min(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4094": {
    "question_id": "mbpp/409",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return min(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4095": {
    "question_id": "mbpp/409",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return min(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4096": {
    "question_id": "mbpp/409",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return min(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4097": {
    "question_id": "mbpp/409",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return min(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4098": {
    "question_id": "mbpp/409",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return min(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4099": {
    "question_id": "mbpp/409",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_val(lst):\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    if not numbers:\n        return None\n    return min(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4100": {
    "question_id": "mbpp/410",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4101": {
    "question_id": "mbpp/410",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4102": {
    "question_id": "mbpp/410",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4103": {
    "question_id": "mbpp/410",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4104": {
    "question_id": "mbpp/410",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4105": {
    "question_id": "mbpp/410",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4106": {
    "question_id": "mbpp/410",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4107": {
    "question_id": "mbpp/410",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef snake_to_camel(s):\n    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), s.title().replace('_', ''))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4108": {
    "question_id": "mbpp/410",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4109": {
    "question_id": "mbpp/410",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4110": {
    "question_id": "mbpp/411",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4111": {
    "question_id": "mbpp/411",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4112": {
    "question_id": "mbpp/411",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4113": {
    "question_id": "mbpp/411",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4114": {
    "question_id": "mbpp/411",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4115": {
    "question_id": "mbpp/411",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4116": {
    "question_id": "mbpp/411",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4117": {
    "question_id": "mbpp/411",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4118": {
    "question_id": "mbpp/411",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4119": {
    "question_id": "mbpp/411",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4120": {
    "question_id": "mbpp/412",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4121": {
    "question_id": "mbpp/412",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4122": {
    "question_id": "mbpp/412",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4123": {
    "question_id": "mbpp/412",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4124": {
    "question_id": "mbpp/412",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4125": {
    "question_id": "mbpp/412",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4126": {
    "question_id": "mbpp/412",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4127": {
    "question_id": "mbpp/412",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4128": {
    "question_id": "mbpp/412",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4129": {
    "question_id": "mbpp/412",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4130": {
    "question_id": "mbpp/413",
    "model": "deepseek-v3-250324",
    "generation_code": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4131": {
    "question_id": "mbpp/413",
    "model": "deepseek-v3-250324",
    "generation_code": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4132": {
    "question_id": "mbpp/413",
    "model": "deepseek-v3-250324",
    "generation_code": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4133": {
    "question_id": "mbpp/413",
    "model": "deepseek-v3-250324",
    "generation_code": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4134": {
    "question_id": "mbpp/413",
    "model": "deepseek-v3-250324",
    "generation_code": "def overlapping(lst1, lst2):\n    for item in lst1:\n        if item in lst2:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4135": {
    "question_id": "mbpp/413",
    "model": "deepseek-v3-250324",
    "generation_code": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4136": {
    "question_id": "mbpp/413",
    "model": "deepseek-v3-250324",
    "generation_code": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4137": {
    "question_id": "mbpp/413",
    "model": "deepseek-v3-250324",
    "generation_code": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4138": {
    "question_id": "mbpp/413",
    "model": "deepseek-v3-250324",
    "generation_code": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4139": {
    "question_id": "mbpp/413",
    "model": "deepseek-v3-250324",
    "generation_code": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4140": {
    "question_id": "mbpp/414",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 < max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "4141": {
    "question_id": "mbpp/414",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 < max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "4142": {
    "question_id": "mbpp/414",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1)\n    else:\n        return (min1, min2)",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "4143": {
    "question_id": "mbpp/414",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 < max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "4144": {
    "question_id": "mbpp/414",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 < max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "4145": {
    "question_id": "mbpp/414",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 < max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "4146": {
    "question_id": "mbpp/414",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2, max1 = max1, num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2, min1 = min1, num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 < max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "4147": {
    "question_id": "mbpp/414",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1)\n    else:\n        return (min1, min2)",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "4148": {
    "question_id": "mbpp/414",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max1, max2) if max1 < max2 else (max2, max1)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "4149": {
    "question_id": "mbpp/414",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 > max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (7, 8),in fact (8, 7)",
    "test_result": "False"
  },
  "4150": {
    "question_id": "mbpp/415",
    "model": "deepseek-v3-250324",
    "generation_code": "def breakSum(n):\n    if n == 0 or n == 1:\n        return n\n    return max(n, breakSum(n//2) + breakSum(n//3) + breakSum(n//4))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4151": {
    "question_id": "mbpp/415",
    "model": "deepseek-v3-250324",
    "generation_code": "def breakSum(n):\n    if n == 0 or n == 1:\n        return n\n    return max(n, breakSum(n//2) + breakSum(n//3) + breakSum(n//4))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4152": {
    "question_id": "mbpp/415",
    "model": "deepseek-v3-250324",
    "generation_code": "def breakSum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(n, breakSum(n//2) + breakSum(n//3) + breakSum(n//4))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4153": {
    "question_id": "mbpp/415",
    "model": "deepseek-v3-250324",
    "generation_code": "def breakSum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(n, breakSum(n//2) + breakSum(n//3) + breakSum(n//4))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4154": {
    "question_id": "mbpp/415",
    "model": "deepseek-v3-250324",
    "generation_code": "def breakSum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(n, breakSum(n//2) + breakSum(n//3) + breakSum(n//4))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4155": {
    "question_id": "mbpp/415",
    "model": "deepseek-v3-250324",
    "generation_code": "def breakSum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(n, breakSum(n//2) + breakSum(n//3) + breakSum(n//4))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4156": {
    "question_id": "mbpp/415",
    "model": "deepseek-v3-250324",
    "generation_code": "def breakSum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(n, breakSum(n//2) + breakSum(n//3) + breakSum(n//4))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4157": {
    "question_id": "mbpp/415",
    "model": "deepseek-v3-250324",
    "generation_code": "def breakSum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(n, breakSum(n//2) + breakSum(n//3) + breakSum(n//4))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4158": {
    "question_id": "mbpp/415",
    "model": "deepseek-v3-250324",
    "generation_code": "def breakSum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(n, breakSum(n//2) + breakSum(n//3) + breakSum(n//4))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4159": {
    "question_id": "mbpp/415",
    "model": "deepseek-v3-250324",
    "generation_code": "def breakSum(n):\n    if n == 0 or n == 1:\n        return n\n    return max(n, breakSum(n//2) + breakSum(n//3) + breakSum(n//4))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4160": {
    "question_id": "mbpp/416",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_tuples(tuples_list):\n    if not tuples_list:\n        return []\n    \n    first_elements = {}\n    \n    for tup in tuples_list:\n        first_element = tup[0]\n        if first_element in first_elements:\n            first_elements[first_element].extend(tup[1:])\n        else:\n            first_elements[first_element] = list(tup[1:])\n    \n    result = []\n    for key in first_elements:\n        new_tuple = (key,) + tuple(first_elements[key])\n        result.append(new_tuple)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4161": {
    "question_id": "mbpp/416",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_tuples(tuples_list):\n    if not tuples_list:\n        return []\n    \n    groups = {}\n    for t in tuples_list:\n        first_element = t[0]\n        if first_element in groups:\n            groups[first_element].extend(t[1:])\n        else:\n            groups[first_element] = list(t[1:])\n    \n    result = []\n    for key in groups:\n        combined = (key,) + tuple(groups[key])\n        result.append(combined)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4162": {
    "question_id": "mbpp/416",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_tuples(tuples):\n    if not tuples:\n        return []\n    \n    groups = {}\n    for t in tuples:\n        first_element = t[0]\n        if first_element in groups:\n            groups[first_element].extend(t[1:])\n        else:\n            groups[first_element] = list(t[1:])\n    \n    result = []\n    for key in groups:\n        combined = (key,) + tuple(groups[key])\n        result.append(combined)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4163": {
    "question_id": "mbpp/416",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_tuples(tuples):\n    if not tuples:\n        return []\n    \n    groups = {}\n    for t in tuples:\n        first_element = t[0]\n        if first_element in groups:\n            groups[first_element].extend(t[1:])\n        else:\n            groups[first_element] = list(t)\n    \n    result = []\n    for key in groups:\n        result.append(tuple(groups[key]))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4164": {
    "question_id": "mbpp/416",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_tuples(tuples):\n    if not tuples:\n        return []\n    \n    groups = {}\n    for t in tuples:\n        first_element = t[0]\n        if first_element in groups:\n            groups[first_element].extend(t[1:])\n        else:\n            groups[first_element] = list(t)\n    \n    result = []\n    for key in groups:\n        result.append(tuple(groups[key]))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4165": {
    "question_id": "mbpp/416",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_tuples(input_list):\n    if not input_list:\n        return []\n    \n    groups = {}\n    for tup in input_list:\n        first_element = tup[0]\n        if first_element in groups:\n            groups[first_element].extend(tup[1:])\n        else:\n            groups[first_element] = list(tup)\n    \n    result = []\n    for key in groups:\n        result.append(tuple(groups[key]))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4166": {
    "question_id": "mbpp/416",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_tuples(tuples_list):\n    if not tuples_list:\n        return []\n    \n    groups = {}\n    for t in tuples_list:\n        first_element = t[0]\n        if first_element in groups:\n            groups[first_element].extend(t[1:])\n        else:\n            groups[first_element] = list(t)\n    \n    result = []\n    for key in groups:\n        result.append(tuple(groups[key]))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4167": {
    "question_id": "mbpp/416",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_tuples(tuples_list):\n    if not tuples_list:\n        return []\n    \n    groups = {}\n    for t in tuples_list:\n        first_element = t[0]\n        if first_element in groups:\n            groups[first_element].extend(t[1:])\n        else:\n            groups[first_element] = list(t[1:])\n    \n    result = []\n    for key in groups:\n        result.append(tuple([key] + groups[key]))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4168": {
    "question_id": "mbpp/416",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_tuples(tuples):\n    if not tuples:\n        return []\n    \n    groups = {}\n    for t in tuples:\n        first_element = t[0]\n        if first_element in groups:\n            groups[first_element].extend(t[1:])\n        else:\n            groups[first_element] = list(t)\n    \n    result = []\n    for key in groups:\n        result.append(tuple(groups[key]))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4169": {
    "question_id": "mbpp/416",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_tuples(input_list):\n    if not input_list:\n        return []\n    \n    groups = {}\n    for tup in input_list:\n        first_element = tup[0]\n        if first_element in groups:\n            groups[first_element].extend(tup[1:])\n        else:\n            groups[first_element] = list(tup)\n    \n    result = []\n    for key in groups:\n        result.append(tuple(groups[key]))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4170": {
    "question_id": "mbpp/417",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max(lst):\n    if not lst:\n        return []\n    max_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4171": {
    "question_id": "mbpp/417",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max(lst):\n    if not lst:\n        return []\n    max_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4172": {
    "question_id": "mbpp/417",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max(lst):\n    if not lst:\n        return []\n    max_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4173": {
    "question_id": "mbpp/417",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max(lst):\n    if not lst:\n        return []\n    max_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4174": {
    "question_id": "mbpp/417",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max(lst):\n    if not lst:\n        return []\n    max_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4175": {
    "question_id": "mbpp/417",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max(lst):\n    if not lst:\n        return []\n    max_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4176": {
    "question_id": "mbpp/417",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max(lst):\n    if not lst:\n        return []\n    max_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4177": {
    "question_id": "mbpp/417",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max(lst):\n    if not lst:\n        return []\n    max_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4178": {
    "question_id": "mbpp/417",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max(lst):\n    if not lst:\n        return []\n    max_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4179": {
    "question_id": "mbpp/417",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max(lst):\n    if not lst:\n        return []\n    max_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4180": {
    "question_id": "mbpp/418",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4181": {
    "question_id": "mbpp/418",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_and_sum(numbers):\n    rounded = [round(num) for num in numbers]\n    total = sum(rounded)\n    result = total * len(numbers)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4182": {
    "question_id": "mbpp/418",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_and_sum(numbers):\n    rounded = [round(num) for num in numbers]\n    total_sum = sum(rounded)\n    result = total_sum * len(numbers)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4183": {
    "question_id": "mbpp/418",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_and_sum(numbers):\n    rounded = [round(num) for num in numbers]\n    total_sum = sum(rounded)\n    result = total_sum * len(numbers)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4184": {
    "question_id": "mbpp/418",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_and_sum(numbers):\n    rounded = [round(num) for num in numbers]\n    total = sum(rounded)\n    return total * len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4185": {
    "question_id": "mbpp/418",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_and_sum(numbers):\n    rounded = [round(num) for num in numbers]\n    total_sum = sum(rounded)\n    result = total_sum * len(numbers)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4186": {
    "question_id": "mbpp/418",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_and_sum(numbers):\n    rounded = [round(num) for num in numbers]\n    total_sum = sum(rounded)\n    result = total_sum * len(numbers)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4187": {
    "question_id": "mbpp/418",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_and_sum(numbers):\n    rounded = [round(num) for num in numbers]\n    total_sum = sum(rounded)\n    result = total_sum * len(numbers)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4188": {
    "question_id": "mbpp/418",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_and_sum(numbers):\n    rounded = [round(num) for num in numbers]\n    total_sum = sum(rounded)\n    result = total_sum * len(numbers)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4189": {
    "question_id": "mbpp/418",
    "model": "deepseek-v3-250324",
    "generation_code": "def round_and_sum(numbers):\n    rounded = [round(num) for num in numbers]\n    total = sum(rounded)\n    result = total * len(numbers)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4190": {
    "question_id": "mbpp/419",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_cubes += even_num ** 3\n    return sum_cubes",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4191": {
    "question_id": "mbpp/419",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum += even_num ** 3\n    return sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4192": {
    "question_id": "mbpp/419",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_cubes += even_num ** 3\n    return sum_cubes",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4193": {
    "question_id": "mbpp/419",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum += even_num ** 3\n    return sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4194": {
    "question_id": "mbpp/419",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum += even_num ** 3\n    return sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4195": {
    "question_id": "mbpp/419",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(1, n + 1):\n        even_num = 2 * i\n        sum_cubes += even_num ** 3\n    return sum_cubes",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4196": {
    "question_id": "mbpp/419",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_cubes += even_num ** 3\n    return sum_cubes",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4197": {
    "question_id": "mbpp/419",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    if n <= 0:\n        return 0\n    sum_cubes = 0\n    for i in range(1, n + 1):\n        even_num = 2 * i\n        sum_cubes += even_num ** 3\n    return sum_cubes",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4198": {
    "question_id": "mbpp/419",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_cubes += even_num ** 3\n    return sum_cubes",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4199": {
    "question_id": "mbpp/419",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_cubes += even_num ** 3\n    return sum_cubes",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4200": {
    "question_id": "mbpp/420",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4201": {
    "question_id": "mbpp/420",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4202": {
    "question_id": "mbpp/420",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_tuple(tup):\n    if not tup:\n        return \"\"\n    return \"-\".join(str(element) for element in tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4203": {
    "question_id": "mbpp/420",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4204": {
    "question_id": "mbpp/420",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_tuple(tup):\n    if not tup:\n        return \"\"\n    return \"-\".join(str(element) for element in tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4205": {
    "question_id": "mbpp/420",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4206": {
    "question_id": "mbpp/420",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4207": {
    "question_id": "mbpp/420",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4208": {
    "question_id": "mbpp/420",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_tuple(tup):\n    if not tup:\n        return \"\"\n    return \"-\".join(str(element) for element in tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4209": {
    "question_id": "mbpp/420",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4210": {
    "question_id": "mbpp/421",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0.0\n    sum_cubes = (n * (n + 1) / 2) ** 2\n    average = sum_cubes / n\n    return average",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4211": {
    "question_id": "mbpp/421",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0.0\n    sum_cubes = sum(i ** 3 for i in range(1, n + 1))\n    average = sum_cubes / n\n    return average",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4212": {
    "question_id": "mbpp/421",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0.0\n    sum_cubes = 0\n    for i in range(1, n + 1):\n        sum_cubes += i ** 3\n    average = sum_cubes / n\n    return average",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4213": {
    "question_id": "mbpp/421",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0.0\n    sum_cubes = sum(i ** 3 for i in range(1, n + 1))\n    average = sum_cubes / n\n    return average",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4214": {
    "question_id": "mbpp/421",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0.0\n    sum_cubes = sum(i ** 3 for i in range(1, n + 1))\n    average = sum_cubes / n\n    return average",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4215": {
    "question_id": "mbpp/421",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0.0\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n    average = sum_cubes / n\n    return average",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4216": {
    "question_id": "mbpp/421",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0.0\n    sum_cubes = (n * (n + 1) / 2) ** 2\n    average = sum_cubes / n\n    return average",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4217": {
    "question_id": "mbpp/421",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0.0\n    sum_of_cubes = sum(i ** 3 for i in range(1, n + 1))\n    average = sum_of_cubes / n\n    return average",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4218": {
    "question_id": "mbpp/421",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0.0\n    sum_cubes = sum(i ** 3 for i in range(1, n + 1))\n    average = sum_cubes / n\n    return average",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4219": {
    "question_id": "mbpp/421",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0.0\n    sum_cubes = sum(i ** 3 for i in range(1, n + 1))\n    average = sum_cubes / n\n    return average",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4220": {
    "question_id": "mbpp/422",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_maxgold(gold, m, n):\n    if not gold or m == 0 or n == 0:\n        return 0\n    \n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = dp[row][col+1]\n            \n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = dp[row-1][col+1]\n            \n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = dp[row+1][col+1]\n            \n            dp[row][col] = gold[row][col] + max(right, right_up, right_down)\n    \n    max_gold = 0\n    for i in range(m):\n        if dp[i][0] > max_gold:\n            max_gold = dp[i][0]\n    \n    return max_gold",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4221": {
    "question_id": "mbpp/422",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_maxgold(gold, m, n):\n    if not gold or m == 0 or n == 0:\n        return 0\n    \n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = dp[row][col+1]\n            \n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = dp[row-1][col+1]\n            \n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = dp[row+1][col+1]\n            \n            dp[row][col] = gold[row][col] + max(right, right_up, right_down)\n    \n    max_gold = 0\n    for i in range(m):\n        if dp[i][0] > max_gold:\n            max_gold = dp[i][0]\n    \n    return max_gold",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4222": {
    "question_id": "mbpp/422",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_maxgold(gold, m, n):\n    if not gold or m == 0 or n == 0:\n        return 0\n    \n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = dp[row][col+1]\n            \n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = dp[row-1][col+1]\n            \n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = dp[row+1][col+1]\n            \n            dp[row][col] = gold[row][col] + max(right, right_up, right_down)\n    \n    max_gold = 0\n    for i in range(m):\n        if dp[i][0] > max_gold:\n            max_gold = dp[i][0]\n    \n    return max_gold",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4223": {
    "question_id": "mbpp/422",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_maxgold(gold, m, n):\n    if not gold or m == 0 or n == 0:\n        return 0\n    \n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = dp[row][col+1]\n            \n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = dp[row-1][col+1]\n            \n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = dp[row+1][col+1]\n            \n            dp[row][col] = gold[row][col] + max(right, right_up, right_down)\n    \n    max_gold = 0\n    for i in range(m):\n        max_gold = max(max_gold, dp[i][0])\n    \n    return max_gold",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4224": {
    "question_id": "mbpp/422",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_maxgold(gold, m, n):\n    if not gold or m == 0 or n == 0:\n        return 0\n    \n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = dp[row][col+1]\n            \n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = dp[row-1][col+1]\n            \n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = dp[row+1][col+1]\n            \n            dp[row][col] = gold[row][col] + max(right, right_up, right_down)\n    \n    max_gold = 0\n    for i in range(m):\n        if dp[i][0] > max_gold:\n            max_gold = dp[i][0]\n    \n    return max_gold",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4225": {
    "question_id": "mbpp/422",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_maxgold(gold, m, n):\n    if not gold or m == 0 or n == 0:\n        return 0\n    \n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = dp[row][col+1]\n            \n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = dp[row-1][col+1]\n            \n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = dp[row+1][col+1]\n            \n            dp[row][col] = gold[row][col] + max(right, right_up, right_down)\n    \n    max_gold = 0\n    for i in range(m):\n        if dp[i][0] > max_gold:\n            max_gold = dp[i][0]\n    \n    return max_gold",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4226": {
    "question_id": "mbpp/422",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_maxgold(gold, m, n):\n    gold_table = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = gold_table[row][col+1]\n            \n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = gold_table[row-1][col+1]\n            \n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = gold_table[row+1][col+1]\n            \n            gold_table[row][col] = gold[row][col] + max(right, right_up, right_down)\n    \n    max_gold = 0\n    for i in range(m):\n        if gold_table[i][0] > max_gold:\n            max_gold = gold_table[i][0]\n    \n    return max_gold",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4227": {
    "question_id": "mbpp/422",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_maxgold(gold, m, n):\n    if not gold or m == 0 or n == 0:\n        return 0\n    \n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = dp[row][col+1]\n            \n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = dp[row-1][col+1]\n            \n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = dp[row+1][col+1]\n            \n            dp[row][col] = gold[row][col] + max(right, right_up, right_down)\n    \n    max_gold = 0\n    for i in range(m):\n        max_gold = max(max_gold, dp[i][0])\n    \n    return max_gold",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4228": {
    "question_id": "mbpp/422",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_maxgold(gold, m, n):\n    gold_table = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = gold_table[row][col+1]\n            \n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = gold_table[row-1][col+1]\n            \n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = gold_table[row+1][col+1]\n            \n            gold_table[row][col] = gold[row][col] + max(right, right_up, right_down)\n    \n    max_gold = 0\n    for i in range(m):\n        if gold_table[i][0] > max_gold:\n            max_gold = gold_table[i][0]\n    \n    return max_gold",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4229": {
    "question_id": "mbpp/422",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_maxgold(gold, m, n):\n    gold_table = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = gold_table[row][col+1]\n            \n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = gold_table[row-1][col+1]\n            \n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = gold_table[row+1][col+1]\n            \n            gold_table[row][col] = gold[row][col] + max(right, right_up, right_down)\n    \n    max_gold = 0\n    for i in range(m):\n        if gold_table[i][0] > max_gold:\n            max_gold = gold_table[i][0]\n    \n    return max_gold",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4230": {
    "question_id": "mbpp/423",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_rear(strings):\n    return [s[-1] if len(s) > 0 else '' for s in strings]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4231": {
    "question_id": "mbpp/423",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_rear(strings):\n    return [s[-1] if len(s) > 0 else '' for s in strings]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4232": {
    "question_id": "mbpp/423",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_rear(strings):\n    return [s[-1] if len(s) > 0 else '' for s in strings]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4233": {
    "question_id": "mbpp/423",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_rear(strings):\n    return [s[-1] if len(s) > 0 else '' for s in strings]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4234": {
    "question_id": "mbpp/423",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_rear(strings):\n    return [s[-1] if len(s) > 0 else '' for s in strings]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4235": {
    "question_id": "mbpp/423",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_rear(tuple_str):\n    return [s[-1] if len(s) > 0 else '' for s in tuple_str]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4236": {
    "question_id": "mbpp/423",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_rear(strings_tuple):\n    return [s[-1] if len(s) > 0 else '' for s in strings_tuple]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4237": {
    "question_id": "mbpp/423",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_rear(strings):\n    return [s[-1] if len(s) > 0 else '' for s in strings]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4238": {
    "question_id": "mbpp/423",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_rear(strings):\n    return [s[-1] if len(s) > 0 else '' for s in strings]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4239": {
    "question_id": "mbpp/423",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_rear(strings_tuple):\n    return [s[-1] if len(s) > 0 else '' for s in strings_tuple]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4240": {
    "question_id": "mbpp/424",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4241": {
    "question_id": "mbpp/424",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4242": {
    "question_id": "mbpp/424",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4243": {
    "question_id": "mbpp/424",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4244": {
    "question_id": "mbpp/424",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4245": {
    "question_id": "mbpp/424",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4246": {
    "question_id": "mbpp/424",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4247": {
    "question_id": "mbpp/424",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4248": {
    "question_id": "mbpp/424",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4249": {
    "question_id": "mbpp/424",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4250": {
    "question_id": "mbpp/425",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_oddnumbers = lambda numbers: list(filter(lambda x: x % 2 != 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4251": {
    "question_id": "mbpp/425",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_oddnumbers = lambda lst: list(filter(lambda x: x % 2 != 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4252": {
    "question_id": "mbpp/425",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_oddnumbers = lambda numbers: list(filter(lambda x: x % 2 != 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4253": {
    "question_id": "mbpp/425",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_oddnumbers = lambda lst: list(filter(lambda x: x % 2 != 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4254": {
    "question_id": "mbpp/425",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_oddnumbers = lambda numbers: list(filter(lambda x: x % 2 != 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4255": {
    "question_id": "mbpp/425",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_oddnumbers = lambda lst: list(filter(lambda x: x % 2 != 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4256": {
    "question_id": "mbpp/425",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_oddnumbers = lambda lst: list(filter(lambda x: x % 2 != 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4257": {
    "question_id": "mbpp/425",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_oddnumbers = lambda lst: list(filter(lambda x: x % 2 != 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4258": {
    "question_id": "mbpp/425",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_oddnumbers = lambda lst: list(filter(lambda x: x % 2 != 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4259": {
    "question_id": "mbpp/425",
    "model": "deepseek-v3-250324",
    "generation_code": "filter_oddnumbers = lambda numbers: list(filter(lambda x: x % 2 != 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4260": {
    "question_id": "mbpp/426",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef change_date_format(date):\n    match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', date)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    else:\n        return date",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4261": {
    "question_id": "mbpp/426",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef change_date_format(date):\n    match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', date)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    return date",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4262": {
    "question_id": "mbpp/426",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef change_date_format(date):\n    match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', date)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    else:\n        return date",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4263": {
    "question_id": "mbpp/426",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef change_date_format(date):\n    match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', date)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    return date",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4264": {
    "question_id": "mbpp/426",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef change_date_format(date):\n    match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', date)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    return date",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4265": {
    "question_id": "mbpp/426",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef change_date_format(date):\n    match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', date)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    else:\n        return date",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4266": {
    "question_id": "mbpp/426",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef change_date_format(date):\n    match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', date)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    else:\n        return date",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4267": {
    "question_id": "mbpp/426",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef change_date_format(date):\n    match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', date)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    return date",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4268": {
    "question_id": "mbpp/426",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef change_date_format(date):\n    match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', date)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    else:\n        return date",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4269": {
    "question_id": "mbpp/426",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef change_date_format(date):\n    match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', date)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    else:\n        return date",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4270": {
    "question_id": "mbpp/427",
    "model": "deepseek-v3-250324",
    "generation_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4271": {
    "question_id": "mbpp/427",
    "model": "deepseek-v3-250324",
    "generation_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4272": {
    "question_id": "mbpp/427",
    "model": "deepseek-v3-250324",
    "generation_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4273": {
    "question_id": "mbpp/427",
    "model": "deepseek-v3-250324",
    "generation_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4274": {
    "question_id": "mbpp/427",
    "model": "deepseek-v3-250324",
    "generation_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4275": {
    "question_id": "mbpp/427",
    "model": "deepseek-v3-250324",
    "generation_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4276": {
    "question_id": "mbpp/427",
    "model": "deepseek-v3-250324",
    "generation_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4277": {
    "question_id": "mbpp/427",
    "model": "deepseek-v3-250324",
    "generation_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4278": {
    "question_id": "mbpp/427",
    "model": "deepseek-v3-250324",
    "generation_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4279": {
    "question_id": "mbpp/427",
    "model": "deepseek-v3-250324",
    "generation_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4280": {
    "question_id": "mbpp/428",
    "model": "deepseek-v3-250324",
    "generation_code": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4281": {
    "question_id": "mbpp/428",
    "model": "deepseek-v3-250324",
    "generation_code": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4282": {
    "question_id": "mbpp/428",
    "model": "deepseek-v3-250324",
    "generation_code": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4283": {
    "question_id": "mbpp/428",
    "model": "deepseek-v3-250324",
    "generation_code": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4284": {
    "question_id": "mbpp/428",
    "model": "deepseek-v3-250324",
    "generation_code": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4285": {
    "question_id": "mbpp/428",
    "model": "deepseek-v3-250324",
    "generation_code": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4286": {
    "question_id": "mbpp/428",
    "model": "deepseek-v3-250324",
    "generation_code": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4287": {
    "question_id": "mbpp/428",
    "model": "deepseek-v3-250324",
    "generation_code": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4288": {
    "question_id": "mbpp/428",
    "model": "deepseek-v3-250324",
    "generation_code": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4289": {
    "question_id": "mbpp/428",
    "model": "deepseek-v3-250324",
    "generation_code": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4290": {
    "question_id": "mbpp/429",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_directrix(a, b, c):\n    return (1 - b**2 + 4 * a * c) // (4 * a)",
    "test_output": "FAILED: expect -198,in fact 1",
    "test_result": "False"
  },
  "4291": {
    "question_id": "mbpp/429",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_directrix(a, b, c):\n    return (1 - b**2 + 4 * a * c) // (4 * a)",
    "test_output": "FAILED: expect -198,in fact 1",
    "test_result": "False"
  },
  "4292": {
    "question_id": "mbpp/429",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_directrix(a, b, c):\n    return (1 - b**2 + 4 * a * c) // (4 * a)",
    "test_output": "FAILED: expect -198,in fact 1",
    "test_result": "False"
  },
  "4293": {
    "question_id": "mbpp/429",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_directrix(a, b, c):\n    return (1 - b**2 + 4 * a * c) // (4 * a)",
    "test_output": "FAILED: expect -198,in fact 1",
    "test_result": "False"
  },
  "4294": {
    "question_id": "mbpp/429",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_directrix(a, b, c):\n    return (1 - b**2 + 4 * a * c) // (4 * a)",
    "test_output": "FAILED: expect -198,in fact 1",
    "test_result": "False"
  },
  "4295": {
    "question_id": "mbpp/429",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_directrix(a, b, c):\n    return (1 - b**2 + 4 * a * c) // (4 * a)",
    "test_output": "FAILED: expect -198,in fact 1",
    "test_result": "False"
  },
  "4296": {
    "question_id": "mbpp/429",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_directrix(a, b, c):\n    return (1 - b**2 + 4 * a * c) / (4 * a)",
    "test_output": "FAILED: expect -198,in fact 1.6",
    "test_result": "False"
  },
  "4297": {
    "question_id": "mbpp/429",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_directrix(a, b, c):\n    return (1 - b**2 + 4 * a * c) // (4 * a)",
    "test_output": "FAILED: expect -198,in fact 1",
    "test_result": "False"
  },
  "4298": {
    "question_id": "mbpp/429",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_directrix(a, b, c):\n    return (1 - b**2 + 4 * a * c) // (4 * a)",
    "test_output": "FAILED: expect -198,in fact 1",
    "test_result": "False"
  },
  "4299": {
    "question_id": "mbpp/429",
    "model": "deepseek-v3-250324",
    "generation_code": "def parabola_directrix(a, b, c):\n    return (1 - b**2 + 4 * a * c) // (4 * a)",
    "test_output": "FAILED: expect -198,in fact 1",
    "test_result": "False"
  },
  "4300": {
    "question_id": "mbpp/430",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_element(list1, list2):\n    return any(item in list2 for item in list1)",
    "test_output": "FAILED: expect None,in fact False",
    "test_result": "False"
  },
  "4301": {
    "question_id": "mbpp/430",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "FAILED: expect None,in fact False",
    "test_result": "False"
  },
  "4302": {
    "question_id": "mbpp/430",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "FAILED: expect None,in fact False",
    "test_result": "False"
  },
  "4303": {
    "question_id": "mbpp/430",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "FAILED: expect None,in fact False",
    "test_result": "False"
  },
  "4304": {
    "question_id": "mbpp/430",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "FAILED: expect None,in fact False",
    "test_result": "False"
  },
  "4305": {
    "question_id": "mbpp/430",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "FAILED: expect None,in fact False",
    "test_result": "False"
  },
  "4306": {
    "question_id": "mbpp/430",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "FAILED: expect None,in fact False",
    "test_result": "False"
  },
  "4307": {
    "question_id": "mbpp/430",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "FAILED: expect None,in fact False",
    "test_result": "False"
  },
  "4308": {
    "question_id": "mbpp/430",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_element(list1, list2):\n    return any(item in list2 for item in list1)",
    "test_output": "FAILED: expect None,in fact False",
    "test_result": "False"
  },
  "4309": {
    "question_id": "mbpp/430",
    "model": "deepseek-v3-250324",
    "generation_code": "def common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
    "test_output": "FAILED: expect None,in fact False",
    "test_result": "False"
  },
  "4310": {
    "question_id": "mbpp/431",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_trapezium(a, b, c, d=None):\n    if d is None:\n        return (a + b) / 2\n    else:\n        return (a + b) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4311": {
    "question_id": "mbpp/431",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_trapezium(a, b, c, d=None):\n    if d is None:\n        d = c\n    return (a + b) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4312": {
    "question_id": "mbpp/431",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_trapezium(a, b, c, d=None):\n    if d is None:\n        d = c\n    return (a + b) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4313": {
    "question_id": "mbpp/431",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_trapezium(a, b, c, d=None):\n    if d is None:\n        d = c\n    return (a + b) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4314": {
    "question_id": "mbpp/431",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_trapezium(a, b, c, d=None):\n    if d is None:\n        d = c\n    return (a + b) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4315": {
    "question_id": "mbpp/431",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_trapezium(a, b, c, d=None):\n    if d is None:\n        d = c\n    return (a + b) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4316": {
    "question_id": "mbpp/431",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_trapezium(a, b, c, d=None):\n    if d is None:\n        d = c\n    return (a + b) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4317": {
    "question_id": "mbpp/431",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_trapezium(a, b, c, d=None):\n    if d is None:\n        return (a + b) / 2\n    else:\n        return (a + b) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4318": {
    "question_id": "mbpp/431",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_trapezium(a, b, c, d=None):\n    if d is None:\n        return (a + b) / 2\n    else:\n        return (a + b) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4319": {
    "question_id": "mbpp/431",
    "model": "deepseek-v3-250324",
    "generation_code": "def median_trapezium(a, b, c, d=None):\n    if d is None:\n        d = c\n    return (a + b) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4320": {
    "question_id": "mbpp/432",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(arr, num):\n    if not arr:\n        return \"Yes, entered number is greater than those in the array\"\n    max_in_arr = max(arr)\n    if num > max_in_arr:\n        return \"Yes, entered number is greater than those in the array\"\n    else:\n        return \"No, entered number is less than those in the array\"",
    "test_output": "FAILED: expect Yes, the entered number is greater than those in the array,in fact Yes, entered number is greater than those in the array",
    "test_result": "False"
  },
  "4321": {
    "question_id": "mbpp/432",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return \"No, entered number is less than those in the array\"\n    return \"Yes, entered number is greater than those in the array\"",
    "test_output": "FAILED: expect Yes, the entered number is greater than those in the array,in fact Yes, entered number is greater than those in the array",
    "test_result": "False"
  },
  "4322": {
    "question_id": "mbpp/432",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return \"No, entered number is less than those in the array\"\n    return \"Yes, entered number is greater than those in the array\"",
    "test_output": "FAILED: expect Yes, the entered number is greater than those in the array,in fact Yes, entered number is greater than those in the array",
    "test_result": "False"
  },
  "4323": {
    "question_id": "mbpp/432",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return \"No, entered number is less than those in the array\"\n    return \"Yes, entered number is greater than those in the array\"",
    "test_output": "FAILED: expect Yes, the entered number is greater than those in the array,in fact Yes, entered number is greater than those in the array",
    "test_result": "False"
  },
  "4324": {
    "question_id": "mbpp/432",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return \"No, entered number is less than those in the array\"\n    return \"Yes, entered number is greater than those in the array\"",
    "test_output": "FAILED: expect Yes, the entered number is greater than those in the array,in fact Yes, entered number is greater than those in the array",
    "test_result": "False"
  },
  "4325": {
    "question_id": "mbpp/432",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return \"No, entered number is less than those in the array\"\n    return \"Yes, entered number is greater than those in the array\"",
    "test_output": "FAILED: expect Yes, the entered number is greater than those in the array,in fact Yes, entered number is greater than those in the array",
    "test_result": "False"
  },
  "4326": {
    "question_id": "mbpp/432",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(arr, num):\n    if not arr:\n        return \"Yes, entered number is greater than those in the array\"\n    for element in arr:\n        if num <= element:\n            return \"No, entered number is less than those in the array\"\n    return \"Yes, entered number is greater than those in the array\"",
    "test_output": "FAILED: expect Yes, the entered number is greater than those in the array,in fact Yes, entered number is greater than those in the array",
    "test_result": "False"
  },
  "4327": {
    "question_id": "mbpp/432",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(arr, num):\n    if all(num > x for x in arr):\n        return \"Yes, entered number is greater than those in the array\"\n    else:\n        return \"No, entered number is less than those in the array\"",
    "test_output": "FAILED: expect Yes, the entered number is greater than those in the array,in fact Yes, entered number is greater than those in the array",
    "test_result": "False"
  },
  "4328": {
    "question_id": "mbpp/432",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(arr, num):\n    if not arr:\n        return \"Yes, entered number is greater than those in the array\"\n    for element in arr:\n        if num <= element:\n            return \"No, entered number is less than those in the array\"\n    return \"Yes, entered number is greater than those in the array\"",
    "test_output": "FAILED: expect Yes, the entered number is greater than those in the array,in fact Yes, entered number is greater than those in the array",
    "test_result": "False"
  },
  "4329": {
    "question_id": "mbpp/432",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return \"No, entered number is less than those in the array\"\n    return \"Yes, entered number is greater than those in the array\"",
    "test_output": "FAILED: expect Yes, the entered number is greater than those in the array,in fact Yes, entered number is greater than those in the array",
    "test_result": "False"
  },
  "4330": {
    "question_id": "mbpp/433",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "4331": {
    "question_id": "mbpp/433",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "4332": {
    "question_id": "mbpp/433",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "4333": {
    "question_id": "mbpp/433",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4334": {
    "question_id": "mbpp/433",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "4335": {
    "question_id": "mbpp/433",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "4336": {
    "question_id": "mbpp/433",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "4337": {
    "question_id": "mbpp/433",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "4338": {
    "question_id": "mbpp/433",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "4339": {
    "question_id": "mbpp/433",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "4340": {
    "question_id": "mbpp/434",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit(number):\n    return abs(number) % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4341": {
    "question_id": "mbpp/434",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit(number):\n    return abs(number) % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4342": {
    "question_id": "mbpp/434",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit(number):\n    return abs(number) % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4343": {
    "question_id": "mbpp/434",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit(number):\n    return abs(number) % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4344": {
    "question_id": "mbpp/434",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit(number):\n    return abs(number) % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4345": {
    "question_id": "mbpp/434",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit(number):\n    return abs(number) % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4346": {
    "question_id": "mbpp/434",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit(number):\n    return abs(number) % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4347": {
    "question_id": "mbpp/434",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit(number):\n    return abs(number) % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4348": {
    "question_id": "mbpp/434",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit(number):\n    return abs(number) % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4349": {
    "question_id": "mbpp/434",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit(number):\n    return abs(number) % 10",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4350": {
    "question_id": "mbpp/435",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_nos(list1):\n    negatives = [num for num in list1 if num < 0]\n    return ','.join(map(str, negatives))",
    "test_output": "FAILED: expect (-1, -6),in fact -1,-6",
    "test_result": "False"
  },
  "4351": {
    "question_id": "mbpp/435",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_nos(lst):\n    negatives = [str(num) for num in lst if num < 0]\n    print(','.join(negatives))",
    "test_output": "FAILED: expect (-1, -6),in fact None",
    "test_result": "False"
  },
  "4352": {
    "question_id": "mbpp/435",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_nos(list1):\n    negatives = [num for num in list1 if num < 0]\n    return ','.join(map(str, negatives))",
    "test_output": "FAILED: expect (-1, -6),in fact -1,-6",
    "test_result": "False"
  },
  "4353": {
    "question_id": "mbpp/435",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_nos(list1):\n    negatives = [str(num) for num in list1 if num < 0]\n    print(','.join(negatives))",
    "test_output": "FAILED: expect (-1, -6),in fact None",
    "test_result": "False"
  },
  "4354": {
    "question_id": "mbpp/435",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_nos(list1):\n    neg_numbers = [num for num in list1 if num < 0]\n    return ','.join(map(str, neg_numbers))",
    "test_output": "FAILED: expect (-1, -6),in fact -1,-6",
    "test_result": "False"
  },
  "4355": {
    "question_id": "mbpp/435",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_nos(lst):\n    negatives = [num for num in lst if num < 0]\n    return ','.join(map(str, negatives))",
    "test_output": "FAILED: expect (-1, -6),in fact -1,-6",
    "test_result": "False"
  },
  "4356": {
    "question_id": "mbpp/435",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_nos(lst):\n    negatives = [num for num in lst if num < 0]\n    return ','.join(map(str, negatives))",
    "test_output": "FAILED: expect (-1, -6),in fact -1,-6",
    "test_result": "False"
  },
  "4357": {
    "question_id": "mbpp/435",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_nos(lst):\n    negatives = [str(num) for num in lst if num < 0]\n    print(','.join(negatives))",
    "test_output": "FAILED: expect (-1, -6),in fact None",
    "test_result": "False"
  },
  "4358": {
    "question_id": "mbpp/435",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_nos(lst):\n    negatives = [str(num) for num in lst if num < 0]\n    print(','.join(negatives))",
    "test_output": "FAILED: expect (-1, -6),in fact None",
    "test_result": "False"
  },
  "4359": {
    "question_id": "mbpp/435",
    "model": "deepseek-v3-250324",
    "generation_code": "def neg_nos(lst):\n    negatives = [str(num) for num in lst if num < 0]\n    print(','.join(negatives))",
    "test_output": "FAILED: expect (-1, -6),in fact None",
    "test_result": "False"
  },
  "4360": {
    "question_id": "mbpp/436",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(s):\n    return s[1::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4361": {
    "question_id": "mbpp/436",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4362": {
    "question_id": "mbpp/436",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(s):\n    return s[1::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4363": {
    "question_id": "mbpp/436",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4364": {
    "question_id": "mbpp/436",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4365": {
    "question_id": "mbpp/436",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(s):\n    return s[1::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4366": {
    "question_id": "mbpp/436",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(s):\n    return s[1::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4367": {
    "question_id": "mbpp/436",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 != 0:\n            result += s[i]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4368": {
    "question_id": "mbpp/436",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 != 0:\n            result += s[i]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4369": {
    "question_id": "mbpp/436",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_odd(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 != 0:\n            result += s[i]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4370": {
    "question_id": "mbpp/437",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_bidirectional(lst):\n    count = 0\n    seen = set()\n    for pair in lst:\n        a, b = pair\n        if (b, a) in seen:\n            count += 1\n            seen.remove((b, a))\n        else:\n            seen.add((a, b))\n    return str(count)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "4371": {
    "question_id": "mbpp/437",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_bidirectional(lst):\n    count = 0\n    seen = set()\n    for pair in lst:\n        a, b = pair\n        if (b, a) in seen:\n            count += 1\n            seen.remove((b, a))\n        else:\n            seen.add((a, b))\n    return str(count)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "4372": {
    "question_id": "mbpp/437",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_bidirectional(lst):\n    count = 0\n    seen = set()\n    for pair in lst:\n        a, b = pair\n        if (b, a) in seen:\n            count += 1\n            seen.remove((b, a))\n        else:\n            seen.add((a, b))\n    return str(count)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "4373": {
    "question_id": "mbpp/437",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_bidirectional(lst):\n    count = 0\n    seen = set()\n    for pair in lst:\n        a, b = pair\n        if (b, a) in seen:\n            count += 1\n            seen.remove((b, a))\n        else:\n            seen.add((a, b))\n    return str(count)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "4374": {
    "question_id": "mbpp/437",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_bidirectional(lst):\n    count = 0\n    seen = set()\n    for pair in lst:\n        a, b = pair\n        if (b, a) in seen:\n            count += 1\n            seen.remove((b, a))\n        else:\n            seen.add((a, b))\n    return str(count)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "4375": {
    "question_id": "mbpp/437",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_bidirectional(lst):\n    count = 0\n    seen = set()\n    for pair in lst:\n        a, b = pair\n        if (b, a) in seen:\n            count += 1\n            seen.remove((b, a))\n        else:\n            seen.add((a, b))\n    return str(count)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "4376": {
    "question_id": "mbpp/437",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_bidirectional(lst):\n    count = 0\n    seen = set()\n    for pair in lst:\n        a, b = pair\n        if (b, a) in seen:\n            count += 1\n            seen.remove((b, a))\n        else:\n            seen.add((a, b))\n    return str(count)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "4377": {
    "question_id": "mbpp/437",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_bidirectional(lst):\n    count = 0\n    seen = set()\n    for pair in lst:\n        a, b = pair\n        if (b, a) in seen:\n            count += 1\n            seen.remove((b, a))\n        else:\n            seen.add((a, b))\n    return str(count)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "4378": {
    "question_id": "mbpp/437",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_bidirectional(lst):\n    count = 0\n    seen = set()\n    for pair in lst:\n        a, b = pair\n        if (b, a) in seen:\n            count += 1\n            seen.remove((b, a))\n        else:\n            seen.add((a, b))\n    return str(count)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "4379": {
    "question_id": "mbpp/437",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_bidirectional(lst):\n    count = 0\n    seen = set()\n    for pair in lst:\n        a, b = pair\n        if (b, a) in seen:\n            count += 1\n            seen.remove((b, a))\n        else:\n            seen.add((a, b))\n    return str(count)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "4380": {
    "question_id": "mbpp/438",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiple_to_single(lst):\n    result = \"\"\n    for num in lst:\n        result += str(num)\n    return int(result) if result else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4381": {
    "question_id": "mbpp/438",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiple_to_single(lst):\n    result = \"\"\n    for num in lst:\n        result += str(num)\n    return int(result) if result else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4382": {
    "question_id": "mbpp/438",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiple_to_single(lst):\n    result = \"\"\n    for num in lst:\n        result += str(num)\n    return int(result) if result else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4383": {
    "question_id": "mbpp/438",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiple_to_single(integers):\n    result = \"\"\n    for num in integers:\n        result += str(num)\n    return int(result) if result else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4384": {
    "question_id": "mbpp/438",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiple_to_single(lst):\n    if not lst:\n        return 0\n    result = \"\"\n    for num in lst:\n        result += str(num)\n    return int(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4385": {
    "question_id": "mbpp/438",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiple_to_single(integers):\n    result = \"\"\n    for num in integers:\n        result += str(num)\n    return int(result) if result else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4386": {
    "question_id": "mbpp/438",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiple_to_single(integers):\n    result = ''\n    for num in integers:\n        result += str(num)\n    return int(result) if result else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4387": {
    "question_id": "mbpp/438",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiple_to_single(integers):\n    return int(''.join(map(str, integers)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4388": {
    "question_id": "mbpp/438",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiple_to_single(lst):\n    result = \"\"\n    for num in lst:\n        result += str(num)\n    return int(result) if result else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4389": {
    "question_id": "mbpp/438",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiple_to_single(integers):\n    return int(''.join(map(str, integers)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4390": {
    "question_id": "mbpp/439",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverb_position(sentence):\n    match = re.search(r'\\b\\w+ly\\b', sentence)\n    if match:\n        return (match.start(), match.end(), match.group())\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4391": {
    "question_id": "mbpp/439",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverb_position(sentence):\n    matches = re.finditer(r'\\b\\w+ly\\b', sentence)\n    for match in matches:\n        return (match.start(), match.end(), match.group())\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4392": {
    "question_id": "mbpp/439",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverb_position(sentence):\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, sentence)\n    if match:\n        return (match.start(), match.end(), match.group())\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4393": {
    "question_id": "mbpp/439",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverb_position(sentence):\n    matches = re.finditer(r'\\b\\w+ly\\b', sentence)\n    adverbs = []\n    for match in matches:\n        adverbs.append((match.start(), match.end(), match.group()))\n    if adverbs:\n        return adverbs[0]\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4394": {
    "question_id": "mbpp/439",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverb_position(sentence):\n    adverb_pattern = r'\\b\\w+ly\\b'\n    match = re.search(adverb_pattern, sentence)\n    if match:\n        return (match.start(), match.end(), match.group())\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4395": {
    "question_id": "mbpp/439",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverb_position(sentence):\n    matches = re.finditer(r'\\b\\w+ly\\b', sentence)\n    for match in matches:\n        return (match.start(), match.end(), match.group())\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4396": {
    "question_id": "mbpp/439",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverb_position(sentence):\n    matches = re.finditer(r'\\b\\w+ly\\b', sentence)\n    for match in matches:\n        return (match.start(), match.end(), match.group())\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4397": {
    "question_id": "mbpp/439",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverb_position(sentence):\n    matches = re.finditer(r'\\b\\w+ly\\b', sentence)\n    for match in matches:\n        return (match.start(), match.end(), match.group())\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4398": {
    "question_id": "mbpp/439",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverb_position(sentence):\n    matches = re.finditer(r'\\b\\w+ly\\b', sentence)\n    adverbs = []\n    for match in matches:\n        adverbs.append((match.start(), match.end(), match.group()))\n    if adverbs:\n        return adverbs[0]\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4399": {
    "question_id": "mbpp/439",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverb_position(sentence):\n    matches = re.finditer(r'\\b\\w+ly\\b', sentence)\n    for match in matches:\n        return (match.start(), match.end(), match.group())\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4400": {
    "question_id": "mbpp/440",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return 6 * side_length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4401": {
    "question_id": "mbpp/440",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return 6 * side_length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4402": {
    "question_id": "mbpp/440",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return 6 * side_length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4403": {
    "question_id": "mbpp/440",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return 6 * side_length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4404": {
    "question_id": "mbpp/440",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return 6 * side_length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4405": {
    "question_id": "mbpp/440",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return 6 * side_length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4406": {
    "question_id": "mbpp/440",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return 6 * side_length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4407": {
    "question_id": "mbpp/440",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return 6 * side_length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4408": {
    "question_id": "mbpp/440",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return 6 * side_length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4409": {
    "question_id": "mbpp/440",
    "model": "deepseek-v3-250324",
    "generation_code": "def surfacearea_cube(side_length):\n    if side_length <= 0:\n        return 0\n    return 6 * side_length ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4410": {
    "question_id": "mbpp/441",
    "model": "deepseek-v3-250324",
    "generation_code": "def positive_count(arr):\n    if not arr:\n        return 0.0\n    positive = sum(1 for num in arr if num > 0)\n    return round(positive / len(arr), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4411": {
    "question_id": "mbpp/441",
    "model": "deepseek-v3-250324",
    "generation_code": "def positive_count(arr):\n    if not arr:\n        return 0.0\n    positive = sum(1 for num in arr if num > 0)\n    return round(positive / len(arr), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4412": {
    "question_id": "mbpp/441",
    "model": "deepseek-v3-250324",
    "generation_code": "def positive_count(nums):\n    if not nums:\n        return 0.0\n    positive = sum(1 for num in nums if num > 0)\n    return round(positive / len(nums), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4413": {
    "question_id": "mbpp/441",
    "model": "deepseek-v3-250324",
    "generation_code": "def positive_count(arr):\n    if not arr:\n        return 0.0\n    positive = sum(1 for num in arr if num > 0)\n    return round(positive / len(arr), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4414": {
    "question_id": "mbpp/441",
    "model": "deepseek-v3-250324",
    "generation_code": "def positive_count(arr):\n    if not arr:\n        return 0.0\n    positive = sum(1 for num in arr if num > 0)\n    return round(positive / len(arr), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4415": {
    "question_id": "mbpp/441",
    "model": "deepseek-v3-250324",
    "generation_code": "def positive_count(arr):\n    if not arr:\n        return 0.0\n    positive = sum(1 for num in arr if num > 0)\n    return round(positive / len(arr), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4416": {
    "question_id": "mbpp/441",
    "model": "deepseek-v3-250324",
    "generation_code": "def positive_count(nums):\n    if not nums:\n        return 0.0\n    positive = sum(1 for num in nums if num > 0)\n    return round(positive / len(nums), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4417": {
    "question_id": "mbpp/441",
    "model": "deepseek-v3-250324",
    "generation_code": "def positive_count(nums):\n    if not nums:\n        return 0.0\n    positive = sum(1 for num in nums if num > 0)\n    return round(positive / len(nums), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4418": {
    "question_id": "mbpp/441",
    "model": "deepseek-v3-250324",
    "generation_code": "def positive_count(arr):\n    if not arr:\n        return 0.0\n    positive = sum(1 for num in arr if num > 0)\n    return round(positive / len(arr), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4419": {
    "question_id": "mbpp/441",
    "model": "deepseek-v3-250324",
    "generation_code": "def positive_count(arr):\n    if not arr:\n        return 0.0\n    positive = sum(1 for num in arr if num > 0)\n    return round(positive / len(arr), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4420": {
    "question_id": "mbpp/442",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_neg(lst):\n    negatives = [num for num in lst if num < 0]\n    if not negatives:\n        return None\n    return max(negatives)",
    "test_output": "FAILED: expect -6,in fact -4",
    "test_result": "False"
  },
  "4421": {
    "question_id": "mbpp/442",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_neg(lst):\n    negatives = [num for num in lst if num < 0]\n    if not negatives:\n        return None\n    return max(negatives)",
    "test_output": "FAILED: expect -6,in fact -4",
    "test_result": "False"
  },
  "4422": {
    "question_id": "mbpp/442",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_neg(lst):\n    negatives = [num for num in lst if num < 0]\n    if not negatives:\n        return None\n    return max(negatives)",
    "test_output": "FAILED: expect -6,in fact -4",
    "test_result": "False"
  },
  "4423": {
    "question_id": "mbpp/442",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_neg(lst):\n    negatives = [num for num in lst if num < 0]\n    if not negatives:\n        return None\n    return max(negatives)",
    "test_output": "FAILED: expect -6,in fact -4",
    "test_result": "False"
  },
  "4424": {
    "question_id": "mbpp/442",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_neg(lst):\n    negatives = [num for num in lst if num < 0]\n    if not negatives:\n        return None\n    return max(negatives)",
    "test_output": "FAILED: expect -6,in fact -4",
    "test_result": "False"
  },
  "4425": {
    "question_id": "mbpp/442",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_neg(lst):\n    negatives = [num for num in lst if num < 0]\n    if not negatives:\n        return None\n    return max(negatives)",
    "test_output": "FAILED: expect -6,in fact -4",
    "test_result": "False"
  },
  "4426": {
    "question_id": "mbpp/442",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_neg(lst):\n    negatives = [num for num in lst if num < 0]\n    if not negatives:\n        return None\n    return max(negatives)",
    "test_output": "FAILED: expect -6,in fact -4",
    "test_result": "False"
  },
  "4427": {
    "question_id": "mbpp/442",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_neg(lst):\n    negatives = [num for num in lst if num < 0]\n    if not negatives:\n        return None\n    return max(negatives)",
    "test_output": "FAILED: expect -6,in fact -4",
    "test_result": "False"
  },
  "4428": {
    "question_id": "mbpp/442",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_neg(lst):\n    negatives = [num for num in lst if num < 0]\n    if not negatives:\n        return None\n    return max(negatives)",
    "test_output": "FAILED: expect -6,in fact -4",
    "test_result": "False"
  },
  "4429": {
    "question_id": "mbpp/442",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_neg(lst):\n    negatives = [num for num in lst if num < 0]\n    if not negatives:\n        return None\n    return max(negatives)",
    "test_output": "FAILED: expect -6,in fact -4",
    "test_result": "False"
  },
  "4430": {
    "question_id": "mbpp/443",
    "model": "deepseek-v3-250324",
    "generation_code": "def trim_tuple(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        if len(t) > k:\n            trimmed = t[k:-k]\n        else:\n            trimmed = ()\n        if len(trimmed) == 1:\n            trimmed = (trimmed[0],)\n        result.append(trimmed)\n    return result",
    "test_output": "FAILED: expect [(2,), (9,), (2,), (2,)],in fact [(2,), (9,), (2,), (2,)]",
    "test_result": "False"
  },
  "4431": {
    "question_id": "mbpp/443",
    "model": "deepseek-v3-250324",
    "generation_code": "def trim_tuple(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        if len(t) > k:\n            trimmed = t[k:-k]\n        else:\n            trimmed = ()\n        if len(trimmed) == 1:\n            trimmed = (trimmed[0],)\n        result.append(trimmed)\n    return result",
    "test_output": "FAILED: expect [(2,), (9,), (2,), (2,)],in fact [(2,), (9,), (2,), (2,)]",
    "test_result": "False"
  },
  "4432": {
    "question_id": "mbpp/443",
    "model": "deepseek-v3-250324",
    "generation_code": "def trim_tuple(tuples_list, k):\n    trimmed = []\n    for t in tuples_list:\n        if len(t) > k:\n            trimmed.append(t[k:k+1])\n        else:\n            trimmed.append(t[-1:])\n    return str(trimmed)",
    "test_output": "FAILED: expect [(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)],in fact [(3,), (4,), (1,), (8,)]",
    "test_result": "False"
  },
  "4433": {
    "question_id": "mbpp/443",
    "model": "deepseek-v3-250324",
    "generation_code": "def trim_tuple(tuples_list, k):\n    if not tuples_list or k < 0:\n        return []\n    trimmed = []\n    for t in tuples_list:\n        if len(t) > k:\n            trimmed.append((t[k],))\n        else:\n            trimmed.append(())\n    return trimmed",
    "test_output": "FAILED: expect [(2,), (9,), (2,), (2,)],in fact [(2,), (9,), (2,), (2,)]",
    "test_result": "False"
  },
  "4434": {
    "question_id": "mbpp/443",
    "model": "deepseek-v3-250324",
    "generation_code": "def trim_tuple(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        if len(t) > k:\n            result.append(t[k:k+1])\n        else:\n            result.append(t[-1:])\n    return result",
    "test_output": "FAILED: expect [(2,), (9,), (2,), (2,)],in fact [(2,), (9,), (2,), (2,)]",
    "test_result": "False"
  },
  "4435": {
    "question_id": "mbpp/443",
    "model": "deepseek-v3-250324",
    "generation_code": "def trim_tuple(tuples_list, k):\n    if not tuples_list or k < 0:\n        return []\n    result = []\n    for t in tuples_list:\n        if k >= len(t):\n            trimmed = ()\n        else:\n            trimmed = (t[k],)\n        result.append(trimmed)\n    return result",
    "test_output": "FAILED: expect [(2,), (9,), (2,), (2,)],in fact [(2,), (9,), (2,), (2,)]",
    "test_result": "False"
  },
  "4436": {
    "question_id": "mbpp/443",
    "model": "deepseek-v3-250324",
    "generation_code": "def trim_tuple(tuples_list, k):\n    trimmed = []\n    for t in tuples_list:\n        if len(t) > k:\n            trimmed.append(t[k:k+1])\n        else:\n            trimmed.append(t[-1:] if t else ())\n    return str(trimmed)",
    "test_output": "FAILED: expect [(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)],in fact [(3,), (4,), (1,), (8,)]",
    "test_result": "False"
  },
  "4437": {
    "question_id": "mbpp/443",
    "model": "deepseek-v3-250324",
    "generation_code": "def trim_tuple(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        if len(t) > k:\n            trimmed = t[k:k+1]\n        else:\n            trimmed = ()\n        if trimmed:\n            result.append(trimmed)\n        else:\n            result.append(())  # Handle empty tuple case if needed\n    return result",
    "test_output": "FAILED: expect [(2,), (9,), (2,), (2,)],in fact [(2,), (9,), (2,), (2,)]",
    "test_result": "False"
  },
  "4438": {
    "question_id": "mbpp/443",
    "model": "deepseek-v3-250324",
    "generation_code": "def trim_tuple(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        if len(t) > k:\n            trimmed = t[k:k+1] if k < len(t) else ()\n        else:\n            trimmed = ()\n        result.append(trimmed)\n    return result",
    "test_output": "FAILED: expect [(2,), (9,), (2,), (2,)],in fact [(2,), (9,), (2,), (2,)]",
    "test_result": "False"
  },
  "4439": {
    "question_id": "mbpp/443",
    "model": "deepseek-v3-250324",
    "generation_code": "def trim_tuple(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        if len(t) > k:\n            trimmed = t[k:-k]\n            if not trimmed:\n                trimmed = (t[k],) if k < len(t) else ()\n        else:\n            trimmed = ()\n        result.append(trimmed)\n    return result",
    "test_output": "FAILED: expect [(2,), (9,), (2,), (2,)],in fact [(2,), (9,), (2,), (2,)]",
    "test_result": "False"
  },
  "4440": {
    "question_id": "mbpp/444",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4441": {
    "question_id": "mbpp/444",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4442": {
    "question_id": "mbpp/444",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4443": {
    "question_id": "mbpp/444",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4444": {
    "question_id": "mbpp/444",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4445": {
    "question_id": "mbpp/444",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4446": {
    "question_id": "mbpp/444",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4447": {
    "question_id": "mbpp/444",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4448": {
    "question_id": "mbpp/444",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4449": {
    "question_id": "mbpp/444",
    "model": "deepseek-v3-250324",
    "generation_code": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4450": {
    "question_id": "mbpp/445",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4451": {
    "question_id": "mbpp/445",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4452": {
    "question_id": "mbpp/445",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4453": {
    "question_id": "mbpp/445",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4454": {
    "question_id": "mbpp/445",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4455": {
    "question_id": "mbpp/445",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4456": {
    "question_id": "mbpp/445",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4457": {
    "question_id": "mbpp/445",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4458": {
    "question_id": "mbpp/445",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4459": {
    "question_id": "mbpp/445",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4460": {
    "question_id": "mbpp/446",
    "model": "deepseek-v3-250324",
    "generation_code": "cube_nums = lambda lst: list(map(lambda x: x**3, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4461": {
    "question_id": "mbpp/446",
    "model": "deepseek-v3-250324",
    "generation_code": "cube_nums = lambda lst: list(map(lambda x: x**3, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4462": {
    "question_id": "mbpp/446",
    "model": "deepseek-v3-250324",
    "generation_code": "cube_nums = lambda lst: list(map(lambda x: x ** 3, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4463": {
    "question_id": "mbpp/446",
    "model": "deepseek-v3-250324",
    "generation_code": "cube_nums = lambda lst: list(map(lambda x: x**3, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4464": {
    "question_id": "mbpp/446",
    "model": "deepseek-v3-250324",
    "generation_code": "cube_nums = lambda lst: list(map(lambda x: x**3, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4465": {
    "question_id": "mbpp/446",
    "model": "deepseek-v3-250324",
    "generation_code": "cube_nums = lambda lst: list(map(lambda x: x**3, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4466": {
    "question_id": "mbpp/446",
    "model": "deepseek-v3-250324",
    "generation_code": "cube_nums = lambda lst: list(map(lambda x: x ** 3, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4467": {
    "question_id": "mbpp/446",
    "model": "deepseek-v3-250324",
    "generation_code": "cube_nums = lambda lst: list(map(lambda x: x**3, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4468": {
    "question_id": "mbpp/446",
    "model": "deepseek-v3-250324",
    "generation_code": "cube_nums = lambda lst: list(map(lambda x: x**3, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4469": {
    "question_id": "mbpp/446",
    "model": "deepseek-v3-250324",
    "generation_code": "cube_nums = lambda lst: list(map(lambda x: x**3, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4470": {
    "question_id": "mbpp/447",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    perrin = [3, 0, 2]\n    sum_perrin = 5  # 3 + 0 + 2\n    \n    for i in range(3, n):\n        next_val = perrin[i-2] + perrin[i-3]\n        perrin.append(next_val)\n        sum_perrin += next_val\n    \n    return sum_perrin",
    "test_output": "FAILED: expect 49,in fact 37",
    "test_result": "False"
  },
  "4471": {
    "question_id": "mbpp/447",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    perrin = [3, 0, 2]\n    sum_perrin = 5  # Sum of first 3 terms (3 + 0 + 2)\n    for i in range(4, n + 1):\n        next_val = perrin[-2] + perrin[-3]\n        perrin.append(next_val)\n        sum_perrin += next_val\n    return sum_perrin",
    "test_output": "FAILED: expect 49,in fact 37",
    "test_result": "False"
  },
  "4472": {
    "question_id": "mbpp/447",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    perrin = [3, 0, 2]\n    sum_perrin = 5  # 3 + 0 + 2\n    \n    for i in range(3, n):\n        next_val = perrin[i-2] + perrin[i-3]\n        perrin.append(next_val)\n        sum_perrin += next_val\n    \n    return sum_perrin",
    "test_output": "FAILED: expect 49,in fact 37",
    "test_result": "False"
  },
  "4473": {
    "question_id": "mbpp/447",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    perrin = [3, 0, 2]\n    sum_perrin = 5  # 3 + 0 + 2\n    \n    for i in range(3, n):\n        next_val = perrin[i-2] + perrin[i-3]\n        perrin.append(next_val)\n        sum_perrin += next_val\n    \n    return sum_perrin",
    "test_output": "FAILED: expect 49,in fact 37",
    "test_result": "False"
  },
  "4474": {
    "question_id": "mbpp/447",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    perrin = [3, 0, 2]\n    sum_perrin = sum(perrin)\n    \n    for i in range(3, n):\n        next_val = perrin[i-2] + perrin[i-3]\n        perrin.append(next_val)\n        sum_perrin += next_val\n    \n    return sum_perrin",
    "test_output": "FAILED: expect 49,in fact 37",
    "test_result": "False"
  },
  "4475": {
    "question_id": "mbpp/447",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    perrin = [3, 0, 2]\n    total = 5  # 3 + 0 + 2\n    \n    for i in range(3, n):\n        next_val = perrin[i-2] + perrin[i-3]\n        perrin.append(next_val)\n        total += next_val\n    \n    return total",
    "test_output": "FAILED: expect 49,in fact 37",
    "test_result": "False"
  },
  "4476": {
    "question_id": "mbpp/447",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    perrin = [3, 0, 2]\n    total = 5  # 3 + 0 + 2\n    \n    for i in range(3, n):\n        next_num = perrin[i-2] + perrin[i-3]\n        perrin.append(next_num)\n        total += next_num\n    \n    return total",
    "test_output": "FAILED: expect 49,in fact 37",
    "test_result": "False"
  },
  "4477": {
    "question_id": "mbpp/447",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    perrin = [3, 0, 2]\n    total = 5  # 3 + 0 + 2\n    \n    for i in range(3, n):\n        next_num = perrin[i-2] + perrin[i-3]\n        perrin.append(next_num)\n        total += next_num\n    \n    return total",
    "test_output": "FAILED: expect 49,in fact 37",
    "test_result": "False"
  },
  "4478": {
    "question_id": "mbpp/447",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    perrin = [3, 0, 2]\n    sum_perrin = 5  # 3 + 0 + 2\n    \n    for i in range(3, n):\n        next_val = perrin[i-2] + perrin[i-3]\n        perrin.append(next_val)\n        sum_perrin += next_val\n    \n    return sum_perrin",
    "test_output": "FAILED: expect 49,in fact 37",
    "test_result": "False"
  },
  "4479": {
    "question_id": "mbpp/447",
    "model": "deepseek-v3-250324",
    "generation_code": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    perrin = [3, 0, 2]\n    sum_perrin = 5  # 3 + 0 + 2\n    \n    for i in range(3, n):\n        next_val = perrin[i-2] + perrin[i-3]\n        perrin.append(next_val)\n        sum_perrin += next_val\n    \n    return sum_perrin",
    "test_output": "FAILED: expect 49,in fact 37",
    "test_result": "False"
  },
  "4480": {
    "question_id": "mbpp/448",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the area of the triangle\n    area = 0.5 * abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)))\n    # If area is zero, points are collinear (invalid triangle)\n    if area == 0:\n        return 'No'\n    else:\n        return 'Yes'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4481": {
    "question_id": "mbpp/448",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the area of the triangle using the shoelace formula\n    area = 0.5 * abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)))\n    # If area is zero, points are collinear (invalid triangle)\n    return 'Yes' if area != 0 else 'No'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4482": {
    "question_id": "mbpp/448",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the area of the triangle\n    area = 0.5 * abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)))\n    if area == 0:\n        return 'No'\n    else:\n        return 'Yes'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4483": {
    "question_id": "mbpp/448",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the area of the triangle\n    area = 0.5 * abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)))\n    # If area is zero, points are collinear (invalid triangle)\n    if area == 0:\n        return 'No'\n    else:\n        return 'Yes'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4484": {
    "question_id": "mbpp/448",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    area = 0.5 * abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)))\n    return 'Yes' if area != 0 else 'No'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4485": {
    "question_id": "mbpp/448",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the area of the triangle\n    area = 0.5 * abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)))\n    if area == 0:\n        return 'No'\n    else:\n        return 'Yes'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4486": {
    "question_id": "mbpp/448",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    area = 0.5 * abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)))\n    return 'Yes' if area != 0 else 'No'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4487": {
    "question_id": "mbpp/448",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the area of the triangle\n    area = 0.5 * abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)))\n    # If area is zero, points are collinear (invalid triangle)\n    if area == 0:\n        return 'No'\n    else:\n        return 'Yes'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4488": {
    "question_id": "mbpp/448",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the area of the triangle\n    area = 0.5 * abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)))\n    if area == 0:\n        return 'No'\n    else:\n        return 'Yes'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4489": {
    "question_id": "mbpp/448",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the area of the triangle using the shoelace formula\n    area = 0.5 * abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)))\n    # If area is zero, points are collinear (invalid triangle)\n    if area == 0:\n        return 'No'\n    else:\n        return 'Yes'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4490": {
    "question_id": "mbpp/449",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4491": {
    "question_id": "mbpp/449",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4492": {
    "question_id": "mbpp/449",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4493": {
    "question_id": "mbpp/449",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4494": {
    "question_id": "mbpp/449",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4495": {
    "question_id": "mbpp/449",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4496": {
    "question_id": "mbpp/449",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4497": {
    "question_id": "mbpp/449",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4498": {
    "question_id": "mbpp/449",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4499": {
    "question_id": "mbpp/449",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4500": {
    "question_id": "mbpp/450",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4501": {
    "question_id": "mbpp/450",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4502": {
    "question_id": "mbpp/450",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4503": {
    "question_id": "mbpp/450",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4504": {
    "question_id": "mbpp/450",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4505": {
    "question_id": "mbpp/450",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4506": {
    "question_id": "mbpp/450",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4507": {
    "question_id": "mbpp/450",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4508": {
    "question_id": "mbpp/450",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4509": {
    "question_id": "mbpp/450",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4510": {
    "question_id": "mbpp/451",
    "model": "deepseek-v3-250324",
    "generation_code": "def loss_amount(amount, loss):\n    if loss < amount:\n        return None\n    else:\n        return loss - amount",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4511": {
    "question_id": "mbpp/451",
    "model": "deepseek-v3-250324",
    "generation_code": "def loss_amount(amount, loss):\n    if loss < amount:\n        return amount - loss\n    else:\n        return None",
    "test_output": "FAILED: expect None,in fact 300",
    "test_result": "False"
  },
  "4512": {
    "question_id": "mbpp/451",
    "model": "deepseek-v3-250324",
    "generation_code": "def loss_amount(amount, loss):\n    if loss < amount:\n        return amount - loss\n    else:\n        return None",
    "test_output": "FAILED: expect None,in fact 300",
    "test_result": "False"
  },
  "4513": {
    "question_id": "mbpp/451",
    "model": "deepseek-v3-250324",
    "generation_code": "def loss_amount(amount, loss):\n    if loss > amount:\n        return loss - amount\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4514": {
    "question_id": "mbpp/451",
    "model": "deepseek-v3-250324",
    "generation_code": "def loss_amount(amount, loss):\n    if loss < amount:\n        return amount - loss\n    else:\n        return None",
    "test_output": "FAILED: expect None,in fact 300",
    "test_result": "False"
  },
  "4515": {
    "question_id": "mbpp/451",
    "model": "deepseek-v3-250324",
    "generation_code": "def loss_amount(amount, loss):\n    if loss < amount:\n        return amount - loss\n    else:\n        return None",
    "test_output": "FAILED: expect None,in fact 300",
    "test_result": "False"
  },
  "4516": {
    "question_id": "mbpp/451",
    "model": "deepseek-v3-250324",
    "generation_code": "def loss_amount(amount, loss):\n    if loss < amount:\n        return None\n    else:\n        return loss - amount",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4517": {
    "question_id": "mbpp/451",
    "model": "deepseek-v3-250324",
    "generation_code": "def loss_amount(amount, loss):\n    if loss < amount:\n        return amount - loss\n    else:\n        return None",
    "test_output": "FAILED: expect None,in fact 300",
    "test_result": "False"
  },
  "4518": {
    "question_id": "mbpp/451",
    "model": "deepseek-v3-250324",
    "generation_code": "def loss_amount(amount, loss):\n    if loss < amount:\n        return None\n    else:\n        return loss - amount",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4519": {
    "question_id": "mbpp/451",
    "model": "deepseek-v3-250324",
    "generation_code": "def loss_amount(amount, loss):\n    if loss > amount:\n        return loss - amount\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4520": {
    "question_id": "mbpp/452",
    "model": "deepseek-v3-250324",
    "generation_code": "def sumofFactors(n):\n    if n <= 0:\n        return 0\n    sum_even = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 0:\n                sum_even += counterpart\n    return sum_even",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4521": {
    "question_id": "mbpp/452",
    "model": "deepseek-v3-250324",
    "generation_code": "def sumofFactors(n):\n    if n <= 0:\n        return 0\n    sum_even = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 0:\n                sum_even += counterpart\n    return sum_even",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4522": {
    "question_id": "mbpp/452",
    "model": "deepseek-v3-250324",
    "generation_code": "def sumofFactors(n):\n    if n <= 0:\n        return 0\n    sum_even = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 0:\n                sum_even += counterpart\n    return sum_even",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4523": {
    "question_id": "mbpp/452",
    "model": "deepseek-v3-250324",
    "generation_code": "def sumofFactors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 0:\n                total += counterpart\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4524": {
    "question_id": "mbpp/452",
    "model": "deepseek-v3-250324",
    "generation_code": "def sumofFactors(n):\n    if n <= 0:\n        return 0\n    sum_even = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 0:\n                sum_even += counterpart\n    return sum_even",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4525": {
    "question_id": "mbpp/452",
    "model": "deepseek-v3-250324",
    "generation_code": "def sumofFactors(n):\n    if n <= 0:\n        return 0\n    sum_even = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 0:\n                sum_even += counterpart\n    return sum_even",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4526": {
    "question_id": "mbpp/452",
    "model": "deepseek-v3-250324",
    "generation_code": "def sumofFactors(n):\n    if n <= 0:\n        return 0\n    sum_even = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 0:\n                sum_even += counterpart\n    return sum_even",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4527": {
    "question_id": "mbpp/452",
    "model": "deepseek-v3-250324",
    "generation_code": "def sumofFactors(n):\n    if n <= 0:\n        return 0\n    sum_even = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 0:\n                sum_even += counterpart\n    return sum_even",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4528": {
    "question_id": "mbpp/452",
    "model": "deepseek-v3-250324",
    "generation_code": "def sumofFactors(n):\n    if n <= 0:\n        return 0\n    sum_even = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 0:\n                sum_even += counterpart\n    return sum_even",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4529": {
    "question_id": "mbpp/452",
    "model": "deepseek-v3-250324",
    "generation_code": "def sumofFactors(n):\n    if n <= 0:\n        return 0\n    sum_even = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 0:\n                sum_even += counterpart\n    return sum_even",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4530": {
    "question_id": "mbpp/453",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz(text):\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4531": {
    "question_id": "mbpp/453",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_wordz(text):\n    import re\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4532": {
    "question_id": "mbpp/453",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz(text):\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4533": {
    "question_id": "mbpp/453",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz(text):\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4534": {
    "question_id": "mbpp/453",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_wordz(text):\n    import re\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4535": {
    "question_id": "mbpp/453",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_wordz(text):\n    import re\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4536": {
    "question_id": "mbpp/453",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_wordz(text):\n    import re\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4537": {
    "question_id": "mbpp/453",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz(text):\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4538": {
    "question_id": "mbpp/453",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_wordz(text):\n    import re\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4539": {
    "question_id": "mbpp/453",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz(text):\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4540": {
    "question_id": "mbpp/454",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb_number(month):\n    months_with_31 = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4541": {
    "question_id": "mbpp/454",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb_number(month):\n    months_with_31 = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4542": {
    "question_id": "mbpp/454",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb_number(month):\n    months_with_31 = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4543": {
    "question_id": "mbpp/454",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb_number(month):\n    months_with_31 = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4544": {
    "question_id": "mbpp/454",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb_number(month):\n    months_with_31 = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4545": {
    "question_id": "mbpp/454",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4546": {
    "question_id": "mbpp/454",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb_number(month):\n    months_with_31 = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4547": {
    "question_id": "mbpp/454",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb_number(month):\n    months_with_31 = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4548": {
    "question_id": "mbpp/454",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb_number(month):\n    months_with_31 = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4549": {
    "question_id": "mbpp/454",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb_number(month):\n    months_with_31 = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4550": {
    "question_id": "mbpp/455",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4551": {
    "question_id": "mbpp/455",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4552": {
    "question_id": "mbpp/455",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4553": {
    "question_id": "mbpp/455",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4554": {
    "question_id": "mbpp/455",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4555": {
    "question_id": "mbpp/455",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4556": {
    "question_id": "mbpp/455",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst] if lst else []",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4557": {
    "question_id": "mbpp/455",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4558": {
    "question_id": "mbpp/455",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4559": {
    "question_id": "mbpp/455",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4560": {
    "question_id": "mbpp/456",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min(lst):\n    if not lst:\n        return []\n    min_length = min(len(sublist) for sublist in lst)\n    for sublist in lst:\n        if len(sublist) == min_length:\n            return sublist\n    return []",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4561": {
    "question_id": "mbpp/456",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min(lst):\n    if not lst:\n        return []\n    min_length = min(len(sublist) for sublist in lst)\n    for sublist in lst:\n        if len(sublist) == min_length:\n            return sublist\n    return []",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4562": {
    "question_id": "mbpp/456",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min(lst):\n    if not lst:\n        return []\n    min_len = min(len(sublist) for sublist in lst)\n    for sublist in lst:\n        if len(sublist) == min_len:\n            return sublist\n    return []",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4563": {
    "question_id": "mbpp/456",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min(lst):\n    if not lst:\n        return []\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4564": {
    "question_id": "mbpp/456",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min(lst):\n    if not lst:\n        return []\n    min_len = min(len(sublist) for sublist in lst)\n    for sublist in lst:\n        if len(sublist) == min_len:\n            return sublist\n    return []",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4565": {
    "question_id": "mbpp/456",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min(lst):\n    if not lst:\n        return []\n    min_length = min(len(sublist) for sublist in lst)\n    for sublist in lst:\n        if len(sublist) == min_length:\n            return sublist\n    return []",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4566": {
    "question_id": "mbpp/456",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min(lst):\n    if not lst:\n        return []\n    min_length = min(len(sublist) for sublist in lst)\n    for sublist in lst:\n        if len(sublist) == min_length:\n            return sublist\n    return []",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4567": {
    "question_id": "mbpp/456",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min(lst):\n    if not lst:\n        return []\n    min_len = min(len(sublist) for sublist in lst)\n    for sublist in lst:\n        if len(sublist) == min_len:\n            return sublist\n    return []",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4568": {
    "question_id": "mbpp/456",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min(lst):\n    if not lst:\n        return []\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    return min_sublist",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4569": {
    "question_id": "mbpp/456",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Min(lst):\n    if not lst:\n        return []\n    min_len = min(len(sublist) for sublist in lst)\n    for sublist in lst:\n        if len(sublist) == min_len:\n            return sublist\n    return []",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4570": {
    "question_id": "mbpp/457",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_area(length, width):\n    if length <= 0 or width <= 0:\n        return 0\n    return length * width",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4571": {
    "question_id": "mbpp/457",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_area(length, width):\n    return length * width",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4572": {
    "question_id": "mbpp/457",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_area(length, width):\n    return length * width",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4573": {
    "question_id": "mbpp/457",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_area(length, width):\n    if length <= 0 or width <= 0:\n        return 0\n    return length * width",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4574": {
    "question_id": "mbpp/457",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_area(length, width):\n    return length * width",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4575": {
    "question_id": "mbpp/457",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_area(length, width):\n    return length * width",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4576": {
    "question_id": "mbpp/457",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_area(length, width):\n    return length * width",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4577": {
    "question_id": "mbpp/457",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_area(length, width):\n    if length <= 0 or width <= 0:\n        return 0\n    return length * width",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4578": {
    "question_id": "mbpp/457",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_area(length, width):\n    if length <= 0 or width <= 0:\n        return 0\n    return length * width",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4579": {
    "question_id": "mbpp/457",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_area(length, width):\n    if length <= 0 or width <= 0:\n        return 0\n    return length * width",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4580": {
    "question_id": "mbpp/458",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4581": {
    "question_id": "mbpp/458",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4582": {
    "question_id": "mbpp/458",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4583": {
    "question_id": "mbpp/458",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4584": {
    "question_id": "mbpp/458",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4585": {
    "question_id": "mbpp/458",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4586": {
    "question_id": "mbpp/458",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4587": {
    "question_id": "mbpp/458",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4588": {
    "question_id": "mbpp/458",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4589": {
    "question_id": "mbpp/458",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4590": {
    "question_id": "mbpp/459",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[0] for sublist in lst if len(sublist) > 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4591": {
    "question_id": "mbpp/459",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[0] for sublist in lst if len(sublist) > 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4592": {
    "question_id": "mbpp/459",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[0] for sublist in lst if len(sublist) > 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4593": {
    "question_id": "mbpp/459",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[0] for sublist in lst if len(sublist) > 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4594": {
    "question_id": "mbpp/459",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[0] for sublist in lst if len(sublist) > 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4595": {
    "question_id": "mbpp/459",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[0] for sublist in lst if len(sublist) > 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4596": {
    "question_id": "mbpp/459",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[0] for sublist in lst if len(sublist) > 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4597": {
    "question_id": "mbpp/459",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[0] for sublist in lst if len(sublist) > 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4598": {
    "question_id": "mbpp/459",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[0] for sublist in lst if len(sublist) > 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4599": {
    "question_id": "mbpp/459",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[0] for sublist in lst if len(sublist) > 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4600": {
    "question_id": "mbpp/460",
    "model": "deepseek-v3-250324",
    "generation_code": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "4601": {
    "question_id": "mbpp/460",
    "model": "deepseek-v3-250324",
    "generation_code": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "4602": {
    "question_id": "mbpp/460",
    "model": "deepseek-v3-250324",
    "generation_code": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "4603": {
    "question_id": "mbpp/460",
    "model": "deepseek-v3-250324",
    "generation_code": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "4604": {
    "question_id": "mbpp/460",
    "model": "deepseek-v3-250324",
    "generation_code": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "4605": {
    "question_id": "mbpp/460",
    "model": "deepseek-v3-250324",
    "generation_code": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "4606": {
    "question_id": "mbpp/460",
    "model": "deepseek-v3-250324",
    "generation_code": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "4607": {
    "question_id": "mbpp/460",
    "model": "deepseek-v3-250324",
    "generation_code": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "4608": {
    "question_id": "mbpp/460",
    "model": "deepseek-v3-250324",
    "generation_code": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "4609": {
    "question_id": "mbpp/460",
    "model": "deepseek-v3-250324",
    "generation_code": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "4610": {
    "question_id": "mbpp/461",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_list(lst):\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        for combo in combinations(lst, r):\n            result.append(list(combo))\n    return result",
    "test_output": "FAILED: expect [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']],in fact [[], ['orange'], ['red'], ['green'], ['blue'], ['orange', 'red'], ['orange', 'green'], ['orange', 'blue'], ['red', 'green'], ['red', 'blue'], ['green', 'blue'], ['orange', 'red', 'green'], ['orange', 'red', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]",
    "test_result": "False"
  },
  "4611": {
    "question_id": "mbpp/461",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_list(lst):\n    from itertools import combinations\n    result = []\n    for i in range(len(lst)+1):\n        for combo in combinations(lst, i):\n            result.append(list(combo))\n    return result",
    "test_output": "FAILED: expect [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']],in fact [[], ['orange'], ['red'], ['green'], ['blue'], ['orange', 'red'], ['orange', 'green'], ['orange', 'blue'], ['red', 'green'], ['red', 'blue'], ['green', 'blue'], ['orange', 'red', 'green'], ['orange', 'red', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]",
    "test_result": "False"
  },
  "4612": {
    "question_id": "mbpp/461",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_list(lst):\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        for combo in combinations(lst, r):\n            result.append(list(combo))\n    return result",
    "test_output": "FAILED: expect [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']],in fact [[], ['orange'], ['red'], ['green'], ['blue'], ['orange', 'red'], ['orange', 'green'], ['orange', 'blue'], ['red', 'green'], ['red', 'blue'], ['green', 'blue'], ['orange', 'red', 'green'], ['orange', 'red', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]",
    "test_result": "False"
  },
  "4613": {
    "question_id": "mbpp/461",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_list(lst):\n    from itertools import combinations\n    result = []\n    for i in range(len(lst) + 1):\n        for combo in combinations(lst, i):\n            result.append(list(combo))\n    return result",
    "test_output": "FAILED: expect [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']],in fact [[], ['orange'], ['red'], ['green'], ['blue'], ['orange', 'red'], ['orange', 'green'], ['orange', 'blue'], ['red', 'green'], ['red', 'blue'], ['green', 'blue'], ['orange', 'red', 'green'], ['orange', 'red', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]",
    "test_result": "False"
  },
  "4614": {
    "question_id": "mbpp/461",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_list(lst):\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        for combo in combinations(lst, r):\n            result.append(list(combo))\n    return result",
    "test_output": "FAILED: expect [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']],in fact [[], ['orange'], ['red'], ['green'], ['blue'], ['orange', 'red'], ['orange', 'green'], ['orange', 'blue'], ['red', 'green'], ['red', 'blue'], ['green', 'blue'], ['orange', 'red', 'green'], ['orange', 'red', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]",
    "test_result": "False"
  },
  "4615": {
    "question_id": "mbpp/461",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_list(lst):\n    from itertools import combinations\n    result = []\n    for i in range(len(lst) + 1):\n        for combo in combinations(lst, i):\n            result.append(list(combo))\n    return result",
    "test_output": "FAILED: expect [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']],in fact [[], ['orange'], ['red'], ['green'], ['blue'], ['orange', 'red'], ['orange', 'green'], ['orange', 'blue'], ['red', 'green'], ['red', 'blue'], ['green', 'blue'], ['orange', 'red', 'green'], ['orange', 'red', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]",
    "test_result": "False"
  },
  "4616": {
    "question_id": "mbpp/461",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_list(lst):\n    from itertools import combinations\n    result = []\n    for i in range(len(lst) + 1):\n        for combo in combinations(lst, i):\n            result.append(list(combo))\n    return result",
    "test_output": "FAILED: expect [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']],in fact [[], ['orange'], ['red'], ['green'], ['blue'], ['orange', 'red'], ['orange', 'green'], ['orange', 'blue'], ['red', 'green'], ['red', 'blue'], ['green', 'blue'], ['orange', 'red', 'green'], ['orange', 'red', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]",
    "test_result": "False"
  },
  "4617": {
    "question_id": "mbpp/461",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_list(lst):\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        for combo in combinations(lst, r):\n            result.append(list(combo))\n    return result",
    "test_output": "FAILED: expect [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']],in fact [[], ['orange'], ['red'], ['green'], ['blue'], ['orange', 'red'], ['orange', 'green'], ['orange', 'blue'], ['red', 'green'], ['red', 'blue'], ['green', 'blue'], ['orange', 'red', 'green'], ['orange', 'red', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]",
    "test_result": "False"
  },
  "4618": {
    "question_id": "mbpp/461",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_list(lst):\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        for combo in combinations(lst, r):\n            result.append(list(combo))\n    return result",
    "test_output": "FAILED: expect [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']],in fact [[], ['orange'], ['red'], ['green'], ['blue'], ['orange', 'red'], ['orange', 'green'], ['orange', 'blue'], ['red', 'green'], ['red', 'blue'], ['green', 'blue'], ['orange', 'red', 'green'], ['orange', 'red', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]",
    "test_result": "False"
  },
  "4619": {
    "question_id": "mbpp/461",
    "model": "deepseek-v3-250324",
    "generation_code": "def combinations_list(lst):\n    from itertools import combinations\n    result = []\n    for i in range(len(lst) + 1):\n        for combo in combinations(lst, i):\n            result.append(list(combo))\n    return result",
    "test_output": "FAILED: expect [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']],in fact [[], ['orange'], ['red'], ['green'], ['blue'], ['orange', 'red'], ['orange', 'green'], ['orange', 'blue'], ['red', 'green'], ['red', 'blue'], ['green', 'blue'], ['orange', 'red', 'green'], ['orange', 'red', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]",
    "test_result": "False"
  },
  "4620": {
    "question_id": "mbpp/462",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = current_max = current_min = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = current_min, current_max\n        \n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        \n        max_product = max(max_product, current_max)\n    \n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4621": {
    "question_id": "mbpp/462",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = current_max = current_min = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = current_min, current_max\n        \n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        \n        max_product = max(max_product, current_max)\n    \n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4622": {
    "question_id": "mbpp/462",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    max_product = current_max = current_min = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = current_min, current_max\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4623": {
    "question_id": "mbpp/462",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    max_product = current_max = current_min = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = current_min, current_max\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4624": {
    "question_id": "mbpp/462",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        result = max(result, max_product)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4625": {
    "question_id": "mbpp/462",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4626": {
    "question_id": "mbpp/462",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4627": {
    "question_id": "mbpp/462",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = current_max = current_min = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = current_min, current_max\n        \n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        \n        max_product = max(max_product, current_max)\n    \n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4628": {
    "question_id": "mbpp/462",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        result = max(result, max_product)\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4629": {
    "question_id": "mbpp/462",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = current_max = current_min = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = current_min, current_max\n        \n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        \n        max_product = max(max_product, current_max)\n    \n    return max_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4630": {
    "question_id": "mbpp/463",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_value(dictionary, value):\n    if not dictionary:\n        return False\n    return all(v == value for v in dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4631": {
    "question_id": "mbpp/463",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_value(dictionary, value):\n    if not dictionary:\n        return False\n    return all(v == value for v in dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4632": {
    "question_id": "mbpp/463",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_value(dictionary, value):\n    if not dictionary:\n        return False\n    return all(v == value for v in dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4633": {
    "question_id": "mbpp/463",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_value(dictionary, value):\n    if not dictionary:\n        return False\n    return all(v == value for v in dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4634": {
    "question_id": "mbpp/463",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_value(dictionary, value):\n    if not dictionary:\n        return False\n    return all(v == value for v in dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4635": {
    "question_id": "mbpp/463",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_value(dictionary, value):\n    if not dictionary:\n        return False\n    return all(v == value for v in dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4636": {
    "question_id": "mbpp/463",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_value(dictionary, value):\n    if not dictionary:\n        return False\n    return all(v == value for v in dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4637": {
    "question_id": "mbpp/463",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_value(dictionary, value):\n    if not dictionary:\n        return False\n    return all(v == value for v in dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4638": {
    "question_id": "mbpp/463",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_value(dictionary, value):\n    if not dictionary:\n        return False\n    return all(v == value for v in dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4639": {
    "question_id": "mbpp/463",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_value(dictionary, value):\n    if not dictionary:\n        return False\n    return all(v == value for v in dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4640": {
    "question_id": "mbpp/464",
    "model": "deepseek-v3-250324",
    "generation_code": "def drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None and v != ''}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4641": {
    "question_id": "mbpp/464",
    "model": "deepseek-v3-250324",
    "generation_code": "def drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None and v != ''}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4642": {
    "question_id": "mbpp/464",
    "model": "deepseek-v3-250324",
    "generation_code": "def drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None and v != ''}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4643": {
    "question_id": "mbpp/464",
    "model": "deepseek-v3-250324",
    "generation_code": "def drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None and v != ''}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4644": {
    "question_id": "mbpp/464",
    "model": "deepseek-v3-250324",
    "generation_code": "def drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None and v != ''}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4645": {
    "question_id": "mbpp/464",
    "model": "deepseek-v3-250324",
    "generation_code": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None and v != ''}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4646": {
    "question_id": "mbpp/464",
    "model": "deepseek-v3-250324",
    "generation_code": "def drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None and v != ''}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4647": {
    "question_id": "mbpp/464",
    "model": "deepseek-v3-250324",
    "generation_code": "def drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None and v != ''}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4648": {
    "question_id": "mbpp/464",
    "model": "deepseek-v3-250324",
    "generation_code": "def drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None and v != ''}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4649": {
    "question_id": "mbpp/464",
    "model": "deepseek-v3-250324",
    "generation_code": "def drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None and v != ''}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4650": {
    "question_id": "mbpp/465",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_peak(arr, n):\n    if n == 0:\n        return -1\n    if n == 1:\n        return 0\n    for i in range(n):\n        if (i == 0 or arr[i] >= arr[i-1]) and (i == n-1 or arr[i] >= arr[i+1]):\n            return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4651": {
    "question_id": "mbpp/465",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_peak(arr, n):\n    if n == 1:\n        return 0\n    for i in range(n):\n        if i == 0:\n            if arr[i] >= arr[i+1]:\n                return i\n        elif i == n-1:\n            if arr[i] >= arr[i-1]:\n                return i\n        else:\n            if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n                return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4652": {
    "question_id": "mbpp/465",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_peak(arr, n):\n    if n == 1:\n        return 0\n    for i in range(n):\n        if i == 0:\n            if arr[i] >= arr[i+1]:\n                return i\n        elif i == n-1:\n            if arr[i] >= arr[i-1]:\n                return i\n        else:\n            if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n                return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4653": {
    "question_id": "mbpp/465",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_peak(arr, n):\n    if n == 1:\n        return 0\n    for i in range(n):\n        if i == 0:\n            if arr[i] >= arr[i+1]:\n                return i\n        elif i == n-1:\n            if arr[i] >= arr[i-1]:\n                return i\n        else:\n            if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n                return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4654": {
    "question_id": "mbpp/465",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_peak(arr, n):\n    if n == 1:\n        return 0\n    for i in range(n):\n        if i == 0:\n            if arr[i] >= arr[i+1]:\n                return i\n        elif i == n-1:\n            if arr[i] >= arr[i-1]:\n                return i\n        else:\n            if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n                return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4655": {
    "question_id": "mbpp/465",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_peak(arr, n):\n    if n == 1:\n        return 0\n    for i in range(n):\n        if i == 0:\n            if arr[i] >= arr[i+1]:\n                return i\n        elif i == n-1:\n            if arr[i] >= arr[i-1]:\n                return i\n        else:\n            if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n                return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4656": {
    "question_id": "mbpp/465",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_peak(arr, n):\n    if n == 1:\n        return 0\n    for i in range(n):\n        if i == 0:\n            if arr[i] >= arr[i+1]:\n                return i\n        elif i == n-1:\n            if arr[i] >= arr[i-1]:\n                return i\n        else:\n            if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n                return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4657": {
    "question_id": "mbpp/465",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_peak(arr, n):\n    if n == 1:\n        return 0\n    for i in range(n):\n        if i == 0:\n            if arr[i] >= arr[i+1]:\n                return i\n        elif i == n-1:\n            if arr[i] >= arr[i-1]:\n                return i\n        else:\n            if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n                return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4658": {
    "question_id": "mbpp/465",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_peak(arr, n):\n    if n == 1:\n        return 0\n    for i in range(n):\n        if i == 0:\n            if arr[i] >= arr[i+1]:\n                return i\n        elif i == n-1:\n            if arr[i] >= arr[i-1]:\n                return i\n        else:\n            if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n                return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4659": {
    "question_id": "mbpp/465",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_peak(arr, n):\n    if n == 1:\n        return 0\n    for i in range(n):\n        if i == 0:\n            if arr[i] >= arr[i+1]:\n                return i\n        elif i == n-1:\n            if arr[i] >= arr[i-1]:\n                return i\n        else:\n            if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n                return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4660": {
    "question_id": "mbpp/466",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_Octal(n):\n    if n == 0:\n        return 0\n    octal = 0\n    i = 1\n    while n != 0:\n        octal += (n % 8) * i\n        n = n // 8\n        i *= 10\n    return octal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4661": {
    "question_id": "mbpp/466",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_Octal(n):\n    if n == 0:\n        return 0\n    octal = 0\n    i = 1\n    while n != 0:\n        octal += (n % 8) * i\n        n = n // 8\n        i *= 10\n    return octal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4662": {
    "question_id": "mbpp/466",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_Octal(decimal_num):\n    if decimal_num == 0:\n        return 0\n    octal_num = 0\n    i = 1\n    while decimal_num != 0:\n        octal_num += (decimal_num % 8) * i\n        decimal_num = decimal_num // 8\n        i *= 10\n    return octal_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4663": {
    "question_id": "mbpp/466",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_Octal(decimal_num):\n    if decimal_num == 0:\n        return 0\n    octal_num = 0\n    i = 1\n    while decimal_num != 0:\n        octal_num += (decimal_num % 8) * i\n        decimal_num = decimal_num // 8\n        i *= 10\n    return octal_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4664": {
    "question_id": "mbpp/466",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_Octal(decimal_num):\n    if decimal_num == 0:\n        return 0\n    octal_num = 0\n    i = 1\n    while decimal_num != 0:\n        octal_num += (decimal_num % 8) * i\n        decimal_num = decimal_num // 8\n        i *= 10\n    return octal_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4665": {
    "question_id": "mbpp/466",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_Octal(decimal_num):\n    if decimal_num == 0:\n        return 0\n    octal_num = 0\n    i = 1\n    while decimal_num != 0:\n        octal_num += (decimal_num % 8) * i\n        decimal_num = decimal_num // 8\n        i *= 10\n    return octal_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4666": {
    "question_id": "mbpp/466",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_Octal(decimal_num):\n    if decimal_num == 0:\n        return 0\n    octal_num = 0\n    i = 1\n    while decimal_num != 0:\n        octal_num += (decimal_num % 8) * i\n        decimal_num = decimal_num // 8\n        i *= 10\n    return octal_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4667": {
    "question_id": "mbpp/466",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_Octal(n):\n    if n == 0:\n        return 0\n    octal = 0\n    i = 1\n    while n != 0:\n        octal += (n % 8) * i\n        n = n // 8\n        i *= 10\n    return octal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4668": {
    "question_id": "mbpp/466",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_Octal(decimal_num):\n    if decimal_num == 0:\n        return 0\n    octal_num = 0\n    i = 1\n    while decimal_num != 0:\n        octal_num += (decimal_num % 8) * i\n        decimal_num = decimal_num // 8\n        i *= 10\n    return octal_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4669": {
    "question_id": "mbpp/466",
    "model": "deepseek-v3-250324",
    "generation_code": "def decimal_to_Octal(n):\n    if n == 0:\n        return 0\n    octal = 0\n    i = 1\n    while n != 0:\n        octal += (n % 8) * i\n        n = n // 8\n        i *= 10\n    return octal",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4670": {
    "question_id": "mbpp/467",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)",
    "test_output": "FAILED: expect 45000,in fact 15000",
    "test_result": "False"
  },
  "4671": {
    "question_id": "mbpp/467",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr, n):\n    if not arr:\n        return 0\n    dp = [num for num in arr]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] * arr[i]:\n                dp[i] = dp[j] * arr[i]\n    return max(dp) if max(dp) > 0 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4672": {
    "question_id": "mbpp/467",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and dp[j] * arr[i] > dp[i]:\n                dp[i] = dp[j] * arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4673": {
    "question_id": "mbpp/467",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr, n):\n    if not arr:\n        return 0\n    \n    dp = [num for num in arr]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    return max(dp) if max(dp) > 0 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4674": {
    "question_id": "mbpp/467",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr, n):\n    if not arr:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and dp[i] < dp[j] * arr[i]:\n                dp[i] = dp[j] * arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4675": {
    "question_id": "mbpp/467",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and dp[i] < dp[j] * arr[i]:\n                dp[i] = dp[j] * arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4676": {
    "question_id": "mbpp/467",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp) if max(dp) != 1 else 0",
    "test_output": "FAILED: expect 45000,in fact 15000",
    "test_result": "False"
  },
  "4677": {
    "question_id": "mbpp/467",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and dp[j] * arr[i] > dp[i]:\n                dp[i] = dp[j] * arr[i]\n    return max(dp) if max(dp) > 1 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4678": {
    "question_id": "mbpp/467",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp) if max(dp) != 1 else 0",
    "test_output": "FAILED: expect 45000,in fact 15000",
    "test_result": "False"
  },
  "4679": {
    "question_id": "mbpp/467",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr, n):\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and dp[j] * arr[i] > dp[i]:\n                dp[i] = dp[j] * arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4680": {
    "question_id": "mbpp/468",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    if k >= n // 2:\n        max_profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i-1]:\n                max_profit += prices[i] - prices[i-1]\n        return max_profit\n    \n    dp = [[0] * n for _ in range(k+1)]\n    \n    for i in range(1, k+1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i-1][j] - prices[j])\n    \n    return dp[k][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4681": {
    "question_id": "mbpp/468",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    if k >= n // 2:\n        max_profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i-1]:\n                max_profit += prices[i] - prices[i-1]\n        return max_profit\n    \n    dp = [[0] * n for _ in range(k+1)]\n    \n    for i in range(1, k+1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i-1][j] - prices[j])\n    \n    return dp[k][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4682": {
    "question_id": "mbpp/468",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    if k >= n // 2:\n        max_profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i-1]:\n                max_profit += prices[i] - prices[i-1]\n        return max_profit\n    \n    dp = [[0] * n for _ in range(k+1)]\n    \n    for i in range(1, k+1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i-1][j] - prices[j])\n    \n    return dp[k][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4683": {
    "question_id": "mbpp/468",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    if k >= n // 2:\n        max_profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i-1]:\n                max_profit += prices[i] - prices[i-1]\n        return max_profit\n    \n    dp = [[0] * n for _ in range(k+1)]\n    \n    for i in range(1, k+1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i-1][j] - prices[j])\n    \n    return dp[k][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4684": {
    "question_id": "mbpp/468",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    if k >= n // 2:\n        max_profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i-1]:\n                max_profit += prices[i] - prices[i-1]\n        return max_profit\n    \n    dp = [[0] * n for _ in range(k+1)]\n    \n    for i in range(1, k+1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i-1][j] - prices[j])\n    \n    return dp[k][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4685": {
    "question_id": "mbpp/468",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    if k >= n // 2:\n        max_profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i-1]:\n                max_profit += prices[i] - prices[i-1]\n        return max_profit\n    \n    dp = [[0] * n for _ in range(k+1)]\n    \n    for i in range(1, k+1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i-1][j] - prices[j])\n    \n    return dp[k][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4686": {
    "question_id": "mbpp/468",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    if k >= n // 2:\n        max_profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i-1]:\n                max_profit += prices[i] - prices[i-1]\n        return max_profit\n    \n    dp = [[0] * n for _ in range(k+1)]\n    \n    for i in range(1, k+1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i-1][j] - prices[j])\n    \n    return dp[k][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4687": {
    "question_id": "mbpp/468",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    if k >= n // 2:\n        max_profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i-1]:\n                max_profit += prices[i] - prices[i-1]\n        return max_profit\n    \n    dp = [[0] * n for _ in range(k+1)]\n    \n    for i in range(1, k+1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i-1][j] - prices[j])\n    \n    return dp[k][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4688": {
    "question_id": "mbpp/468",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    if k >= n // 2:\n        max_profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i-1]:\n                max_profit += prices[i] - prices[i-1]\n        return max_profit\n    \n    dp = [[0] * n for _ in range(k+1)]\n    \n    for i in range(1, k+1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i-1][j] - prices[j])\n    \n    return dp[k][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4689": {
    "question_id": "mbpp/468",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    if k >= n // 2:\n        return sum(max(prices[i + 1] - prices[i], 0) for i in range(n - 1))\n    \n    dp = [[0] * n for _ in range(k + 1)]\n    \n    for i in range(1, k + 1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - prices[j])\n    \n    return dp[k][n - 1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4690": {
    "question_id": "mbpp/469",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_pairwise(t):\n    if len(t) < 2:\n        return ()\n    result = []\n    for i in range(len(t) - 1):\n        result.append(t[i] + t[i+1])\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4691": {
    "question_id": "mbpp/469",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4692": {
    "question_id": "mbpp/469",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4693": {
    "question_id": "mbpp/469",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4694": {
    "question_id": "mbpp/469",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4695": {
    "question_id": "mbpp/469",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4696": {
    "question_id": "mbpp/469",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4697": {
    "question_id": "mbpp/469",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4698": {
    "question_id": "mbpp/469",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4699": {
    "question_id": "mbpp/469",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4700": {
    "question_id": "mbpp/470",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_remainder(arr, n, divisor):\n    product = 1\n    for num in arr:\n        product = (product * (num % divisor)) % divisor\n    return product % divisor",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4701": {
    "question_id": "mbpp/470",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_remainder(arr, n, divisor):\n    product = 1\n    for num in arr:\n        product = (product * num) % divisor\n    return product % divisor",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4702": {
    "question_id": "mbpp/470",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_remainder(arr, n, divisor):\n    product = 1\n    for num in arr:\n        product = (product * num) % divisor\n    return product % divisor",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4703": {
    "question_id": "mbpp/470",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_remainder(arr, n, divisor):\n    if not arr or divisor == 0:\n        return 0\n    product = 1\n    for num in arr:\n        product = (product * (num % divisor)) % divisor\n    return product % divisor",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4704": {
    "question_id": "mbpp/470",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_remainder(arr, n, divisor):\n    product = 1\n    for num in arr:\n        product = (product * (num % divisor)) % divisor\n    return product % divisor",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4705": {
    "question_id": "mbpp/470",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_remainder(arr, n, divisor):\n    product = 1\n    for num in arr:\n        product = (product * num) % divisor\n    return product % divisor",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4706": {
    "question_id": "mbpp/470",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_remainder(arr, n, divisor):\n    product = 1\n    for num in arr:\n        product = (product * num) % divisor\n    return product % divisor",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4707": {
    "question_id": "mbpp/470",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_remainder(arr, n, divisor):\n    product = 1\n    for num in arr:\n        product = (product * num) % divisor\n    return product % divisor",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4708": {
    "question_id": "mbpp/470",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_remainder(arr, n, divisor):\n    product = 1\n    for num in arr:\n        product *= num\n    remainder = product % divisor\n    return remainder",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4709": {
    "question_id": "mbpp/470",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_remainder(arr, n, divisor):\n    product = 1\n    for num in arr:\n        product *= num\n    remainder = product % divisor\n    return remainder",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4710": {
    "question_id": "mbpp/471",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Consecutive(lst):\n    if len(lst) <= 1:\n        return True\n    min_val = min(lst)\n    max_val = max(lst)\n    if max_val - min_val + 1 != len(lst):\n        return False\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4711": {
    "question_id": "mbpp/471",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Consecutive(lst):\n    if len(lst) < 1:\n        return False\n    min_val = min(lst)\n    max_val = max(lst)\n    if max_val - min_val + 1 != len(lst):\n        return False\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4712": {
    "question_id": "mbpp/471",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Consecutive(lst):\n    if len(lst) < 1:\n        return False\n    min_val = min(lst)\n    max_val = max(lst)\n    if max_val - min_val + 1 != len(lst):\n        return False\n    unique_elements = set(lst)\n    return len(unique_elements) == len(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4713": {
    "question_id": "mbpp/471",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    min_val = min(lst)\n    max_val = max(lst)\n    if max_val - min_val + 1 != len(lst):\n        return False\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4714": {
    "question_id": "mbpp/471",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Consecutive(lst):\n    if len(lst) <= 1:\n        return True\n    min_val = min(lst)\n    max_val = max(lst)\n    if max_val - min_val + 1 != len(lst):\n        return False\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4715": {
    "question_id": "mbpp/471",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    min_val = min(lst)\n    max_val = max(lst)\n    if max_val - min_val + 1 != len(lst):\n        return False\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4716": {
    "question_id": "mbpp/471",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Consecutive(lst):\n    if len(lst) < 1:\n        return False\n    min_val = min(lst)\n    max_val = max(lst)\n    if max_val - min_val + 1 != len(lst):\n        return False\n    unique_elements = set(lst)\n    if len(unique_elements) != len(lst):\n        return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4717": {
    "question_id": "mbpp/471",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    min_val = min(lst)\n    max_val = max(lst)\n    if max_val - min_val + 1 != len(lst):\n        return False\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4718": {
    "question_id": "mbpp/471",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Consecutive(lst):\n    if len(lst) <= 1:\n        return True\n    min_val = min(lst)\n    max_val = max(lst)\n    if max_val - min_val + 1 != len(lst):\n        return False\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4719": {
    "question_id": "mbpp/471",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    min_val = min(lst)\n    max_val = max(lst)\n    if max_val - min_val + 1 != len(lst):\n        return False\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4720": {
    "question_id": "mbpp/472",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = {tuple(sorted(t)) for t in tuple_list1}\n    set2 = {tuple(sorted(t)) for t in tuple_list2}\n    intersection = set1 & set2\n    result = set()\n    for item in intersection:\n        original = None\n        for t in tuple_list1 + tuple_list2:\n            if tuple(sorted(t)) == item:\n                original = t\n                break\n        if original is not None:\n            result.add(original)\n    return result",
    "test_output": "FAILED: expect {(4, 7), (1, 4)},in fact {(7, 4), (4, 1)}",
    "test_result": "False"
  },
  "4721": {
    "question_id": "mbpp/472",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = {tuple(sorted(t)) for t in tuple_list1}\n    set2 = {tuple(sorted(t)) for t in tuple_list2}\n    intersection = set1 & set2\n    return intersection",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4722": {
    "question_id": "mbpp/472",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = {tuple(sorted(t)) for t in tuple_list1}\n    set2 = {tuple(sorted(t)) for t in tuple_list2}\n    intersection = set1 & set2\n    return intersection",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4723": {
    "question_id": "mbpp/472",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = {tuple(sorted(t)) for t in tuple_list1}\n    set2 = {tuple(sorted(t)) for t in tuple_list2}\n    intersection = set1 & set2\n    return intersection",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4724": {
    "question_id": "mbpp/472",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = {tuple(sorted(t)) for t in tuple_list1}\n    set2 = {tuple(sorted(t)) for t in tuple_list2}\n    return set1 & set2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4725": {
    "question_id": "mbpp/472",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = {tuple(sorted(t)) for t in tuple_list1}\n    set2 = {tuple(sorted(t)) for t in tuple_list2}\n    intersection = set1 & set2\n    return intersection",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4726": {
    "question_id": "mbpp/472",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = {tuple(sorted(t)) for t in tuple_list1}\n    set2 = {tuple(sorted(t)) for t in tuple_list2}\n    intersection = set1 & set2\n    return intersection",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4727": {
    "question_id": "mbpp/472",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = {tuple(sorted(t)) for t in tuple_list1}\n    set2 = {tuple(sorted(t)) for t in tuple_list2}\n    intersection = set1 & set2\n    return intersection",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4728": {
    "question_id": "mbpp/472",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = {tuple(sorted(t)) for t in tuple_list1}\n    set2 = {tuple(sorted(t)) for t in tuple_list2}\n    intersection = set1 & set2\n    return intersection",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4729": {
    "question_id": "mbpp/472",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = {tuple(sorted(t)) for t in tuple_list1}\n    set2 = {tuple(sorted(t)) for t in tuple_list2}\n    intersection = set1 & set2\n    result = set()\n    for t in intersection:\n        original = None\n        for lst in [tuple_list1, tuple_list2]:\n            for item in lst:\n                if tuple(sorted(item)) == t:\n                    original = item\n                    break\n            if original is not None:\n                break\n        result.add(original)\n    return result",
    "test_output": "FAILED: expect {(4, 7), (1, 4)},in fact {(7, 4), (4, 1)}",
    "test_result": "False"
  },
  "4730": {
    "question_id": "mbpp/473",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4731": {
    "question_id": "mbpp/473",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4732": {
    "question_id": "mbpp/473",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4733": {
    "question_id": "mbpp/473",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4734": {
    "question_id": "mbpp/473",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4735": {
    "question_id": "mbpp/473",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4736": {
    "question_id": "mbpp/473",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4737": {
    "question_id": "mbpp/473",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4738": {
    "question_id": "mbpp/473",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4739": {
    "question_id": "mbpp/473",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4740": {
    "question_id": "mbpp/474",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4741": {
    "question_id": "mbpp/474",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4742": {
    "question_id": "mbpp/474",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4743": {
    "question_id": "mbpp/474",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4744": {
    "question_id": "mbpp/474",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4745": {
    "question_id": "mbpp/474",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4746": {
    "question_id": "mbpp/474",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4747": {
    "question_id": "mbpp/474",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4748": {
    "question_id": "mbpp/474",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4749": {
    "question_id": "mbpp/474",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4750": {
    "question_id": "mbpp/475",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_sum(arr):\n    if not arr:\n        return 0\n    return max(arr) + min(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4751": {
    "question_id": "mbpp/475",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_sum(arr):\n    if not arr:\n        return 0\n    return max(arr) + min(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4752": {
    "question_id": "mbpp/475",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_sum(arr):\n    if not arr:\n        return 0\n    return max(arr) + min(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4753": {
    "question_id": "mbpp/475",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_sum(arr):\n    if not arr:\n        return 0\n    return max(arr) + min(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4754": {
    "question_id": "mbpp/475",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_sum(arr):\n    if not arr:\n        return 0\n    return max(arr) + min(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4755": {
    "question_id": "mbpp/475",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_sum(arr):\n    if not arr:\n        return 0\n    return max(arr) + min(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4756": {
    "question_id": "mbpp/475",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_sum(arr):\n    if not arr:\n        return 0\n    return max(arr) + min(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4757": {
    "question_id": "mbpp/475",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_sum(arr):\n    if not arr:\n        return 0\n    return max(arr) + min(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4758": {
    "question_id": "mbpp/475",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_sum(arr):\n    if not arr:\n        return 0\n    return max(arr) + min(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4759": {
    "question_id": "mbpp/475",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_sum(arr):\n    if not arr:\n        return 0\n    return max(arr) + min(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4760": {
    "question_id": "mbpp/476",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_lower(s):\n    return s.lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4761": {
    "question_id": "mbpp/476",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_lower(s):\n    return s.lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4762": {
    "question_id": "mbpp/476",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_lower(s):\n    return s.lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4763": {
    "question_id": "mbpp/476",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_lower(s):\n    return s.lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4764": {
    "question_id": "mbpp/476",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_lower(s):\n    return s.lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4765": {
    "question_id": "mbpp/476",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_lower(s):\n    return s.lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4766": {
    "question_id": "mbpp/476",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_lower(s):\n    return s.lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4767": {
    "question_id": "mbpp/476",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_lower(s):\n    return s.lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4768": {
    "question_id": "mbpp/476",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_lower(s):\n    return s.lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4769": {
    "question_id": "mbpp/476",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_lower(s):\n    return s.lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4770": {
    "question_id": "mbpp/477",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_lowercase(s):\n    result = []\n    for char in s:\n        if not char.islower():\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4771": {
    "question_id": "mbpp/477",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_lowercase(s):\n    return ''.join([c for c in s if not c.islower()])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4772": {
    "question_id": "mbpp/477",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_lowercase(s):\n    return ''.join([c for c in s if not c.islower()])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4773": {
    "question_id": "mbpp/477",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_lowercase(s):\n    result = []\n    for char in s:\n        if not char.islower():\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4774": {
    "question_id": "mbpp/477",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_lowercase(s):\n    result = []\n    for char in s:\n        if not char.islower():\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4775": {
    "question_id": "mbpp/477",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_lowercase(s):\n    result = []\n    for char in s:\n        if not char.islower():\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4776": {
    "question_id": "mbpp/477",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_lowercase(s):\n    result = []\n    for char in s:\n        if not char.islower():\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4777": {
    "question_id": "mbpp/477",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_lowercase(s):\n    result = []\n    for char in s:\n        if not char.islower():\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4778": {
    "question_id": "mbpp/477",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_lowercase(s):\n    result = []\n    for char in s:\n        if not char.islower():\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4779": {
    "question_id": "mbpp/477",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_lowercase(s):\n    result = []\n    for char in s:\n        if not char.islower():\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4780": {
    "question_id": "mbpp/478",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Digit(number):\n    if number == 0:\n        return 0\n    number = abs(number)\n    while number >= 10:\n        number = number // 10\n    return number",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4781": {
    "question_id": "mbpp/478",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Digit(number):\n    if number == 0:\n        return 0\n    number = abs(number)\n    while number >= 10:\n        number = number // 10\n    return number",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4782": {
    "question_id": "mbpp/478",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Digit(number):\n    if number == 0:\n        return 0\n    number = abs(number)\n    while number >= 10:\n        number = number // 10\n    return number",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4783": {
    "question_id": "mbpp/478",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Digit(number):\n    if number == 0:\n        return 0\n    number = abs(number)\n    while number >= 10:\n        number = number // 10\n    return number",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4784": {
    "question_id": "mbpp/478",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Digit(number):\n    if number == 0:\n        return 0\n    number = abs(number)\n    while number >= 10:\n        number = number // 10\n    return number",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4785": {
    "question_id": "mbpp/478",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Digit(number):\n    if number == 0:\n        return 0\n    number = abs(number)\n    while number >= 10:\n        number = number // 10\n    return number",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4786": {
    "question_id": "mbpp/478",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Digit(number):\n    if number == 0:\n        return 0\n    number = abs(number)\n    while number >= 10:\n        number = number // 10\n    return number",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4787": {
    "question_id": "mbpp/478",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Digit(number):\n    if number == 0:\n        return 0\n    number = abs(number)\n    while number >= 10:\n        number = number // 10\n    return number",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4788": {
    "question_id": "mbpp/478",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Digit(number):\n    if number == 0:\n        return 0\n    number = abs(number)\n    while number >= 10:\n        number = number // 10\n    return number",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4789": {
    "question_id": "mbpp/478",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Digit(number):\n    if number == 0:\n        return 0\n    number = abs(number)\n    while number >= 10:\n        number = number // 10\n    return number",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4790": {
    "question_id": "mbpp/479",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_occuring_char(s):\n    if not s:\n        return \"\"\n    \n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_count = -1\n    max_char = \"\"\n    \n    for char, count in char_count.items():\n        if count > max_count or (count == max_count and char < max_char):\n            max_count = count\n            max_char = char\n    \n    return max_char",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4791": {
    "question_id": "mbpp/479",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_occuring_char(s):\n    if not s:\n        return \"\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = max(char_count.values())\n    max_chars = [char for char, count in char_count.items() if count == max_count]\n    return min(max_chars) if max_chars else \"\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4792": {
    "question_id": "mbpp/479",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_occuring_char(s):\n    if not s:\n        return \"\"\n    \n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_char = None\n    max_count = 0\n    for char, count in char_count.items():\n        if count > max_count or (count == max_count and char < max_char):\n            max_char = char\n            max_count = count\n    \n    return max_char",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4793": {
    "question_id": "mbpp/479",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_occuring_char(s):\n    if not s:\n        return \"\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = max(char_count.values())\n    max_chars = [char for char, count in char_count.items() if count == max_count]\n    return min(max_chars) if max_chars else \"\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4794": {
    "question_id": "mbpp/479",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_occuring_char(s):\n    if not s:\n        return \"\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = max(char_count.values())\n    max_chars = [char for char, count in char_count.items() if count == max_count]\n    return min(max_chars)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4795": {
    "question_id": "mbpp/479",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_occuring_char(s):\n    if not s:\n        return \"\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = max(char_count.values())\n    max_chars = [char for char, count in char_count.items() if count == max_count]\n    return min(max_chars) if max_chars else \"\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4796": {
    "question_id": "mbpp/479",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_occuring_char(s):\n    if not s:\n        return \"\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = max(char_count.values())\n    max_chars = [char for char, count in char_count.items() if count == max_count]\n    return min(max_chars) if max_chars else \"\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4797": {
    "question_id": "mbpp/479",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_occuring_char(s):\n    if not s:\n        return \"\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_char = max(char_count, key=lambda k: char_count[k])\n    return max_char",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4798": {
    "question_id": "mbpp/479",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_occuring_char(s):\n    if not s:\n        return \"\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = max(char_count.values())\n    max_chars = [char for char, count in char_count.items() if count == max_count]\n    return min(max_chars) if max_chars else \"\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4799": {
    "question_id": "mbpp/479",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_max_occuring_char(string):\n    if not string:\n        return \"\"\n    \n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_count = -1\n    max_char = \"\"\n    \n    for char, count in char_count.items():\n        if count > max_count or (count == max_count and char < max_char):\n            max_count = count\n            max_char = char\n    \n    return max_char",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4800": {
    "question_id": "mbpp/480",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset_sum(arr, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if arr[n-1] > sum:\n        return is_subset_sum(arr, n-1, sum)\n    return is_subset_sum(arr, n-1, sum) or is_subset_sum(arr, n-1, sum-arr[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4801": {
    "question_id": "mbpp/480",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset_sum(arr, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if arr[n-1] > sum:\n        return is_subset_sum(arr, n-1, sum)\n    return is_subset_sum(arr, n-1, sum) or is_subset_sum(arr, n-1, sum-arr[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4802": {
    "question_id": "mbpp/480",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset_sum(arr, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if arr[n-1] > sum:\n        return is_subset_sum(arr, n-1, sum)\n    return is_subset_sum(arr, n-1, sum) or is_subset_sum(arr, n-1, sum-arr[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4803": {
    "question_id": "mbpp/480",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset_sum(arr, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if arr[n-1] > sum:\n        return is_subset_sum(arr, n-1, sum)\n    return is_subset_sum(arr, n-1, sum) or is_subset_sum(arr, n-1, sum-arr[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4804": {
    "question_id": "mbpp/480",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset_sum(arr, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if arr[n-1] > sum:\n        return is_subset_sum(arr, n-1, sum)\n    return is_subset_sum(arr, n-1, sum) or is_subset_sum(arr, n-1, sum-arr[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4805": {
    "question_id": "mbpp/480",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset_sum(arr, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if arr[n-1] > sum:\n        return is_subset_sum(arr, n-1, sum)\n    return is_subset_sum(arr, n-1, sum) or is_subset_sum(arr, n-1, sum-arr[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4806": {
    "question_id": "mbpp/480",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset_sum(arr, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if arr[n-1] > sum:\n        return is_subset_sum(arr, n-1, sum)\n    return is_subset_sum(arr, n-1, sum) or is_subset_sum(arr, n-1, sum-arr[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4807": {
    "question_id": "mbpp/480",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset_sum(arr, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if arr[n-1] > sum:\n        return is_subset_sum(arr, n-1, sum)\n    return is_subset_sum(arr, n-1, sum) or is_subset_sum(arr, n-1, sum-arr[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4808": {
    "question_id": "mbpp/480",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset_sum(arr, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if arr[n-1] > sum:\n        return is_subset_sum(arr, n-1, sum)\n    return is_subset_sum(arr, n-1, sum) or is_subset_sum(arr, n-1, sum-arr[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4809": {
    "question_id": "mbpp/480",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset_sum(arr, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if arr[n-1] > sum:\n        return is_subset_sum(arr, n-1, sum)\n    return is_subset_sum(arr, n-1, sum) or is_subset_sum(arr, n-1, sum-arr[n-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4810": {
    "question_id": "mbpp/481",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef match(word):\n    if re.fullmatch(r'[A-Z][a-z]+', word):\n        return 'Yes'\n    else:\n        return 'No'",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "4811": {
    "question_id": "mbpp/481",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef match(string):\n    if re.fullmatch(r'[A-Z][a-z]*', string):\n        return 'Yes'\n    else:\n        return 'No'",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "4812": {
    "question_id": "mbpp/481",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef match(string):\n    if re.fullmatch(r'[A-Z][a-z]+', string):\n        return 'Yes'\n    else:\n        return 'No'",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "4813": {
    "question_id": "mbpp/481",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef match(string):\n    if re.fullmatch(r'[A-Z][a-z]+', string):\n        return 'Yes'\n    else:\n        return 'No'",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "4814": {
    "question_id": "mbpp/481",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef match(string):\n    if re.fullmatch(r'[A-Z][a-z]+', string):\n        return 'Yes'\n    else:\n        return 'No'",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "4815": {
    "question_id": "mbpp/481",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef match(word):\n    if re.fullmatch(r'^[A-Z][a-z]+$', word):\n        return 'Yes'\n    else:\n        return 'No'",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "4816": {
    "question_id": "mbpp/481",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef match(word):\n    pattern = r'^[A-Z][a-z]+$'\n    if re.fullmatch(pattern, word):\n        return 'Yes'\n    else:\n        return 'No'",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "4817": {
    "question_id": "mbpp/481",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef match(string):\n    if re.fullmatch(r'[A-Z][a-z]+', string):\n        return 'Yes'\n    else:\n        return 'No'",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "4818": {
    "question_id": "mbpp/481",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef match(string):\n    pattern = r'^[A-Z][a-z]+$'\n    if re.fullmatch(pattern, string):\n        return 'Yes'\n    else:\n        return 'No'",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "4819": {
    "question_id": "mbpp/481",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef match(word):\n    if re.fullmatch(r'[A-Z][a-z]*', word):\n        return 'Yes'\n    else:\n        return 'No'",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "4820": {
    "question_id": "mbpp/482",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    n = 1\n    factorial = 1\n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1",
    "test_output": "FAILED: expect 4,in fact 5",
    "test_result": "False"
  },
  "4821": {
    "question_id": "mbpp/482",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    n = 1\n    factorial = 1\n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1",
    "test_output": "FAILED: expect 4,in fact 5",
    "test_result": "False"
  },
  "4822": {
    "question_id": "mbpp/482",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    n = 1\n    factorial = 1\n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1",
    "test_output": "FAILED: expect 4,in fact 5",
    "test_result": "False"
  },
  "4823": {
    "question_id": "mbpp/482",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    n = 1\n    factorial = 1\n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1",
    "test_output": "FAILED: expect 4,in fact 5",
    "test_result": "False"
  },
  "4824": {
    "question_id": "mbpp/482",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    n = 1\n    factorial = 1\n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1",
    "test_output": "FAILED: expect 4,in fact 5",
    "test_result": "False"
  },
  "4825": {
    "question_id": "mbpp/482",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    n = 1\n    factorial = 1\n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1",
    "test_output": "FAILED: expect 4,in fact 5",
    "test_result": "False"
  },
  "4826": {
    "question_id": "mbpp/482",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    n = 1\n    factorial = 1\n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1",
    "test_output": "FAILED: expect 4,in fact 5",
    "test_result": "False"
  },
  "4827": {
    "question_id": "mbpp/482",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    n = 1\n    factorial = 1\n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1",
    "test_output": "FAILED: expect 4,in fact 5",
    "test_result": "False"
  },
  "4828": {
    "question_id": "mbpp/482",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    n = 1\n    factorial = 1\n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1",
    "test_output": "FAILED: expect 4,in fact 5",
    "test_result": "False"
  },
  "4829": {
    "question_id": "mbpp/482",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    n = 1\n    factorial = 1\n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1",
    "test_output": "FAILED: expect 4,in fact 5",
    "test_result": "False"
  },
  "4830": {
    "question_id": "mbpp/483",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_matching_tuple(tuple1, tuple2):\n    return [t for t in tuple1 if t not in tuple2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4831": {
    "question_id": "mbpp/483",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_matching_tuple(tuple1, tuple2):\n    return [t for t in tuple1 if t not in tuple2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4832": {
    "question_id": "mbpp/483",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_matching_tuple(tuple1, tuple2):\n    return [t for t in tuple1 if t not in tuple2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4833": {
    "question_id": "mbpp/483",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_matching_tuple(tuple1, tuple2):\n    return [t for t in tuple1 if t not in tuple2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4834": {
    "question_id": "mbpp/483",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_matching_tuple(tuple1, tuple2):\n    return [t for t in tuple1 if t not in tuple2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4835": {
    "question_id": "mbpp/483",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_matching_tuple(tuple1, tuple2):\n    return [t for t in tuple1 if t not in tuple2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4836": {
    "question_id": "mbpp/483",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_matching_tuple(tuple1, tuple2):\n    return [t for t in tuple1 if t not in tuple2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4837": {
    "question_id": "mbpp/483",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_matching_tuple(tuple1, tuple2):\n    return [t for t in tuple1 if t not in tuple2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4838": {
    "question_id": "mbpp/483",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_matching_tuple(tuple1, tuple2):\n    return [t for t in tuple1 if t not in tuple2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4839": {
    "question_id": "mbpp/483",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_matching_tuple(tuple1, tuple2):\n    return [t for t in tuple1 if t not in tuple2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4840": {
    "question_id": "mbpp/484",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_palindrome(arr, n):\n    max_palindrome = -1\n    for num in arr:\n        if str(num) == str(num)[::-1] and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4841": {
    "question_id": "mbpp/484",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_palindrome(arr, n):\n    max_palindrome = -1\n    for num in arr:\n        if str(num) == str(num)[::-1] and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4842": {
    "question_id": "mbpp/484",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_palindrome(arr, n):\n    max_palindrome = -1\n    for num in arr:\n        if str(num) == str(num)[::-1] and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4843": {
    "question_id": "mbpp/484",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_palindrome(arr, n):\n    max_palindrome = -1\n    for num in arr:\n        if str(num) == str(num)[::-1] and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4844": {
    "question_id": "mbpp/484",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_palindrome(arr, n):\n    max_palindrome = -1\n    for num in arr:\n        s = str(num)\n        if s == s[::-1]:\n            if num > max_palindrome:\n                max_palindrome = num\n    return max_palindrome",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4845": {
    "question_id": "mbpp/484",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_palindrome(arr, n):\n    max_palindrome = -1\n    for num in arr:\n        s = str(num)\n        if s == s[::-1]:\n            if num > max_palindrome:\n                max_palindrome = num\n    return max_palindrome",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4846": {
    "question_id": "mbpp/484",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_palindrome(arr, n):\n    max_palindrome = -1\n    for num in arr:\n        s = str(num)\n        if s == s[::-1]:\n            if num > max_palindrome:\n                max_palindrome = num\n    return max_palindrome",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4847": {
    "question_id": "mbpp/484",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_palindrome(arr, n):\n    max_palindrome = -1\n    for num in arr:\n        s = str(num)\n        if s == s[::-1] and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4848": {
    "question_id": "mbpp/484",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_palindrome(arr, n):\n    max_palindrome = -1\n    for num in arr:\n        s = str(num)\n        if s == s[::-1] and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4849": {
    "question_id": "mbpp/484",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_palindrome(arr, n):\n    max_palindrome = -1\n    for num in arr:\n        s = str(num)\n        if s == s[::-1]:\n            if num > max_palindrome:\n                max_palindrome = num\n    return max_palindrome",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4850": {
    "question_id": "mbpp/485",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef binomial_probability(n, k, p):\n    if n < 0 or k < 0 or k > n or p < 0 or p > 1:\n        return 0.0\n    combination = math.comb(n, k)\n    probability = combination * (p ** k) * ((1 - p) ** (n - k))\n    return probability",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4851": {
    "question_id": "mbpp/485",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef binomial_probability(n, k, p):\n    if n < 0 or k < 0 or k > n or p < 0 or p > 1:\n        return 0.0\n    combinations = math.comb(n, k)\n    probability = combinations * (p ** k) * ((1 - p) ** (n - k))\n    return probability",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4852": {
    "question_id": "mbpp/485",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef binomial_probability(n, k, p):\n    if n < 0 or k < 0 or k > n or p < 0 or p > 1:\n        return 0.0\n    combinations = math.comb(n, k)\n    probability = combinations * (p ** k) * ((1 - p) ** (n - k))\n    return probability",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4853": {
    "question_id": "mbpp/485",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef binomial_probability(n, k, p):\n    if n < 0 or k < 0 or k > n or p < 0 or p > 1:\n        return 0.0\n    combination = math.comb(n, k)\n    return combination * (p ** k) * ((1 - p) ** (n - k))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4854": {
    "question_id": "mbpp/485",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef binomial_probability(n, k, p):\n    if n < 0 or k < 0 or k > n or p < 0 or p > 1:\n        return 0.0\n    combination = math.comb(n, k)\n    probability = combination * (p ** k) * ((1 - p) ** (n - k))\n    return probability",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4855": {
    "question_id": "mbpp/485",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef binomial_probability(n, k, p):\n    if n < 0 or k < 0 or k > n or p < 0 or p > 1:\n        return 0.0\n    combinations = math.comb(n, k)\n    probability = combinations * (p ** k) * ((1 - p) ** (n - k))\n    return probability",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4856": {
    "question_id": "mbpp/485",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef binomial_probability(n, k, p):\n    if n < 0 or k < 0 or k > n or p < 0 or p > 1:\n        return 0.0\n    combinations = math.comb(n, k)\n    probability = combinations * (p ** k) * ((1 - p) ** (n - k))\n    return probability",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4857": {
    "question_id": "mbpp/485",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef binomial_probability(n, k, p):\n    if n < 0 or k < 0 or k > n or p < 0 or p > 1:\n        return 0.0\n    combination = math.comb(n, k)\n    probability = combination * (p ** k) * ((1 - p) ** (n - k))\n    return probability",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4858": {
    "question_id": "mbpp/485",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef binomial_probability(n, k, p):\n    if n < 0 or k < 0 or k > n or p < 0 or p > 1:\n        return 0.0\n    combinations = math.comb(n, k)\n    probability = combinations * (p ** k) * ((1 - p) ** (n - k))\n    return probability",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4859": {
    "question_id": "mbpp/485",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef binomial_probability(n, k, p):\n    if n < 0 or k < 0 or k > n or p < 0 or p > 1:\n        return 0.0\n    combinations = math.comb(n, k)\n    probability = combinations * (p ** k) * ((1 - p) ** (n - k))\n    return probability",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4860": {
    "question_id": "mbpp/486",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4861": {
    "question_id": "mbpp/486",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4862": {
    "question_id": "mbpp/486",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4863": {
    "question_id": "mbpp/486",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4864": {
    "question_id": "mbpp/486",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4865": {
    "question_id": "mbpp/486",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4866": {
    "question_id": "mbpp/486",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4867": {
    "question_id": "mbpp/486",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4868": {
    "question_id": "mbpp/486",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4869": {
    "question_id": "mbpp/486",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4870": {
    "question_id": "mbpp/487",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_pentagon(a):\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a ** 2) / 4",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4871": {
    "question_id": "mbpp/487",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_pentagon(a):\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a ** 2) / 4",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4872": {
    "question_id": "mbpp/487",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_pentagon(a):\n    return (1/4) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4873": {
    "question_id": "mbpp/487",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_pentagon(a):\n    return (5 * a ** 2) / (4 * math.tan(math.pi / 5))",
    "test_output": "FAILED: expect 43.01193501472417,in fact 43.01193501472418",
    "test_result": "False"
  },
  "4874": {
    "question_id": "mbpp/487",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_pentagon(a):\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a * a) / 4",
    "test_output": "FAILED: expect 387.10741513251753,in fact 387.1074151325176",
    "test_result": "False"
  },
  "4875": {
    "question_id": "mbpp/487",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_pentagon(a):\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a * a) / 4",
    "test_output": "FAILED: expect 387.10741513251753,in fact 387.1074151325176",
    "test_result": "False"
  },
  "4876": {
    "question_id": "mbpp/487",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_pentagon(a):\n    return (5 * a ** 2) / (4 * math.tan(math.pi / 5))",
    "test_output": "FAILED: expect 43.01193501472417,in fact 43.01193501472418",
    "test_result": "False"
  },
  "4877": {
    "question_id": "mbpp/487",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_pentagon(a):\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a ** 2) / 4",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4878": {
    "question_id": "mbpp/487",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_pentagon(a):\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a ** 2) / 4",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4879": {
    "question_id": "mbpp/487",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_pentagon(a):\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a ** 2) / 4",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4880": {
    "question_id": "mbpp/488",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Largest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4881": {
    "question_id": "mbpp/488",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Largest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4882": {
    "question_id": "mbpp/488",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Largest(n, arr):\n    if n == 0 or len(arr) == 0:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4883": {
    "question_id": "mbpp/488",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Largest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4884": {
    "question_id": "mbpp/488",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Largest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4885": {
    "question_id": "mbpp/488",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Largest(n, arr):\n    if n == 0 or len(arr) == 0:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4886": {
    "question_id": "mbpp/488",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Largest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4887": {
    "question_id": "mbpp/488",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Largest(n, arr):\n    if n == 0 or len(arr) == 0:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4888": {
    "question_id": "mbpp/488",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Largest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4889": {
    "question_id": "mbpp/488",
    "model": "deepseek-v3-250324",
    "generation_code": "def frequency_Of_Largest(n, arr):\n    if n == 0 or not arr:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4890": {
    "question_id": "mbpp/489",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    seen = set()\n    for pair in tuple_list:\n        reversed_pair = (pair[1], pair[0])\n        if reversed_pair in seen:\n            symmetric_pairs.add(pair)\n            symmetric_pairs.add(reversed_pair)\n        seen.add(pair)\n    return symmetric_pairs",
    "test_output": "FAILED: expect {(6, 7), (8, 9)},in fact {(8, 9), (6, 7), (7, 6), (9, 8)}",
    "test_result": "False"
  },
  "4891": {
    "question_id": "mbpp/489",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    seen = set()\n    for pair in tuple_list:\n        reversed_pair = (pair[1], pair[0])\n        if reversed_pair in seen:\n            symmetric_pairs.add(pair)\n            symmetric_pairs.add(reversed_pair)\n        seen.add(pair)\n    return symmetric_pairs",
    "test_output": "FAILED: expect {(6, 7), (8, 9)},in fact {(8, 9), (6, 7), (7, 6), (9, 8)}",
    "test_result": "False"
  },
  "4892": {
    "question_id": "mbpp/489",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    seen = set()\n    for pair in tuple_list:\n        reversed_pair = (pair[1], pair[0])\n        if reversed_pair in seen:\n            symmetric_pairs.add(pair)\n            symmetric_pairs.add(reversed_pair)\n        seen.add(pair)\n    return symmetric_pairs",
    "test_output": "FAILED: expect {(6, 7), (8, 9)},in fact {(8, 9), (6, 7), (7, 6), (9, 8)}",
    "test_result": "False"
  },
  "4893": {
    "question_id": "mbpp/489",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    seen = set()\n    for pair in tuple_list:\n        reversed_pair = (pair[1], pair[0])\n        if reversed_pair in seen:\n            symmetric_pairs.add(pair)\n            symmetric_pairs.add(reversed_pair)\n        seen.add(pair)\n    return symmetric_pairs",
    "test_output": "FAILED: expect {(6, 7), (8, 9)},in fact {(8, 9), (6, 7), (7, 6), (9, 8)}",
    "test_result": "False"
  },
  "4894": {
    "question_id": "mbpp/489",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    seen = set()\n    for pair in tuple_list:\n        reversed_pair = (pair[1], pair[0])\n        if reversed_pair in seen:\n            symmetric_pairs.add(pair)\n            symmetric_pairs.add(reversed_pair)\n        seen.add(pair)\n    return symmetric_pairs",
    "test_output": "FAILED: expect {(6, 7), (8, 9)},in fact {(8, 9), (6, 7), (7, 6), (9, 8)}",
    "test_result": "False"
  },
  "4895": {
    "question_id": "mbpp/489",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    seen = set()\n    for pair in tuple_list:\n        reversed_pair = (pair[1], pair[0])\n        if reversed_pair in seen:\n            symmetric_pairs.add(pair)\n            symmetric_pairs.add(reversed_pair)\n        seen.add(pair)\n    return symmetric_pairs",
    "test_output": "FAILED: expect {(6, 7), (8, 9)},in fact {(8, 9), (6, 7), (7, 6), (9, 8)}",
    "test_result": "False"
  },
  "4896": {
    "question_id": "mbpp/489",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    seen = set()\n    for pair in tuple_list:\n        reversed_pair = (pair[1], pair[0])\n        if reversed_pair in seen:\n            symmetric_pairs.add(pair)\n            symmetric_pairs.add(reversed_pair)\n        seen.add(pair)\n    return symmetric_pairs",
    "test_output": "FAILED: expect {(6, 7), (8, 9)},in fact {(8, 9), (6, 7), (7, 6), (9, 8)}",
    "test_result": "False"
  },
  "4897": {
    "question_id": "mbpp/489",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    seen = set()\n    for pair in tuple_list:\n        reversed_pair = (pair[1], pair[0])\n        if reversed_pair in seen:\n            symmetric_pairs.add(pair)\n            symmetric_pairs.add(reversed_pair)\n        seen.add(pair)\n    return symmetric_pairs",
    "test_output": "FAILED: expect {(6, 7), (8, 9)},in fact {(8, 9), (6, 7), (7, 6), (9, 8)}",
    "test_result": "False"
  },
  "4898": {
    "question_id": "mbpp/489",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    seen = set()\n    for pair in tuple_list:\n        if pair[::-1] in seen:\n            symmetric_pairs.add(pair[::-1])\n        seen.add(pair)\n    return symmetric_pairs",
    "test_output": "FAILED: expect {(6, 7), (8, 9)},in fact {(6, 7), (9, 8)}",
    "test_result": "False"
  },
  "4899": {
    "question_id": "mbpp/489",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    seen = set()\n    for pair in tuple_list:\n        reversed_pair = (pair[1], pair[0])\n        if reversed_pair in seen:\n            symmetric_pairs.add(pair)\n            symmetric_pairs.add(reversed_pair)\n        seen.add(pair)\n    return symmetric_pairs",
    "test_output": "FAILED: expect {(6, 7), (8, 9)},in fact {(8, 9), (6, 7), (7, 6), (9, 8)}",
    "test_result": "False"
  },
  "4900": {
    "question_id": "mbpp/490",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_gp(a, r, n):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) / (1 - r)",
    "test_output": "FAILED: expect 31,in fact 6.0",
    "test_result": "False"
  },
  "4901": {
    "question_id": "mbpp/490",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_gp(a, r, n):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) / (1 - r)",
    "test_output": "FAILED: expect 31,in fact 6.0",
    "test_result": "False"
  },
  "4902": {
    "question_id": "mbpp/490",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) / (1 - r)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4903": {
    "question_id": "mbpp/490",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_gp(a, r, n):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r**n) / (1 - r)",
    "test_output": "FAILED: expect 31,in fact 6.0",
    "test_result": "False"
  },
  "4904": {
    "question_id": "mbpp/490",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_gp(a, r, n):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) / (1 - r)",
    "test_output": "FAILED: expect 31,in fact 6.0",
    "test_result": "False"
  },
  "4905": {
    "question_id": "mbpp/490",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_gp(a, r, n):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) / (1 - r)",
    "test_output": "FAILED: expect 31,in fact 6.0",
    "test_result": "False"
  },
  "4906": {
    "question_id": "mbpp/490",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_gp(a, r, n):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) / (1 - r)",
    "test_output": "FAILED: expect 31,in fact 6.0",
    "test_result": "False"
  },
  "4907": {
    "question_id": "mbpp/490",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_gp(a, r, n):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r**n) / (1 - r)",
    "test_output": "FAILED: expect 31,in fact 6.0",
    "test_result": "False"
  },
  "4908": {
    "question_id": "mbpp/490",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_gp(a, r, n):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) / (1 - r)",
    "test_output": "FAILED: expect 31,in fact 6.0",
    "test_result": "False"
  },
  "4909": {
    "question_id": "mbpp/490",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_gp(a, r, n):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) / (1 - r)",
    "test_output": "FAILED: expect 31,in fact 6.0",
    "test_result": "False"
  },
  "4910": {
    "question_id": "mbpp/491",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4911": {
    "question_id": "mbpp/491",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4912": {
    "question_id": "mbpp/491",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4913": {
    "question_id": "mbpp/491",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4914": {
    "question_id": "mbpp/491",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4915": {
    "question_id": "mbpp/491",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4916": {
    "question_id": "mbpp/491",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4917": {
    "question_id": "mbpp/491",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4918": {
    "question_id": "mbpp/491",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4919": {
    "question_id": "mbpp/491",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4920": {
    "question_id": "mbpp/492",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    sqrt3 = math.sqrt(3)\n    offset = 0\n    for y in range(starty, endy + 1):\n        if y % 2 == 0:\n            offset = 0\n        else:\n            offset = radius * sqrt3 / 2\n        for x in range(startx, endx + 1):\n            cx = x * radius * sqrt3 + offset\n            cy = y * radius * 1.5\n            hexagon = []\n            for i in range(6):\n                angle_deg = 60 * i - 30\n                angle_rad = math.pi / 180 * angle_deg\n                hex_x = cx + radius * math.cos(angle_rad)\n                hex_y = cy + radius * math.sin(angle_rad)\n                hexagon.append((hex_x, hex_y))\n            hexagon.append(hexagon[0])  # Close the hexagon\n            polygons.append(hexagon)\n    return polygons",
    "test_output": "FAILED: expect [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]],in fact [[(10.392304845413264, 3.0), (10.392304845413264, 6.0), (7.794228634059948, 7.5), (5.196152422706632, 6.0), (5.196152422706632, 2.9999999999999996), (7.794228634059947, 1.5), (10.392304845413264, 3.0)], [(15.588457268119896, 3.0), (15.588457268119896, 6.0), (12.99038105676658, 7.5), (10.392304845413264, 6.0), (10.392304845413264, 2.9999999999999996), (12.99038105676658, 1.5), (15.588457268119896, 3.0)], [(20.784609690826528, 3.0), (20.784609690826528, 6.0), (18.186533479473212, 7.5), (15.588457268119896, 6.0), (15.588457268119896, 2.9999999999999996), (18.186533479473212, 1.5), (20.784609690826528, 3.0)], [(25.98076211353316, 3.0), (25.98076211353316, 6.0), (23.382685902179844, 7.5), (20.784609690826528, 6.0), (20.784609690826528, 2.9999999999999996), (23.382685902179844, 1.5), (25.98076211353316, 3.0)], [(7.794228634059948, 7.5), (7.794228634059948, 10.5), (5.196152422706632, 12.0), (2.598076211353316, 10.5), (2.598076211353316, 7.5), (5.196152422706631, 6.0), (7.794228634059948, 7.5)], [(12.99038105676658, 7.5), (12.99038105676658, 10.5), (10.392304845413264, 12.0), (7.794228634059948, 10.5), (7.794228634059948, 7.5), (10.392304845413264, 6.0), (12.99038105676658, 7.5)], [(18.186533479473212, 7.5), (18.186533479473212, 10.5), (15.588457268119894, 12.0), (12.990381056766578, 10.5), (12.990381056766578, 7.5), (15.588457268119894, 6.0), (18.186533479473212, 7.5)], [(23.382685902179844, 7.5), (23.382685902179844, 10.5), (20.784609690826528, 12.0), (18.186533479473212, 10.5), (18.186533479473212, 7.5), (20.784609690826528, 6.0), (23.382685902179844, 7.5)], [(10.392304845413264, 12.0), (10.392304845413264, 15.0), (7.794228634059948, 16.5), (5.196152422706632, 15.0), (5.196152422706632, 12.0), (7.794228634059947, 10.5), (10.392304845413264, 12.0)], [(15.588457268119896, 12.0), (15.588457268119896, 15.0), (12.99038105676658, 16.5), (10.392304845413264, 15.0), (10.392304845413264, 12.0), (12.99038105676658, 10.5), (15.588457268119896, 12.0)], [(20.784609690826528, 12.0), (20.784609690826528, 15.0), (18.186533479473212, 16.5), (15.588457268119896, 15.0), (15.588457268119896, 12.0), (18.186533479473212, 10.5), (20.784609690826528, 12.0)], [(25.98076211353316, 12.0), (25.98076211353316, 15.0), (23.382685902179844, 16.5), (20.784609690826528, 15.0), (20.784609690826528, 12.0), (23.382685902179844, 10.5), (25.98076211353316, 12.0)], [(7.794228634059948, 16.5), (7.794228634059948, 19.5), (5.196152422706632, 21.0), (2.598076211353316, 19.5), (2.598076211353316, 16.5), (5.196152422706631, 15.0), (7.794228634059948, 16.5)], [(12.99038105676658, 16.5), (12.99038105676658, 19.5), (10.392304845413264, 21.0), (7.794228634059948, 19.5), (7.794228634059948, 16.5), (10.392304845413264, 15.0), (12.99038105676658, 16.5)], [(18.186533479473212, 16.5), (18.186533479473212, 19.5), (15.588457268119894, 21.0), (12.990381056766578, 19.5), (12.990381056766578, 16.5), (15.588457268119894, 15.0), (18.186533479473212, 16.5)], [(23.382685902179844, 16.5), (23.382685902179844, 19.5), (20.784609690826528, 21.0), (18.186533479473212, 19.5), (18.186533479473212, 16.5), (20.784609690826528, 15.0), (23.382685902179844, 16.5)]]",
    "test_result": "False"
  },
  "4921": {
    "question_id": "mbpp/492",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    sqrt3 = math.sqrt(3)\n    offset = 0\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            center_x = 3 * radius * x\n            if y % 2 != 0:\n                center_x += 1.5 * radius\n            center_y = sqrt3 * radius * y\n            \n            hexagon = []\n            for i in range(6):\n                angle_deg = 60 * i - 30\n                angle_rad = math.pi / 180 * angle_deg\n                point_x = center_x + radius * math.cos(angle_rad)\n                point_y = center_y + radius * math.sin(angle_rad)\n                hexagon.append((point_x, point_y))\n            hexagon.append(hexagon[0])  # Close the hexagon\n            polygons.append(hexagon)\n    return polygons",
    "test_output": "FAILED: expect [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]],in fact [[(16.098076211353316, 3.696152422706632), (16.098076211353316, 6.696152422706632), (13.5, 8.196152422706632), (10.901923788646684, 6.696152422706632), (10.901923788646684, 3.6961524227066316), (13.5, 2.196152422706632), (16.098076211353316, 3.696152422706632)], [(25.098076211353316, 3.696152422706632), (25.098076211353316, 6.696152422706632), (22.5, 8.196152422706632), (19.901923788646684, 6.696152422706632), (19.901923788646684, 3.6961524227066316), (22.5, 2.196152422706632), (25.098076211353316, 3.696152422706632)], [(34.098076211353316, 3.696152422706632), (34.098076211353316, 6.696152422706632), (31.5, 8.196152422706632), (28.901923788646684, 6.696152422706632), (28.901923788646684, 3.6961524227066316), (31.5, 2.196152422706632), (34.098076211353316, 3.696152422706632)], [(43.098076211353316, 3.696152422706632), (43.098076211353316, 6.696152422706632), (40.5, 8.196152422706632), (37.901923788646684, 6.696152422706632), (37.901923788646684, 3.6961524227066316), (40.5, 2.196152422706632), (43.098076211353316, 3.696152422706632)], [(11.598076211353316, 8.892304845413264), (11.598076211353316, 11.892304845413264), (9.0, 13.392304845413264), (6.401923788646684, 11.892304845413264), (6.401923788646684, 8.892304845413264), (9.0, 7.392304845413264), (11.598076211353316, 8.892304845413264)], [(20.598076211353316, 8.892304845413264), (20.598076211353316, 11.892304845413264), (18.0, 13.392304845413264), (15.401923788646684, 11.892304845413264), (15.401923788646684, 8.892304845413264), (18.0, 7.392304845413264), (20.598076211353316, 8.892304845413264)], [(29.598076211353316, 8.892304845413264), (29.598076211353316, 11.892304845413264), (27.0, 13.392304845413264), (24.401923788646684, 11.892304845413264), (24.401923788646684, 8.892304845413264), (27.0, 7.392304845413264), (29.598076211353316, 8.892304845413264)], [(38.598076211353316, 8.892304845413264), (38.598076211353316, 11.892304845413264), (36.0, 13.392304845413264), (33.401923788646684, 11.892304845413264), (33.401923788646684, 8.892304845413264), (36.0, 7.392304845413264), (38.598076211353316, 8.892304845413264)], [(16.098076211353316, 14.088457268119896), (16.098076211353316, 17.088457268119896), (13.5, 18.588457268119896), (10.901923788646684, 17.088457268119896), (10.901923788646684, 14.088457268119896), (13.5, 12.588457268119896), (16.098076211353316, 14.088457268119896)], [(25.098076211353316, 14.088457268119896), (25.098076211353316, 17.088457268119896), (22.5, 18.588457268119896), (19.901923788646684, 17.088457268119896), (19.901923788646684, 14.088457268119896), (22.5, 12.588457268119896), (25.098076211353316, 14.088457268119896)], [(34.098076211353316, 14.088457268119896), (34.098076211353316, 17.088457268119896), (31.5, 18.588457268119896), (28.901923788646684, 17.088457268119896), (28.901923788646684, 14.088457268119896), (31.5, 12.588457268119896), (34.098076211353316, 14.088457268119896)], [(43.098076211353316, 14.088457268119896), (43.098076211353316, 17.088457268119896), (40.5, 18.588457268119896), (37.901923788646684, 17.088457268119896), (37.901923788646684, 14.088457268119896), (40.5, 12.588457268119896), (43.098076211353316, 14.088457268119896)], [(11.598076211353316, 19.284609690826528), (11.598076211353316, 22.284609690826528), (9.0, 23.784609690826528), (6.401923788646684, 22.284609690826528), (6.401923788646684, 19.284609690826528), (9.0, 17.784609690826528), (11.598076211353316, 19.284609690826528)], [(20.598076211353316, 19.284609690826528), (20.598076211353316, 22.284609690826528), (18.0, 23.784609690826528), (15.401923788646684, 22.284609690826528), (15.401923788646684, 19.284609690826528), (18.0, 17.784609690826528), (20.598076211353316, 19.284609690826528)], [(29.598076211353316, 19.284609690826528), (29.598076211353316, 22.284609690826528), (27.0, 23.784609690826528), (24.401923788646684, 22.284609690826528), (24.401923788646684, 19.284609690826528), (27.0, 17.784609690826528), (29.598076211353316, 19.284609690826528)], [(38.598076211353316, 19.284609690826528), (38.598076211353316, 22.284609690826528), (36.0, 23.784609690826528), (33.401923788646684, 22.284609690826528), (33.401923788646684, 19.284609690826528), (36.0, 17.784609690826528), (38.598076211353316, 19.284609690826528)]]",
    "test_result": "False"
  },
  "4922": {
    "question_id": "mbpp/492",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    sqrt3 = math.sqrt(3)\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            center_x = 3 * x * radius\n            center_y = sqrt3 * y * radius\n            if x % 2 != 0:\n                center_y += sqrt3 * radius / 2\n            hexagon = []\n            for i in range(6):\n                angle_deg = 60 * i - 30\n                angle_rad = math.pi / 180 * angle_deg\n                point_x = center_x + radius * math.cos(angle_rad)\n                point_y = center_y + radius * math.sin(angle_rad)\n                hexagon.append((point_x, point_y))\n            hexagon.append(hexagon[0])  # Close the hexagon\n            polygons.append(hexagon)\n    return polygons",
    "test_output": "FAILED: expect [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]],in fact [[(11.598076211353316, 6.294228634059948), (11.598076211353316, 9.294228634059948), (9.0, 10.794228634059948), (6.401923788646684, 9.294228634059948), (6.401923788646684, 6.294228634059948), (9.0, 4.794228634059948), (11.598076211353316, 6.294228634059948)], [(20.598076211353316, 3.696152422706632), (20.598076211353316, 6.696152422706632), (18.0, 8.196152422706632), (15.401923788646684, 6.696152422706632), (15.401923788646684, 3.6961524227066316), (18.0, 2.196152422706632), (20.598076211353316, 3.696152422706632)], [(29.598076211353316, 6.294228634059948), (29.598076211353316, 9.294228634059948), (27.0, 10.794228634059948), (24.401923788646684, 9.294228634059948), (24.401923788646684, 6.294228634059948), (27.0, 4.794228634059948), (29.598076211353316, 6.294228634059948)], [(38.598076211353316, 3.696152422706632), (38.598076211353316, 6.696152422706632), (36.0, 8.196152422706632), (33.401923788646684, 6.696152422706632), (33.401923788646684, 3.6961524227066316), (36.0, 2.196152422706632), (38.598076211353316, 3.696152422706632)], [(11.598076211353316, 11.49038105676658), (11.598076211353316, 14.49038105676658), (9.0, 15.99038105676658), (6.401923788646684, 14.49038105676658), (6.401923788646684, 11.49038105676658), (9.0, 9.99038105676658), (11.598076211353316, 11.49038105676658)], [(20.598076211353316, 8.892304845413264), (20.598076211353316, 11.892304845413264), (18.0, 13.392304845413264), (15.401923788646684, 11.892304845413264), (15.401923788646684, 8.892304845413264), (18.0, 7.392304845413264), (20.598076211353316, 8.892304845413264)], [(29.598076211353316, 11.49038105676658), (29.598076211353316, 14.49038105676658), (27.0, 15.99038105676658), (24.401923788646684, 14.49038105676658), (24.401923788646684, 11.49038105676658), (27.0, 9.99038105676658), (29.598076211353316, 11.49038105676658)], [(38.598076211353316, 8.892304845413264), (38.598076211353316, 11.892304845413264), (36.0, 13.392304845413264), (33.401923788646684, 11.892304845413264), (33.401923788646684, 8.892304845413264), (36.0, 7.392304845413264), (38.598076211353316, 8.892304845413264)], [(11.598076211353316, 16.686533479473212), (11.598076211353316, 19.686533479473212), (9.0, 21.186533479473212), (6.401923788646684, 19.686533479473212), (6.401923788646684, 16.686533479473212), (9.0, 15.186533479473212), (11.598076211353316, 16.686533479473212)], [(20.598076211353316, 14.088457268119896), (20.598076211353316, 17.088457268119896), (18.0, 18.588457268119896), (15.401923788646684, 17.088457268119896), (15.401923788646684, 14.088457268119896), (18.0, 12.588457268119896), (20.598076211353316, 14.088457268119896)], [(29.598076211353316, 16.686533479473212), (29.598076211353316, 19.686533479473212), (27.0, 21.186533479473212), (24.401923788646684, 19.686533479473212), (24.401923788646684, 16.686533479473212), (27.0, 15.186533479473212), (29.598076211353316, 16.686533479473212)], [(38.598076211353316, 14.088457268119896), (38.598076211353316, 17.088457268119896), (36.0, 18.588457268119896), (33.401923788646684, 17.088457268119896), (33.401923788646684, 14.088457268119896), (36.0, 12.588457268119896), (38.598076211353316, 14.088457268119896)], [(11.598076211353316, 21.882685902179844), (11.598076211353316, 24.882685902179844), (9.0, 26.382685902179844), (6.401923788646684, 24.882685902179844), (6.401923788646684, 21.882685902179844), (9.0, 20.382685902179844), (11.598076211353316, 21.882685902179844)], [(20.598076211353316, 19.284609690826528), (20.598076211353316, 22.284609690826528), (18.0, 23.784609690826528), (15.401923788646684, 22.284609690826528), (15.401923788646684, 19.284609690826528), (18.0, 17.784609690826528), (20.598076211353316, 19.284609690826528)], [(29.598076211353316, 21.882685902179844), (29.598076211353316, 24.882685902179844), (27.0, 26.382685902179844), (24.401923788646684, 24.882685902179844), (24.401923788646684, 21.882685902179844), (27.0, 20.382685902179844), (29.598076211353316, 21.882685902179844)], [(38.598076211353316, 19.284609690826528), (38.598076211353316, 22.284609690826528), (36.0, 23.784609690826528), (33.401923788646684, 22.284609690826528), (33.401923788646684, 19.284609690826528), (36.0, 17.784609690826528), (38.598076211353316, 19.284609690826528)]]",
    "test_result": "False"
  },
  "4923": {
    "question_id": "mbpp/492",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    sqrt3 = math.sqrt(3)\n    offset = 0\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            center_x = x * 3 * radius\n            center_y = y * 2 * sqrt3 * radius + (x % 2) * sqrt3 * radius\n            hexagon = []\n            for i in range(6):\n                angle_deg = 60 * i - 30\n                angle_rad = math.pi / 180 * angle_deg\n                point_x = center_x + radius * math.cos(angle_rad)\n                point_y = center_y + radius * math.sin(angle_rad)\n                hexagon.append((point_x, point_y))\n            hexagon.append(hexagon[0])  # Close the hexagon\n            polygons.append(hexagon)\n    return polygons",
    "test_output": "FAILED: expect [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]],in fact [[(11.598076211353316, 14.088457268119896), (11.598076211353316, 17.088457268119896), (9.0, 18.588457268119896), (6.401923788646684, 17.088457268119896), (6.401923788646684, 14.088457268119896), (9.0, 12.588457268119896), (11.598076211353316, 14.088457268119896)], [(20.598076211353316, 8.892304845413264), (20.598076211353316, 11.892304845413264), (18.0, 13.392304845413264), (15.401923788646684, 11.892304845413264), (15.401923788646684, 8.892304845413264), (18.0, 7.392304845413264), (20.598076211353316, 8.892304845413264)], [(29.598076211353316, 14.088457268119896), (29.598076211353316, 17.088457268119896), (27.0, 18.588457268119896), (24.401923788646684, 17.088457268119896), (24.401923788646684, 14.088457268119896), (27.0, 12.588457268119896), (29.598076211353316, 14.088457268119896)], [(38.598076211353316, 8.892304845413264), (38.598076211353316, 11.892304845413264), (36.0, 13.392304845413264), (33.401923788646684, 11.892304845413264), (33.401923788646684, 8.892304845413264), (36.0, 7.392304845413264), (38.598076211353316, 8.892304845413264)], [(11.598076211353316, 24.48076211353316), (11.598076211353316, 27.48076211353316), (9.0, 28.98076211353316), (6.401923788646684, 27.48076211353316), (6.401923788646684, 24.48076211353316), (9.0, 22.98076211353316), (11.598076211353316, 24.48076211353316)], [(20.598076211353316, 19.284609690826528), (20.598076211353316, 22.284609690826528), (18.0, 23.784609690826528), (15.401923788646684, 22.284609690826528), (15.401923788646684, 19.284609690826528), (18.0, 17.784609690826528), (20.598076211353316, 19.284609690826528)], [(29.598076211353316, 24.48076211353316), (29.598076211353316, 27.48076211353316), (27.0, 28.98076211353316), (24.401923788646684, 27.48076211353316), (24.401923788646684, 24.48076211353316), (27.0, 22.98076211353316), (29.598076211353316, 24.48076211353316)], [(38.598076211353316, 19.284609690826528), (38.598076211353316, 22.284609690826528), (36.0, 23.784609690826528), (33.401923788646684, 22.284609690826528), (33.401923788646684, 19.284609690826528), (36.0, 17.784609690826528), (38.598076211353316, 19.284609690826528)], [(11.598076211353316, 34.873066958946424), (11.598076211353316, 37.873066958946424), (9.0, 39.373066958946424), (6.401923788646684, 37.873066958946424), (6.401923788646684, 34.873066958946424), (9.0, 33.373066958946424), (11.598076211353316, 34.873066958946424)], [(20.598076211353316, 29.676914536239792), (20.598076211353316, 32.67691453623979), (18.0, 34.17691453623979), (15.401923788646684, 32.67691453623979), (15.401923788646684, 29.676914536239792), (18.0, 28.176914536239792), (20.598076211353316, 29.676914536239792)], [(29.598076211353316, 34.873066958946424), (29.598076211353316, 37.873066958946424), (27.0, 39.373066958946424), (24.401923788646684, 37.873066958946424), (24.401923788646684, 34.873066958946424), (27.0, 33.373066958946424), (29.598076211353316, 34.873066958946424)], [(38.598076211353316, 29.676914536239792), (38.598076211353316, 32.67691453623979), (36.0, 34.17691453623979), (33.401923788646684, 32.67691453623979), (33.401923788646684, 29.676914536239792), (36.0, 28.176914536239792), (38.598076211353316, 29.676914536239792)], [(11.598076211353316, 45.26537180435969), (11.598076211353316, 48.26537180435969), (9.0, 49.76537180435969), (6.401923788646684, 48.26537180435969), (6.401923788646684, 45.26537180435969), (9.0, 43.76537180435969), (11.598076211353316, 45.26537180435969)], [(20.598076211353316, 40.069219381653056), (20.598076211353316, 43.069219381653056), (18.0, 44.569219381653056), (15.401923788646684, 43.069219381653056), (15.401923788646684, 40.069219381653056), (18.0, 38.569219381653056), (20.598076211353316, 40.069219381653056)], [(29.598076211353316, 45.26537180435969), (29.598076211353316, 48.26537180435969), (27.0, 49.76537180435969), (24.401923788646684, 48.26537180435969), (24.401923788646684, 45.26537180435969), (27.0, 43.76537180435969), (29.598076211353316, 45.26537180435969)], [(38.598076211353316, 40.069219381653056), (38.598076211353316, 43.069219381653056), (36.0, 44.569219381653056), (33.401923788646684, 43.069219381653056), (33.401923788646684, 40.069219381653056), (36.0, 38.569219381653056), (38.598076211353316, 40.069219381653056)]]",
    "test_result": "False"
  },
  "4924": {
    "question_id": "mbpp/492",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    sqrt3 = math.sqrt(3)\n    offset = 0\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            if y % 2 != 0:\n                offset = radius * sqrt3 / 2\n            else:\n                offset = 0\n            center_x = x * radius * sqrt3 + offset\n            center_y = y * radius * 1.5\n            \n            hexagon = []\n            for i in range(6):\n                angle_deg = 60 * i - 30\n                angle_rad = math.pi / 180 * angle_deg\n                point_x = center_x + radius * math.cos(angle_rad)\n                point_y = center_y + radius * math.sin(angle_rad)\n                hexagon.append((point_x, point_y))\n            hexagon.append(hexagon[0])  # Close the hexagon\n            polygons.append(hexagon)\n    return polygons",
    "test_output": "FAILED: expect [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]],in fact [[(10.392304845413264, 3.0), (10.392304845413264, 6.0), (7.794228634059948, 7.5), (5.196152422706632, 6.0), (5.196152422706632, 2.9999999999999996), (7.794228634059947, 1.5), (10.392304845413264, 3.0)], [(15.588457268119896, 3.0), (15.588457268119896, 6.0), (12.99038105676658, 7.5), (10.392304845413264, 6.0), (10.392304845413264, 2.9999999999999996), (12.99038105676658, 1.5), (15.588457268119896, 3.0)], [(20.784609690826528, 3.0), (20.784609690826528, 6.0), (18.186533479473212, 7.5), (15.588457268119896, 6.0), (15.588457268119896, 2.9999999999999996), (18.186533479473212, 1.5), (20.784609690826528, 3.0)], [(25.98076211353316, 3.0), (25.98076211353316, 6.0), (23.382685902179844, 7.5), (20.784609690826528, 6.0), (20.784609690826528, 2.9999999999999996), (23.382685902179844, 1.5), (25.98076211353316, 3.0)], [(7.794228634059948, 7.5), (7.794228634059948, 10.5), (5.196152422706632, 12.0), (2.598076211353316, 10.5), (2.598076211353316, 7.5), (5.196152422706631, 6.0), (7.794228634059948, 7.5)], [(12.99038105676658, 7.5), (12.99038105676658, 10.5), (10.392304845413264, 12.0), (7.794228634059948, 10.5), (7.794228634059948, 7.5), (10.392304845413264, 6.0), (12.99038105676658, 7.5)], [(18.186533479473212, 7.5), (18.186533479473212, 10.5), (15.588457268119894, 12.0), (12.990381056766578, 10.5), (12.990381056766578, 7.5), (15.588457268119894, 6.0), (18.186533479473212, 7.5)], [(23.382685902179844, 7.5), (23.382685902179844, 10.5), (20.784609690826528, 12.0), (18.186533479473212, 10.5), (18.186533479473212, 7.5), (20.784609690826528, 6.0), (23.382685902179844, 7.5)], [(10.392304845413264, 12.0), (10.392304845413264, 15.0), (7.794228634059948, 16.5), (5.196152422706632, 15.0), (5.196152422706632, 12.0), (7.794228634059947, 10.5), (10.392304845413264, 12.0)], [(15.588457268119896, 12.0), (15.588457268119896, 15.0), (12.99038105676658, 16.5), (10.392304845413264, 15.0), (10.392304845413264, 12.0), (12.99038105676658, 10.5), (15.588457268119896, 12.0)], [(20.784609690826528, 12.0), (20.784609690826528, 15.0), (18.186533479473212, 16.5), (15.588457268119896, 15.0), (15.588457268119896, 12.0), (18.186533479473212, 10.5), (20.784609690826528, 12.0)], [(25.98076211353316, 12.0), (25.98076211353316, 15.0), (23.382685902179844, 16.5), (20.784609690826528, 15.0), (20.784609690826528, 12.0), (23.382685902179844, 10.5), (25.98076211353316, 12.0)], [(7.794228634059948, 16.5), (7.794228634059948, 19.5), (5.196152422706632, 21.0), (2.598076211353316, 19.5), (2.598076211353316, 16.5), (5.196152422706631, 15.0), (7.794228634059948, 16.5)], [(12.99038105676658, 16.5), (12.99038105676658, 19.5), (10.392304845413264, 21.0), (7.794228634059948, 19.5), (7.794228634059948, 16.5), (10.392304845413264, 15.0), (12.99038105676658, 16.5)], [(18.186533479473212, 16.5), (18.186533479473212, 19.5), (15.588457268119894, 21.0), (12.990381056766578, 19.5), (12.990381056766578, 16.5), (15.588457268119894, 15.0), (18.186533479473212, 16.5)], [(23.382685902179844, 16.5), (23.382685902179844, 19.5), (20.784609690826528, 21.0), (18.186533479473212, 19.5), (18.186533479473212, 16.5), (20.784609690826528, 15.0), (23.382685902179844, 16.5)]]",
    "test_result": "False"
  },
  "4925": {
    "question_id": "mbpp/492",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    sqrt3 = math.sqrt(3)\n    offset = 0\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            center_x = x * 3 * radius\n            center_y = y * 2 * radius * sqrt3\n            if x % 2 != 0:\n                center_y += radius * sqrt3\n            hexagon = []\n            for i in range(6):\n                angle_deg = 60 * i - 30\n                angle_rad = math.pi / 180 * angle_deg\n                hex_x = center_x + radius * math.cos(angle_rad)\n                hex_y = center_y + radius * math.sin(angle_rad)\n                hexagon.append((hex_x, hex_y))\n            hexagon.append(hexagon[0])  # Close the hexagon\n            polygons.append(hexagon)\n    return polygons",
    "test_output": "FAILED: expect [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]],in fact [[(11.598076211353316, 14.088457268119896), (11.598076211353316, 17.088457268119896), (9.0, 18.588457268119896), (6.401923788646684, 17.088457268119896), (6.401923788646684, 14.088457268119896), (9.0, 12.588457268119896), (11.598076211353316, 14.088457268119896)], [(20.598076211353316, 8.892304845413264), (20.598076211353316, 11.892304845413264), (18.0, 13.392304845413264), (15.401923788646684, 11.892304845413264), (15.401923788646684, 8.892304845413264), (18.0, 7.392304845413264), (20.598076211353316, 8.892304845413264)], [(29.598076211353316, 14.088457268119896), (29.598076211353316, 17.088457268119896), (27.0, 18.588457268119896), (24.401923788646684, 17.088457268119896), (24.401923788646684, 14.088457268119896), (27.0, 12.588457268119896), (29.598076211353316, 14.088457268119896)], [(38.598076211353316, 8.892304845413264), (38.598076211353316, 11.892304845413264), (36.0, 13.392304845413264), (33.401923788646684, 11.892304845413264), (33.401923788646684, 8.892304845413264), (36.0, 7.392304845413264), (38.598076211353316, 8.892304845413264)], [(11.598076211353316, 24.48076211353316), (11.598076211353316, 27.48076211353316), (9.0, 28.98076211353316), (6.401923788646684, 27.48076211353316), (6.401923788646684, 24.48076211353316), (9.0, 22.98076211353316), (11.598076211353316, 24.48076211353316)], [(20.598076211353316, 19.284609690826528), (20.598076211353316, 22.284609690826528), (18.0, 23.784609690826528), (15.401923788646684, 22.284609690826528), (15.401923788646684, 19.284609690826528), (18.0, 17.784609690826528), (20.598076211353316, 19.284609690826528)], [(29.598076211353316, 24.48076211353316), (29.598076211353316, 27.48076211353316), (27.0, 28.98076211353316), (24.401923788646684, 27.48076211353316), (24.401923788646684, 24.48076211353316), (27.0, 22.98076211353316), (29.598076211353316, 24.48076211353316)], [(38.598076211353316, 19.284609690826528), (38.598076211353316, 22.284609690826528), (36.0, 23.784609690826528), (33.401923788646684, 22.284609690826528), (33.401923788646684, 19.284609690826528), (36.0, 17.784609690826528), (38.598076211353316, 19.284609690826528)], [(11.598076211353316, 34.873066958946424), (11.598076211353316, 37.873066958946424), (9.0, 39.373066958946424), (6.401923788646684, 37.873066958946424), (6.401923788646684, 34.873066958946424), (9.0, 33.373066958946424), (11.598076211353316, 34.873066958946424)], [(20.598076211353316, 29.67691453623979), (20.598076211353316, 32.676914536239785), (18.0, 34.17691453623979), (15.401923788646684, 32.676914536239785), (15.401923788646684, 29.67691453623979), (18.0, 28.17691453623979), (20.598076211353316, 29.67691453623979)], [(29.598076211353316, 34.873066958946424), (29.598076211353316, 37.873066958946424), (27.0, 39.373066958946424), (24.401923788646684, 37.873066958946424), (24.401923788646684, 34.873066958946424), (27.0, 33.373066958946424), (29.598076211353316, 34.873066958946424)], [(38.598076211353316, 29.67691453623979), (38.598076211353316, 32.676914536239785), (36.0, 34.17691453623979), (33.401923788646684, 32.676914536239785), (33.401923788646684, 29.67691453623979), (36.0, 28.17691453623979), (38.598076211353316, 29.67691453623979)], [(11.598076211353316, 45.26537180435969), (11.598076211353316, 48.26537180435969), (9.0, 49.76537180435969), (6.401923788646684, 48.26537180435969), (6.401923788646684, 45.26537180435969), (9.0, 43.76537180435969), (11.598076211353316, 45.26537180435969)], [(20.598076211353316, 40.069219381653056), (20.598076211353316, 43.069219381653056), (18.0, 44.569219381653056), (15.401923788646684, 43.069219381653056), (15.401923788646684, 40.069219381653056), (18.0, 38.569219381653056), (20.598076211353316, 40.069219381653056)], [(29.598076211353316, 45.26537180435969), (29.598076211353316, 48.26537180435969), (27.0, 49.76537180435969), (24.401923788646684, 48.26537180435969), (24.401923788646684, 45.26537180435969), (27.0, 43.76537180435969), (29.598076211353316, 45.26537180435969)], [(38.598076211353316, 40.069219381653056), (38.598076211353316, 43.069219381653056), (36.0, 44.569219381653056), (33.401923788646684, 43.069219381653056), (33.401923788646684, 40.069219381653056), (36.0, 38.569219381653056), (38.598076211353316, 40.069219381653056)]]",
    "test_result": "False"
  },
  "4926": {
    "question_id": "mbpp/492",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    sqrt3 = math.sqrt(3)\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            center_x = 3 * radius * x\n            center_y = sqrt3 * radius * y\n            if x % 2 != 0:\n                center_y += sqrt3 * radius / 2\n            hexagon = []\n            for i in range(6):\n                angle_deg = 60 * i - 30\n                angle_rad = math.pi / 180 * angle_deg\n                point_x = center_x + radius * math.cos(angle_rad)\n                point_y = center_y + radius * math.sin(angle_rad)\n                hexagon.append((point_x, point_y))\n            hexagon.append(hexagon[0])  # Close the hexagon\n            polygons.append(hexagon)\n    return polygons",
    "test_output": "FAILED: expect [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]],in fact [[(11.598076211353316, 6.294228634059948), (11.598076211353316, 9.294228634059948), (9.0, 10.794228634059948), (6.401923788646684, 9.294228634059948), (6.401923788646684, 6.294228634059948), (9.0, 4.794228634059948), (11.598076211353316, 6.294228634059948)], [(20.598076211353316, 3.696152422706632), (20.598076211353316, 6.696152422706632), (18.0, 8.196152422706632), (15.401923788646684, 6.696152422706632), (15.401923788646684, 3.6961524227066316), (18.0, 2.196152422706632), (20.598076211353316, 3.696152422706632)], [(29.598076211353316, 6.294228634059948), (29.598076211353316, 9.294228634059948), (27.0, 10.794228634059948), (24.401923788646684, 9.294228634059948), (24.401923788646684, 6.294228634059948), (27.0, 4.794228634059948), (29.598076211353316, 6.294228634059948)], [(38.598076211353316, 3.696152422706632), (38.598076211353316, 6.696152422706632), (36.0, 8.196152422706632), (33.401923788646684, 6.696152422706632), (33.401923788646684, 3.6961524227066316), (36.0, 2.196152422706632), (38.598076211353316, 3.696152422706632)], [(11.598076211353316, 11.49038105676658), (11.598076211353316, 14.49038105676658), (9.0, 15.99038105676658), (6.401923788646684, 14.49038105676658), (6.401923788646684, 11.49038105676658), (9.0, 9.99038105676658), (11.598076211353316, 11.49038105676658)], [(20.598076211353316, 8.892304845413264), (20.598076211353316, 11.892304845413264), (18.0, 13.392304845413264), (15.401923788646684, 11.892304845413264), (15.401923788646684, 8.892304845413264), (18.0, 7.392304845413264), (20.598076211353316, 8.892304845413264)], [(29.598076211353316, 11.49038105676658), (29.598076211353316, 14.49038105676658), (27.0, 15.99038105676658), (24.401923788646684, 14.49038105676658), (24.401923788646684, 11.49038105676658), (27.0, 9.99038105676658), (29.598076211353316, 11.49038105676658)], [(38.598076211353316, 8.892304845413264), (38.598076211353316, 11.892304845413264), (36.0, 13.392304845413264), (33.401923788646684, 11.892304845413264), (33.401923788646684, 8.892304845413264), (36.0, 7.392304845413264), (38.598076211353316, 8.892304845413264)], [(11.598076211353316, 16.686533479473212), (11.598076211353316, 19.686533479473212), (9.0, 21.186533479473212), (6.401923788646684, 19.686533479473212), (6.401923788646684, 16.686533479473212), (9.0, 15.186533479473212), (11.598076211353316, 16.686533479473212)], [(20.598076211353316, 14.088457268119896), (20.598076211353316, 17.088457268119896), (18.0, 18.588457268119896), (15.401923788646684, 17.088457268119896), (15.401923788646684, 14.088457268119896), (18.0, 12.588457268119896), (20.598076211353316, 14.088457268119896)], [(29.598076211353316, 16.686533479473212), (29.598076211353316, 19.686533479473212), (27.0, 21.186533479473212), (24.401923788646684, 19.686533479473212), (24.401923788646684, 16.686533479473212), (27.0, 15.186533479473212), (29.598076211353316, 16.686533479473212)], [(38.598076211353316, 14.088457268119896), (38.598076211353316, 17.088457268119896), (36.0, 18.588457268119896), (33.401923788646684, 17.088457268119896), (33.401923788646684, 14.088457268119896), (36.0, 12.588457268119896), (38.598076211353316, 14.088457268119896)], [(11.598076211353316, 21.882685902179844), (11.598076211353316, 24.882685902179844), (9.0, 26.382685902179844), (6.401923788646684, 24.882685902179844), (6.401923788646684, 21.882685902179844), (9.0, 20.382685902179844), (11.598076211353316, 21.882685902179844)], [(20.598076211353316, 19.284609690826528), (20.598076211353316, 22.284609690826528), (18.0, 23.784609690826528), (15.401923788646684, 22.284609690826528), (15.401923788646684, 19.284609690826528), (18.0, 17.784609690826528), (20.598076211353316, 19.284609690826528)], [(29.598076211353316, 21.882685902179844), (29.598076211353316, 24.882685902179844), (27.0, 26.382685902179844), (24.401923788646684, 24.882685902179844), (24.401923788646684, 21.882685902179844), (27.0, 20.382685902179844), (29.598076211353316, 21.882685902179844)], [(38.598076211353316, 19.284609690826528), (38.598076211353316, 22.284609690826528), (36.0, 23.784609690826528), (33.401923788646684, 22.284609690826528), (33.401923788646684, 19.284609690826528), (36.0, 17.784609690826528), (38.598076211353316, 19.284609690826528)]]",
    "test_result": "False"
  },
  "4927": {
    "question_id": "mbpp/492",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    sqrt3 = math.sqrt(3)\n    offset = 0\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            center_x = 3 * x * radius\n            center_y = (2 * y + (x % 2)) * radius * sqrt3 / 2\n            hexagon = []\n            for i in range(6):\n                angle_deg = 60 * i - 30\n                angle_rad = math.pi / 180 * angle_deg\n                point_x = center_x + radius * math.cos(angle_rad)\n                point_y = center_y + radius * math.sin(angle_rad)\n                hexagon.append((point_x, point_y))\n            hexagon.append(hexagon[0])  # Close the hexagon\n            polygons.append(hexagon)\n    return polygons",
    "test_output": "FAILED: expect [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]],in fact [[(11.598076211353316, 6.294228634059947), (11.598076211353316, 9.294228634059946), (9.0, 10.794228634059948), (6.401923788646684, 9.294228634059946), (6.401923788646684, 6.294228634059946), (9.0, 4.794228634059947), (11.598076211353316, 6.294228634059947)], [(20.598076211353316, 3.696152422706632), (20.598076211353316, 6.696152422706632), (18.0, 8.196152422706632), (15.401923788646684, 6.696152422706632), (15.401923788646684, 3.6961524227066316), (18.0, 2.196152422706632), (20.598076211353316, 3.696152422706632)], [(29.598076211353316, 6.294228634059947), (29.598076211353316, 9.294228634059946), (27.0, 10.794228634059948), (24.401923788646684, 9.294228634059946), (24.401923788646684, 6.294228634059946), (27.0, 4.794228634059947), (29.598076211353316, 6.294228634059947)], [(38.598076211353316, 3.696152422706632), (38.598076211353316, 6.696152422706632), (36.0, 8.196152422706632), (33.401923788646684, 6.696152422706632), (33.401923788646684, 3.6961524227066316), (36.0, 2.196152422706632), (38.598076211353316, 3.696152422706632)], [(11.598076211353316, 11.490381056766578), (11.598076211353316, 14.490381056766578), (9.0, 15.990381056766578), (6.401923788646684, 14.490381056766578), (6.401923788646684, 11.490381056766578), (9.0, 9.990381056766578), (11.598076211353316, 11.490381056766578)], [(20.598076211353316, 8.892304845413264), (20.598076211353316, 11.892304845413264), (18.0, 13.392304845413264), (15.401923788646684, 11.892304845413264), (15.401923788646684, 8.892304845413264), (18.0, 7.392304845413264), (20.598076211353316, 8.892304845413264)], [(29.598076211353316, 11.490381056766578), (29.598076211353316, 14.490381056766578), (27.0, 15.990381056766578), (24.401923788646684, 14.490381056766578), (24.401923788646684, 11.490381056766578), (27.0, 9.990381056766578), (29.598076211353316, 11.490381056766578)], [(38.598076211353316, 8.892304845413264), (38.598076211353316, 11.892304845413264), (36.0, 13.392304845413264), (33.401923788646684, 11.892304845413264), (33.401923788646684, 8.892304845413264), (36.0, 7.392304845413264), (38.598076211353316, 8.892304845413264)], [(11.598076211353316, 16.686533479473212), (11.598076211353316, 19.686533479473212), (9.0, 21.186533479473212), (6.401923788646684, 19.686533479473212), (6.401923788646684, 16.686533479473212), (9.0, 15.186533479473212), (11.598076211353316, 16.686533479473212)], [(20.598076211353316, 14.088457268119894), (20.598076211353316, 17.088457268119893), (18.0, 18.588457268119896), (15.401923788646684, 17.088457268119893), (15.401923788646684, 14.088457268119894), (18.0, 12.588457268119894), (20.598076211353316, 14.088457268119894)], [(29.598076211353316, 16.686533479473212), (29.598076211353316, 19.686533479473212), (27.0, 21.186533479473212), (24.401923788646684, 19.686533479473212), (24.401923788646684, 16.686533479473212), (27.0, 15.186533479473212), (29.598076211353316, 16.686533479473212)], [(38.598076211353316, 14.088457268119894), (38.598076211353316, 17.088457268119893), (36.0, 18.588457268119896), (33.401923788646684, 17.088457268119893), (33.401923788646684, 14.088457268119894), (36.0, 12.588457268119894), (38.598076211353316, 14.088457268119894)], [(11.598076211353316, 21.88268590217984), (11.598076211353316, 24.88268590217984), (9.0, 26.38268590217984), (6.401923788646684, 24.88268590217984), (6.401923788646684, 21.88268590217984), (9.0, 20.38268590217984), (11.598076211353316, 21.88268590217984)], [(20.598076211353316, 19.284609690826528), (20.598076211353316, 22.284609690826528), (18.0, 23.784609690826528), (15.401923788646684, 22.284609690826528), (15.401923788646684, 19.284609690826528), (18.0, 17.784609690826528), (20.598076211353316, 19.284609690826528)], [(29.598076211353316, 21.88268590217984), (29.598076211353316, 24.88268590217984), (27.0, 26.38268590217984), (24.401923788646684, 24.88268590217984), (24.401923788646684, 21.88268590217984), (27.0, 20.38268590217984), (29.598076211353316, 21.88268590217984)], [(38.598076211353316, 19.284609690826528), (38.598076211353316, 22.284609690826528), (36.0, 23.784609690826528), (33.401923788646684, 22.284609690826528), (33.401923788646684, 19.284609690826528), (36.0, 17.784609690826528), (38.598076211353316, 19.284609690826528)]]",
    "test_result": "False"
  },
  "4928": {
    "question_id": "mbpp/492",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    sqrt3 = math.sqrt(3)\n    offset = 0\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            if y % 2 != 0:\n                offset = radius * sqrt3 / 2\n            else:\n                offset = 0\n            center_x = 2 * x * radius * sqrt3 / 2 + offset\n            center_y = 1.5 * y * radius\n            \n            hexagon = []\n            for i in range(6):\n                angle_deg = 60 * i - 30\n                angle_rad = math.pi / 180 * angle_deg\n                point_x = center_x + radius * math.cos(angle_rad)\n                point_y = center_y + radius * math.sin(angle_rad)\n                hexagon.append((point_x, point_y))\n            hexagon.append(hexagon[0])  # Close the hexagon\n            polygons.append(hexagon)\n    return polygons",
    "test_output": "FAILED: expect [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]],in fact [[(10.392304845413264, 3.0), (10.392304845413264, 6.0), (7.794228634059948, 7.5), (5.196152422706632, 6.0), (5.196152422706632, 2.9999999999999996), (7.794228634059947, 1.5), (10.392304845413264, 3.0)], [(15.588457268119896, 3.0), (15.588457268119896, 6.0), (12.99038105676658, 7.5), (10.392304845413264, 6.0), (10.392304845413264, 2.9999999999999996), (12.99038105676658, 1.5), (15.588457268119896, 3.0)], [(20.784609690826528, 3.0), (20.784609690826528, 6.0), (18.186533479473212, 7.5), (15.588457268119896, 6.0), (15.588457268119896, 2.9999999999999996), (18.186533479473212, 1.5), (20.784609690826528, 3.0)], [(25.98076211353316, 3.0), (25.98076211353316, 6.0), (23.382685902179844, 7.5), (20.784609690826528, 6.0), (20.784609690826528, 2.9999999999999996), (23.382685902179844, 1.5), (25.98076211353316, 3.0)], [(7.794228634059948, 7.5), (7.794228634059948, 10.5), (5.196152422706632, 12.0), (2.598076211353316, 10.5), (2.598076211353316, 7.5), (5.196152422706631, 6.0), (7.794228634059948, 7.5)], [(12.99038105676658, 7.5), (12.99038105676658, 10.5), (10.392304845413264, 12.0), (7.794228634059948, 10.5), (7.794228634059948, 7.5), (10.392304845413264, 6.0), (12.99038105676658, 7.5)], [(18.186533479473212, 7.5), (18.186533479473212, 10.5), (15.588457268119894, 12.0), (12.990381056766578, 10.5), (12.990381056766578, 7.5), (15.588457268119894, 6.0), (18.186533479473212, 7.5)], [(23.382685902179844, 7.5), (23.382685902179844, 10.5), (20.784609690826528, 12.0), (18.186533479473212, 10.5), (18.186533479473212, 7.5), (20.784609690826528, 6.0), (23.382685902179844, 7.5)], [(10.392304845413264, 12.0), (10.392304845413264, 15.0), (7.794228634059948, 16.5), (5.196152422706632, 15.0), (5.196152422706632, 12.0), (7.794228634059947, 10.5), (10.392304845413264, 12.0)], [(15.588457268119896, 12.0), (15.588457268119896, 15.0), (12.99038105676658, 16.5), (10.392304845413264, 15.0), (10.392304845413264, 12.0), (12.99038105676658, 10.5), (15.588457268119896, 12.0)], [(20.784609690826528, 12.0), (20.784609690826528, 15.0), (18.186533479473212, 16.5), (15.588457268119896, 15.0), (15.588457268119896, 12.0), (18.186533479473212, 10.5), (20.784609690826528, 12.0)], [(25.98076211353316, 12.0), (25.98076211353316, 15.0), (23.382685902179844, 16.5), (20.784609690826528, 15.0), (20.784609690826528, 12.0), (23.382685902179844, 10.5), (25.98076211353316, 12.0)], [(7.794228634059948, 16.5), (7.794228634059948, 19.5), (5.196152422706632, 21.0), (2.598076211353316, 19.5), (2.598076211353316, 16.5), (5.196152422706631, 15.0), (7.794228634059948, 16.5)], [(12.99038105676658, 16.5), (12.99038105676658, 19.5), (10.392304845413264, 21.0), (7.794228634059948, 19.5), (7.794228634059948, 16.5), (10.392304845413264, 15.0), (12.99038105676658, 16.5)], [(18.186533479473212, 16.5), (18.186533479473212, 19.5), (15.588457268119894, 21.0), (12.990381056766578, 19.5), (12.990381056766578, 16.5), (15.588457268119894, 15.0), (18.186533479473212, 16.5)], [(23.382685902179844, 16.5), (23.382685902179844, 19.5), (20.784609690826528, 21.0), (18.186533479473212, 19.5), (18.186533479473212, 16.5), (20.784609690826528, 15.0), (23.382685902179844, 16.5)]]",
    "test_result": "False"
  },
  "4929": {
    "question_id": "mbpp/492",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    # Calculate horizontal and vertical spacing\n    horizontal_spacing = radius * 3\n    vertical_spacing = radius * math.sqrt(3)\n    \n    for i in range(startx, endx + 1):\n        for j in range(starty, endy + 1):\n            # Calculate center coordinates\n            x = i * horizontal_spacing / 2\n            y = j * vertical_spacing\n            \n            # Offset every other column\n            if i % 2 != 0:\n                y += vertical_spacing / 2\n            \n            # Generate hexagon points\n            points = []\n            for k in range(6):\n                angle = math.pi / 3 * k\n                px = x + radius * math.cos(angle)\n                py = y + radius * math.sin(angle)\n                points.append((px, py))\n            \n            # Add first point again to close the polygon\n            points.append(points[0])\n            polygons.append(points)\n    \n    return polygons",
    "test_output": "FAILED: expect [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]],in fact [[(7.5, 7.794228634059948), (6.0, 10.392304845413264), (3.000000000000001, 10.392304845413264), (1.5, 7.794228634059948), (2.9999999999999987, 5.196152422706632), (5.999999999999998, 5.196152422706631), (7.5, 7.794228634059948)], [(7.5, 12.99038105676658), (6.0, 15.588457268119896), (3.000000000000001, 15.588457268119896), (1.5, 12.99038105676658), (2.9999999999999987, 10.392304845413264), (5.999999999999998, 10.392304845413264), (7.5, 12.99038105676658)], [(7.5, 18.186533479473212), (6.0, 20.784609690826528), (3.000000000000001, 20.784609690826528), (1.5, 18.186533479473212), (2.9999999999999987, 15.588457268119896), (5.999999999999998, 15.588457268119896), (7.5, 18.186533479473212)], [(7.5, 23.382685902179844), (6.0, 25.98076211353316), (3.000000000000001, 25.98076211353316), (1.5, 23.382685902179844), (2.9999999999999987, 20.784609690826528), (5.999999999999998, 20.784609690826528), (7.5, 23.382685902179844)], [(12.0, 5.196152422706632), (10.5, 7.794228634059948), (7.500000000000001, 7.794228634059948), (6.0, 5.196152422706632), (7.499999999999998, 2.5980762113533165), (10.499999999999998, 2.598076211353315), (12.0, 5.196152422706632)], [(12.0, 10.392304845413264), (10.5, 12.99038105676658), (7.500000000000001, 12.99038105676658), (6.0, 10.392304845413264), (7.499999999999998, 7.794228634059948), (10.499999999999998, 7.794228634059947), (12.0, 10.392304845413264)], [(12.0, 15.588457268119896), (10.5, 18.186533479473212), (7.500000000000001, 18.186533479473212), (6.0, 15.588457268119896), (7.499999999999998, 12.99038105676658), (10.499999999999998, 12.99038105676658), (12.0, 15.588457268119896)], [(12.0, 20.784609690826528), (10.5, 23.382685902179844), (7.500000000000001, 23.382685902179844), (6.0, 20.784609690826528), (7.499999999999998, 18.186533479473212), (10.499999999999998, 18.186533479473212), (12.0, 20.784609690826528)], [(16.5, 7.794228634059948), (15.0, 10.392304845413264), (12.0, 10.392304845413264), (10.5, 7.794228634059948), (11.999999999999998, 5.196152422706632), (14.999999999999998, 5.196152422706631), (16.5, 7.794228634059948)], [(16.5, 12.99038105676658), (15.0, 15.588457268119896), (12.0, 15.588457268119896), (10.5, 12.99038105676658), (11.999999999999998, 10.392304845413264), (14.999999999999998, 10.392304845413264), (16.5, 12.99038105676658)], [(16.5, 18.186533479473212), (15.0, 20.784609690826528), (12.0, 20.784609690826528), (10.5, 18.186533479473212), (11.999999999999998, 15.588457268119896), (14.999999999999998, 15.588457268119896), (16.5, 18.186533479473212)], [(16.5, 23.382685902179844), (15.0, 25.98076211353316), (12.0, 25.98076211353316), (10.5, 23.382685902179844), (11.999999999999998, 20.784609690826528), (14.999999999999998, 20.784609690826528), (16.5, 23.382685902179844)], [(21.0, 5.196152422706632), (19.5, 7.794228634059948), (16.5, 7.794228634059948), (15.0, 5.196152422706632), (16.5, 2.5980762113533165), (19.499999999999996, 2.598076211353315), (21.0, 5.196152422706632)], [(21.0, 10.392304845413264), (19.5, 12.99038105676658), (16.5, 12.99038105676658), (15.0, 10.392304845413264), (16.5, 7.794228634059948), (19.499999999999996, 7.794228634059947), (21.0, 10.392304845413264)], [(21.0, 15.588457268119896), (19.5, 18.186533479473212), (16.5, 18.186533479473212), (15.0, 15.588457268119896), (16.5, 12.99038105676658), (19.499999999999996, 12.99038105676658), (21.0, 15.588457268119896)], [(21.0, 20.784609690826528), (19.5, 23.382685902179844), (16.5, 23.382685902179844), (15.0, 20.784609690826528), (16.5, 18.186533479473212), (19.499999999999996, 18.186533479473212), (21.0, 20.784609690826528)]]",
    "test_result": "False"
  },
  "4930": {
    "question_id": "mbpp/493",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_integer(binary_tuple):\n    binary_str = ''.join(map(str, binary_tuple))\n    decimal_value = int(binary_str, 2)\n    return str(decimal_value)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4931": {
    "question_id": "mbpp/493",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_integer(binary_tuple):\n    binary_str = ''.join(map(str, binary_tuple))\n    decimal_value = int(binary_str, 2)\n    return str(decimal_value)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4932": {
    "question_id": "mbpp/493",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_integer(binary_tuple):\n    binary_str = ''.join(map(str, binary_tuple))\n    decimal_value = int(binary_str, 2)\n    return str(decimal_value)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4933": {
    "question_id": "mbpp/493",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_integer(binary_tuple):\n    binary_str = ''.join(map(str, binary_tuple))\n    decimal_value = int(binary_str, 2)\n    return str(decimal_value)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4934": {
    "question_id": "mbpp/493",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_integer(binary_tuple):\n    binary_str = ''.join(map(str, binary_tuple))\n    return str(int(binary_str, 2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4935": {
    "question_id": "mbpp/493",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_integer(binary_tuple):\n    if not binary_tuple:\n        return '0'\n    binary_str = ''.join(map(str, binary_tuple))\n    decimal_value = int(binary_str, 2)\n    return str(decimal_value)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4936": {
    "question_id": "mbpp/493",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_integer(binary_tuple):\n    binary_str = ''.join(map(str, binary_tuple))\n    decimal_value = int(binary_str, 2)\n    return str(decimal_value)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4937": {
    "question_id": "mbpp/493",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_integer(binary_tuple):\n    if not binary_tuple:\n        return '0'\n    binary_str = ''.join(map(str, binary_tuple))\n    decimal_value = int(binary_str, 2)\n    return str(decimal_value)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4938": {
    "question_id": "mbpp/493",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_integer(binary_tuple):\n    binary_str = ''.join(map(str, binary_tuple))\n    return str(int(binary_str, 2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4939": {
    "question_id": "mbpp/493",
    "model": "deepseek-v3-250324",
    "generation_code": "def binary_to_integer(binary_tuple):\n    if not binary_tuple:\n        return '0'\n    binary_str = ''.join(map(str, binary_tuple))\n    return str(int(binary_str, 2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4940": {
    "question_id": "mbpp/494",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_lowercase(s):\n    return re.sub('[a-z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4941": {
    "question_id": "mbpp/494",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_lowercase(s):\n    return re.sub('[a-z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4942": {
    "question_id": "mbpp/494",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4943": {
    "question_id": "mbpp/494",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_lowercase(s):\n    return re.sub('[a-z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4944": {
    "question_id": "mbpp/494",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4945": {
    "question_id": "mbpp/494",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_lowercase(s):\n    return re.sub('[a-z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4946": {
    "question_id": "mbpp/494",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4947": {
    "question_id": "mbpp/494",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_lowercase(s):\n    return re.sub('[a-z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4948": {
    "question_id": "mbpp/494",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_lowercase(s):\n    return re.sub('[a-z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4949": {
    "question_id": "mbpp/494",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_lowercase(s):\n    return re.sub('[a-z]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4950": {
    "question_id": "mbpp/495",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    if k <= 0:\n        return []\n    heapq.heapify(nums)\n    smallest = []\n    for _ in range(min(k, len(nums))):\n        smallest.append(heapq.heappop(nums))\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4951": {
    "question_id": "mbpp/495",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    if k <= 0:\n        return []\n    heapq.heapify(nums)\n    smallest = heapq.nsmallest(k, nums)\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4952": {
    "question_id": "mbpp/495",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    if not nums or k <= 0:\n        return []\n    heapq.heapify(nums)\n    smallest = []\n    for _ in range(min(k, len(nums))):\n        smallest.append(heapq.heappop(nums))\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4953": {
    "question_id": "mbpp/495",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    if not nums or k <= 0:\n        return []\n    heapq.heapify(nums)\n    smallest = []\n    for _ in range(min(k, len(nums))):\n        smallest.append(heapq.heappop(nums))\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4954": {
    "question_id": "mbpp/495",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    if k <= 0:\n        return []\n    heapq.heapify(nums)\n    smallest = heapq.nsmallest(k, nums)\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4955": {
    "question_id": "mbpp/495",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    if not nums or k <= 0:\n        return []\n    heapq.heapify(nums)\n    smallest = []\n    for _ in range(min(k, len(nums))):\n        smallest.append(heapq.heappop(nums))\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4956": {
    "question_id": "mbpp/495",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    if not nums or k <= 0:\n        return []\n    heapq.heapify(nums)\n    smallest = []\n    for _ in range(min(k, len(nums))):\n        smallest.append(heapq.heappop(nums))\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4957": {
    "question_id": "mbpp/495",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    if not nums or k <= 0:\n        return []\n    heapq.heapify(nums)\n    smallest = heapq.nsmallest(k, nums)\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4958": {
    "question_id": "mbpp/495",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    if not nums or k <= 0:\n        return []\n    heapq.heapify(nums)\n    smallest = []\n    for _ in range(min(k, len(nums))):\n        smallest.append(heapq.heappop(nums))\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4959": {
    "question_id": "mbpp/495",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_queue_smallest(nums, k):\n    if not nums or k <= 0:\n        return []\n    heapq.heapify(nums)\n    smallest = []\n    for _ in range(min(k, len(nums))):\n        smallest.append(heapq.heappop(nums))\n    return smallest",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4960": {
    "question_id": "mbpp/496",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cone(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    slant_height = math.sqrt(radius**2 + height**2)\n    base_area = math.pi * radius**2\n    lateral_area = math.pi * radius * slant_height\n    return base_area + lateral_area",
    "test_output": "FAILED: expect 880.5179353159282,in fact 880.5179353159281",
    "test_result": "False"
  },
  "4961": {
    "question_id": "mbpp/496",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cone(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    slant_height = math.sqrt(radius**2 + height**2)\n    base_area = math.pi * radius**2\n    lateral_area = math.pi * radius * slant_height\n    return base_area + lateral_area",
    "test_output": "FAILED: expect 880.5179353159282,in fact 880.5179353159281",
    "test_result": "False"
  },
  "4962": {
    "question_id": "mbpp/496",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cone(r, h):\n    if r <= 0 or h <= 0:\n        return 0\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * (r + l)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4963": {
    "question_id": "mbpp/496",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cone(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    slant_height = math.sqrt(radius**2 + height**2)\n    base_area = math.pi * radius**2\n    lateral_area = math.pi * radius * slant_height\n    return base_area + lateral_area",
    "test_output": "FAILED: expect 880.5179353159282,in fact 880.5179353159281",
    "test_result": "False"
  },
  "4964": {
    "question_id": "mbpp/496",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cone(r, h):\n    if r <= 0 or h <= 0:\n        return 0\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * (r + l)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4965": {
    "question_id": "mbpp/496",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cone(r, h):\n    if r <= 0 or h <= 0:\n        return 0\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * (r + l)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4966": {
    "question_id": "mbpp/496",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cone(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    slant_height = math.sqrt(radius**2 + height**2)\n    base_area = math.pi * radius**2\n    lateral_area = math.pi * radius * slant_height\n    return base_area + lateral_area",
    "test_output": "FAILED: expect 880.5179353159282,in fact 880.5179353159281",
    "test_result": "False"
  },
  "4967": {
    "question_id": "mbpp/496",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cone(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    slant_height = math.sqrt(radius**2 + height**2)\n    surface_area = math.pi * radius * (radius + slant_height)\n    return surface_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4968": {
    "question_id": "mbpp/496",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cone(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    slant_height = math.sqrt(radius**2 + height**2)\n    surface_area = math.pi * radius * (radius + slant_height)\n    return surface_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4969": {
    "question_id": "mbpp/496",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cone(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    slant_height = math.sqrt(radius**2 + height**2)\n    base_area = math.pi * radius**2\n    lateral_area = math.pi * radius * slant_height\n    return base_area + lateral_area",
    "test_output": "FAILED: expect 880.5179353159282,in fact 880.5179353159281",
    "test_result": "False"
  },
  "4970": {
    "question_id": "mbpp/497",
    "model": "deepseek-v3-250324",
    "generation_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4971": {
    "question_id": "mbpp/497",
    "model": "deepseek-v3-250324",
    "generation_code": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4972": {
    "question_id": "mbpp/497",
    "model": "deepseek-v3-250324",
    "generation_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4973": {
    "question_id": "mbpp/497",
    "model": "deepseek-v3-250324",
    "generation_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4974": {
    "question_id": "mbpp/497",
    "model": "deepseek-v3-250324",
    "generation_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4975": {
    "question_id": "mbpp/497",
    "model": "deepseek-v3-250324",
    "generation_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4976": {
    "question_id": "mbpp/497",
    "model": "deepseek-v3-250324",
    "generation_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4977": {
    "question_id": "mbpp/497",
    "model": "deepseek-v3-250324",
    "generation_code": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4978": {
    "question_id": "mbpp/497",
    "model": "deepseek-v3-250324",
    "generation_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4979": {
    "question_id": "mbpp/497",
    "model": "deepseek-v3-250324",
    "generation_code": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4980": {
    "question_id": "mbpp/498",
    "model": "deepseek-v3-250324",
    "generation_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4981": {
    "question_id": "mbpp/498",
    "model": "deepseek-v3-250324",
    "generation_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4982": {
    "question_id": "mbpp/498",
    "model": "deepseek-v3-250324",
    "generation_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4983": {
    "question_id": "mbpp/498",
    "model": "deepseek-v3-250324",
    "generation_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4984": {
    "question_id": "mbpp/498",
    "model": "deepseek-v3-250324",
    "generation_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4985": {
    "question_id": "mbpp/498",
    "model": "deepseek-v3-250324",
    "generation_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4986": {
    "question_id": "mbpp/498",
    "model": "deepseek-v3-250324",
    "generation_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4987": {
    "question_id": "mbpp/498",
    "model": "deepseek-v3-250324",
    "generation_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4988": {
    "question_id": "mbpp/498",
    "model": "deepseek-v3-250324",
    "generation_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4989": {
    "question_id": "mbpp/498",
    "model": "deepseek-v3-250324",
    "generation_code": "def diameter_circle(radius):\n    return 2 * radius",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4990": {
    "question_id": "mbpp/499",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4991": {
    "question_id": "mbpp/499",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4992": {
    "question_id": "mbpp/499",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4993": {
    "question_id": "mbpp/499",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4994": {
    "question_id": "mbpp/499",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4995": {
    "question_id": "mbpp/499",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4996": {
    "question_id": "mbpp/499",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4997": {
    "question_id": "mbpp/499",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4998": {
    "question_id": "mbpp/499",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "4999": {
    "question_id": "mbpp/499",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5000": {
    "question_id": "mbpp/500",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_comm_div(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    count = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5001": {
    "question_id": "mbpp/500",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_comm_div(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    count = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5002": {
    "question_id": "mbpp/500",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_comm_div(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    count = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5003": {
    "question_id": "mbpp/500",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_comm_div(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    count = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5004": {
    "question_id": "mbpp/500",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_comm_div(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    count = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5005": {
    "question_id": "mbpp/500",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_comm_div(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    count = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5006": {
    "question_id": "mbpp/500",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_comm_div(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    count = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5007": {
    "question_id": "mbpp/500",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_comm_div(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    count = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5008": {
    "question_id": "mbpp/500",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_comm_div(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    count = 0\n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            if i * i == g:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5009": {
    "question_id": "mbpp/500",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef num_comm_div(a, b):\n    gcd = math.gcd(a, b)\n    if gcd == 0:\n        return 0\n    count = 0\n    for i in range(1, int(math.sqrt(gcd)) + 1):\n        if gcd % i == 0:\n            if i * i == gcd:\n                count += 1\n            else:\n                count += 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5010": {
    "question_id": "mbpp/501",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    return a % b if b != 0 else None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5011": {
    "question_id": "mbpp/501",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        return None\n    return a % b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5012": {
    "question_id": "mbpp/501",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        return None\n    return a % b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5013": {
    "question_id": "mbpp/501",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    return a % b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5014": {
    "question_id": "mbpp/501",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    return a % b if b != 0 else None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5015": {
    "question_id": "mbpp/501",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        return None\n    return a % b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5016": {
    "question_id": "mbpp/501",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    if b == 0:\n        return None\n    return a % b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5017": {
    "question_id": "mbpp/501",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    return a % b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5018": {
    "question_id": "mbpp/501",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    return a % b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5019": {
    "question_id": "mbpp/501",
    "model": "deepseek-v3-250324",
    "generation_code": "def find(a, b):\n    return a % b if b != 0 else None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5020": {
    "question_id": "mbpp/502",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_consecutive_nums(nums):\n    if len(nums) <= 1:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5021": {
    "question_id": "mbpp/502",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_consecutive_nums(nums):\n    if len(nums) <= 1:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i+1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5022": {
    "question_id": "mbpp/502",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_consecutive_nums(nums):\n    if len(nums) <= 1:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i+1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5023": {
    "question_id": "mbpp/502",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_consecutive_nums(nums):\n    if not nums:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5024": {
    "question_id": "mbpp/502",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_consecutive_nums(nums):\n    if len(nums) < 2:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5025": {
    "question_id": "mbpp/502",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_consecutive_nums(nums):\n    if len(nums) <= 1:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i+1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5026": {
    "question_id": "mbpp/502",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_consecutive_nums(nums):\n    if not nums:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i+1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5027": {
    "question_id": "mbpp/502",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_consecutive_nums(nums):\n    if len(nums) <= 1:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5028": {
    "question_id": "mbpp/502",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_consecutive_nums(nums):\n    if not nums:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5029": {
    "question_id": "mbpp/502",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_consecutive_nums(nums):\n    if len(nums) <= 1:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5030": {
    "question_id": "mbpp/503",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5031": {
    "question_id": "mbpp/503",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5032": {
    "question_id": "mbpp/503",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Series(n):\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5033": {
    "question_id": "mbpp/503",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Series(n):\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5034": {
    "question_id": "mbpp/503",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5035": {
    "question_id": "mbpp/503",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5036": {
    "question_id": "mbpp/503",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5037": {
    "question_id": "mbpp/503",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5038": {
    "question_id": "mbpp/503",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5039": {
    "question_id": "mbpp/503",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5040": {
    "question_id": "mbpp/504",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_order(arr):\n    non_zeros = [x for x in arr if x != 0]\n    zeros = [0] * (len(arr) - len(non_zeros))\n    return non_zeros + zeros",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5041": {
    "question_id": "mbpp/504",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_order(arr):\n    non_zero = [x for x in arr if x != 0]\n    zero_count = len(arr) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5042": {
    "question_id": "mbpp/504",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_order(arr):\n    non_zero = [x for x in arr if x != 0]\n    zero_count = len(arr) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5043": {
    "question_id": "mbpp/504",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_order(arr):\n    non_zeros = [x for x in arr if x != 0]\n    zeros = [0] * (len(arr) - len(non_zeros))\n    return non_zeros + zeros",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5044": {
    "question_id": "mbpp/504",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_order(arr):\n    non_zero = [x for x in arr if x != 0]\n    zero_count = len(arr) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5045": {
    "question_id": "mbpp/504",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_order(arr):\n    non_zero = [x for x in arr if x != 0]\n    zero_count = len(arr) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5046": {
    "question_id": "mbpp/504",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_order(arr):\n    non_zero = [x for x in arr if x != 0]\n    zero_count = len(arr) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5047": {
    "question_id": "mbpp/504",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_order(arr):\n    non_zero = [x for x in arr if x != 0]\n    zero_count = len(arr) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5048": {
    "question_id": "mbpp/504",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_order(arr):\n    non_zero = [x for x in arr if x != 0]\n    zero_count = len(arr) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5049": {
    "question_id": "mbpp/504",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_order(arr):\n    non_zero = [x for x in arr if x != 0]\n    zero = [x for x in arr if x == 0]\n    return non_zero + zero",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5050": {
    "question_id": "mbpp/505",
    "model": "deepseek-v3-250324",
    "generation_code": "def permutation_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5051": {
    "question_id": "mbpp/505",
    "model": "deepseek-v3-250324",
    "generation_code": "def permutation_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5052": {
    "question_id": "mbpp/505",
    "model": "deepseek-v3-250324",
    "generation_code": "def permutation_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5053": {
    "question_id": "mbpp/505",
    "model": "deepseek-v3-250324",
    "generation_code": "def permutation_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5054": {
    "question_id": "mbpp/505",
    "model": "deepseek-v3-250324",
    "generation_code": "def permutation_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5055": {
    "question_id": "mbpp/505",
    "model": "deepseek-v3-250324",
    "generation_code": "def permutation_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5056": {
    "question_id": "mbpp/505",
    "model": "deepseek-v3-250324",
    "generation_code": "def permutation_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5057": {
    "question_id": "mbpp/505",
    "model": "deepseek-v3-250324",
    "generation_code": "def permutation_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5058": {
    "question_id": "mbpp/505",
    "model": "deepseek-v3-250324",
    "generation_code": "def permutation_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5059": {
    "question_id": "mbpp/505",
    "model": "deepseek-v3-250324",
    "generation_code": "def permutation_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5060": {
    "question_id": "mbpp/506",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5061": {
    "question_id": "mbpp/506",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5062": {
    "question_id": "mbpp/506",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5063": {
    "question_id": "mbpp/506",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5064": {
    "question_id": "mbpp/506",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5065": {
    "question_id": "mbpp/506",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5066": {
    "question_id": "mbpp/506",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5067": {
    "question_id": "mbpp/506",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5068": {
    "question_id": "mbpp/506",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5069": {
    "question_id": "mbpp/506",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5070": {
    "question_id": "mbpp/507",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_order(list1, list2):\n    common_elements = [item for item in list1 if item in list2]\n    filtered_list2 = [item for item in list2 if item in common_elements]\n    return common_elements == filtered_list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5071": {
    "question_id": "mbpp/507",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_order(list1, list2):\n    common_elements = [item for item in list1 if item in list2]\n    filtered_list2 = [item for item in list2 if item in list1]\n    return common_elements == filtered_list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5072": {
    "question_id": "mbpp/507",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_order(list1, list2):\n    common_elements = [item for item in list1 if item in list2]\n    filtered_list2 = [item for item in list2 if item in list1]\n    return common_elements == filtered_list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5073": {
    "question_id": "mbpp/507",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_order(list1, list2):\n    common_elements = [item for item in list1 if item in list2]\n    filtered_list2 = [item for item in list2 if item in common_elements]\n    return common_elements == filtered_list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5074": {
    "question_id": "mbpp/507",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_order(list1, list2):\n    common_elements = [item for item in list1 if item in list2]\n    filtered_list2 = [item for item in list2 if item in common_elements]\n    return common_elements == filtered_list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5075": {
    "question_id": "mbpp/507",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_order(list1, list2):\n    common = [item for item in list1 if item in list2]\n    filtered_list2 = [item for item in list2 if item in list1]\n    return common == filtered_list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5076": {
    "question_id": "mbpp/507",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_order(list1, list2):\n    common_elements = [item for item in list1 if item in list2]\n    filtered_list2 = [item for item in list2 if item in list1]\n    return common_elements == filtered_list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5077": {
    "question_id": "mbpp/507",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_order(list1, list2):\n    common_elements = [item for item in list1 if item in list2]\n    filtered_list2 = [item for item in list2 if item in common_elements]\n    return common_elements == filtered_list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5078": {
    "question_id": "mbpp/507",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_order(list1, list2):\n    common_elements = [element for element in list1 if element in list2]\n    filtered_list2 = [element for element in list2 if element in list1]\n    \n    return common_elements == filtered_list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5079": {
    "question_id": "mbpp/507",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_order(list1, list2):\n    common_elements = [item for item in list1 if item in list2]\n    filtered_list2 = [item for item in list2 if item in list1]\n    return common_elements == filtered_list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5080": {
    "question_id": "mbpp/508",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Odd(n):\n    if n % 2 == 0:\n        return 0\n    total = 0\n    count = 0\n    for num in range(1, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5081": {
    "question_id": "mbpp/508",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Odd(n):\n    if n % 2 == 0:\n        return 0\n    total = 0\n    count = 0\n    for num in range(1, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5082": {
    "question_id": "mbpp/508",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Odd(n):\n    if n % 2 == 0:\n        return 0\n    total = 0\n    count = 0\n    for num in range(1, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5083": {
    "question_id": "mbpp/508",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Odd(n):\n    if n % 2 == 0:\n        return 0\n    total = 0\n    count = 0\n    for num in range(1, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5084": {
    "question_id": "mbpp/508",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Odd(n):\n    if n % 2 == 0:\n        return 0\n    total = 0\n    count = 0\n    for num in range(1, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5085": {
    "question_id": "mbpp/508",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Odd(n):\n    if n % 2 == 0:\n        return 0\n    total = 0\n    count = 0\n    for num in range(1, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5086": {
    "question_id": "mbpp/508",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Odd(n):\n    if n % 2 == 0:\n        return 0\n    total = 0\n    count = 0\n    for num in range(1, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5087": {
    "question_id": "mbpp/508",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Odd(n):\n    if n % 2 == 0:\n        return 0\n    total = 0\n    count = 0\n    for num in range(1, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5088": {
    "question_id": "mbpp/508",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Odd(n):\n    if n % 2 == 0:\n        return 0\n    total = 0\n    count = 0\n    for num in range(1, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5089": {
    "question_id": "mbpp/508",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Odd(n):\n    if n % 2 == 0:\n        return 0\n    total = 0\n    count = 0\n    for num in range(1, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5090": {
    "question_id": "mbpp/509",
    "model": "deepseek-v3-250324",
    "generation_code": "def no_of_subsequences(arr, k):\n    if k <= 1:\n        return 0\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(k)]\n    for i in range(k):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n    for i in range(1, k):\n        for j in range(1, n + 1):\n            if arr[j - 1] <= i and arr[j - 1] > 0:\n                dp[i][j] = dp[i // arr[j - 1]][j - 1] + dp[i][j - 1] + 1\n            else:\n                dp[i][j] = dp[i][j - 1]\n    return dp[k - 1][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5091": {
    "question_id": "mbpp/509",
    "model": "deepseek-v3-250324",
    "generation_code": "def no_of_subsequences(arr, k):\n    if k <= 1:\n        return 0\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(k)]\n    for i in range(1, k):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1]\n            if arr[j - 1] <= i and arr[j - 1] > 0:\n                dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n    return dp[k - 1][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5092": {
    "question_id": "mbpp/509",
    "model": "deepseek-v3-250324",
    "generation_code": "def no_of_subsequences(arr, k):\n    if k <= 1:\n        return 0\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(k)]\n    for i in range(1, k):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1]\n            if arr[j - 1] <= i:\n                dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n    return dp[k - 1][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5093": {
    "question_id": "mbpp/509",
    "model": "deepseek-v3-250324",
    "generation_code": "def no_of_subsequences(arr, k):\n    if k <= 1:\n        return 0\n    count = 0\n    product = 1\n    left = 0\n    for right in range(len(arr)):\n        product *= arr[right]\n        while product >= k and left <= right:\n            product /= arr[left]\n            left += 1\n        count += right - left + 1\n    return count",
    "test_output": "FAILED: expect 11,in fact 7",
    "test_result": "False"
  },
  "5094": {
    "question_id": "mbpp/509",
    "model": "deepseek-v3-250324",
    "generation_code": "def no_of_subsequences(arr, k):\n    if k <= 1:\n        return 0\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(k)]\n    for i in range(k):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n    for i in range(1, k):\n        for j in range(1, n + 1):\n            if arr[j - 1] <= i and arr[j - 1] > 0:\n                dp[i][j] = dp[i // arr[j - 1]][j - 1] + dp[i][j - 1] + 1\n            else:\n                dp[i][j] = dp[i][j - 1]\n    return dp[k - 1][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5095": {
    "question_id": "mbpp/509",
    "model": "deepseek-v3-250324",
    "generation_code": "def no_of_subsequences(arr, k):\n    if k <= 1:\n        return 0\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(k)]\n    for i in range(1, k):\n        for j in range(1, n + 1):\n            if arr[j - 1] <= i and arr[j - 1] > 0:\n                dp[i][j] = dp[i // arr[j - 1]][j - 1] + dp[i][j - 1] + 1\n            else:\n                dp[i][j] = dp[i][j - 1]\n    return dp[k - 1][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5096": {
    "question_id": "mbpp/509",
    "model": "deepseek-v3-250324",
    "generation_code": "def no_of_subsequences(arr, k):\n    if k <= 1:\n        return 0\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(k)]\n    for i in range(k):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n    for i in range(1, k):\n        for j in range(1, n + 1):\n            if arr[j - 1] <= i and arr[j - 1] > 0:\n                dp[i][j] = dp[i // arr[j - 1]][j - 1] + dp[i][j - 1] + 1\n            else:\n                dp[i][j] = dp[i][j - 1]\n    return dp[k - 1][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5097": {
    "question_id": "mbpp/509",
    "model": "deepseek-v3-250324",
    "generation_code": "def no_of_subsequences(arr, k):\n    if k <= 1:\n        return 0\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(k)]\n    for i in range(k):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n    for i in range(1, k):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1]\n            if arr[j - 1] <= i and arr[j - 1] > 0:\n                dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n    return dp[k - 1][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5098": {
    "question_id": "mbpp/509",
    "model": "deepseek-v3-250324",
    "generation_code": "def no_of_subsequences(arr, k):\n    if k <= 1:\n        return 0\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(k)]\n    for i in range(1, k):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1]\n            if arr[j - 1] <= i:\n                dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n    return dp[k - 1][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5099": {
    "question_id": "mbpp/509",
    "model": "deepseek-v3-250324",
    "generation_code": "def no_of_subsequences(arr, k):\n    if k <= 1:\n        return 0\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(k)]\n    for i in range(1, k):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1]\n            if arr[j - 1] <= i:\n                dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n    return dp[k - 1][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5100": {
    "question_id": "mbpp/510",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(num):\n    if num == 1:\n        return 1\n    min_sum = float('inf')\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            factor1 = i\n            factor2 = num // i\n            current_sum = factor1 + factor2\n            if current_sum < min_sum:\n                min_sum = current_sum\n    return min_sum if min_sum != float('inf') else num + 1",
    "test_output": "FAILED: expect 15,in fact 22",
    "test_result": "False"
  },
  "5101": {
    "question_id": "mbpp/510",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(num):\n    if num == 1:\n        return 1\n    min_sum = float('inf')\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            current_sum = i + find_Min_Sum(num // i)\n            if current_sum < min_sum:\n                min_sum = current_sum\n    return min_sum if min_sum != float('inf') else num + 1",
    "test_output": "FAILED: expect 7,in fact 8",
    "test_result": "False"
  },
  "5102": {
    "question_id": "mbpp/510",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(num):\n    if num == 1:\n        return 1\n    min_sum = float('inf')\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            current_sum = i + (num // i)\n            if current_sum < min_sum:\n                min_sum = current_sum\n    return min_sum if min_sum != float('inf') else num + 1",
    "test_output": "FAILED: expect 15,in fact 22",
    "test_result": "False"
  },
  "5103": {
    "question_id": "mbpp/510",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(num):\n    if num == 1:\n        return 1\n    min_sum = float('inf')\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            current_sum = i + find_Min_Sum(num // i)\n            if current_sum < min_sum:\n                min_sum = current_sum\n    return min_sum if min_sum != float('inf') else num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5104": {
    "question_id": "mbpp/510",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(num):\n    if num == 1:\n        return 1\n    min_sum = float('inf')\n    \n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            factor1 = i\n            factor2 = num // i\n            current_sum = find_Min_Sum(factor1) + find_Min_Sum(factor2)\n            if current_sum < min_sum:\n                min_sum = current_sum\n    \n    if min_sum == float('inf'):\n        return num\n    else:\n        return min_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5105": {
    "question_id": "mbpp/510",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(num):\n    if num == 1:\n        return 1\n    min_sum = float('inf')\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            factor1 = i\n            factor2 = num // i\n            current_sum = find_Min_Sum(factor1) + find_Min_Sum(factor2)\n            if current_sum < min_sum:\n                min_sum = current_sum\n    if min_sum == float('inf'):\n        return num\n    return min_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5106": {
    "question_id": "mbpp/510",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(num):\n    if num == 1:\n        return 1\n    min_sum = float('inf')\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            current_sum = i + find_Min_Sum(num // i)\n            if current_sum < min_sum:\n                min_sum = current_sum\n    return min_sum if min_sum != float('inf') else num + 1",
    "test_output": "FAILED: expect 7,in fact 8",
    "test_result": "False"
  },
  "5107": {
    "question_id": "mbpp/510",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(num):\n    if num == 1:\n        return 1\n    min_sum = float('inf')\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            current_sum = i + (num // i)\n            if current_sum < min_sum:\n                min_sum = current_sum\n    if min_sum == float('inf'):\n        return num + 1\n    return min_sum",
    "test_output": "FAILED: expect 15,in fact 22",
    "test_result": "False"
  },
  "5108": {
    "question_id": "mbpp/510",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(num):\n    if num == 1:\n        return 1\n    min_sum = float('inf')\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            factor1 = i\n            factor2 = num // i\n            current_sum = factor1 + factor2\n            if current_sum < min_sum:\n                min_sum = current_sum\n    return min_sum if min_sum != float('inf') else num + 1",
    "test_output": "FAILED: expect 15,in fact 22",
    "test_result": "False"
  },
  "5109": {
    "question_id": "mbpp/510",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(num):\n    if num == 1:\n        return 1\n    min_sum = float('inf')\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            current_sum = i + (num // i)\n            if current_sum < min_sum:\n                min_sum = current_sum\n    if min_sum == float('inf'):\n        return num + 1\n    return min_sum",
    "test_output": "FAILED: expect 15,in fact 22",
    "test_result": "False"
  },
  "5110": {
    "question_id": "mbpp/511",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_freq(t):\n    freq = {}\n    def helper(element):\n        if isinstance(element, tuple):\n            for e in element:\n                helper(e)\n        else:\n            freq[element] = freq.get(element, 0) + 1\n    helper(t)\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5111": {
    "question_id": "mbpp/511",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_freq(t):\n    freq = {}\n    def helper(element):\n        if isinstance(element, tuple):\n            for e in element:\n                helper(e)\n        else:\n            freq[element] = freq.get(element, 0) + 1\n    helper(t)\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5112": {
    "question_id": "mbpp/511",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_freq(t):\n    freq = {}\n    def helper(element):\n        if isinstance(element, tuple):\n            for e in element:\n                helper(e)\n        else:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    helper(t)\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5113": {
    "question_id": "mbpp/511",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_freq(t):\n    freq = {}\n    def helper(element):\n        if isinstance(element, tuple):\n            for item in element:\n                helper(item)\n        else:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    helper(t)\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5114": {
    "question_id": "mbpp/511",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_freq(t):\n    freq = {}\n    def helper(element):\n        if isinstance(element, tuple):\n            for e in element:\n                helper(e)\n        else:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    helper(t)\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5115": {
    "question_id": "mbpp/511",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_freq(t):\n    freq = {}\n    def helper(element):\n        if isinstance(element, tuple):\n            for e in element:\n                helper(e)\n        else:\n            freq[element] = freq.get(element, 0) + 1\n    helper(t)\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5116": {
    "question_id": "mbpp/511",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_freq(t):\n    freq = {}\n    def helper(element):\n        if isinstance(element, tuple):\n            for e in element:\n                helper(e)\n        else:\n            freq[element] = freq.get(element, 0) + 1\n    helper(t)\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5117": {
    "question_id": "mbpp/511",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_freq(t):\n    freq = {}\n    def helper(element):\n        if isinstance(element, tuple):\n            for e in element:\n                helper(e)\n        else:\n            freq[element] = freq.get(element, 0) + 1\n    helper(t)\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5118": {
    "question_id": "mbpp/511",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_freq(t):\n    freq = {}\n    def helper(nested):\n        for item in nested:\n            if isinstance(item, tuple):\n                helper(item)\n            else:\n                freq[item] = freq.get(item, 0) + 1\n    helper(t)\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5119": {
    "question_id": "mbpp/511",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_element_freq(t):\n    freq = {}\n    def helper(element):\n        if isinstance(element, tuple):\n            for item in element:\n                helper(item)\n        else:\n            freq[element] = freq.get(element, 0) + 1\n    helper(t)\n    return freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5120": {
    "question_id": "mbpp/512",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_str(tup, string):\n    result = []\n    for element in tup:\n        result.append(element)\n        result.append(string)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5121": {
    "question_id": "mbpp/512",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_str(tup, string):\n    result = []\n    for element in tup:\n        result.append(element)\n        result.append(string)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5122": {
    "question_id": "mbpp/512",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_str(tup, s):\n    result = []\n    for elem in tup:\n        result.append(elem)\n        result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5123": {
    "question_id": "mbpp/512",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_str(tup, string):\n    result = []\n    for element in tup:\n        result.append(element)\n        result.append(string)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5124": {
    "question_id": "mbpp/512",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_str(tup, string):\n    result = []\n    for element in tup:\n        result.append(element)\n        result.append(string)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5125": {
    "question_id": "mbpp/512",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_str(tup, string):\n    result = []\n    for element in tup:\n        result.append(element)\n        result.append(string)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5126": {
    "question_id": "mbpp/512",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_str(t, s):\n    result = []\n    for elem in t:\n        result.append(elem)\n        result.append(s)\n    if len(t) > 0:\n        result.pop()\n    return result",
    "test_output": "FAILED: expect [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF'],in fact [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9]",
    "test_result": "False"
  },
  "5127": {
    "question_id": "mbpp/512",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_str(t, s):\n    result = []\n    for elem in t:\n        result.append(elem)\n        result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5128": {
    "question_id": "mbpp/512",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_str(t, s):\n    result = []\n    for item in t:\n        result.append(item)\n        result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5129": {
    "question_id": "mbpp/512",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_str(t, s):\n    result = []\n    for elem in t:\n        result.append(elem)\n        result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5130": {
    "question_id": "mbpp/513",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_elements(t):\n    return sum(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5131": {
    "question_id": "mbpp/513",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_elements(t):\n    return sum(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5132": {
    "question_id": "mbpp/513",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_elements(tup):\n    return sum(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5133": {
    "question_id": "mbpp/513",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_elements(t):\n    return sum(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5134": {
    "question_id": "mbpp/513",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_elements(tuple_data):\n    return sum(tuple_data)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5135": {
    "question_id": "mbpp/513",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_elements(t):\n    return sum(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5136": {
    "question_id": "mbpp/513",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_elements(tup):\n    return sum(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5137": {
    "question_id": "mbpp/513",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_elements(t):\n    return sum(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5138": {
    "question_id": "mbpp/513",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_elements(tuple_data):\n    return sum(tuple_data)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5139": {
    "question_id": "mbpp/513",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_elements(t):\n    return sum(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5140": {
    "question_id": "mbpp/514",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    \n    dp = [False] * m\n    \n    for num in arr:\n        temp = [False] * m\n        for i in range(m):\n            if dp[i]:\n                temp[(i + num) % m] = True\n        temp[num % m] = True\n        for i in range(m):\n            if temp[i]:\n                dp[i] = True\n        if dp[0]:\n            return True\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5141": {
    "question_id": "mbpp/514",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    \n    dp = [False] * m\n    \n    for num in arr:\n        if dp[0]:\n            return True\n        temp = [False] * m\n        for i in range(m):\n            if dp[i]:\n                temp[(i + num) % m] = True\n        for i in range(m):\n            if temp[i]:\n                dp[i] = True\n        dp[num % m] = True\n    \n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5142": {
    "question_id": "mbpp/514",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    \n    dp = [False] * m\n    \n    for num in arr:\n        if dp[0]:\n            return True\n        temp = [False] * m\n        for j in range(m):\n            if dp[j]:\n                temp[(j + num) % m] = True\n        for j in range(m):\n            if temp[j]:\n                dp[j] = True\n        dp[num % m] = True\n    \n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5143": {
    "question_id": "mbpp/514",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    \n    dp = [False] * m\n    \n    for num in arr:\n        temp = [False] * m\n        for i in range(m):\n            if dp[i]:\n                temp[(i + num) % m] = True\n        temp[num % m] = True\n        for i in range(m):\n            if temp[i]:\n                dp[i] = True\n        if dp[0]:\n            return True\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5144": {
    "question_id": "mbpp/514",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    \n    dp = [False] * m\n    \n    for num in arr:\n        if dp[0]:\n            return True\n        temp = [False] * m\n        for i in range(m):\n            if dp[i]:\n                temp[(i + num) % m] = True\n        for i in range(m):\n            if temp[i]:\n                dp[i] = True\n        dp[num % m] = True\n    \n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5145": {
    "question_id": "mbpp/514",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    \n    dp = [False] * m\n    \n    for num in arr:\n        temp = [False] * m\n        for i in range(m):\n            if dp[i]:\n                temp[(i + num) % m] = True\n        temp[num % m] = True\n        for i in range(m):\n            if temp[i]:\n                dp[i] = True\n        if dp[0]:\n            return True\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5146": {
    "question_id": "mbpp/514",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    \n    dp = [False] * m\n    \n    for num in arr:\n        if dp[0]:\n            return True\n        temp = [False] * m\n        for i in range(m):\n            if dp[i]:\n                temp[(i + num) % m] = True\n        for i in range(m):\n            if temp[i]:\n                dp[i] = True\n        dp[num % m] = True\n    \n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5147": {
    "question_id": "mbpp/514",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    \n    dp = [False] * m\n    \n    for num in arr:\n        temp = [False] * m\n        for j in range(m):\n            if dp[j]:\n                new_remainder = (j + num) % m\n                temp[new_remainder] = True\n        remainder = num % m\n        temp[remainder] = True\n        \n        for j in range(m):\n            if temp[j]:\n                dp[j] = True\n        \n        if dp[0]:\n            return True\n    \n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5148": {
    "question_id": "mbpp/514",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    \n    dp = [False] * m\n    \n    for num in arr:\n        if dp[0]:\n            return True\n        temp = [False] * m\n        for j in range(m):\n            if dp[j]:\n                temp[(j + num) % m] = True\n        for j in range(m):\n            if temp[j]:\n                dp[j] = True\n        dp[num % m] = True\n    \n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5149": {
    "question_id": "mbpp/514",
    "model": "deepseek-v3-250324",
    "generation_code": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    \n    dp = [False] * m\n    \n    for num in arr:\n        temp = [False] * m\n        for j in range(m):\n            if dp[j]:\n                new_remainder = (j + num) % m\n                temp[new_remainder] = True\n        remainder = num % m\n        temp[remainder] = True\n        \n        for j in range(m):\n            if temp[j]:\n                dp[j] = True\n        \n        if dp[0]:\n            return True\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5150": {
    "question_id": "mbpp/515",
    "model": "deepseek-v3-250324",
    "generation_code": "def radix_sort(lst):\n    if not lst:\n        return []\n    \n    max_num = max(lst)\n    exp = 1\n    \n    while max_num // exp > 0:\n        counting_sort(lst, exp)\n        exp *= 10\n    \n    return lst\n\ndef counting_sort(lst, exp):\n    n = len(lst)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = lst[i] // exp\n        count[index % 10] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    \n    i = n - 1\n    while i >= 0:\n        index = lst[i] // exp\n        output[count[index % 10] - 1] = lst[i]\n        count[index % 10] -= 1\n        i -= 1\n    \n    for i in range(n):\n        lst[i] = output[i]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5151": {
    "question_id": "mbpp/515",
    "model": "deepseek-v3-250324",
    "generation_code": "def radix_sort(arr):\n    if not arr:\n        return arr\n    \n    max_num = max(arr)\n    exp = 1\n    \n    while max_num // exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    \n    return arr\n\ndef counting_sort(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    \n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    \n    for i in range(n):\n        arr[i] = output[i]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5152": {
    "question_id": "mbpp/515",
    "model": "deepseek-v3-250324",
    "generation_code": "def radix_sort(arr):\n    if not arr:\n        return arr\n    \n    max_num = max(arr)\n    exp = 1\n    \n    while max_num // exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    \n    return arr\n\ndef counting_sort(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    \n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    \n    for i in range(n):\n        arr[i] = output[i]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5153": {
    "question_id": "mbpp/515",
    "model": "deepseek-v3-250324",
    "generation_code": "def radix_sort(arr):\n    if not arr:\n        return arr\n    \n    max_num = max(arr)\n    exp = 1\n    \n    while max_num // exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    \n    return arr\n\ndef counting_sort(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    \n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    \n    for i in range(n):\n        arr[i] = output[i]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5154": {
    "question_id": "mbpp/515",
    "model": "deepseek-v3-250324",
    "generation_code": "def radix_sort(arr):\n    if len(arr) == 0:\n        return arr\n    \n    max_num = max(arr)\n    exp = 1\n    \n    while max_num // exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    \n    return arr\n\ndef counting_sort(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    \n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    \n    for i in range(n):\n        arr[i] = output[i]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5155": {
    "question_id": "mbpp/515",
    "model": "deepseek-v3-250324",
    "generation_code": "def radix_sort(arr):\n    if not arr:\n        return arr\n    \n    max_num = max(arr)\n    exp = 1\n    \n    while max_num // exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    \n    return arr\n\ndef counting_sort(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = (arr[i] // exp) % 10\n        count[index] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    \n    i = n - 1\n    while i >= 0:\n        index = (arr[i] // exp) % 10\n        output[count[index] - 1] = arr[i]\n        count[index] -= 1\n        i -= 1\n    \n    for i in range(n):\n        arr[i] = output[i]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5156": {
    "question_id": "mbpp/515",
    "model": "deepseek-v3-250324",
    "generation_code": "def radix_sort(arr):\n    if not arr:\n        return arr\n    \n    max_num = max(arr)\n    exp = 1\n    \n    while max_num // exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    \n    return arr\n\ndef counting_sort(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    \n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    \n    for i in range(n):\n        arr[i] = output[i]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5157": {
    "question_id": "mbpp/515",
    "model": "deepseek-v3-250324",
    "generation_code": "def radix_sort(lst):\n    if not lst:\n        return []\n    \n    max_num = max(lst)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort(lst, exp)\n        exp *= 10\n    return lst\n\ndef counting_sort(lst, exp):\n    n = len(lst)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = lst[i] // exp\n        count[index % 10] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    \n    i = n - 1\n    while i >= 0:\n        index = lst[i] // exp\n        output[count[index % 10] - 1] = lst[i]\n        count[index % 10] -= 1\n        i -= 1\n    \n    for i in range(n):\n        lst[i] = output[i]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5158": {
    "question_id": "mbpp/515",
    "model": "deepseek-v3-250324",
    "generation_code": "def radix_sort(arr):\n    if not arr:\n        return arr\n    \n    max_num = max(arr)\n    exp = 1\n    \n    while max_num // exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    \n    return arr\n\ndef counting_sort(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    \n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    \n    for i in range(n):\n        arr[i] = output[i]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5159": {
    "question_id": "mbpp/515",
    "model": "deepseek-v3-250324",
    "generation_code": "def radix_sort(arr):\n    if not arr:\n        return arr\n    \n    max_num = max(arr)\n    exp = 1\n    \n    while max_num // exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    \n    return arr\n\ndef counting_sort(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    \n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    \n    for i in range(n):\n        arr[i] = output[i]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5160": {
    "question_id": "mbpp/516",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_pos(lst):\n    max_num = None\n    for num in lst:\n        if num > 0:\n            if max_num is None or num > max_num:\n                max_num = num\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5161": {
    "question_id": "mbpp/516",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_pos(lst):\n    max_num = None\n    for num in lst:\n        if num > 0:\n            if max_num is None or num > max_num:\n                max_num = num\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5162": {
    "question_id": "mbpp/516",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_pos(lst):\n    max_num = None\n    for num in lst:\n        if num > 0:\n            if max_num is None or num > max_num:\n                max_num = num\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5163": {
    "question_id": "mbpp/516",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_pos(lst):\n    max_num = None\n    for num in lst:\n        if num > 0:\n            if max_num is None or num > max_num:\n                max_num = num\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5164": {
    "question_id": "mbpp/516",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_pos(lst):\n    max_num = None\n    for num in lst:\n        if num > 0:\n            if max_num is None or num > max_num:\n                max_num = num\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5165": {
    "question_id": "mbpp/516",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_pos(lst):\n    max_num = None\n    for num in lst:\n        if num > 0:\n            if max_num is None or num > max_num:\n                max_num = num\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5166": {
    "question_id": "mbpp/516",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_pos(lst):\n    max_num = None\n    for num in lst:\n        if num > 0:\n            if max_num is None or num > max_num:\n                max_num = num\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5167": {
    "question_id": "mbpp/516",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_pos(lst):\n    max_num = None\n    for num in lst:\n        if num > 0:\n            if max_num is None or num > max_num:\n                max_num = num\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5168": {
    "question_id": "mbpp/516",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_pos(lst):\n    max_num = None\n    for num in lst:\n        if num > 0:\n            if max_num is None or num > max_num:\n                max_num = num\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5169": {
    "question_id": "mbpp/516",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_pos(lst):\n    max_num = None\n    for num in lst:\n        if num > 0:\n            if max_num is None or num > max_num:\n                max_num = num\n    return max_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5170": {
    "question_id": "mbpp/517",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sqrt_root(num):\n    if num < 0:\n        return None\n    root = math.isqrt(num)\n    return root if root * root == num else None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5171": {
    "question_id": "mbpp/517",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sqrt_root(num):\n    if num < 0:\n        return None\n    root = math.isqrt(num)\n    return root if root * root == num else None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5172": {
    "question_id": "mbpp/517",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sqrt_root(num):\n    if num < 0:\n        return None\n    root = math.isqrt(num)\n    if root * root == num:\n        return root\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5173": {
    "question_id": "mbpp/517",
    "model": "deepseek-v3-250324",
    "generation_code": "def sqrt_root(num):\n    if num < 0:\n        return None\n    low = 0\n    high = num\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == num:\n            return mid\n        elif mid * mid < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5174": {
    "question_id": "mbpp/517",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sqrt_root(num):\n    if num < 0:\n        return None\n    root = math.isqrt(num)\n    return root if root * root == num else None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5175": {
    "question_id": "mbpp/517",
    "model": "deepseek-v3-250324",
    "generation_code": "def sqrt_root(num):\n    if num < 0:\n        return None\n    for i in range(num + 1):\n        if i * i == num:\n            return i\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5176": {
    "question_id": "mbpp/517",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sqrt_root(num):\n    if num < 0:\n        return None\n    root = math.isqrt(num)\n    if root * root == num:\n        return root\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5177": {
    "question_id": "mbpp/517",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sqrt_root(num):\n    if num < 0:\n        return None\n    root = math.isqrt(num)\n    if root * root == num:\n        return root\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5178": {
    "question_id": "mbpp/517",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sqrt_root(num):\n    if num < 0:\n        return None\n    root = math.isqrt(num)\n    if root * root == num:\n        return root\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5179": {
    "question_id": "mbpp/517",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sqrt_root(num):\n    if num < 0:\n        return None\n    root = math.isqrt(num)\n    if root * root == num:\n        return root\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5180": {
    "question_id": "mbpp/518",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_tetrahedron(side):\n    if side <= 0:\n        return 0.0\n    volume = (side ** 3) / (6 * math.sqrt(2))\n    return round(volume, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5181": {
    "question_id": "mbpp/518",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_tetrahedron(edge):\n    if edge <= 0:\n        return 0.0\n    volume = (edge ** 3) / (6 * math.sqrt(2))\n    return round(volume, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5182": {
    "question_id": "mbpp/518",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_tetrahedron(side):\n    if side <= 0:\n        return 0.0\n    volume = (side ** 3) / (6 * math.sqrt(2))\n    return round(volume, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5183": {
    "question_id": "mbpp/518",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_tetrahedron(edge):\n    if edge <= 0:\n        return 0\n    volume = (edge ** 3) / (6 * math.sqrt(2))\n    return round(volume, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5184": {
    "question_id": "mbpp/518",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_tetrahedron(side):\n    if side <= 0:\n        return 0.0\n    volume = (side ** 3) / (6 * math.sqrt(2))\n    return round(volume, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5185": {
    "question_id": "mbpp/518",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_tetrahedron(side):\n    if side <= 0:\n        return 0.0\n    volume = (side ** 3) / (6 * math.sqrt(2))\n    return round(volume, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5186": {
    "question_id": "mbpp/518",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_tetrahedron(side):\n    if side <= 0:\n        return 0.0\n    volume = (side ** 3) / (6 * math.sqrt(2))\n    return round(volume, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5187": {
    "question_id": "mbpp/518",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_tetrahedron(edge):\n    if edge <= 0:\n        return 0.0\n    volume = (edge ** 3) / (6 * math.sqrt(2))\n    return round(volume, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5188": {
    "question_id": "mbpp/518",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_tetrahedron(edge):\n    if edge <= 0:\n        return 0.0\n    volume = (edge ** 3) / (6 * math.sqrt(2))\n    return round(volume, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5189": {
    "question_id": "mbpp/518",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef volume_tetrahedron(side):\n    if side <= 0:\n        return 0.0\n    volume = (side ** 3) / (6 * math.sqrt(2))\n    return round(volume, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5190": {
    "question_id": "mbpp/519",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef get_lcm(arr):\n    if not arr:\n        return 0\n    lcm = arr[0]\n    for num in arr[1:]:\n        if num == 0:\n            return 0\n        lcm = lcm * num // math.gcd(lcm, num)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5191": {
    "question_id": "mbpp/519",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef get_lcm(arr):\n    if not arr:\n        return 0\n    lcm = arr[0]\n    for num in arr[1:]:\n        if num == 0:\n            return 0\n        lcm = lcm * num // math.gcd(lcm, num)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5192": {
    "question_id": "mbpp/519",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef get_lcm(arr):\n    if not arr:\n        return 0\n    lcm = arr[0]\n    for num in arr[1:]:\n        lcm = lcm * num // math.gcd(lcm, num)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5193": {
    "question_id": "mbpp/519",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef get_lcm(arr):\n    if not arr:\n        return 0\n    lcm = arr[0]\n    for num in arr[1:]:\n        lcm = lcm * num // math.gcd(lcm, num)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5194": {
    "question_id": "mbpp/519",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef get_lcm(arr):\n    if not arr:\n        return 0\n    lcm = arr[0]\n    for num in arr[1:]:\n        if num == 0:\n            return 0\n        lcm = lcm * num // math.gcd(lcm, num)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5195": {
    "question_id": "mbpp/519",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef get_lcm(arr):\n    if not arr:\n        return 0\n    lcm = arr[0]\n    for num in arr[1:]:\n        lcm = lcm * num // math.gcd(lcm, num)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5196": {
    "question_id": "mbpp/519",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef get_lcm(arr):\n    if not arr:\n        return 0\n    lcm = arr[0]\n    for num in arr[1:]:\n        lcm = lcm * num // math.gcd(lcm, num)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5197": {
    "question_id": "mbpp/519",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef get_lcm(arr):\n    if not arr:\n        return 0\n    lcm = arr[0]\n    for num in arr[1:]:\n        lcm = lcm * num // math.gcd(lcm, num)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5198": {
    "question_id": "mbpp/519",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef get_lcm(arr):\n    if not arr:\n        return 0\n    lcm = arr[0]\n    for num in arr[1:]:\n        if num == 0:\n            return 0\n        lcm = lcm * num // math.gcd(lcm, num)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5199": {
    "question_id": "mbpp/519",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef get_lcm(arr):\n    if not arr:\n        return 0\n    lcm = arr[0]\n    for num in arr[1:]:\n        if num == 0:\n            return 0\n        lcm = lcm * num // math.gcd(lcm, num)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5200": {
    "question_id": "mbpp/520",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a != b and b != c and a != c:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5201": {
    "question_id": "mbpp/520",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a != b and b != c and a != c:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5202": {
    "question_id": "mbpp/520",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    return a != b and b != c and a != c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5203": {
    "question_id": "mbpp/520",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    return a != b and b != c and a != c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5204": {
    "question_id": "mbpp/520",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    return a != b and b != c and a != c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5205": {
    "question_id": "mbpp/520",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return a != b and b != c and a != c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5206": {
    "question_id": "mbpp/520",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a != b and b != c and a != c:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5207": {
    "question_id": "mbpp/520",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    if a != b and b != c and a != c:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5208": {
    "question_id": "mbpp/520",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    return a != b and b != c and a != c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5209": {
    "question_id": "mbpp/520",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_isosceles(a, b, c):\n    return a != b and b != c and a != c",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5210": {
    "question_id": "mbpp/521",
    "model": "deepseek-v3-250324",
    "generation_code": "def lbs(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize LIS and LDS arrays\n    lis = [1] * n\n    lds = [1] * n\n    \n    # Compute LIS values from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    \n    # Compute LDS values from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    \n    # Find the maximum value of (lis[i] + lds[i] - 1)\n    max_len = 0\n    for i in range(n):\n        if lis[i] + lds[i] - 1 > max_len:\n            max_len = lis[i] + lds[i] - 1\n    \n    return max_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5211": {
    "question_id": "mbpp/521",
    "model": "deepseek-v3-250324",
    "generation_code": "def lbs(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize LIS and LDS arrays\n    lis = [1] * n\n    lds = [1] * n\n    \n    # Compute LIS values from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    \n    # Compute LDS values from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    \n    # Find the maximum value of (lis[i] + lds[i] - 1)\n    max_length = 0\n    for i in range(n):\n        if lis[i] + lds[i] - 1 > max_length:\n            max_length = lis[i] + lds[i] - 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5212": {
    "question_id": "mbpp/521",
    "model": "deepseek-v3-250324",
    "generation_code": "def lbs(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize LIS and LDS arrays\n    lis = [1] * n\n    lds = [1] * n\n    \n    # Compute LIS values from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    \n    # Compute LDS values from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    \n    # Find the maximum value of (lis[i] + lds[i] - 1)\n    max_len = 0\n    for i in range(n):\n        if lis[i] + lds[i] - 1 > max_len:\n            max_len = lis[i] + lds[i] - 1\n    \n    return max_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5213": {
    "question_id": "mbpp/521",
    "model": "deepseek-v3-250324",
    "generation_code": "def lbs(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize LIS and LDS arrays\n    lis = [1] * n\n    lds = [1] * n\n    \n    # Compute LIS values from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    \n    # Compute LDS values from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    \n    # Find the maximum value of lis[i] + lds[i] - 1\n    max_len = 0\n    for i in range(n):\n        if lis[i] + lds[i] - 1 > max_len:\n            max_len = lis[i] + lds[i] - 1\n    \n    return max_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5214": {
    "question_id": "mbpp/521",
    "model": "deepseek-v3-250324",
    "generation_code": "def lbs(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize LIS and LDS arrays\n    lis = [1] * n\n    lds = [1] * n\n    \n    # Compute LIS values from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    \n    # Compute LDS values from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    \n    # Find the maximum value of (lis[i] + lds[i] - 1)\n    max_len = 0\n    for i in range(n):\n        if lis[i] + lds[i] - 1 > max_len:\n            max_len = lis[i] + lds[i] - 1\n    \n    return max_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5215": {
    "question_id": "mbpp/521",
    "model": "deepseek-v3-250324",
    "generation_code": "def lbs(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize LIS and LDS arrays\n    lis = [1] * n\n    lds = [1] * n\n    \n    # Compute LIS values from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    \n    # Compute LDS values from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    \n    # Find the maximum value of (lis[i] + lds[i] - 1)\n    max_length = 0\n    for i in range(n):\n        if lis[i] + lds[i] - 1 > max_length:\n            max_length = lis[i] + lds[i] - 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5216": {
    "question_id": "mbpp/521",
    "model": "deepseek-v3-250324",
    "generation_code": "def lbs(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize LIS and LDS arrays\n    lis = [1] * n\n    lds = [1] * n\n    \n    # Compute LIS values from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    \n    # Compute LDS values from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    \n    # Find the maximum value of (lis[i] + lds[i] - 1)\n    max_length = 0\n    for i in range(n):\n        if lis[i] + lds[i] - 1 > max_length:\n            max_length = lis[i] + lds[i] - 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5217": {
    "question_id": "mbpp/521",
    "model": "deepseek-v3-250324",
    "generation_code": "def lbs(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize LIS and LDS arrays\n    lis = [1] * n\n    lds = [1] * n\n    \n    # Compute LIS values from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    \n    # Compute LDS values from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    \n    # Find the maximum value of (lis[i] + lds[i] - 1)\n    max_length = 0\n    for i in range(n):\n        if lis[i] + lds[i] - 1 > max_length:\n            max_length = lis[i] + lds[i] - 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5218": {
    "question_id": "mbpp/521",
    "model": "deepseek-v3-250324",
    "generation_code": "def lbs(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize LIS and LDS arrays\n    lis = [1] * n\n    lds = [1] * n\n    \n    # Compute LIS values from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    \n    # Compute LDS values from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    \n    # Find the maximum value of (lis[i] + lds[i] - 1)\n    max_len = 0\n    for i in range(n):\n        if lis[i] + lds[i] - 1 > max_len:\n            max_len = lis[i] + lds[i] - 1\n    \n    return max_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5219": {
    "question_id": "mbpp/521",
    "model": "deepseek-v3-250324",
    "generation_code": "def lbs(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize LIS and LDS arrays\n    lis = [1] * n\n    lds = [1] * n\n    \n    # Compute LIS from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    \n    # Compute LDS from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    \n    # Find the maximum value of (lis[i] + lds[i] - 1)\n    max_len = 0\n    for i in range(n):\n        if lis[i] + lds[i] - 1 > max_len:\n            max_len = lis[i] + lds[i] - 1\n    \n    return max_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5220": {
    "question_id": "mbpp/522",
    "model": "deepseek-v3-250324",
    "generation_code": "check_string = lambda s: [\n    'String must have 1 upper case character.' if not any(c.isupper() for c in s) else None,\n    'String must have 1 lower case character.' if not any(c.islower() for c in s) else None,\n    'String must have 1 number.' if not any(c.isdigit() for c in s) else None,\n    'String length should be atleast 8.' if len(s) < 8 else None\n]",
    "test_output": "FAILED: expect ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.'],in fact ['String must have 1 upper case character.', None, 'String must have 1 number.', 'String length should be atleast 8.']",
    "test_result": "False"
  },
  "5221": {
    "question_id": "mbpp/522",
    "model": "deepseek-v3-250324",
    "generation_code": "check_string = lambda s: [\n    'String must have 1 upper case character.' if not any(c.isupper() for c in s) else None,\n    'String must have 1 lower case character.' if not any(c.islower() for c in s) else None,\n    'String must have 1 number.' if not any(c.isdigit() for c in s) else None,\n    'String length should be atleast 8.' if len(s) < 8 else None\n]",
    "test_output": "FAILED: expect ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.'],in fact ['String must have 1 upper case character.', None, 'String must have 1 number.', 'String length should be atleast 8.']",
    "test_result": "False"
  },
  "5222": {
    "question_id": "mbpp/522",
    "model": "deepseek-v3-250324",
    "generation_code": "check_string = lambda s: [\n    'String must have 1 upper case character.' if not any(c.isupper() for c in s) else None,\n    'String must have 1 lower case character.' if not any(c.islower() for c in s) else None,\n    'String must have 1 number.' if not any(c.isdigit() for c in s) else None,\n    'String length should be atleast 8.' if len(s) < 8 else None\n]",
    "test_output": "FAILED: expect ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.'],in fact ['String must have 1 upper case character.', None, 'String must have 1 number.', 'String length should be atleast 8.']",
    "test_result": "False"
  },
  "5223": {
    "question_id": "mbpp/522",
    "model": "deepseek-v3-250324",
    "generation_code": "check_string = lambda s: [\n    'String must have 1 upper case character.' if not any(c.isupper() for c in s) else None,\n    'String must have 1 lower case character.' if not any(c.islower() for c in s) else None,\n    'String must have 1 number.' if not any(c.isdigit() for c in s) else None,\n    'String length should be atleast 8.' if len(s) < 8 else None\n]",
    "test_output": "FAILED: expect ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.'],in fact ['String must have 1 upper case character.', None, 'String must have 1 number.', 'String length should be atleast 8.']",
    "test_result": "False"
  },
  "5224": {
    "question_id": "mbpp/522",
    "model": "deepseek-v3-250324",
    "generation_code": "check_string = lambda s: [\n    'String must have 1 upper case character.' if not any(c.isupper() for c in s) else None,\n    'String must have 1 lower case character.' if not any(c.islower() for c in s) else None,\n    'String must have 1 number.' if not any(c.isdigit() for c in s) else None,\n    'String length should be atleast 8.' if len(s) < 8 else None\n]",
    "test_output": "FAILED: expect ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.'],in fact ['String must have 1 upper case character.', None, 'String must have 1 number.', 'String length should be atleast 8.']",
    "test_result": "False"
  },
  "5225": {
    "question_id": "mbpp/522",
    "model": "deepseek-v3-250324",
    "generation_code": "check_string = lambda s: [\n    'String must have 1 upper case character.' if not any(c.isupper() for c in s) else None,\n    'String must have 1 lower case character.' if not any(c.islower() for c in s) else None,\n    'String must have 1 number.' if not any(c.isdigit() for c in s) else None,\n    'String length should be atleast 8.' if len(s) < 8 else None\n]",
    "test_output": "FAILED: expect ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.'],in fact ['String must have 1 upper case character.', None, 'String must have 1 number.', 'String length should be atleast 8.']",
    "test_result": "False"
  },
  "5226": {
    "question_id": "mbpp/522",
    "model": "deepseek-v3-250324",
    "generation_code": "check_string = lambda s, min_length=8: [\n    'String must have 1 upper case character.' if not any(c.isupper() for c in s) else None,\n    'String must have 1 lower case character.' if not any(c.islower() for c in s) else None,\n    'String must have 1 number.' if not any(c.isdigit() for c in s) else None,\n    f'String length should be atleast {min_length}.' if len(s) < min_length else None\n]",
    "test_output": "FAILED: expect ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.'],in fact ['String must have 1 upper case character.', None, 'String must have 1 number.', 'String length should be atleast 8.']",
    "test_result": "False"
  },
  "5227": {
    "question_id": "mbpp/522",
    "model": "deepseek-v3-250324",
    "generation_code": "check_string = lambda s, min_length=8: [\n    'String must have 1 upper case character.' if not any(c.isupper() for c in s) else None,\n    'String must have 1 lower case character.' if not any(c.islower() for c in s) else None,\n    'String must have 1 number.' if not any(c.isdigit() for c in s) else None,\n    f'String length should be atleast {min_length}.' if len(s) < min_length else None\n] if not (any(c.isupper() for c in s) and any(c.islower() for c in s) and any(c.isdigit() for c in s) and len(s) >= min_length) else []",
    "test_output": "FAILED: expect ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.'],in fact ['String must have 1 upper case character.', None, 'String must have 1 number.', 'String length should be atleast 8.']",
    "test_result": "False"
  },
  "5228": {
    "question_id": "mbpp/522",
    "model": "deepseek-v3-250324",
    "generation_code": "check_string = lambda s: [\n    'String must have 1 upper case character.' if not any(c.isupper() for c in s) else None,\n    'String must have 1 lower case character.' if not any(c.islower() for c in s) else None,\n    'String must have 1 number.' if not any(c.isdigit() for c in s) else None,\n    'String length should be atleast 8.' if len(s) < 8 else None\n]",
    "test_output": "FAILED: expect ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.'],in fact ['String must have 1 upper case character.', None, 'String must have 1 number.', 'String length should be atleast 8.']",
    "test_result": "False"
  },
  "5229": {
    "question_id": "mbpp/522",
    "model": "deepseek-v3-250324",
    "generation_code": "check_string = lambda s: [\n    'String must have 1 upper case character.' if not any(c.isupper() for c in s) else None,\n    'String must have 1 lower case character.' if not any(c.islower() for c in s) else None,\n    'String must have 1 number.' if not any(c.isdigit() for c in s) else None,\n    'String length should be atleast 8.' if len(s) < 8 else None\n]",
    "test_output": "FAILED: expect ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.'],in fact ['String must have 1 upper case character.', None, 'String must have 1 number.', 'String length should be atleast 8.']",
    "test_result": "False"
  },
  "5230": {
    "question_id": "mbpp/523",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subsequence(arr, n):\n    if n == 0:\n        return 0\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5231": {
    "question_id": "mbpp/523",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subsequence(arr, n):\n    if n == 0:\n        return 0\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5232": {
    "question_id": "mbpp/523",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subsequence(arr, n):\n    if n == 0:\n        return 0\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and dp[j] + arr[i] > dp[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5233": {
    "question_id": "mbpp/523",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subsequence(arr, n):\n    if n == 0:\n        return 0\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5234": {
    "question_id": "mbpp/523",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subsequence(arr, n):\n    if n == 0:\n        return 0\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5235": {
    "question_id": "mbpp/523",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subsequence(arr, n):\n    if n == 0:\n        return 0\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5236": {
    "question_id": "mbpp/523",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subsequence(arr, n):\n    if n == 0:\n        return 0\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5237": {
    "question_id": "mbpp/523",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subsequence(arr, n):\n    if n == 0:\n        return 0\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5238": {
    "question_id": "mbpp/523",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subsequence(arr, n):\n    if n == 0:\n        return 0\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5239": {
    "question_id": "mbpp/523",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_increasing_subsequence(arr, n):\n    if n == 0:\n        return 0\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5240": {
    "question_id": "mbpp/524",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallel_lines(line1, line2):\n    if line1[0] * line2[1] == line1[1] * line2[0]:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5241": {
    "question_id": "mbpp/524",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallel_lines(line1, line2):\n    a1, b1, c1 = line1\n    a2, b2, c2 = line2\n    return a1 * b2 == a2 * b1",
    "test_output": "FAILED: ValueError: not enough values to unpack (expected 3, got 2)\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 2, in parallel_lines\nValueError: not enough values to unpack (expected 3, got 2)\n",
    "test_result": "False"
  },
  "5242": {
    "question_id": "mbpp/524",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallel_lines(line1, line2):\n    if line1[0] * line2[1] == line1[1] * line2[0]:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5243": {
    "question_id": "mbpp/524",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallel_lines(line1, line2):\n    a1, b1, _ = line1\n    a2, b2, _ = line2\n    return a1 * b2 == a2 * b1",
    "test_output": "FAILED: ValueError: not enough values to unpack (expected 3, got 2)\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 2, in parallel_lines\nValueError: not enough values to unpack (expected 3, got 2)\n",
    "test_result": "False"
  },
  "5244": {
    "question_id": "mbpp/524",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallel_lines(line1, line2):\n    return line1[0] * line2[1] == line1[1] * line2[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5245": {
    "question_id": "mbpp/524",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallel_lines(line1, line2):\n    if line1[0] * line2[1] == line1[1] * line2[0]:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5246": {
    "question_id": "mbpp/524",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallel_lines(line1, line2):\n    if line1[0] * line2[1] == line1[1] * line2[0]:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5247": {
    "question_id": "mbpp/524",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallel_lines(line1, line2):\n    a1, b1, _ = line1\n    a2, b2, _ = line2\n    return a1 * b2 == a2 * b1",
    "test_output": "FAILED: ValueError: not enough values to unpack (expected 3, got 2)\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 2, in parallel_lines\nValueError: not enough values to unpack (expected 3, got 2)\n",
    "test_result": "False"
  },
  "5248": {
    "question_id": "mbpp/524",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallel_lines(line1, line2):\n    a1, b1, c1 = line1\n    a2, b2, c2 = line2\n    return a1 * b2 == a2 * b1",
    "test_output": "FAILED: ValueError: not enough values to unpack (expected 3, got 2)\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 2, in parallel_lines\nValueError: not enough values to unpack (expected 3, got 2)\n",
    "test_result": "False"
  },
  "5249": {
    "question_id": "mbpp/524",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallel_lines(line1, line2):\n    if line1[0] * line2[1] == line1[1] * line2[0]:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5250": {
    "question_id": "mbpp/525",
    "model": "deepseek-v3-250324",
    "generation_code": "def capitalize_first_last_letters(s):\n    words = s.split()\n    processed_words = []\n    for word in words:\n        if len(word) == 0:\n            continue\n        first_char = word[0].upper()\n        if len(word) == 1:\n            processed_word = first_char\n        else:\n            last_char = word[-1].upper()\n            middle_part = word[1:-1]\n            processed_word = first_char + middle_part + last_char\n        processed_words.append(processed_word)\n    return ' '.join(processed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5251": {
    "question_id": "mbpp/525",
    "model": "deepseek-v3-250324",
    "generation_code": "def capitalize_first_last_letters(string):\n    words = string.split()\n    processed_words = []\n    for word in words:\n        if len(word) == 0:\n            processed_words.append('')\n            continue\n        first_char = word[0].upper()\n        if len(word) == 1:\n            processed_word = first_char\n        else:\n            last_char = word[-1].upper()\n            middle = word[1:-1]\n            processed_word = first_char + middle + last_char\n        processed_words.append(processed_word)\n    return ' '.join(processed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5252": {
    "question_id": "mbpp/525",
    "model": "deepseek-v3-250324",
    "generation_code": "def capitalize_first_last_letters(s):\n    words = s.split()\n    processed_words = []\n    for word in words:\n        if len(word) == 0:\n            continue\n        elif len(word) == 1:\n            processed_word = word.upper()\n        else:\n            first_char = word[0].upper()\n            last_char = word[-1].upper()\n            middle_chars = word[1:-1]\n            processed_word = first_char + middle_chars + last_char\n        processed_words.append(processed_word)\n    return ' '.join(processed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5253": {
    "question_id": "mbpp/525",
    "model": "deepseek-v3-250324",
    "generation_code": "def capitalize_first_last_letters(s):\n    words = s.split()\n    processed_words = []\n    for word in words:\n        if len(word) == 0:\n            continue\n        elif len(word) == 1:\n            processed_word = word.upper()\n        else:\n            first_char = word[0].upper()\n            last_char = word[-1].upper()\n            middle_part = word[1:-1]\n            processed_word = first_char + middle_part + last_char\n        processed_words.append(processed_word)\n    return ' '.join(processed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5254": {
    "question_id": "mbpp/525",
    "model": "deepseek-v3-250324",
    "generation_code": "def capitalize_first_last_letters(s):\n    words = s.split()\n    processed_words = []\n    for word in words:\n        if len(word) == 0:\n            processed_words.append('')\n            continue\n        first_char = word[0].upper()\n        if len(word) == 1:\n            processed_word = first_char\n        else:\n            last_char = word[-1].upper()\n            middle_part = word[1:-1]\n            processed_word = first_char + middle_part + last_char\n        processed_words.append(processed_word)\n    return ' '.join(processed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5255": {
    "question_id": "mbpp/525",
    "model": "deepseek-v3-250324",
    "generation_code": "def capitalize_first_last_letters(s):\n    words = s.split()\n    processed_words = []\n    for word in words:\n        if len(word) == 0:\n            processed_words.append('')\n            continue\n        first_char = word[0].upper()\n        if len(word) == 1:\n            processed_words.append(first_char)\n            continue\n        last_char = word[-1].upper()\n        middle = word[1:-1]\n        processed_word = first_char + middle + last_char\n        processed_words.append(processed_word)\n    return ' '.join(processed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5256": {
    "question_id": "mbpp/525",
    "model": "deepseek-v3-250324",
    "generation_code": "def capitalize_first_last_letters(string):\n    words = string.split()\n    processed_words = []\n    for word in words:\n        if len(word) == 0:\n            processed_words.append('')\n            continue\n        first_char = word[0].upper()\n        if len(word) == 1:\n            processed_word = first_char\n        else:\n            last_char = word[-1].upper()\n            middle = word[1:-1]\n            processed_word = first_char + middle + last_char\n        processed_words.append(processed_word)\n    return ' '.join(processed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5257": {
    "question_id": "mbpp/525",
    "model": "deepseek-v3-250324",
    "generation_code": "def capitalize_first_last_letters(s):\n    words = s.split()\n    processed_words = []\n    for word in words:\n        if len(word) == 0:\n            continue\n        elif len(word) == 1:\n            processed_word = word.upper()\n        else:\n            first_char = word[0].upper()\n            last_char = word[-1].upper()\n            middle_chars = word[1:-1]\n            processed_word = first_char + middle_chars + last_char\n        processed_words.append(processed_word)\n    return ' '.join(processed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5258": {
    "question_id": "mbpp/525",
    "model": "deepseek-v3-250324",
    "generation_code": "def capitalize_first_last_letters(s):\n    words = s.split()\n    processed_words = []\n    for word in words:\n        if len(word) == 0:\n            continue\n        elif len(word) == 1:\n            processed_word = word.upper()\n        else:\n            first_char = word[0].upper()\n            last_char = word[-1].upper()\n            middle_chars = word[1:-1]\n            processed_word = first_char + middle_chars + last_char\n        processed_words.append(processed_word)\n    return ' '.join(processed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5259": {
    "question_id": "mbpp/525",
    "model": "deepseek-v3-250324",
    "generation_code": "def capitalize_first_last_letters(s):\n    words = s.split()\n    processed_words = []\n    for word in words:\n        if len(word) == 0:\n            continue\n        elif len(word) == 1:\n            processed_word = word.upper()\n        else:\n            first_char = word[0].upper()\n            last_char = word[-1].upper()\n            middle_part = word[1:-1]\n            processed_word = first_char + middle_part + last_char\n        processed_words.append(processed_word)\n    return ' '.join(processed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5260": {
    "question_id": "mbpp/526",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pairs_count(arr, n, sum_val):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum_val:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5261": {
    "question_id": "mbpp/526",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pairs_count(arr, n, sum_val):\n    count = 0\n    freq = {}\n    \n    for num in arr:\n        complement = sum_val - num\n        if complement in freq:\n            count += freq[complement]\n        freq[num] = freq.get(num, 0) + 1\n    \n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5262": {
    "question_id": "mbpp/526",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pairs_count(arr, n, sum_val):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum_val:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5263": {
    "question_id": "mbpp/526",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pairs_count(arr, n, sum_val):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum_val:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5264": {
    "question_id": "mbpp/526",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pairs_count(arr, n, sum_val):\n    count = 0\n    freq = {}\n    \n    for num in arr:\n        complement = sum_val - num\n        if complement in freq:\n            count += freq[complement]\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5265": {
    "question_id": "mbpp/526",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pairs_count(arr, n, sum_val):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum_val:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5266": {
    "question_id": "mbpp/526",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pairs_count(arr, n, sum_val):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum_val:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5267": {
    "question_id": "mbpp/526",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pairs_count(arr, n, sum_val):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum_val:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5268": {
    "question_id": "mbpp/526",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pairs_count(arr, n, sum_val):\n    count = 0\n    freq = {}\n    \n    for num in arr:\n        complement = sum_val - num\n        if complement in freq:\n            count += freq[complement]\n        freq[num] = freq.get(num, 0) + 1\n    \n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5269": {
    "question_id": "mbpp/526",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_pairs_count(arr, n, sum_val):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum_val:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5270": {
    "question_id": "mbpp/527",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_length(lst):\n    if not lst:\n        return (0, [])\n    min_len = min(len(sublist) for sublist in lst)\n    min_lists = [sublist for sublist in lst if len(sublist) == min_len]\n    return (min_len, min_lists[0] if min_lists else [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5271": {
    "question_id": "mbpp/527",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_length(lst):\n    if not lst:\n        return (0, [])\n    min_len = min(len(sublist) for sublist in lst)\n    min_sublists = [sublist for sublist in lst if len(sublist) == min_len]\n    return (min_len, min_sublists[0] if min_sublists else [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5272": {
    "question_id": "mbpp/527",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_length(lst):\n    if not lst:\n        return (0, [])\n    min_len = min(len(sublist) for sublist in lst)\n    min_sublists = [sublist for sublist in lst if len(sublist) == min_len]\n    return (min_len, min_sublists[0] if min_sublists else [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5273": {
    "question_id": "mbpp/527",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_length(lst):\n    if not lst:\n        return (0, [])\n    min_len = min(len(sublist) for sublist in lst)\n    min_sublists = [sublist for sublist in lst if len(sublist) == min_len]\n    return (min_len, min_sublists[0] if min_sublists else [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5274": {
    "question_id": "mbpp/527",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_length(lst):\n    if not lst:\n        return (0, [])\n    min_len = min(len(sublist) for sublist in lst)\n    min_sublists = [sublist for sublist in lst if len(sublist) == min_len]\n    return (min_len, min_sublists[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5275": {
    "question_id": "mbpp/527",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_length(lst):\n    if not lst:\n        return (0, [])\n    min_len = min(len(sublist) for sublist in lst)\n    min_sublists = [sublist for sublist in lst if len(sublist) == min_len]\n    return (min_len, min_sublists[0] if min_sublists else [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5276": {
    "question_id": "mbpp/527",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_length(lst):\n    if not lst:\n        return (0, [])\n    min_len = min(len(sublist) for sublist in lst)\n    min_sublists = [sublist for sublist in lst if len(sublist) == min_len]\n    return (min_len, min_sublists[0] if min_sublists else [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5277": {
    "question_id": "mbpp/527",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_length(lst):\n    if not lst:\n        return (0, [])\n    min_len = min(len(sublist) for sublist in lst)\n    min_sublists = [sublist for sublist in lst if len(sublist) == min_len]\n    return (min_len, min_sublists[0] if min_sublists else [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5278": {
    "question_id": "mbpp/527",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_length(lst):\n    if not lst:\n        return (0, [])\n    min_len = min(len(sublist) for sublist in lst)\n    min_sublists = [sublist for sublist in lst if len(sublist) == min_len]\n    return (min_len, min_sublists[0] if min_sublists else [])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5279": {
    "question_id": "mbpp/527",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_length(lst):\n    if not lst:\n        return (0, [])\n    min_len = min(len(sublist) for sublist in lst)\n    min_sublists = [sublist for sublist in lst if len(sublist) == min_len]\n    return (min_len, min_sublists[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5280": {
    "question_id": "mbpp/528",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            c = a + 2 * b\n            a, b = b, c\n        return b",
    "test_output": "FAILED: expect 31,in fact 53",
    "test_result": "False"
  },
  "5281": {
    "question_id": "mbpp/528",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + 2 * b\n    return b",
    "test_output": "FAILED: expect 31,in fact 53",
    "test_result": "False"
  },
  "5282": {
    "question_id": "mbpp/528",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            c = a + 2 * b\n            a, b = b, c\n        return b",
    "test_output": "FAILED: expect 31,in fact 53",
    "test_result": "False"
  },
  "5283": {
    "question_id": "mbpp/528",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            c = a + 2 * b\n            a, b = b, c\n        return b",
    "test_output": "FAILED: expect 31,in fact 53",
    "test_result": "False"
  },
  "5284": {
    "question_id": "mbpp/528",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * a + b\n        return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5285": {
    "question_id": "mbpp/528",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            c = a + 2 * b\n            a, b = b, c\n        return b",
    "test_output": "FAILED: expect 31,in fact 53",
    "test_result": "False"
  },
  "5286": {
    "question_id": "mbpp/528",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * a + b\n    return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5287": {
    "question_id": "mbpp/528",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * a + b\n        return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5288": {
    "question_id": "mbpp/528",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * a + b\n        return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5289": {
    "question_id": "mbpp/528",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * a + b\n        return b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5290": {
    "question_id": "mbpp/529",
    "model": "deepseek-v3-250324",
    "generation_code": "def negative_count(nums):\n    if not nums:\n        return 0.0\n    negative = sum(1 for num in nums if num < 0)\n    return round(negative / len(nums), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5291": {
    "question_id": "mbpp/529",
    "model": "deepseek-v3-250324",
    "generation_code": "def negative_count(nums):\n    if not nums:\n        return 0.0\n    negative = sum(1 for num in nums if num < 0)\n    return round(negative / len(nums), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5292": {
    "question_id": "mbpp/529",
    "model": "deepseek-v3-250324",
    "generation_code": "def negative_count(nums):\n    if not nums:\n        return 0.0\n    negative = sum(1 for num in nums if num < 0)\n    total = len(nums)\n    ratio = negative / total\n    return round(ratio, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5293": {
    "question_id": "mbpp/529",
    "model": "deepseek-v3-250324",
    "generation_code": "def negative_count(nums):\n    if not nums:\n        return 0.0\n    negative = sum(1 for num in nums if num < 0)\n    total = len(nums)\n    ratio = negative / total\n    return round(ratio, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5294": {
    "question_id": "mbpp/529",
    "model": "deepseek-v3-250324",
    "generation_code": "def negative_count(nums):\n    if not nums:\n        return 0.0\n    negative = sum(1 for num in nums if num < 0)\n    ratio = negative / len(nums)\n    return round(ratio, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5295": {
    "question_id": "mbpp/529",
    "model": "deepseek-v3-250324",
    "generation_code": "def negative_count(nums):\n    if not nums:\n        return 0.0\n    negative = sum(1 for num in nums if num < 0)\n    ratio = negative / len(nums)\n    return round(ratio, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5296": {
    "question_id": "mbpp/529",
    "model": "deepseek-v3-250324",
    "generation_code": "def negative_count(nums):\n    if not nums:\n        return 0.0\n    negative = sum(1 for num in nums if num < 0)\n    ratio = negative / len(nums)\n    return round(ratio, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5297": {
    "question_id": "mbpp/529",
    "model": "deepseek-v3-250324",
    "generation_code": "def negative_count(nums):\n    if not nums:\n        return 0.0\n    negative = sum(1 for num in nums if num < 0)\n    return round(negative / len(nums), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5298": {
    "question_id": "mbpp/529",
    "model": "deepseek-v3-250324",
    "generation_code": "def negative_count(nums):\n    if not nums:\n        return 0.0\n    negative = sum(1 for num in nums if num < 0)\n    return round(negative / len(nums), 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5299": {
    "question_id": "mbpp/529",
    "model": "deepseek-v3-250324",
    "generation_code": "def negative_count(nums):\n    if not nums:\n        return 0.0\n    negative = sum(1 for num in nums if num < 0)\n    ratio = negative / len(nums)\n    return round(ratio, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5300": {
    "question_id": "mbpp/530",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    \n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    \n    return dp[V] if dp[V] != float('inf') else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5301": {
    "question_id": "mbpp/530",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    \n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    \n    return dp[V] if dp[V] != float('inf') else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5302": {
    "question_id": "mbpp/530",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    \n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    \n    return dp[V] if dp[V] != float('inf') else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5303": {
    "question_id": "mbpp/530",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    \n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    \n    return dp[V] if dp[V] != float('inf') else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5304": {
    "question_id": "mbpp/530",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    \n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    \n    return dp[V] if dp[V] != float('inf') else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5305": {
    "question_id": "mbpp/530",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    \n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    \n    return dp[V] if dp[V] != float('inf') else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5306": {
    "question_id": "mbpp/530",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    \n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    \n    return dp[V] if dp[V] != float('inf') else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5307": {
    "question_id": "mbpp/530",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    \n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    \n    return dp[V] if dp[V] != float('inf') else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5308": {
    "question_id": "mbpp/530",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    \n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    \n    return dp[V] if dp[V] != float('inf') else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5309": {
    "question_id": "mbpp/530",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    \n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    \n    return dp[V] if dp[V] != float('inf') else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5310": {
    "question_id": "mbpp/531",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return sorted(str1) == sorted(str2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5311": {
    "question_id": "mbpp/531",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_permutation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return sorted(s1) == sorted(s2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5312": {
    "question_id": "mbpp/531",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return sorted(str1) == sorted(str2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5313": {
    "question_id": "mbpp/531",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return sorted(str1) == sorted(str2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5314": {
    "question_id": "mbpp/531",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return sorted(str1) == sorted(str2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5315": {
    "question_id": "mbpp/531",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_permutation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return sorted(s1) == sorted(s2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5316": {
    "question_id": "mbpp/531",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_permutation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return sorted(s1) == sorted(s2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5317": {
    "question_id": "mbpp/531",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return sorted(str1) == sorted(str2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5318": {
    "question_id": "mbpp/531",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return sorted(str1) == sorted(str2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5319": {
    "question_id": "mbpp/531",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return sorted(str1) == sorted(str2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5320": {
    "question_id": "mbpp/532",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_datatype(tup, data_type):\n    return [elem for elem in tup if not isinstance(elem, data_type)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5321": {
    "question_id": "mbpp/532",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_datatype(tup, data_type):\n    return [elem for elem in tup if not isinstance(elem, data_type)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5322": {
    "question_id": "mbpp/532",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_datatype(tup, data_type):\n    return [elem for elem in tup if not isinstance(elem, data_type)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5323": {
    "question_id": "mbpp/532",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_datatype(tup, data_type):\n    return [elem for elem in tup if not isinstance(elem, data_type)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5324": {
    "question_id": "mbpp/532",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_datatype(tup, data_type):\n    return [elem for elem in tup if not isinstance(elem, data_type)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5325": {
    "question_id": "mbpp/532",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_datatype(tup, data_type):\n    return [elem for elem in tup if not isinstance(elem, data_type)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5326": {
    "question_id": "mbpp/532",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_datatype(tup, data_type):\n    return [elem for elem in tup if not isinstance(elem, data_type)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5327": {
    "question_id": "mbpp/532",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_datatype(tup, data_type):\n    return [elem for elem in tup if not isinstance(elem, data_type)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5328": {
    "question_id": "mbpp/532",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_datatype(tup, data_type):\n    return [elem for elem in tup if not isinstance(elem, data_type)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5329": {
    "question_id": "mbpp/532",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_datatype(tup, data_type):\n    return [elem for elem in tup if not isinstance(elem, data_type)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5330": {
    "question_id": "mbpp/533",
    "model": "deepseek-v3-250324",
    "generation_code": "def search_literal(pattern, text):\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5331": {
    "question_id": "mbpp/533",
    "model": "deepseek-v3-250324",
    "generation_code": "def search_literal(pattern, text):\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5332": {
    "question_id": "mbpp/533",
    "model": "deepseek-v3-250324",
    "generation_code": "def search_literal(pattern, text):\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5333": {
    "question_id": "mbpp/533",
    "model": "deepseek-v3-250324",
    "generation_code": "def search_literal(pattern, text):\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5334": {
    "question_id": "mbpp/533",
    "model": "deepseek-v3-250324",
    "generation_code": "def search_literal(pattern, text):\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    return (start, start + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5335": {
    "question_id": "mbpp/533",
    "model": "deepseek-v3-250324",
    "generation_code": "def search_literal(pattern, text):\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5336": {
    "question_id": "mbpp/533",
    "model": "deepseek-v3-250324",
    "generation_code": "def search_literal(pattern, text):\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5337": {
    "question_id": "mbpp/533",
    "model": "deepseek-v3-250324",
    "generation_code": "def search_literal(pattern, text):\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5338": {
    "question_id": "mbpp/533",
    "model": "deepseek-v3-250324",
    "generation_code": "def search_literal(pattern, text):\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5339": {
    "question_id": "mbpp/533",
    "model": "deepseek-v3-250324",
    "generation_code": "def search_literal(pattern, text):\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5340": {
    "question_id": "mbpp/534",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef topbottom_surfacearea(radius):\n    return 2 * math.pi * radius ** 2",
    "test_output": "FAILED: expect 314.15000000000003,in fact 628.3185307179587",
    "test_result": "False"
  },
  "5341": {
    "question_id": "mbpp/534",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef topbottom_surfacearea(radius):\n    return 2 * math.pi * radius ** 2",
    "test_output": "FAILED: expect 314.15000000000003,in fact 628.3185307179587",
    "test_result": "False"
  },
  "5342": {
    "question_id": "mbpp/534",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef topbottom_surfacearea(radius):\n    return 2 * math.pi * radius ** 2",
    "test_output": "FAILED: expect 314.15000000000003,in fact 628.3185307179587",
    "test_result": "False"
  },
  "5343": {
    "question_id": "mbpp/534",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef topbottom_surfacearea(radius):\n    return 2 * math.pi * radius ** 2",
    "test_output": "FAILED: expect 314.15000000000003,in fact 628.3185307179587",
    "test_result": "False"
  },
  "5344": {
    "question_id": "mbpp/534",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef topbottom_surfacearea(radius):\n    return 2 * math.pi * radius ** 2",
    "test_output": "FAILED: expect 314.15000000000003,in fact 628.3185307179587",
    "test_result": "False"
  },
  "5345": {
    "question_id": "mbpp/534",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef topbottom_surfacearea(radius):\n    return 2 * math.pi * radius ** 2",
    "test_output": "FAILED: expect 314.15000000000003,in fact 628.3185307179587",
    "test_result": "False"
  },
  "5346": {
    "question_id": "mbpp/534",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef topbottom_surfacearea(radius):\n    return 2 * math.pi * radius ** 2",
    "test_output": "FAILED: expect 314.15000000000003,in fact 628.3185307179587",
    "test_result": "False"
  },
  "5347": {
    "question_id": "mbpp/534",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef topbottom_surfacearea(radius):\n    return 2 * math.pi * radius ** 2",
    "test_output": "FAILED: expect 314.15000000000003,in fact 628.3185307179587",
    "test_result": "False"
  },
  "5348": {
    "question_id": "mbpp/534",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef topbottom_surfacearea(radius):\n    return 2 * math.pi * radius ** 2",
    "test_output": "FAILED: expect 314.15000000000003,in fact 628.3185307179587",
    "test_result": "False"
  },
  "5349": {
    "question_id": "mbpp/534",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef topbottom_surfacearea(radius):\n    return 2 * math.pi * radius ** 2",
    "test_output": "FAILED: expect 314.15000000000003,in fact 628.3185307179587",
    "test_result": "False"
  },
  "5350": {
    "question_id": "mbpp/535",
    "model": "deepseek-v3-250324",
    "generation_code": "def nth_items(lst, n):\n    if n <= 0:\n        return []\n    return lst[::n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5351": {
    "question_id": "mbpp/535",
    "model": "deepseek-v3-250324",
    "generation_code": "def nth_items(lst, n):\n    if n <= 0:\n        return []\n    return lst[::n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5352": {
    "question_id": "mbpp/535",
    "model": "deepseek-v3-250324",
    "generation_code": "def nth_items(lst, n):\n    if n <= 0:\n        return []\n    return lst[::n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5353": {
    "question_id": "mbpp/535",
    "model": "deepseek-v3-250324",
    "generation_code": "def nth_items(lst, n):\n    if n <= 0:\n        return []\n    return lst[::n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5354": {
    "question_id": "mbpp/535",
    "model": "deepseek-v3-250324",
    "generation_code": "def nth_items(lst, n):\n    if n <= 0:\n        return []\n    return lst[::n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5355": {
    "question_id": "mbpp/535",
    "model": "deepseek-v3-250324",
    "generation_code": "def nth_items(lst, n):\n    if n <= 0:\n        return []\n    return lst[::n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5356": {
    "question_id": "mbpp/535",
    "model": "deepseek-v3-250324",
    "generation_code": "def nth_items(lst, n):\n    if n <= 0:\n        return []\n    return lst[::n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5357": {
    "question_id": "mbpp/535",
    "model": "deepseek-v3-250324",
    "generation_code": "def nth_items(lst, n):\n    if n <= 0:\n        return []\n    return lst[::n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5358": {
    "question_id": "mbpp/535",
    "model": "deepseek-v3-250324",
    "generation_code": "def nth_items(lst, n):\n    if n <= 0:\n        return []\n    return lst[::n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5359": {
    "question_id": "mbpp/535",
    "model": "deepseek-v3-250324",
    "generation_code": "def nth_items(lst, n):\n    if n <= 0:\n        return []\n    return lst[::n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5360": {
    "question_id": "mbpp/536",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "5361": {
    "question_id": "mbpp/536",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "5362": {
    "question_id": "mbpp/536",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "5363": {
    "question_id": "mbpp/536",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "5364": {
    "question_id": "mbpp/536",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "5365": {
    "question_id": "mbpp/536",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "5366": {
    "question_id": "mbpp/536",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "5367": {
    "question_id": "mbpp/536",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "5368": {
    "question_id": "mbpp/536",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "5369": {
    "question_id": "mbpp/536",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "5370": {
    "question_id": "mbpp/537",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_list_to_tuple(input_string):\n    return tuple(input_string)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "5371": {
    "question_id": "mbpp/537",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_list_to_tuple(input_string):\n    return tuple(input_string)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "5372": {
    "question_id": "mbpp/537",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_list_to_tuple(input_string):\n    return tuple(input_string)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "5373": {
    "question_id": "mbpp/537",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_list_to_tuple(input_string):\n    return tuple(input_string)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "5374": {
    "question_id": "mbpp/537",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_list_to_tuple(input_string):\n    return tuple(input_string)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "5375": {
    "question_id": "mbpp/537",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_list_to_tuple(input_string):\n    return tuple(input_string)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "5376": {
    "question_id": "mbpp/537",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_list_to_tuple(input_string):\n    return tuple(input_string)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "5377": {
    "question_id": "mbpp/537",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_list_to_tuple(input_string):\n    return tuple(input_string)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "5378": {
    "question_id": "mbpp/537",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_list_to_tuple(input_string):\n    return tuple(input_string)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "5379": {
    "question_id": "mbpp/537",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_list_to_tuple(input_string):\n    return tuple(input_string)",
    "test_output": "FAILED: expect ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'),in fact ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')",
    "test_result": "False"
  },
  "5380": {
    "question_id": "mbpp/538",
    "model": "deepseek-v3-250324",
    "generation_code": "def basesnum_coresspondingnum(bases, indices):\n    return list(map(lambda x, y: x ** y, bases, indices))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5381": {
    "question_id": "mbpp/538",
    "model": "deepseek-v3-250324",
    "generation_code": "def basesnum_coresspondingnum(bases, indices):\n    return list(map(lambda x, y: x ** y, bases, indices))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5382": {
    "question_id": "mbpp/538",
    "model": "deepseek-v3-250324",
    "generation_code": "def basesnum_coresspondingnum(bases, indices):\n    return list(map(lambda x, y: x ** y, bases, indices))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5383": {
    "question_id": "mbpp/538",
    "model": "deepseek-v3-250324",
    "generation_code": "def basesnum_coresspondingnum(bases, indices):\n    return list(map(lambda x, y: x ** y, bases, indices))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5384": {
    "question_id": "mbpp/538",
    "model": "deepseek-v3-250324",
    "generation_code": "def basesnum_coresspondingnum(bases, indices):\n    return list(map(lambda x, y: x ** y, bases, indices))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5385": {
    "question_id": "mbpp/538",
    "model": "deepseek-v3-250324",
    "generation_code": "def basesnum_coresspondingnum(bases, indices):\n    return list(map(lambda x, y: x ** y, bases, indices))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5386": {
    "question_id": "mbpp/538",
    "model": "deepseek-v3-250324",
    "generation_code": "def basesnum_coresspondingnum(bases, indices):\n    return list(map(lambda x, y: x ** y, bases, indices))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5387": {
    "question_id": "mbpp/538",
    "model": "deepseek-v3-250324",
    "generation_code": "def basesnum_coresspondingnum(bases, indices):\n    return list(map(lambda x, y: x ** y, bases, indices))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5388": {
    "question_id": "mbpp/538",
    "model": "deepseek-v3-250324",
    "generation_code": "def basesnum_coresspondingnum(bases, indices):\n    return list(map(lambda x, y: x ** y, bases, indices))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5389": {
    "question_id": "mbpp/538",
    "model": "deepseek-v3-250324",
    "generation_code": "def basesnum_coresspondingnum(bases, indices):\n    return list(map(lambda x, y: x ** y, bases, indices))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5390": {
    "question_id": "mbpp/539",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Diff(arr, n):\n    if n == 0:\n        return 0\n    \n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    if not frequency:\n        return 0\n    \n    max_freq = max(frequency.values())\n    min_freq = min(frequency.values())\n    \n    return max_freq - min_freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5391": {
    "question_id": "mbpp/539",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Diff(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    if not frequency:\n        return 0\n    max_freq = max(frequency.values())\n    min_freq = min(frequency.values())\n    return max_freq - min_freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5392": {
    "question_id": "mbpp/539",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Diff(arr, n):\n    if n == 0:\n        return 0\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    if not frequency:\n        return 0\n    max_freq = max(frequency.values())\n    min_freq = min(frequency.values())\n    return max_freq - min_freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5393": {
    "question_id": "mbpp/539",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Diff(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    if not frequency:\n        return 0\n    max_freq = max(frequency.values())\n    min_freq = min(frequency.values())\n    return max_freq - min_freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5394": {
    "question_id": "mbpp/539",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Diff(arr, n):\n    if not arr or n == 0:\n        return 0\n    \n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    if not frequency:\n        return 0\n    \n    max_freq = max(frequency.values())\n    min_freq = min(frequency.values())\n    \n    return max_freq - min_freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5395": {
    "question_id": "mbpp/539",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Diff(arr, n):\n    if n == 0:\n        return 0\n    \n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    if not frequency:\n        return 0\n    \n    max_freq = max(frequency.values())\n    min_freq = min(frequency.values())\n    \n    return max_freq - min_freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5396": {
    "question_id": "mbpp/539",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Diff(arr, n):\n    if n == 0:\n        return 0\n    \n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    if not frequency:\n        return 0\n    \n    max_freq = max(frequency.values())\n    min_freq = min(frequency.values())\n    \n    return max_freq - min_freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5397": {
    "question_id": "mbpp/539",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Diff(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    if not frequency:\n        return 0\n    max_freq = max(frequency.values())\n    min_freq = min(frequency.values())\n    return max_freq - min_freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5398": {
    "question_id": "mbpp/539",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Diff(arr, n):\n    if n == 0:\n        return 0\n    \n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    if not frequency:\n        return 0\n    \n    max_freq = max(frequency.values())\n    min_freq = min(frequency.values())\n    \n    return max_freq - min_freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5399": {
    "question_id": "mbpp/539",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Diff(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    if not frequency:\n        return 0\n    max_freq = max(frequency.values())\n    min_freq = min(frequency.values())\n    return max_freq - min_freq",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5400": {
    "question_id": "mbpp/540",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5401": {
    "question_id": "mbpp/540",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5402": {
    "question_id": "mbpp/540",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5403": {
    "question_id": "mbpp/540",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5404": {
    "question_id": "mbpp/540",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5405": {
    "question_id": "mbpp/540",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5406": {
    "question_id": "mbpp/540",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5407": {
    "question_id": "mbpp/540",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5408": {
    "question_id": "mbpp/540",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5409": {
    "question_id": "mbpp/540",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5410": {
    "question_id": "mbpp/541",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5411": {
    "question_id": "mbpp/541",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5412": {
    "question_id": "mbpp/541",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5413": {
    "question_id": "mbpp/541",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5414": {
    "question_id": "mbpp/541",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5415": {
    "question_id": "mbpp/541",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5416": {
    "question_id": "mbpp/541",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5417": {
    "question_id": "mbpp/541",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5418": {
    "question_id": "mbpp/541",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5419": {
    "question_id": "mbpp/541",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5420": {
    "question_id": "mbpp/542",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_digits(a, b):\n    sum_num = a + b\n    if sum_num == 0:\n        return 1\n    count = 0\n    sum_num = abs(sum_num)\n    while sum_num > 0:\n        sum_num = sum_num // 10\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5421": {
    "question_id": "mbpp/542",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_digits(a, b):\n    sum_num = a + b\n    if sum_num == 0:\n        return 1\n    count = 0\n    sum_num = abs(sum_num)\n    while sum_num > 0:\n        sum_num = sum_num // 10\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5422": {
    "question_id": "mbpp/542",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_digits(a, b):\n    sum_num = a + b\n    if sum_num == 0:\n        return 1\n    count = 0\n    sum_num = abs(sum_num)\n    while sum_num > 0:\n        sum_num = sum_num // 10\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5423": {
    "question_id": "mbpp/542",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_digits(a, b):\n    sum_num = a + b\n    if sum_num == 0:\n        return 1\n    count = 0\n    sum_num = abs(sum_num)\n    while sum_num > 0:\n        sum_num = sum_num // 10\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5424": {
    "question_id": "mbpp/542",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_digits(a, b):\n    sum_num = a + b\n    if sum_num == 0:\n        return 1\n    count = 0\n    sum_num = abs(sum_num)\n    while sum_num > 0:\n        sum_num = sum_num // 10\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5425": {
    "question_id": "mbpp/542",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_digits(a, b):\n    sum_num = a + b\n    if sum_num == 0:\n        return 1\n    count = 0\n    sum_num = abs(sum_num)\n    while sum_num > 0:\n        sum_num = sum_num // 10\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5426": {
    "question_id": "mbpp/542",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_digits(a, b):\n    sum_num = a + b\n    if sum_num == 0:\n        return 1\n    count = 0\n    sum_num = abs(sum_num)\n    while sum_num > 0:\n        sum_num = sum_num // 10\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5427": {
    "question_id": "mbpp/542",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_digits(a, b):\n    sum_num = a + b\n    if sum_num == 0:\n        return 1\n    count = 0\n    sum_num = abs(sum_num)\n    while sum_num > 0:\n        sum_num = sum_num // 10\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5428": {
    "question_id": "mbpp/542",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_digits(a, b):\n    sum_num = a + b\n    if sum_num == 0:\n        return 1\n    count = 0\n    sum_num = abs(sum_num)\n    while sum_num > 0:\n        sum_num = sum_num // 10\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5429": {
    "question_id": "mbpp/542",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_digits(a, b):\n    sum_num = a + b\n    if sum_num == 0:\n        return 1\n    count = 0\n    sum_num = abs(sum_num)\n    while sum_num > 0:\n        sum_num = sum_num // 10\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5430": {
    "question_id": "mbpp/543",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_tuple(tuple_list):\n    flattened = []\n    for t in tuple_list:\n        flattened.extend(t)\n    return ' '.join(flattened)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5431": {
    "question_id": "mbpp/543",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_tuple(tuple_list):\n    flattened = []\n    for t in tuple_list:\n        flattened.extend(t)\n    return ' '.join(flattened)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5432": {
    "question_id": "mbpp/543",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_tuple(tuple_list):\n    flattened = []\n    for t in tuple_list:\n        flattened.extend(t)\n    return ' '.join(flattened)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5433": {
    "question_id": "mbpp/543",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_tuple(tuple_list):\n    flattened = []\n    for t in tuple_list:\n        flattened.extend(t)\n    return ' '.join(flattened)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5434": {
    "question_id": "mbpp/543",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_tuple(tuple_list):\n    flattened = []\n    for t in tuple_list:\n        flattened.extend(t)\n    return ' '.join(flattened)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5435": {
    "question_id": "mbpp/543",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_tuple(tuple_list):\n    flattened = []\n    for t in tuple_list:\n        flattened.extend(t)\n    return ' '.join(flattened)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5436": {
    "question_id": "mbpp/543",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_tuple(tuple_list):\n    flattened = []\n    for t in tuple_list:\n        flattened.extend(t)\n    return ' '.join(flattened)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5437": {
    "question_id": "mbpp/543",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_tuple(tuple_list):\n    flattened = []\n    for t in tuple_list:\n        flattened.extend(t)\n    return ' '.join(flattened)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5438": {
    "question_id": "mbpp/543",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_tuple(tuple_list):\n    flattened = []\n    for t in tuple_list:\n        flattened.extend(t)\n    return ' '.join(flattened)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5439": {
    "question_id": "mbpp/543",
    "model": "deepseek-v3-250324",
    "generation_code": "def flatten_tuple(tuple_list):\n    flattened = []\n    for t in tuple_list:\n        flattened.extend(t)\n    return ' '.join(flattened)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5440": {
    "question_id": "mbpp/544",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_F_and_L_bits(n):\n    if n == 0:\n        return 1\n    bits = n.bit_length()\n    if bits == 0:\n        return 0\n    mask = (1 << (bits - 1)) | 1\n    return n ^ mask",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5441": {
    "question_id": "mbpp/544",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_F_and_L_bits(n):\n    if n == 0:\n        return 1\n    # Get the position of the highest set bit\n    num_bits = n.bit_length()\n    if num_bits == 0:\n        return 1\n    # Create masks for first and last bits\n    first_bit_mask = 1 << (num_bits - 1)\n    last_bit_mask = 1\n    # Toggle both bits\n    return n ^ (first_bit_mask | last_bit_mask)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5442": {
    "question_id": "mbpp/544",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_F_and_L_bits(number):\n    if number == 0:\n        return 1\n    bits = number.bit_length()\n    if bits == 0:\n        return 0\n    mask = (1 << (bits - 1)) | 1\n    return number ^ mask",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5443": {
    "question_id": "mbpp/544",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_F_and_L_bits(n):\n    if n == 0:\n        return 1\n    # Get the position of the highest set bit\n    num_bits = n.bit_length()\n    if num_bits == 0:\n        return 1\n    # Create masks for first and last bits\n    first_bit_mask = 1 << (num_bits - 1)\n    last_bit_mask = 1\n    # Toggle both bits\n    return n ^ (first_bit_mask | last_bit_mask)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5444": {
    "question_id": "mbpp/544",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_F_and_L_bits(n):\n    if n == 0:\n        return 1\n    first_bit = 1 << (n.bit_length() - 1)\n    last_bit = 1\n    return n ^ (first_bit | last_bit)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5445": {
    "question_id": "mbpp/544",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_F_and_L_bits(n):\n    if n == 0:\n        return 1\n    bits = n.bit_length()\n    if bits == 0:\n        return 0\n    first_bit_mask = 1 << (bits - 1)\n    last_bit_mask = 1\n    return n ^ (first_bit_mask | last_bit_mask)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5446": {
    "question_id": "mbpp/544",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_F_and_L_bits(n):\n    if n == 0:\n        return 1\n    bits = n.bit_length()\n    if bits == 0:\n        return 0\n    first_bit_mask = 1 << (bits - 1)\n    last_bit_mask = 1\n    return n ^ (first_bit_mask | last_bit_mask)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5447": {
    "question_id": "mbpp/544",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_F_and_L_bits(num):\n    if num == 0:\n        return 1\n    bits = num.bit_length()\n    if bits == 0:\n        return 0\n    mask = (1 << (bits - 1)) | 1\n    return num ^ mask",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5448": {
    "question_id": "mbpp/544",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_F_and_L_bits(n):\n    if n == 0:\n        return 1\n    # Get the position of the highest set bit\n    num_bits = n.bit_length()\n    if num_bits == 0:\n        return 1\n    # Create masks for first and last bits\n    first_bit_mask = 1 << (num_bits - 1)\n    last_bit_mask = 1\n    # Toggle both bits\n    return n ^ (first_bit_mask | last_bit_mask)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5449": {
    "question_id": "mbpp/544",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_F_and_L_bits(n):\n    if n == 0:\n        return 1\n    # Get the position of the highest set bit\n    num_bits = n.bit_length()\n    if num_bits == 0:\n        return 1\n    # Create masks for first and last bits\n    first_bit_mask = 1 << (num_bits - 1)\n    last_bit_mask = 1\n    # Toggle both bits\n    return n ^ (first_bit_mask | last_bit_mask)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5450": {
    "question_id": "mbpp/545",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_occurence_char(string, char):\n    for i in range(len(string)-1, -1, -1):\n        if string[i] == char:\n            return i\n    return -1",
    "test_output": "FAILED: expect 10,in fact 9",
    "test_result": "False"
  },
  "5451": {
    "question_id": "mbpp/545",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_occurence_char(string, char):\n    return string.rfind(char)",
    "test_output": "FAILED: expect 10,in fact 9",
    "test_result": "False"
  },
  "5452": {
    "question_id": "mbpp/545",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_occurence_char(string, char):\n    last_index = -1\n    for i in range(len(string)):\n        if string[i] == char:\n            last_index = i\n    return last_index if last_index != -1 else -1",
    "test_output": "FAILED: expect 10,in fact 9",
    "test_result": "False"
  },
  "5453": {
    "question_id": "mbpp/545",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_occurence_char(string, char):\n    last_index = -1\n    for i in range(len(string)):\n        if string[i] == char:\n            last_index = i\n    return last_index",
    "test_output": "FAILED: expect 10,in fact 9",
    "test_result": "False"
  },
  "5454": {
    "question_id": "mbpp/545",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_occurence_char(string, char):\n    last_index = -1\n    for i in range(len(string)):\n        if string[i] == char:\n            last_index = i\n    return last_index if last_index != -1 else -1",
    "test_output": "FAILED: expect 10,in fact 9",
    "test_result": "False"
  },
  "5455": {
    "question_id": "mbpp/545",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_occurence_char(string, char):\n    last_index = -1\n    for index, c in enumerate(string):\n        if c == char:\n            last_index = index\n    return last_index",
    "test_output": "FAILED: expect 10,in fact 9",
    "test_result": "False"
  },
  "5456": {
    "question_id": "mbpp/545",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_occurence_char(string, char):\n    last_index = -1\n    for index, c in enumerate(string):\n        if c == char:\n            last_index = index\n    return last_index",
    "test_output": "FAILED: expect 10,in fact 9",
    "test_result": "False"
  },
  "5457": {
    "question_id": "mbpp/545",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_occurence_char(string, char):\n    last_index = -1\n    for i in range(len(string)):\n        if string[i] == char:\n            last_index = i\n    return last_index",
    "test_output": "FAILED: expect 10,in fact 9",
    "test_result": "False"
  },
  "5458": {
    "question_id": "mbpp/545",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_occurence_char(string, char):\n    last_index = -1\n    for i in range(len(string)):\n        if string[i] == char:\n            last_index = i\n    return last_index",
    "test_output": "FAILED: expect 10,in fact 9",
    "test_result": "False"
  },
  "5459": {
    "question_id": "mbpp/545",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_occurence_char(string, char):\n    return string.rfind(char)",
    "test_output": "FAILED: expect 10,in fact 9",
    "test_result": "False"
  },
  "5460": {
    "question_id": "mbpp/546",
    "model": "deepseek-v3-250324",
    "generation_code": "def Total_Hamming_Distance(n):\n    total = 0\n    for i in range(n):\n        xor = i ^ (i + 1)\n        total += bin(xor).count('1')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5461": {
    "question_id": "mbpp/546",
    "model": "deepseek-v3-250324",
    "generation_code": "def Total_Hamming_Distance(n):\n    total = 0\n    for i in range(n):\n        xor = i ^ (i + 1)\n        total += bin(xor).count('1')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5462": {
    "question_id": "mbpp/546",
    "model": "deepseek-v3-250324",
    "generation_code": "def Total_Hamming_Distance(n):\n    total = 0\n    for i in range(n):\n        xor = i ^ (i + 1)\n        total += bin(xor).count('1')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5463": {
    "question_id": "mbpp/546",
    "model": "deepseek-v3-250324",
    "generation_code": "def Total_Hamming_Distance(n):\n    total = 0\n    for i in range(n):\n        xor = i ^ (i + 1)\n        total += bin(xor).count('1')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5464": {
    "question_id": "mbpp/546",
    "model": "deepseek-v3-250324",
    "generation_code": "def Total_Hamming_Distance(n):\n    total_distance = 0\n    for i in range(n):\n        xor = i ^ (i + 1)\n        distance = bin(xor).count('1')\n        total_distance += distance\n    return total_distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5465": {
    "question_id": "mbpp/546",
    "model": "deepseek-v3-250324",
    "generation_code": "def Total_Hamming_Distance(n):\n    total = 0\n    for i in range(n):\n        xor = i ^ (i + 1)\n        total += bin(xor).count('1')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5466": {
    "question_id": "mbpp/546",
    "model": "deepseek-v3-250324",
    "generation_code": "def Total_Hamming_Distance(n):\n    total = 0\n    for i in range(n):\n        xor = i ^ (i + 1)\n        total += bin(xor).count('1')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5467": {
    "question_id": "mbpp/546",
    "model": "deepseek-v3-250324",
    "generation_code": "def Total_Hamming_Distance(n):\n    total = 0\n    for i in range(n):\n        xor = i ^ (i + 1)\n        total += bin(xor).count('1')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5468": {
    "question_id": "mbpp/546",
    "model": "deepseek-v3-250324",
    "generation_code": "def Total_Hamming_Distance(n):\n    total = 0\n    for i in range(n):\n        xor = i ^ (i + 1)\n        total += bin(xor).count('1')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5469": {
    "question_id": "mbpp/546",
    "model": "deepseek-v3-250324",
    "generation_code": "def Total_Hamming_Distance(n):\n    total = 0\n    for i in range(n):\n        xor = i ^ (i + 1)\n        total += bin(xor).count('1')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5470": {
    "question_id": "mbpp/547",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    dp = [1] * len(sequence)\n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5471": {
    "question_id": "mbpp/547",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    dp = [1] * len(sequence)\n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5472": {
    "question_id": "mbpp/547",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    dp = [1] * len(sequence)\n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5473": {
    "question_id": "mbpp/547",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    n = len(sequence)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5474": {
    "question_id": "mbpp/547",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    dp = [1] * len(sequence)\n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5475": {
    "question_id": "mbpp/547",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    dp = [1] * len(sequence)\n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5476": {
    "question_id": "mbpp/547",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    dp = [1] * len(sequence)\n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5477": {
    "question_id": "mbpp/547",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    dp = [1] * len(sequence)\n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5478": {
    "question_id": "mbpp/547",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    dp = [1] * len(sequence)\n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5479": {
    "question_id": "mbpp/547",
    "model": "deepseek-v3-250324",
    "generation_code": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    dp = [1] * len(sequence)\n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5480": {
    "question_id": "mbpp/548",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(1, 2*n, 2):\n        total += i ** 5\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5481": {
    "question_id": "mbpp/548",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(1, 2*n, 2):\n        total += i ** 5\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5482": {
    "question_id": "mbpp/548",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(1, 2*n, 2):\n        total += i ** 5\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5483": {
    "question_id": "mbpp/548",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(1, 2*n, 2):\n        total += i ** 5\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5484": {
    "question_id": "mbpp/548",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(1, 2*n, 2):\n        total += i ** 5\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5485": {
    "question_id": "mbpp/548",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    sum_power = 0\n    for i in range(1, 2*n, 2):\n        sum_power += i ** 5\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5486": {
    "question_id": "mbpp/548",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(1, 2*n, 2):\n        total += i ** 5\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5487": {
    "question_id": "mbpp/548",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, 2 * n, 2):\n        total += i ** 5\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5488": {
    "question_id": "mbpp/548",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    sum_power = 0\n    for i in range(1, 2*n, 2):\n        sum_power += i ** 5\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5489": {
    "question_id": "mbpp/548",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    total = 0\n    for i in range(1, 2*n, 2):\n        total += i ** 5\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5490": {
    "question_id": "mbpp/549",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max(arr, low, high):\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    \n    if arr[low] > arr[mid]:\n        return find_Max(arr, low, mid - 1)\n    else:\n        return find_Max(arr, mid + 1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5491": {
    "question_id": "mbpp/549",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max(arr, low, high):\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if arr[mid] > arr[high]:\n        return find_Max(arr, low, mid)\n    else:\n        return find_Max(arr, mid + 1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5492": {
    "question_id": "mbpp/549",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max(arr, low, high):\n    if high == low:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    \n    if arr[low] > arr[mid]:\n        return find_Max(arr, low, mid - 1)\n    else:\n        return find_Max(arr, mid + 1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5493": {
    "question_id": "mbpp/549",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max(arr, low, high):\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    \n    if arr[low] > arr[mid]:\n        return find_Max(arr, low, mid - 1)\n    else:\n        return find_Max(arr, mid + 1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5494": {
    "question_id": "mbpp/549",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max(arr, low, high):\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    \n    if arr[low] > arr[mid]:\n        return find_Max(arr, low, mid)\n    else:\n        return find_Max(arr, mid + 1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5495": {
    "question_id": "mbpp/549",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max(arr, low, high):\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    \n    if arr[low] > arr[mid]:\n        return find_Max(arr, low, mid - 1)\n    else:\n        return find_Max(arr, mid + 1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5496": {
    "question_id": "mbpp/549",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max(arr, low, high):\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    \n    if arr[low] > arr[mid]:\n        return find_Max(arr, low, mid - 1)\n    else:\n        return find_Max(arr, mid + 1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5497": {
    "question_id": "mbpp/549",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max(arr, low, high):\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    \n    if arr[low] > arr[mid]:\n        return find_Max(arr, low, mid - 1)\n    else:\n        return find_Max(arr, mid + 1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5498": {
    "question_id": "mbpp/549",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max(arr, low, high):\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    \n    if arr[low] > arr[mid]:\n        return find_Max(arr, low, mid - 1)\n    else:\n        return find_Max(arr, mid + 1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5499": {
    "question_id": "mbpp/549",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Max(arr, low, high):\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    \n    if arr[low] > arr[mid]:\n        return find_Max(arr, low, mid - 1)\n    else:\n        return find_Max(arr, mid + 1, high)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5500": {
    "question_id": "mbpp/550",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_column(nested_list, column_index):\n    return [row[column_index] for row in nested_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5501": {
    "question_id": "mbpp/550",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_column(nested_list, column_index):\n    return [row[column_index] for row in nested_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5502": {
    "question_id": "mbpp/550",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_column(nested_list, column_index):\n    return [row[column_index] for row in nested_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5503": {
    "question_id": "mbpp/550",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_column(nested_list, column_index):\n    return [row[column_index] for row in nested_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5504": {
    "question_id": "mbpp/550",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_column(nested_list, column_index):\n    return [row[column_index] for row in nested_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5505": {
    "question_id": "mbpp/550",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_column(nested_list, column_index):\n    return [row[column_index] for row in nested_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5506": {
    "question_id": "mbpp/550",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_column(nested_list, column_index):\n    return [row[column_index] for row in nested_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5507": {
    "question_id": "mbpp/550",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_column(nested_list, column_index):\n    return [row[column_index] for row in nested_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5508": {
    "question_id": "mbpp/550",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_column(nested_list, column_index):\n    return [row[column_index] for row in nested_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5509": {
    "question_id": "mbpp/550",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_column(nested_list, column_index):\n    return [row[column_index] for row in nested_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5510": {
    "question_id": "mbpp/551",
    "model": "deepseek-v3-250324",
    "generation_code": "def Seq_Linear(sequence):\n    if len(sequence) < 2:\n        return \"Linear Sequence\"\n    \n    diff = sequence[1] - sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] - sequence[i-1] != diff:\n            return \"Non-Linear Sequence\"\n    \n    return \"Linear Sequence\"",
    "test_output": "FAILED: expect Non Linear Sequence,in fact Non-Linear Sequence",
    "test_result": "False"
  },
  "5511": {
    "question_id": "mbpp/551",
    "model": "deepseek-v3-250324",
    "generation_code": "def Seq_Linear(sequence):\n    if len(sequence) < 2:\n        return \"Not a Linear Sequence\"\n    \n    diff = sequence[1] - sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] - sequence[i-1] != diff:\n            return \"Not a Linear Sequence\"\n    \n    return \"Linear Sequence\"",
    "test_output": "FAILED: expect Non Linear Sequence,in fact Not a Linear Sequence",
    "test_result": "False"
  },
  "5512": {
    "question_id": "mbpp/551",
    "model": "deepseek-v3-250324",
    "generation_code": "def Seq_Linear(sequence):\n    if len(sequence) < 2:\n        return \"Linear Sequence\"\n    \n    diff = sequence[1] - sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] - sequence[i-1] != diff:\n            return \"Non-Linear Sequence\"\n    \n    return \"Linear Sequence\"",
    "test_output": "FAILED: expect Non Linear Sequence,in fact Non-Linear Sequence",
    "test_result": "False"
  },
  "5513": {
    "question_id": "mbpp/551",
    "model": "deepseek-v3-250324",
    "generation_code": "def Seq_Linear(sequence):\n    if len(sequence) < 2:\n        return \"Linear Sequence\"\n    \n    diff = sequence[1] - sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] - sequence[i-1] != diff:\n            return \"Non-Linear Sequence\"\n    \n    return \"Linear Sequence\"",
    "test_output": "FAILED: expect Non Linear Sequence,in fact Non-Linear Sequence",
    "test_result": "False"
  },
  "5514": {
    "question_id": "mbpp/551",
    "model": "deepseek-v3-250324",
    "generation_code": "def Seq_Linear(sequence):\n    if len(sequence) < 2:\n        return \"Linear Sequence\"\n    \n    diff = sequence[1] - sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] - sequence[i-1] != diff:\n            return \"Not a Linear Sequence\"\n    \n    return \"Linear Sequence\"",
    "test_output": "FAILED: expect Non Linear Sequence,in fact Not a Linear Sequence",
    "test_result": "False"
  },
  "5515": {
    "question_id": "mbpp/551",
    "model": "deepseek-v3-250324",
    "generation_code": "def Seq_Linear(sequence):\n    if len(sequence) < 2:\n        return \"Linear Sequence\"\n    \n    diff = sequence[1] - sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] - sequence[i-1] != diff:\n            return \"Non-Linear Sequence\"\n    \n    return \"Linear Sequence\"",
    "test_output": "FAILED: expect Non Linear Sequence,in fact Non-Linear Sequence",
    "test_result": "False"
  },
  "5516": {
    "question_id": "mbpp/551",
    "model": "deepseek-v3-250324",
    "generation_code": "def Seq_Linear(sequence):\n    if len(sequence) <= 2:\n        return \"Linear Sequence\"\n    \n    diff = sequence[1] - sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] - sequence[i-1] != diff:\n            return \"Non-Linear Sequence\"\n    \n    return \"Linear Sequence\"",
    "test_output": "FAILED: expect Non Linear Sequence,in fact Non-Linear Sequence",
    "test_result": "False"
  },
  "5517": {
    "question_id": "mbpp/551",
    "model": "deepseek-v3-250324",
    "generation_code": "def Seq_Linear(sequence):\n    if len(sequence) < 2:\n        return \"Linear Sequence\"\n    \n    diff = sequence[1] - sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] - sequence[i-1] != diff:\n            return \"Non-Linear Sequence\"\n    \n    return \"Linear Sequence\"",
    "test_output": "FAILED: expect Non Linear Sequence,in fact Non-Linear Sequence",
    "test_result": "False"
  },
  "5518": {
    "question_id": "mbpp/551",
    "model": "deepseek-v3-250324",
    "generation_code": "def Seq_Linear(sequence):\n    if len(sequence) < 2:\n        return \"Linear Sequence\"\n    \n    diff = sequence[1] - sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] - sequence[i-1] != diff:\n            return \"Non-Linear Sequence\"\n    \n    return \"Linear Sequence\"",
    "test_output": "FAILED: expect Non Linear Sequence,in fact Non-Linear Sequence",
    "test_result": "False"
  },
  "5519": {
    "question_id": "mbpp/551",
    "model": "deepseek-v3-250324",
    "generation_code": "def Seq_Linear(sequence):\n    if len(sequence) < 2:\n        return \"Linear Sequence\"\n    \n    diff = sequence[1] - sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] - sequence[i-1] != diff:\n            return \"Not a Linear Sequence\"\n    \n    return \"Linear Sequence\"",
    "test_output": "FAILED: expect Non Linear Sequence,in fact Not a Linear Sequence",
    "test_result": "False"
  },
  "5520": {
    "question_id": "mbpp/552",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_float(t):\n    if not t:\n        return 0.0\n    integer_part = str(t[0]) if len(t) > 0 else '0'\n    decimal_part = ''.join(str(num) for num in t[1:]) if len(t) > 1 else '0'\n    return float(f\"{integer_part}.{decimal_part}\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5521": {
    "question_id": "mbpp/552",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_float(t):\n    if not t:\n        return 0.0\n    integer_part = str(t[0]) if len(t) > 0 else '0'\n    decimal_part = ''.join(str(num) for num in t[1:]) if len(t) > 1 else '0'\n    return float(f\"{integer_part}.{decimal_part}\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5522": {
    "question_id": "mbpp/552",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_float(t):\n    if not t:\n        return 0.0\n    integer_part = str(t[0]) if len(t) > 0 else '0'\n    decimal_part = ''.join(str(num) for num in t[1:]) if len(t) > 1 else '0'\n    return float(f\"{integer_part}.{decimal_part}\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5523": {
    "question_id": "mbpp/552",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_float(t):\n    if not t:\n        return 0.0\n    integer_part = str(t[0]) if len(t) > 0 else '0'\n    decimal_part = ''.join(str(num) for num in t[1:]) if len(t) > 1 else '0'\n    return float(f\"{integer_part}.{decimal_part}\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5524": {
    "question_id": "mbpp/552",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_float(t):\n    if not t:\n        return 0.0\n    integer_part = str(t[0]) if len(t) > 0 else '0'\n    decimal_part = ''.join(str(num) for num in t[1:]) if len(t) > 1 else '0'\n    return float(f\"{integer_part}.{decimal_part}\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5525": {
    "question_id": "mbpp/552",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_float(t):\n    if not t:\n        return 0.0\n    integer_part = str(t[0]) if len(t) > 0 else '0'\n    decimal_part = ''.join(str(num) for num in t[1:]) if len(t) > 1 else '0'\n    return float(f\"{integer_part}.{decimal_part}\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5526": {
    "question_id": "mbpp/552",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_float(t):\n    if not t:\n        return 0.0\n    integer_part = str(t[0]) if len(t) > 0 else '0'\n    decimal_part = ''.join(str(num) for num in t[1:]) if len(t) > 1 else '0'\n    return float(f\"{integer_part}.{decimal_part}\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5527": {
    "question_id": "mbpp/552",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_float(t):\n    if not t:\n        return 0.0\n    integer_part = str(t[0]) if len(t) > 0 else '0'\n    decimal_part = ''.join(str(num) for num in t[1:]) if len(t) > 1 else '0'\n    return float(f\"{integer_part}.{decimal_part}\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5528": {
    "question_id": "mbpp/552",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_float(t):\n    if not t:\n        return 0.0\n    integer_part = str(t[0]) if len(t) > 0 else '0'\n    decimal_part = ''.join(str(num) for num in t[1:]) if len(t) > 1 else '0'\n    return float(f\"{integer_part}.{decimal_part}\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5529": {
    "question_id": "mbpp/552",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_float(t):\n    if not t:\n        return 0.0\n    integer_part = str(t[0]) if len(t) > 0 else '0'\n    decimal_part = ''.join(str(num) for num in t[1:]) if len(t) > 1 else '0'\n    return float(f\"{integer_part}.{decimal_part}\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5530": {
    "question_id": "mbpp/553",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if isinstance(x, int) and x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5531": {
    "question_id": "mbpp/553",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if isinstance(x, int) and x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5532": {
    "question_id": "mbpp/553",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5533": {
    "question_id": "mbpp/553",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5534": {
    "question_id": "mbpp/553",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if isinstance(x, int) and x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5535": {
    "question_id": "mbpp/553",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5536": {
    "question_id": "mbpp/553",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5537": {
    "question_id": "mbpp/553",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5538": {
    "question_id": "mbpp/553",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5539": {
    "question_id": "mbpp/553",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if isinstance(x, int) and x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5540": {
    "question_id": "mbpp/554",
    "model": "deepseek-v3-250324",
    "generation_code": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    return sum_cubes - sum_n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5541": {
    "question_id": "mbpp/554",
    "model": "deepseek-v3-250324",
    "generation_code": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    return sum_cubes - sum_n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5542": {
    "question_id": "mbpp/554",
    "model": "deepseek-v3-250324",
    "generation_code": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    return sum_cubes - sum_n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5543": {
    "question_id": "mbpp/554",
    "model": "deepseek-v3-250324",
    "generation_code": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    return sum_cubes - sum_n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5544": {
    "question_id": "mbpp/554",
    "model": "deepseek-v3-250324",
    "generation_code": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    return sum_cubes - sum_n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5545": {
    "question_id": "mbpp/554",
    "model": "deepseek-v3-250324",
    "generation_code": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    return sum_cubes - sum_n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5546": {
    "question_id": "mbpp/554",
    "model": "deepseek-v3-250324",
    "generation_code": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    return sum_cubes - sum_n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5547": {
    "question_id": "mbpp/554",
    "model": "deepseek-v3-250324",
    "generation_code": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    return sum_cubes - sum_n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5548": {
    "question_id": "mbpp/554",
    "model": "deepseek-v3-250324",
    "generation_code": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    return sum_cubes - sum_n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5549": {
    "question_id": "mbpp/554",
    "model": "deepseek-v3-250324",
    "generation_code": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    return sum_cubes - sum_n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5550": {
    "question_id": "mbpp/555",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Odd_Pair(A,N):\n    count = 0\n    even = 0\n    odd = 0\n    for num in A:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    count = even * odd\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5551": {
    "question_id": "mbpp/555",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Odd_Pair(A,N):\n    count = 0\n    odd = 0\n    even = 0\n    for num in A:\n        if num % 2 == 1:\n            odd += 1\n        else:\n            even += 1\n    count = odd * even\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5552": {
    "question_id": "mbpp/555",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Odd_Pair(A,N):\n    count = 0\n    odd = 0\n    even = 0\n    for num in A:\n        if num % 2 == 1:\n            odd += 1\n        else:\n            even += 1\n    count = odd * even\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5553": {
    "question_id": "mbpp/555",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Odd_Pair(A,N):\n    count = 0\n    even = 0\n    odd = 0\n    for num in A:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    count = even * odd\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5554": {
    "question_id": "mbpp/555",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Odd_Pair(A,N):\n    count = 0\n    odd = 0\n    even = 0\n    for num in A:\n        if num % 2 == 1:\n            odd += 1\n        else:\n            even += 1\n    count = odd * even\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5555": {
    "question_id": "mbpp/555",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Odd_Pair(A,N):\n    count = 0\n    odd = 0\n    even = 0\n    for num in A:\n        if num % 2 == 1:\n            odd += 1\n        else:\n            even += 1\n    count = odd * even\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5556": {
    "question_id": "mbpp/555",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Odd_Pair(A,N):\n    count = 0\n    even = 0\n    odd = 0\n    for num in A:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    count = even * odd\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5557": {
    "question_id": "mbpp/555",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Odd_Pair(A,N):\n    count = 0\n    even = 0\n    odd = 0\n    for num in A:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    count = even * odd\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5558": {
    "question_id": "mbpp/555",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Odd_Pair(A, N):\n    count = 0\n    odd = 0\n    even = 0\n    for num in A:\n        if num % 2 == 1:\n            odd += 1\n        else:\n            even += 1\n    count = odd * even\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5559": {
    "question_id": "mbpp/555",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5560": {
    "question_id": "mbpp/556",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_string(input_string):\n    toggled = []\n    for char in input_string:\n        if char.islower():\n            toggled.append(char.upper())\n        else:\n            toggled.append(char.lower())\n    return ''.join(toggled)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5561": {
    "question_id": "mbpp/556",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_string(s):\n    toggled = []\n    for char in s:\n        if char.isupper():\n            toggled.append(char.lower())\n        else:\n            toggled.append(char.upper())\n    return ''.join(toggled)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5562": {
    "question_id": "mbpp/556",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_string(s):\n    toggled = []\n    for char in s:\n        if char.islower():\n            toggled.append(char.upper())\n        else:\n            toggled.append(char.lower())\n    return ''.join(toggled)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5563": {
    "question_id": "mbpp/556",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_string(s):\n    toggled = []\n    for char in s:\n        if char.isupper():\n            toggled.append(char.lower())\n        else:\n            toggled.append(char.upper())\n    return ''.join(toggled)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5564": {
    "question_id": "mbpp/556",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_string(s):\n    return s.swapcase()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5565": {
    "question_id": "mbpp/556",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_string(s):\n    toggled = []\n    for char in s:\n        if char.islower():\n            toggled.append(char.upper())\n        else:\n            toggled.append(char.lower())\n    return ''.join(toggled)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5566": {
    "question_id": "mbpp/556",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_string(s):\n    toggled = []\n    for char in s:\n        if char.isupper():\n            toggled.append(char.lower())\n        elif char.islower():\n            toggled.append(char.upper())\n        else:\n            toggled.append(char)\n    return ''.join(toggled)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5567": {
    "question_id": "mbpp/556",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_string(s):\n    toggled = []\n    for char in s:\n        if char.isupper():\n            toggled.append(char.lower())\n        else:\n            toggled.append(char.upper())\n    return ''.join(toggled)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5568": {
    "question_id": "mbpp/556",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_string(string):\n    toggled = []\n    for char in string:\n        if char.islower():\n            toggled.append(char.upper())\n        else:\n            toggled.append(char.lower())\n    return ''.join(toggled)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5569": {
    "question_id": "mbpp/556",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_string(s):\n    toggled = []\n    for char in s:\n        if char.islower():\n            toggled.append(char.upper())\n        else:\n            toggled.append(char.lower())\n    return ''.join(toggled)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5570": {
    "question_id": "mbpp/557",
    "model": "deepseek-v3-250324",
    "generation_code": "def digit_distance_nums(num1, num2):\n    str1 = str(abs(num1))\n    str2 = str(abs(num2))\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    distance = 0\n    for d1, d2 in zip(str1, str2):\n        distance += abs(int(d1) - int(d2))\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5571": {
    "question_id": "mbpp/557",
    "model": "deepseek-v3-250324",
    "generation_code": "def digit_distance_nums(num1, num2):\n    str1 = str(abs(num1))\n    str2 = str(abs(num2))\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    distance = 0\n    for d1, d2 in zip(str1, str2):\n        distance += abs(int(d1) - int(d2))\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5572": {
    "question_id": "mbpp/557",
    "model": "deepseek-v3-250324",
    "generation_code": "def digit_distance_nums(num1, num2):\n    str1 = str(abs(num1))\n    str2 = str(abs(num2))\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    distance = 0\n    for d1, d2 in zip(str1, str2):\n        distance += abs(int(d1) - int(d2))\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5573": {
    "question_id": "mbpp/557",
    "model": "deepseek-v3-250324",
    "generation_code": "def digit_distance_nums(a, b):\n    str_a = str(abs(a))\n    str_b = str(abs(b))\n    max_len = max(len(str_a), len(str_b))\n    str_a = str_a.zfill(max_len)\n    str_b = str_b.zfill(max_len)\n    distance = 0\n    for i in range(max_len):\n        digit_a = int(str_a[i])\n        digit_b = int(str_b[i])\n        distance += abs(digit_a - digit_b)\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5574": {
    "question_id": "mbpp/557",
    "model": "deepseek-v3-250324",
    "generation_code": "def digit_distance_nums(num1, num2):\n    str1 = str(abs(num1))\n    str2 = str(abs(num2))\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    distance = 0\n    for d1, d2 in zip(str1, str2):\n        distance += abs(int(d1) - int(d2))\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5575": {
    "question_id": "mbpp/557",
    "model": "deepseek-v3-250324",
    "generation_code": "def digit_distance_nums(num1, num2):\n    str1 = str(abs(num1))\n    str2 = str(abs(num2))\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    distance = 0\n    for d1, d2 in zip(str1, str2):\n        distance += abs(int(d1) - int(d2))\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5576": {
    "question_id": "mbpp/557",
    "model": "deepseek-v3-250324",
    "generation_code": "def digit_distance_nums(num1, num2):\n    str1 = str(abs(num1))\n    str2 = str(abs(num2))\n    \n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    \n    distance = 0\n    for d1, d2 in zip(str1, str2):\n        distance += abs(int(d1) - int(d2))\n    \n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5577": {
    "question_id": "mbpp/557",
    "model": "deepseek-v3-250324",
    "generation_code": "def digit_distance_nums(num1, num2):\n    str1 = str(abs(num1))\n    str2 = str(abs(num2))\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    distance = 0\n    for d1, d2 in zip(str1, str2):\n        distance += abs(int(d1) - int(d2))\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5578": {
    "question_id": "mbpp/557",
    "model": "deepseek-v3-250324",
    "generation_code": "def digit_distance_nums(num1, num2):\n    str1 = str(abs(num1))\n    str2 = str(abs(num2))\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    distance = 0\n    for d1, d2 in zip(str1, str2):\n        distance += abs(int(d1) - int(d2))\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5579": {
    "question_id": "mbpp/557",
    "model": "deepseek-v3-250324",
    "generation_code": "def digit_distance_nums(num1, num2):\n    str1 = str(abs(num1))\n    str2 = str(abs(num2))\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    distance = 0\n    for d1, d2 in zip(str1, str2):\n        distance += abs(int(d1) - int(d2))\n    return distance",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5580": {
    "question_id": "mbpp/558",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    if not arr or n == 0:\n        return 0\n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5581": {
    "question_id": "mbpp/558",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    if n == 0:\n        return 0\n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5582": {
    "question_id": "mbpp/558",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    if not arr or n == 0:\n        return 0\n    \n    max_sum = current_sum = arr[0]\n    \n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5583": {
    "question_id": "mbpp/558",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    if not arr or n == 0:\n        return 0\n    \n    max_sum = current_sum = arr[0]\n    \n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5584": {
    "question_id": "mbpp/558",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    if not arr or n == 0:\n        return 0\n    \n    max_sum = current_sum = arr[0]\n    \n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5585": {
    "question_id": "mbpp/558",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    if not arr or n == 0:\n        return 0\n    \n    max_sum = current_sum = arr[0]\n    \n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5586": {
    "question_id": "mbpp/558",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    if not arr or n == 0:\n        return 0\n    \n    max_sum = current_sum = arr[0]\n    \n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5587": {
    "question_id": "mbpp/558",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    if not arr or n == 0:\n        return 0\n    \n    max_sum = current_sum = arr[0]\n    \n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5588": {
    "question_id": "mbpp/558",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    if not arr or n == 0:\n        return 0\n    \n    max_sum = current_sum = arr[0]\n    \n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5589": {
    "question_id": "mbpp/558",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    if not arr or n == 0:\n        return 0\n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5590": {
    "question_id": "mbpp/559",
    "model": "deepseek-v3-250324",
    "generation_code": "def union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1).union(set(tuple2))))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5591": {
    "question_id": "mbpp/559",
    "model": "deepseek-v3-250324",
    "generation_code": "def union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1).union(set(tuple2))))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5592": {
    "question_id": "mbpp/559",
    "model": "deepseek-v3-250324",
    "generation_code": "def union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1).union(set(tuple2))))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5593": {
    "question_id": "mbpp/559",
    "model": "deepseek-v3-250324",
    "generation_code": "def union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1).union(set(tuple2))))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5594": {
    "question_id": "mbpp/559",
    "model": "deepseek-v3-250324",
    "generation_code": "def union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1).union(set(tuple2))))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5595": {
    "question_id": "mbpp/559",
    "model": "deepseek-v3-250324",
    "generation_code": "def union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1).union(set(tuple2))))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5596": {
    "question_id": "mbpp/559",
    "model": "deepseek-v3-250324",
    "generation_code": "def union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1).union(set(tuple2))))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5597": {
    "question_id": "mbpp/559",
    "model": "deepseek-v3-250324",
    "generation_code": "def union_elements(tuple1, tuple2):\n    combined = tuple1 + tuple2\n    unique_elements = tuple(sorted(set(combined)))\n    return unique_elements",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5598": {
    "question_id": "mbpp/559",
    "model": "deepseek-v3-250324",
    "generation_code": "def union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1).union(set(tuple2))))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5599": {
    "question_id": "mbpp/559",
    "model": "deepseek-v3-250324",
    "generation_code": "def union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1).union(set(tuple2))))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5600": {
    "question_id": "mbpp/560",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_elements(pairs):\n    element_dict = {}\n    # Initialize all elements with empty lists\n    for a, b in pairs:\n        if a not in element_dict:\n            element_dict[a] = []\n        if b not in element_dict:\n            element_dict[b] = []\n    \n    # Populate the dictionary with pair relationships\n    for a, b in pairs:\n        element_dict[a].append(b)\n    \n    return element_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5601": {
    "question_id": "mbpp/560",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_elements(pairs):\n    element_dict = {}\n    for a, b in pairs:\n        if a not in element_dict:\n            element_dict[a] = []\n        if b not in element_dict:\n            element_dict[b] = []\n    for a, b in pairs:\n        element_dict[a].append(b)\n    return element_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5602": {
    "question_id": "mbpp/560",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_elements(pairs):\n    element_dict = {}\n    # Initialize all elements with empty lists\n    for a, b in pairs:\n        if a not in element_dict:\n            element_dict[a] = []\n        if b not in element_dict:\n            element_dict[b] = []\n    \n    # Populate the dictionary with pairs\n    for a, b in pairs:\n        element_dict[a].append(b)\n    \n    return element_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5603": {
    "question_id": "mbpp/560",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_elements(pairs):\n    element_dict = {}\n    for a, b in pairs:\n        if a not in element_dict:\n            element_dict[a] = []\n        if b not in element_dict:\n            element_dict[b] = []\n    for a, b in pairs:\n        element_dict[a].append(b)\n    return element_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5604": {
    "question_id": "mbpp/560",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_elements(pairs):\n    element_dict = {}\n    for a, b in pairs:\n        if a not in element_dict:\n            element_dict[a] = []\n        if b not in element_dict:\n            element_dict[b] = []\n    \n    for a, b in pairs:\n        element_dict[a].append(b)\n    \n    return element_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5605": {
    "question_id": "mbpp/560",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_elements(pairs):\n    element_dict = {}\n    for a, b in pairs:\n        if a not in element_dict:\n            element_dict[a] = []\n        if b not in element_dict:\n            element_dict[b] = []\n    \n    for a, b in pairs:\n        element_dict[a].append(b)\n    \n    return element_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5606": {
    "question_id": "mbpp/560",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_elements(pairs):\n    element_dict = {}\n    for a, b in pairs:\n        if a not in element_dict:\n            element_dict[a] = []\n        if b not in element_dict:\n            element_dict[b] = []\n    \n    for a, b in pairs:\n        element_dict[a].append(b)\n    \n    return element_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5607": {
    "question_id": "mbpp/560",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_elements(pairs):\n    element_dict = {}\n    for a, b in pairs:\n        if a not in element_dict:\n            element_dict[a] = []\n        if b not in element_dict:\n            element_dict[b] = []\n    \n    for a, b in pairs:\n        element_dict[a].append(b)\n    \n    return element_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5608": {
    "question_id": "mbpp/560",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_elements(pairs):\n    element_dict = {}\n    for a, b in pairs:\n        if a not in element_dict:\n            element_dict[a] = []\n        if b not in element_dict:\n            element_dict[b] = []\n    \n    for a, b in pairs:\n        element_dict[a].append(b)\n    \n    return element_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5609": {
    "question_id": "mbpp/560",
    "model": "deepseek-v3-250324",
    "generation_code": "def assign_elements(pairs):\n    element_pairs = {}\n    # Initialize all elements with empty lists\n    for pair in pairs:\n        a, b = pair\n        if a not in element_pairs:\n            element_pairs[a] = []\n        if b not in element_pairs:\n            element_pairs[b] = []\n    \n    # Populate the pairs\n    for pair in pairs:\n        a, b = pair\n        element_pairs[a].append(b)\n    \n    return element_pairs",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5610": {
    "question_id": "mbpp/561",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max_Length(lst):\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5611": {
    "question_id": "mbpp/561",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max_Length(lst):\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5612": {
    "question_id": "mbpp/561",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max_Length(lst):\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5613": {
    "question_id": "mbpp/561",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max_Length(lst):\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5614": {
    "question_id": "mbpp/561",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max_Length(lst):\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5615": {
    "question_id": "mbpp/561",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max_Length(lst):\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5616": {
    "question_id": "mbpp/561",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max_Length(lst):\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5617": {
    "question_id": "mbpp/561",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max_Length(lst):\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5618": {
    "question_id": "mbpp/561",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max_Length(lst):\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5619": {
    "question_id": "mbpp/561",
    "model": "deepseek-v3-250324",
    "generation_code": "def Find_Max_Length(lst):\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5620": {
    "question_id": "mbpp/562",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_values(string):\n    return re.findall(r'\"(.*?)\"', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5621": {
    "question_id": "mbpp/562",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5622": {
    "question_id": "mbpp/562",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"([^\"]*)\"', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5623": {
    "question_id": "mbpp/562",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5624": {
    "question_id": "mbpp/562",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5625": {
    "question_id": "mbpp/562",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5626": {
    "question_id": "mbpp/562",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5627": {
    "question_id": "mbpp/562",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5628": {
    "question_id": "mbpp/562",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5629": {
    "question_id": "mbpp/562",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"([^\"]*)\"', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5630": {
    "question_id": "mbpp/563",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5631": {
    "question_id": "mbpp/563",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5632": {
    "question_id": "mbpp/563",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5633": {
    "question_id": "mbpp/563",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5634": {
    "question_id": "mbpp/563",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5635": {
    "question_id": "mbpp/563",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5636": {
    "question_id": "mbpp/563",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5637": {
    "question_id": "mbpp/563",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5638": {
    "question_id": "mbpp/563",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5639": {
    "question_id": "mbpp/563",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5640": {
    "question_id": "mbpp/564",
    "model": "deepseek-v3-250324",
    "generation_code": "def split(s):\n    return list(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5641": {
    "question_id": "mbpp/564",
    "model": "deepseek-v3-250324",
    "generation_code": "def split(s):\n    return list(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5642": {
    "question_id": "mbpp/564",
    "model": "deepseek-v3-250324",
    "generation_code": "def split(s):\n    return list(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5643": {
    "question_id": "mbpp/564",
    "model": "deepseek-v3-250324",
    "generation_code": "def split(s):\n    return list(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5644": {
    "question_id": "mbpp/564",
    "model": "deepseek-v3-250324",
    "generation_code": "def split(s):\n    return list(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5645": {
    "question_id": "mbpp/564",
    "model": "deepseek-v3-250324",
    "generation_code": "def split(s):\n    return list(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5646": {
    "question_id": "mbpp/564",
    "model": "deepseek-v3-250324",
    "generation_code": "def split(s):\n    return list(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5647": {
    "question_id": "mbpp/564",
    "model": "deepseek-v3-250324",
    "generation_code": "def split(s):\n    return list(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5648": {
    "question_id": "mbpp/564",
    "model": "deepseek-v3-250324",
    "generation_code": "def split(s):\n    return list(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5649": {
    "question_id": "mbpp/564",
    "model": "deepseek-v3-250324",
    "generation_code": "def split(s):\n    return list(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5650": {
    "question_id": "mbpp/565",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5651": {
    "question_id": "mbpp/565",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5652": {
    "question_id": "mbpp/565",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5653": {
    "question_id": "mbpp/565",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5654": {
    "question_id": "mbpp/565",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5655": {
    "question_id": "mbpp/565",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5656": {
    "question_id": "mbpp/565",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5657": {
    "question_id": "mbpp/565",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5658": {
    "question_id": "mbpp/565",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5659": {
    "question_id": "mbpp/565",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5660": {
    "question_id": "mbpp/566",
    "model": "deepseek-v3-250324",
    "generation_code": "def issort_list(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5661": {
    "question_id": "mbpp/566",
    "model": "deepseek-v3-250324",
    "generation_code": "def issort_list(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5662": {
    "question_id": "mbpp/566",
    "model": "deepseek-v3-250324",
    "generation_code": "def issort_list(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5663": {
    "question_id": "mbpp/566",
    "model": "deepseek-v3-250324",
    "generation_code": "def issort_list(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5664": {
    "question_id": "mbpp/566",
    "model": "deepseek-v3-250324",
    "generation_code": "def issort_list(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5665": {
    "question_id": "mbpp/566",
    "model": "deepseek-v3-250324",
    "generation_code": "def issort_list(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5666": {
    "question_id": "mbpp/566",
    "model": "deepseek-v3-250324",
    "generation_code": "def issort_list(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5667": {
    "question_id": "mbpp/566",
    "model": "deepseek-v3-250324",
    "generation_code": "def issort_list(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5668": {
    "question_id": "mbpp/566",
    "model": "deepseek-v3-250324",
    "generation_code": "def issort_list(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5669": {
    "question_id": "mbpp/566",
    "model": "deepseek-v3-250324",
    "generation_code": "def issort_list(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5670": {
    "question_id": "mbpp/567",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5671": {
    "question_id": "mbpp/567",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5672": {
    "question_id": "mbpp/567",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5673": {
    "question_id": "mbpp/567",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5674": {
    "question_id": "mbpp/567",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5675": {
    "question_id": "mbpp/567",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5676": {
    "question_id": "mbpp/567",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5677": {
    "question_id": "mbpp/567",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5678": {
    "question_id": "mbpp/567",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5679": {
    "question_id": "mbpp/567",
    "model": "deepseek-v3-250324",
    "generation_code": "def empty_list(n):\n    return [{} for _ in range(n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5680": {
    "question_id": "mbpp/568",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5681": {
    "question_id": "mbpp/568",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5682": {
    "question_id": "mbpp/568",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5683": {
    "question_id": "mbpp/568",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5684": {
    "question_id": "mbpp/568",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5685": {
    "question_id": "mbpp/568",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5686": {
    "question_id": "mbpp/568",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5687": {
    "question_id": "mbpp/568",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5688": {
    "question_id": "mbpp/568",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5689": {
    "question_id": "mbpp/568",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5690": {
    "question_id": "mbpp/569",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(strings, chars_to_remove):\n    result = []\n    for s in strings:\n        words = s.split()\n        filtered_words = []\n        for word in words:\n            remove = False\n            for char in chars_to_remove:\n                if char in word:\n                    remove = True\n                    break\n            if not remove:\n                filtered_words.append(word)\n        result.append(' '.join(filtered_words))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5691": {
    "question_id": "mbpp/569",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(input_list, chars_to_remove):\n    result = []\n    for s in input_list:\n        words = s.split()\n        filtered_words = []\n        for word in words:\n            remove = False\n            for char in chars_to_remove:\n                if char in word:\n                    remove = True\n                    break\n            if not remove:\n                filtered_words.append(word)\n        result.append(' '.join(filtered_words))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5692": {
    "question_id": "mbpp/569",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(input_list, chars_to_remove):\n    result = []\n    for s in input_list:\n        words = s.split()\n        filtered_words = []\n        for word in words:\n            remove = False\n            for char in chars_to_remove:\n                if char in word:\n                    remove = True\n                    break\n            if not remove:\n                filtered_words.append(word)\n        result.append(' '.join(filtered_words))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5693": {
    "question_id": "mbpp/569",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(lst, chars):\n    result = []\n    for s in lst:\n        modified = s\n        for char in chars:\n            parts = modified.split(char)\n            modified = parts[0] if len(parts) > 0 else modified\n        result.append(modified.strip())\n    return result",
    "test_output": "FAILED: expect ['Red', '', 'Green', 'Orange', 'White'],in fact ['Red', 'Orange', 'Green', 'Orange', 'White']",
    "test_result": "False"
  },
  "5694": {
    "question_id": "mbpp/569",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(strings, chars_to_remove):\n    result = []\n    for s in strings:\n        for char in chars_to_remove:\n            if char in s:\n                s = s.replace(char, '')\n        result.append(s.strip())\n    return result",
    "test_output": "FAILED: expect ['Red', '', 'Green', 'Orange', 'White'],in fact ['Red', 'Orange', 'Green', 'Orange', 'White']",
    "test_result": "False"
  },
  "5695": {
    "question_id": "mbpp/569",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(strings, words_to_remove):\n    result = []\n    for s in strings:\n        modified = s\n        for word in words_to_remove:\n            modified = modified.replace(word, '')\n        result.append(modified.strip())\n    return result",
    "test_output": "FAILED: expect ['Red', '', 'Green', 'Orange', 'White'],in fact ['Red', 'Orange', 'Green', 'Orange', 'White']",
    "test_result": "False"
  },
  "5696": {
    "question_id": "mbpp/569",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(input_list, chars_to_remove):\n    result = []\n    for s in input_list:\n        for char in chars_to_remove:\n            s = s.replace(char, '')\n        result.append(s.strip())\n    return result",
    "test_output": "FAILED: expect ['Red', '', 'Green', 'Orange', 'White'],in fact ['Red', 'Orange', 'Green', 'Orange', 'White']",
    "test_result": "False"
  },
  "5697": {
    "question_id": "mbpp/569",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(strings, chars_to_remove):\n    result = []\n    for s in strings:\n        words = s.split()\n        filtered_words = []\n        for word in words:\n            remove = False\n            for char in chars_to_remove:\n                if char in word:\n                    remove = True\n                    break\n            if not remove:\n                filtered_words.append(word)\n        result.append(' '.join(filtered_words))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5698": {
    "question_id": "mbpp/569",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(input_list, chars_to_remove):\n    result = []\n    for s in input_list:\n        for char in chars_to_remove:\n            s = s.replace(char, '')\n        result.append(s.strip())\n    return result",
    "test_output": "FAILED: expect ['Red', '', 'Green', 'Orange', 'White'],in fact ['Red', 'Orange', 'Green', 'Orange', 'White']",
    "test_result": "False"
  },
  "5699": {
    "question_id": "mbpp/569",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_words(strings, chars_to_remove):\n    result = []\n    for s in strings:\n        words = s.split()\n        filtered_words = []\n        for word in words:\n            remove = False\n            for char in chars_to_remove:\n                if char in word:\n                    remove = True\n                    break\n            if not remove:\n                filtered_words.append(word)\n        result.append(' '.join(filtered_words))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5700": {
    "question_id": "mbpp/570",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_pair_diff_lessthan_K(arr, n, k):\n    arr.sort()\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        if arr[i] - arr[i-1] < k:\n            if i >= 2:\n                current = arr[i] + arr[i-1] + dp[i-2]\n            else:\n                current = arr[i] + arr[i-1]\n            if current > dp[i]:\n                dp[i] = current\n    return dp[n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5701": {
    "question_id": "mbpp/570",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_pair_diff_lessthan_K(arr, n, k):\n    arr.sort()\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        if arr[i] - arr[i-1] < k:\n            if i >= 2:\n                current_pair = arr[i] + arr[i-1] + dp[i-2]\n            else:\n                current_pair = arr[i] + arr[i-1]\n            if current_pair > dp[i]:\n                dp[i] = current_pair\n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5702": {
    "question_id": "mbpp/570",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_pair_diff_lessthan_K(arr, n, k):\n    arr.sort()\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        if arr[i] - arr[i-1] < k:\n            if i >= 2:\n                current_pair = arr[i] + arr[i-1] + dp[i-2]\n            else:\n                current_pair = arr[i] + arr[i-1]\n            if current_pair > dp[i]:\n                dp[i] = current_pair\n    return dp[n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5703": {
    "question_id": "mbpp/570",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_pair_diff_lessthan_K(arr, n, k):\n    arr.sort()\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        if arr[i] - arr[i-1] < k:\n            if i >= 2:\n                current_pair = arr[i] + arr[i-1] + dp[i-2]\n            else:\n                current_pair = arr[i] + arr[i-1]\n            if current_pair > dp[i]:\n                dp[i] = current_pair\n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5704": {
    "question_id": "mbpp/570",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_pair_diff_lessthan_K(arr, n, k):\n    arr.sort()\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        if arr[i] - arr[i-1] < k:\n            if i >= 2:\n                current_pair = arr[i] + arr[i-1] + dp[i-2]\n            else:\n                current_pair = arr[i] + arr[i-1]\n            if current_pair > dp[i]:\n                dp[i] = current_pair\n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5705": {
    "question_id": "mbpp/570",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_pair_diff_lessthan_K(arr, n, k):\n    arr.sort()\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        if arr[i] - arr[i-1] < k:\n            if i >= 2:\n                current_pair = arr[i] + arr[i-1]\n                dp[i] = max(dp[i], current_pair + dp[i-2])\n            else:\n                dp[i] = max(dp[i], arr[i] + arr[i-1])\n    \n    return dp[n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5706": {
    "question_id": "mbpp/570",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_pair_diff_lessthan_K(arr, n, k):\n    arr.sort()\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        if arr[i] - arr[i-1] < k:\n            if i >= 2:\n                current_pair = arr[i] + arr[i-1] + dp[i-2]\n            else:\n                current_pair = arr[i] + arr[i-1]\n            if current_pair > dp[i]:\n                dp[i] = current_pair\n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5707": {
    "question_id": "mbpp/570",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_pair_diff_lessthan_K(arr, n, k):\n    arr.sort()\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        if arr[i] - arr[i-1] < k:\n            if i >= 2:\n                current_sum = arr[i] + arr[i-1] + dp[i-2]\n            else:\n                current_sum = arr[i] + arr[i-1]\n            if current_sum > dp[i]:\n                dp[i] = current_sum\n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5708": {
    "question_id": "mbpp/570",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_pair_diff_lessthan_K(arr, n, k):\n    arr.sort()\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        if arr[i] - arr[i-1] < k:\n            if i >= 2:\n                current = arr[i] + arr[i-1] + dp[i-2]\n            else:\n                current = arr[i] + arr[i-1]\n            if current > dp[i]:\n                dp[i] = current\n    return dp[n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5709": {
    "question_id": "mbpp/570",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_pair_diff_lessthan_K(arr, n, k):\n    arr.sort()\n    dp = [0] * n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        if arr[i] - arr[i-1] < k:\n            if i >= 2:\n                current_pair = arr[i] + arr[i-1] + dp[i-2]\n            else:\n                current_pair = arr[i] + arr[i-1]\n            if current_pair > dp[i]:\n                dp[i] = current_pair\n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5710": {
    "question_id": "mbpp/571",
    "model": "deepseek-v3-250324",
    "generation_code": "def two_unique_nums(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return [num for num in nums if count[num] == 1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5711": {
    "question_id": "mbpp/571",
    "model": "deepseek-v3-250324",
    "generation_code": "def two_unique_nums(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    result = [num for num in nums if count[num] == 1]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5712": {
    "question_id": "mbpp/571",
    "model": "deepseek-v3-250324",
    "generation_code": "def two_unique_nums(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    result = [num for num in nums if count[num] == 1]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5713": {
    "question_id": "mbpp/571",
    "model": "deepseek-v3-250324",
    "generation_code": "def two_unique_nums(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    unique_nums = [num for num in nums if count[num] == 1]\n    return unique_nums",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5714": {
    "question_id": "mbpp/571",
    "model": "deepseek-v3-250324",
    "generation_code": "def two_unique_nums(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    result = [num for num in nums if count[num] == 1]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5715": {
    "question_id": "mbpp/571",
    "model": "deepseek-v3-250324",
    "generation_code": "def two_unique_nums(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return [num for num in nums if count[num] == 1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5716": {
    "question_id": "mbpp/571",
    "model": "deepseek-v3-250324",
    "generation_code": "def two_unique_nums(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    result = [num for num in nums if count[num] == 1]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5717": {
    "question_id": "mbpp/571",
    "model": "deepseek-v3-250324",
    "generation_code": "def two_unique_nums(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    result = [num for num in nums if count[num] == 1]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5718": {
    "question_id": "mbpp/571",
    "model": "deepseek-v3-250324",
    "generation_code": "def two_unique_nums(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return [num for num in nums if count[num] == 1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5719": {
    "question_id": "mbpp/571",
    "model": "deepseek-v3-250324",
    "generation_code": "def two_unique_nums(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    result = [num for num in nums if count[num] == 1]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5720": {
    "question_id": "mbpp/572",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_product(lst):\n    unique_numbers = list(set(lst))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5721": {
    "question_id": "mbpp/572",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_product(lst):\n    unique_numbers = list(set(lst))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5722": {
    "question_id": "mbpp/572",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_product(lst):\n    unique_numbers = list(set(lst))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5723": {
    "question_id": "mbpp/572",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_product(lst):\n    unique_numbers = list(set(lst))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5724": {
    "question_id": "mbpp/572",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_product(lst):\n    unique_numbers = list(set(lst))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5725": {
    "question_id": "mbpp/572",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_product(lst):\n    unique_numbers = list(set(lst))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5726": {
    "question_id": "mbpp/572",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_product(lst):\n    unique_numbers = []\n    seen = set()\n    for num in lst:\n        if num not in seen:\n            seen.add(num)\n            unique_numbers.append(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5727": {
    "question_id": "mbpp/572",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_product(lst):\n    unique_numbers = []\n    seen = set()\n    for num in lst:\n        if num not in seen:\n            seen.add(num)\n            unique_numbers.append(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5728": {
    "question_id": "mbpp/572",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_product(lst):\n    unique_numbers = list(set(lst))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5729": {
    "question_id": "mbpp/572",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_product(lst):\n    unique_numbers = list(set(lst))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5730": {
    "question_id": "mbpp/573",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return round(surface_area, 2)",
    "test_output": "FAILED: expect 942.45,in fact 942.48",
    "test_result": "False"
  },
  "5731": {
    "question_id": "mbpp/573",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return round(surface_area, 2)",
    "test_output": "FAILED: expect 942.45,in fact 942.48",
    "test_result": "False"
  },
  "5732": {
    "question_id": "mbpp/573",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return round(surface_area, 2)",
    "test_output": "FAILED: expect 942.45,in fact 942.48",
    "test_result": "False"
  },
  "5733": {
    "question_id": "mbpp/573",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return round(surface_area, 2)",
    "test_output": "FAILED: expect 942.45,in fact 942.48",
    "test_result": "False"
  },
  "5734": {
    "question_id": "mbpp/573",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return round(surface_area, 2)",
    "test_output": "FAILED: expect 942.45,in fact 942.48",
    "test_result": "False"
  },
  "5735": {
    "question_id": "mbpp/573",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cylinder(r, h):\n    if r <= 0 or h <= 0:\n        return 0\n    surface_area = 2 * math.pi * r * (r + h)\n    return round(surface_area, 2)",
    "test_output": "FAILED: expect 942.45,in fact 942.48",
    "test_result": "False"
  },
  "5736": {
    "question_id": "mbpp/573",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return round(surface_area, 2)",
    "test_output": "FAILED: expect 942.45,in fact 942.48",
    "test_result": "False"
  },
  "5737": {
    "question_id": "mbpp/573",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return round(surface_area, 2)",
    "test_output": "FAILED: expect 942.45,in fact 942.48",
    "test_result": "False"
  },
  "5738": {
    "question_id": "mbpp/573",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return round(surface_area, 2)",
    "test_output": "FAILED: expect 942.45,in fact 942.48",
    "test_result": "False"
  },
  "5739": {
    "question_id": "mbpp/573",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surfacearea_cylinder(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return round(surface_area, 2)",
    "test_output": "FAILED: expect 942.45,in fact 942.48",
    "test_result": "False"
  },
  "5740": {
    "question_id": "mbpp/574",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no(a, d, r, n):\n    count = 0\n    current = a\n    while True:\n        if current % d != r:\n            count += 1\n            if count == n:\n                return current\n        current += 1",
    "test_output": "FAILED: expect 5,in fact 15",
    "test_result": "False"
  },
  "5741": {
    "question_id": "mbpp/574",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no(a, d, r, n):\n    count = 0\n    current = a\n    while True:\n        if current % d != r:\n            count += 1\n            if count == n:\n                return current\n        current += 1",
    "test_output": "FAILED: expect 5,in fact 15",
    "test_result": "False"
  },
  "5742": {
    "question_id": "mbpp/574",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no(a, d, r, n):\n    count = 0\n    current = a\n    while True:\n        if current % d != 0:\n            count += 1\n            if count == n:\n                return current\n        current += r",
    "test_output": "FAILED: expect 5,in fact 16",
    "test_result": "False"
  },
  "5743": {
    "question_id": "mbpp/574",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no(a, d, r, n):\n    count = 0\n    current = a\n    while True:\n        if current % d != 0:\n            count += 1\n            if count == n:\n                return current\n        current += r",
    "test_output": "FAILED: expect 5,in fact 16",
    "test_result": "False"
  },
  "5744": {
    "question_id": "mbpp/574",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no(a, d, r, n):\n    count = 0\n    current = a\n    while True:\n        if current % d != 0:\n            count += 1\n            if count == n:\n                return current\n        current += r",
    "test_output": "FAILED: expect 5,in fact 16",
    "test_result": "False"
  },
  "5745": {
    "question_id": "mbpp/574",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no(a, d, r, n):\n    count = 0\n    current = a\n    while True:\n        if current % d != 0:\n            count += 1\n            if count == n:\n                return current\n        current += r",
    "test_output": "FAILED: expect 5,in fact 16",
    "test_result": "False"
  },
  "5746": {
    "question_id": "mbpp/574",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no(a, d, r, n):\n    count = 0\n    current = a\n    while True:\n        if current % d != 0:\n            count += 1\n            if count == n:\n                return current\n        current += r",
    "test_output": "FAILED: expect 5,in fact 16",
    "test_result": "False"
  },
  "5747": {
    "question_id": "mbpp/574",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no(a, d, r, n):\n    count = 0\n    current = a\n    while True:\n        if current % d != 0:\n            count += 1\n            if count == n:\n                return current\n        current += r",
    "test_output": "FAILED: expect 5,in fact 16",
    "test_result": "False"
  },
  "5748": {
    "question_id": "mbpp/574",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no(a, d, r, n):\n    count = 0\n    current = a\n    while True:\n        if current % d != 0:\n            count += 1\n            if count == n:\n                return current\n        current += r",
    "test_output": "FAILED: expect 5,in fact 16",
    "test_result": "False"
  },
  "5749": {
    "question_id": "mbpp/574",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_no(a, d, r, n):\n    count = 0\n    current = a\n    result = []\n    while len(result) < n:\n        if current % d != r:\n            result.append(current)\n        current += 1\n    return result[-1]",
    "test_output": "FAILED: expect 5,in fact 15",
    "test_result": "False"
  },
  "5750": {
    "question_id": "mbpp/575",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sub_Array(A, B, n, m):\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n    if A[n-1] == B[m-1]:\n        return is_Sub_Array(A, B, n-1, m-1)\n    return is_Sub_Array(A, B, n-1, m)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5751": {
    "question_id": "mbpp/575",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sub_Array(arr1, arr2, n, m):\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n    if arr1[n-1] == arr2[m-1]:\n        return is_Sub_Array(arr1, arr2, n-1, m-1)\n    return is_Sub_Array(arr1, arr2, n-1, m)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5752": {
    "question_id": "mbpp/575",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sub_Array(arr1, arr2, n, m):\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n    if arr1[n-1] == arr2[m-1]:\n        return is_Sub_Array(arr1, arr2, n-1, m-1)\n    return is_Sub_Array(arr1, arr2, n-1, m)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5753": {
    "question_id": "mbpp/575",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sub_Array(A, B, n, m):\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n    if A[n-1] == B[m-1]:\n        return is_Sub_Array(A, B, n-1, m-1)\n    return is_Sub_Array(A, B, n-1, m)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5754": {
    "question_id": "mbpp/575",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sub_Array(A, B, n, m):\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n    if A[n-1] == B[m-1]:\n        return is_Sub_Array(A, B, n-1, m-1)\n    return is_Sub_Array(A, B, n-1, m)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5755": {
    "question_id": "mbpp/575",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sub_Array(arr1, arr2, n, m):\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n    if arr1[n-1] == arr2[m-1]:\n        return is_Sub_Array(arr1, arr2, n-1, m-1)\n    return is_Sub_Array(arr1, arr2, n-1, m)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5756": {
    "question_id": "mbpp/575",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sub_Array(arr1, arr2, n, m):\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n    if arr1[n-1] == arr2[m-1]:\n        return is_Sub_Array(arr1, arr2, n-1, m-1)\n    return is_Sub_Array(arr1, arr2, n-1, m)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5757": {
    "question_id": "mbpp/575",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sub_Array(arr1, arr2, n, m):\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n    if arr1[n-1] == arr2[m-1]:\n        return is_Sub_Array(arr1, arr2, n-1, m-1)\n    return is_Sub_Array(arr1, arr2, n-1, m)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5758": {
    "question_id": "mbpp/575",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sub_Array(arr1, arr2, n, m):\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n    if arr1[n-1] == arr2[m-1]:\n        return is_Sub_Array(arr1, arr2, n-1, m-1)\n    return is_Sub_Array(arr1, arr2, n-1, m)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5759": {
    "question_id": "mbpp/575",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Sub_Array(arr1, arr2, n, m):\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n    if arr1[n-1] == arr2[m-1]:\n        return is_Sub_Array(arr1, arr2, n-1, m-1)\n    return is_Sub_Array(arr1, arr2, n-1, m)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5760": {
    "question_id": "mbpp/576",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n        # Keep only the last digit to avoid overflow and improve performance\n        res %= 10\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5761": {
    "question_id": "mbpp/576",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n        # Keep only the last digit to prevent overflow and improve efficiency\n        res %= 10\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5762": {
    "question_id": "mbpp/576",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    res = 1\n    for i in range(1, n+1):\n        res *= i\n        # Keep only the last digit to prevent overflow and improve performance\n        res %= 10\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5763": {
    "question_id": "mbpp/576",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    res = 1\n    for i in range(2, n+1):\n        res *= i\n        while res % 10 == 0:\n            res //= 10\n        res %= 100\n    return res % 10",
    "test_output": "FAILED: expect 0,in fact 4",
    "test_result": "False"
  },
  "5764": {
    "question_id": "mbpp/576",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    res = 1\n    for i in range(1, n+1):\n        res *= i\n        # Keep only the last digit to prevent overflow and improve efficiency\n        res %= 10\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5765": {
    "question_id": "mbpp/576",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    res = 1\n    for i in range(2, n+1):\n        res *= i\n        while res % 10 == 0:\n            res //= 10\n        res %= 100000\n    return res % 10",
    "test_output": "FAILED: expect 0,in fact 4",
    "test_result": "False"
  },
  "5766": {
    "question_id": "mbpp/576",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    res = 1\n    for i in range(1, n+1):\n        res *= i\n        # Keep only the last digit to prevent overflow and improve efficiency\n        res %= 10\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5767": {
    "question_id": "mbpp/576",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 4\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5768": {
    "question_id": "mbpp/576",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n        res %= 10\n        if res == 0:\n            return 0\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5769": {
    "question_id": "mbpp/576",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n        res %= 10\n        if res == 0:\n            return 0\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5770": {
    "question_id": "mbpp/577",
    "model": "deepseek-v3-250324",
    "generation_code": "def interleave_lists(*lists):\n    if not lists:\n        return []\n    length = len(lists[0])\n    for lst in lists:\n        if len(lst) != length:\n            return []\n    interleaved = []\n    for i in range(length):\n        for lst in lists:\n            interleaved.append(lst[i])\n    return interleaved",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5771": {
    "question_id": "mbpp/577",
    "model": "deepseek-v3-250324",
    "generation_code": "def interleave_lists(*lists):\n    if not lists:\n        return []\n    length = len(lists[0])\n    for lst in lists[1:]:\n        if len(lst) != length:\n            return []\n    interleaved = []\n    for i in range(length):\n        for lst in lists:\n            interleaved.append(lst[i])\n    return interleaved",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5772": {
    "question_id": "mbpp/577",
    "model": "deepseek-v3-250324",
    "generation_code": "def interleave_lists(*lists):\n    if not lists:\n        return []\n    length = len(lists[0])\n    for lst in lists:\n        if len(lst) != length:\n            return []\n    interleaved = []\n    for i in range(length):\n        for lst in lists:\n            interleaved.append(lst[i])\n    return interleaved",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5773": {
    "question_id": "mbpp/577",
    "model": "deepseek-v3-250324",
    "generation_code": "def interleave_lists(*lists):\n    if not lists:\n        return []\n    length = len(lists[0])\n    for lst in lists:\n        if len(lst) != length:\n            return []\n    interleaved = []\n    for i in range(length):\n        for lst in lists:\n            interleaved.append(lst[i])\n    return interleaved",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5774": {
    "question_id": "mbpp/577",
    "model": "deepseek-v3-250324",
    "generation_code": "def interleave_lists(*lists):\n    if not lists:\n        return []\n    length = len(lists[0])\n    for lst in lists:\n        if len(lst) != length:\n            return []\n    interleaved = []\n    for i in range(length):\n        for lst in lists:\n            interleaved.append(lst[i])\n    return interleaved",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5775": {
    "question_id": "mbpp/577",
    "model": "deepseek-v3-250324",
    "generation_code": "def interleave_lists(*lists):\n    if not lists:\n        return []\n    length = len(lists[0])\n    for lst in lists:\n        if len(lst) != length:\n            return []\n    interleaved = []\n    for i in range(length):\n        for lst in lists:\n            interleaved.append(lst[i])\n    return interleaved",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5776": {
    "question_id": "mbpp/577",
    "model": "deepseek-v3-250324",
    "generation_code": "def interleave_lists(*lists):\n    if not lists:\n        return []\n    length = len(lists[0])\n    for lst in lists:\n        if len(lst) != length:\n            return []\n    interleaved = []\n    for i in range(length):\n        for lst in lists:\n            interleaved.append(lst[i])\n    return interleaved",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5777": {
    "question_id": "mbpp/577",
    "model": "deepseek-v3-250324",
    "generation_code": "def interleave_lists(*lists):\n    if not lists:\n        return []\n    length = len(lists[0])\n    for lst in lists:\n        if len(lst) != length:\n            return []\n    interleaved = []\n    for i in range(length):\n        for lst in lists:\n            interleaved.append(lst[i])\n    return interleaved",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5778": {
    "question_id": "mbpp/577",
    "model": "deepseek-v3-250324",
    "generation_code": "def interleave_lists(*lists):\n    if not lists:\n        return []\n    length = len(lists[0])\n    for lst in lists[1:]:\n        if len(lst) != length:\n            return []\n    interleaved = []\n    for i in range(length):\n        for lst in lists:\n            interleaved.append(lst[i])\n    return interleaved",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5779": {
    "question_id": "mbpp/577",
    "model": "deepseek-v3-250324",
    "generation_code": "def interleave_lists(*lists):\n    if not lists:\n        return []\n    length = len(lists[0])\n    for lst in lists:\n        if len(lst) != length:\n            return []\n    interleaved = []\n    for i in range(length):\n        for lst in lists:\n            interleaved.append(lst[i])\n    return interleaved",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5780": {
    "question_id": "mbpp/578",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar))",
    "test_output": "FAILED: expect (34, 36, 11, 25),in fact (11, 25, 34, 36)",
    "test_result": "False"
  },
  "5781": {
    "question_id": "mbpp/578",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar))",
    "test_output": "FAILED: expect (34, 36, 11, 25),in fact (11, 25, 34, 36)",
    "test_result": "False"
  },
  "5782": {
    "question_id": "mbpp/578",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar))",
    "test_output": "FAILED: expect (34, 36, 11, 25),in fact (11, 25, 34, 36)",
    "test_result": "False"
  },
  "5783": {
    "question_id": "mbpp/578",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar))",
    "test_output": "FAILED: expect (34, 36, 11, 25),in fact (11, 25, 34, 36)",
    "test_result": "False"
  },
  "5784": {
    "question_id": "mbpp/578",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar))",
    "test_output": "FAILED: expect (34, 36, 11, 25),in fact (11, 25, 34, 36)",
    "test_result": "False"
  },
  "5785": {
    "question_id": "mbpp/578",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar))",
    "test_output": "FAILED: expect (34, 36, 11, 25),in fact (11, 25, 34, 36)",
    "test_result": "False"
  },
  "5786": {
    "question_id": "mbpp/578",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar))",
    "test_output": "FAILED: expect (34, 36, 11, 25),in fact (11, 25, 34, 36)",
    "test_result": "False"
  },
  "5787": {
    "question_id": "mbpp/578",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar))",
    "test_output": "FAILED: expect (34, 36, 11, 25),in fact (11, 25, 34, 36)",
    "test_result": "False"
  },
  "5788": {
    "question_id": "mbpp/578",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar))",
    "test_output": "FAILED: expect (34, 36, 11, 25),in fact (11, 25, 34, 36)",
    "test_result": "False"
  },
  "5789": {
    "question_id": "mbpp/578",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar))",
    "test_output": "FAILED: expect (34, 36, 11, 25),in fact (11, 25, 34, 36)",
    "test_result": "False"
  },
  "5790": {
    "question_id": "mbpp/579",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_even(t):\n    result = []\n    for element in t:\n        if isinstance(element, tuple):\n            nested_even = extract_even(element)\n            if nested_even:\n                result.append(nested_even)\n        elif isinstance(element, int) and element % 2 == 0:\n            result.append(element)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5791": {
    "question_id": "mbpp/579",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_even(t):\n    result = []\n    for element in t:\n        if isinstance(element, tuple):\n            nested_result = extract_even(element)\n            if nested_result:\n                result.append(nested_result)\n        else:\n            if element % 2 == 0:\n                result.append(element)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5792": {
    "question_id": "mbpp/579",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_even(t):\n    result = []\n    for element in t:\n        if isinstance(element, tuple):\n            nested = extract_even(element)\n            if nested:\n                result.append(nested)\n        elif isinstance(element, int) and element % 2 == 0:\n            result.append(element)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5793": {
    "question_id": "mbpp/579",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_even(t):\n    result = []\n    for element in t:\n        if isinstance(element, tuple):\n            nested_result = extract_even(element)\n            if nested_result:\n                result.append(nested_result)\n        elif isinstance(element, int) and element % 2 == 0:\n            result.append(element)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5794": {
    "question_id": "mbpp/579",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_even(t):\n    result = []\n    for element in t:\n        if isinstance(element, tuple):\n            nested = extract_even(element)\n            if nested:\n                result.append(nested)\n        elif isinstance(element, int) and element % 2 == 0:\n            result.append(element)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5795": {
    "question_id": "mbpp/579",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_even(t):\n    result = []\n    for element in t:\n        if isinstance(element, tuple):\n            nested_result = extract_even(element)\n            if nested_result:\n                result.append(nested_result)\n        elif isinstance(element, int) and element % 2 == 0:\n            result.append(element)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5796": {
    "question_id": "mbpp/579",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_even(t):\n    result = []\n    for element in t:\n        if isinstance(element, tuple):\n            nested_even = extract_even(element)\n            if nested_even:\n                result.append(nested_even)\n        elif isinstance(element, int) and element % 2 == 0:\n            result.append(element)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5797": {
    "question_id": "mbpp/579",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_even(t):\n    result = []\n    for element in t:\n        if isinstance(element, tuple):\n            nested = extract_even(element)\n            if nested:\n                result.append(nested)\n        else:\n            if isinstance(element, int) and element % 2 == 0:\n                result.append(element)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5798": {
    "question_id": "mbpp/579",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_even(t):\n    result = []\n    for element in t:\n        if isinstance(element, tuple):\n            nested_even = extract_even(element)\n            if nested_even:\n                result.append(nested_even)\n        elif isinstance(element, int) and element % 2 == 0:\n            result.append(element)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5799": {
    "question_id": "mbpp/579",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_even(t):\n    result = []\n    for element in t:\n        if isinstance(element, tuple):\n            nested = extract_even(element)\n            if nested:\n                result.append(nested)\n        elif isinstance(element, int) and element % 2 == 0:\n            result.append(element)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5800": {
    "question_id": "mbpp/580",
    "model": "deepseek-v3-250324",
    "generation_code": "def surface_Area(b, s):\n    if b <= 0 or s <= 0:\n        return 0\n    base_area = b * b\n    lateral_area = 2 * b * s\n    return base_area + lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5801": {
    "question_id": "mbpp/580",
    "model": "deepseek-v3-250324",
    "generation_code": "def surface_Area(base, slant_height):\n    if base <= 0 or slant_height <= 0:\n        return 0\n    base_area = base * base\n    lateral_area = 2 * base * slant_height\n    return base_area + lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5802": {
    "question_id": "mbpp/580",
    "model": "deepseek-v3-250324",
    "generation_code": "def surface_Area(b, s):\n    if b <= 0 or s <= 0:\n        return 0\n    base_area = b * b\n    lateral_area = 2 * b * s\n    return base_area + lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5803": {
    "question_id": "mbpp/580",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surface_Area(b, s):\n    if b <= 0 or s <= 0:\n        return 0\n    base_area = b * b\n    lateral_area = 2 * b * math.sqrt((s ** 2) - ((b ** 2) / 4))\n    return round(base_area + lateral_area)",
    "test_output": "FAILED: expect 33,in fact 31",
    "test_result": "False"
  },
  "5804": {
    "question_id": "mbpp/580",
    "model": "deepseek-v3-250324",
    "generation_code": "def surface_Area(base, slant_height):\n    if base <= 0 or slant_height <= 0:\n        return 0\n    base_area = base * base\n    lateral_area = 2 * base * slant_height\n    return base_area + lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5805": {
    "question_id": "mbpp/580",
    "model": "deepseek-v3-250324",
    "generation_code": "def surface_Area(base, slant_height):\n    if base <= 0 or slant_height <= 0:\n        return 0\n    base_area = base * base\n    lateral_area = 2 * base * slant_height\n    return base_area + lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5806": {
    "question_id": "mbpp/580",
    "model": "deepseek-v3-250324",
    "generation_code": "def surface_Area(base, slant_height):\n    if base <= 0 or slant_height <= 0:\n        return 0\n    base_area = base * base\n    lateral_area = 2 * base * slant_height\n    return base_area + lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5807": {
    "question_id": "mbpp/580",
    "model": "deepseek-v3-250324",
    "generation_code": "def surface_Area(base, slant_height):\n    if base <= 0 or slant_height <= 0:\n        return 0\n    base_area = base * base\n    lateral_area = 2 * base * slant_height\n    return base_area + lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5808": {
    "question_id": "mbpp/580",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef surface_Area(b, s):\n    if b <= 0 or s <= 0:\n        return 0\n    base_area = b * b\n    lateral_area = 2 * b * s\n    return base_area + lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5809": {
    "question_id": "mbpp/580",
    "model": "deepseek-v3-250324",
    "generation_code": "def surface_Area(b, s):\n    if b <= 0 or s <= 0:\n        return 0\n    base_area = b * b\n    lateral_area = 2 * b * s\n    return base_area + lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5810": {
    "question_id": "mbpp/581",
    "model": "deepseek-v3-250324",
    "generation_code": "def my_dict(d):\n    return len(d) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "5811": {
    "question_id": "mbpp/581",
    "model": "deepseek-v3-250324",
    "generation_code": "def my_dict(d):\n    return len(d) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "5812": {
    "question_id": "mbpp/581",
    "model": "deepseek-v3-250324",
    "generation_code": "def my_dict(d):\n    return len(d) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "5813": {
    "question_id": "mbpp/581",
    "model": "deepseek-v3-250324",
    "generation_code": "def my_dict(d):\n    return not bool(d)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5814": {
    "question_id": "mbpp/581",
    "model": "deepseek-v3-250324",
    "generation_code": "def my_dict(d):\n    return len(d) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "5815": {
    "question_id": "mbpp/581",
    "model": "deepseek-v3-250324",
    "generation_code": "def my_dict(d):\n    return len(d) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "5816": {
    "question_id": "mbpp/581",
    "model": "deepseek-v3-250324",
    "generation_code": "def my_dict(d):\n    return len(d) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "5817": {
    "question_id": "mbpp/581",
    "model": "deepseek-v3-250324",
    "generation_code": "def my_dict(d):\n    return len(d) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "5818": {
    "question_id": "mbpp/581",
    "model": "deepseek-v3-250324",
    "generation_code": "def my_dict(d):\n    return len(d) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "5819": {
    "question_id": "mbpp/581",
    "model": "deepseek-v3-250324",
    "generation_code": "def my_dict(d):\n    return len(d) != 0",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "5820": {
    "question_id": "mbpp/582",
    "model": "deepseek-v3-250324",
    "generation_code": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5821": {
    "question_id": "mbpp/582",
    "model": "deepseek-v3-250324",
    "generation_code": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5822": {
    "question_id": "mbpp/582",
    "model": "deepseek-v3-250324",
    "generation_code": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5823": {
    "question_id": "mbpp/582",
    "model": "deepseek-v3-250324",
    "generation_code": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5824": {
    "question_id": "mbpp/582",
    "model": "deepseek-v3-250324",
    "generation_code": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5825": {
    "question_id": "mbpp/582",
    "model": "deepseek-v3-250324",
    "generation_code": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5826": {
    "question_id": "mbpp/582",
    "model": "deepseek-v3-250324",
    "generation_code": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5827": {
    "question_id": "mbpp/582",
    "model": "deepseek-v3-250324",
    "generation_code": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5828": {
    "question_id": "mbpp/582",
    "model": "deepseek-v3-250324",
    "generation_code": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5829": {
    "question_id": "mbpp/582",
    "model": "deepseek-v3-250324",
    "generation_code": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5830": {
    "question_id": "mbpp/583",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverbs(sentence):\n    adverbs = []\n    for match in re.finditer(r'\\b\\w+ly\\b', sentence):\n        start = match.start()\n        end = match.end()\n        adverbs.append(f\"{start}-{end}: {match.group()}\")\n    return adverbs[0] if adverbs else \"\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5831": {
    "question_id": "mbpp/583",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverbs(text):\n    adverbs = []\n    for match in re.finditer(r'\\b\\w+ly\\b', text):\n        start = match.start()\n        end = match.end()\n        adverbs.append(f\"{start}-{end}: {match.group()}\")\n    if adverbs:\n        return adverbs[0] if len(adverbs) == 1 else adverbs\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5832": {
    "question_id": "mbpp/583",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverbs(sentence):\n    adverbs = []\n    for match in re.finditer(r'\\b\\w+ly\\b', sentence):\n        start = match.start()\n        end = match.end()\n        adverbs.append(f\"{start}-{end}: {match.group()}\")\n    if adverbs:\n        return adverbs[0] if len(adverbs) == 1 else ', '.join(adverbs)\n    return \"\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5833": {
    "question_id": "mbpp/583",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverbs(sentence):\n    adverbs = []\n    for match in re.finditer(r'\\b\\w+ly\\b', sentence):\n        start = match.start()\n        end = match.end()\n        adverbs.append(f\"{start}-{end}: {match.group()}\")\n    return adverbs[0] if adverbs else ''",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5834": {
    "question_id": "mbpp/583",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverbs(text):\n    adverbs = []\n    for match in re.finditer(r'\\b\\w+ly\\b', text):\n        start = match.start()\n        end = match.end()\n        adverbs.append(f\"{start}-{end}: {match.group()}\")\n    return adverbs[0] if adverbs else ''",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5835": {
    "question_id": "mbpp/583",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverbs(sentence):\n    adverbs = []\n    for match in re.finditer(r'\\b\\w+ly\\b', sentence):\n        start = match.start()\n        end = match.end()\n        adverbs.append(f\"{start}-{end}: {match.group()}\")\n    if adverbs:\n        return adverbs[0] if len(adverbs) == 1 else adverbs\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5836": {
    "question_id": "mbpp/583",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverbs(sentence):\n    adverbs = []\n    for match in re.finditer(r'\\b\\w+ly\\b', sentence):\n        start = match.start()\n        end = match.end()\n        adverbs.append(f\"{start}-{end}: {match.group()}\")\n    if adverbs:\n        return adverbs[0] if len(adverbs) == 1 else '\\n'.join(adverbs)\n    return \"\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5837": {
    "question_id": "mbpp/583",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverbs(text):\n    adverbs = []\n    for match in re.finditer(r'\\b\\w+ly\\b', text):\n        start = match.start()\n        end = match.end()\n        adverbs.append(f\"{start}-{end}: {match.group()}\")\n    return adverbs[0] if adverbs else \"\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5838": {
    "question_id": "mbpp/583",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverbs(text):\n    adverbs = []\n    for match in re.finditer(r'\\b\\w+ly\\b', text):\n        start = match.start()\n        end = match.end()\n        adverbs.append(f\"{start}-{end}: {match.group()}\")\n    return adverbs[0] if adverbs else ''",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5839": {
    "question_id": "mbpp/583",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_adverbs(sentence):\n    adverbs = []\n    for match in re.finditer(r'\\b\\w+ly\\b', sentence):\n        start = match.start()\n        end = match.end()\n        adverbs.append(f\"{start}-{end}: {match.group()}\")\n    if adverbs:\n        return adverbs[0] if len(adverbs) == 1 else '\\n'.join(adverbs)\n    return \"\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5840": {
    "question_id": "mbpp/584",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef expensive_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        price = -item['price']\n        if len(heap) < n:\n            heapq.heappush(heap, (price, item))\n        else:\n            heapq.heappushpop(heap, (price, item))\n    result = [item for (price, item) in heap]\n    result.sort(key=lambda x: -x['price'])\n    return result",
    "test_output": "FAILED: expect [{'name': 'Item-2', 'price': 555.22}],in fact [{'name': 'Item-1', 'price': 101.1}]",
    "test_result": "False"
  },
  "5841": {
    "question_id": "mbpp/584",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef expensive_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (item['price'], item))\n        else:\n            if item['price'] > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (item['price'], item))\n    result = [item for (price, item) in heap]\n    result.sort(key=lambda x: -x['price'])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5842": {
    "question_id": "mbpp/584",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef expensive_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        _, item = heapq.heappop(heap)\n        result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5843": {
    "question_id": "mbpp/584",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef expensive_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (item['price'], item))\n        else:\n            if item['price'] > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (item['price'], item))\n    result = [item for (price, item) in heap]\n    result.sort(key=lambda x: -x['price'])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5844": {
    "question_id": "mbpp/584",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef expensive_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        _, item = heapq.heappop(heap)\n        result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5845": {
    "question_id": "mbpp/584",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef expensive_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        price = -item['price']\n        if len(heap) < n:\n            heapq.heappush(heap, (price, item))\n        else:\n            heapq.heappushpop(heap, (price, item))\n    result = [item for (price, item) in heap]\n    result.sort(key=lambda x: -x['price'])\n    return result",
    "test_output": "FAILED: expect [{'name': 'Item-2', 'price': 555.22}],in fact [{'name': 'Item-1', 'price': 101.1}]",
    "test_result": "False"
  },
  "5846": {
    "question_id": "mbpp/584",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef expensive_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (item['price'], item))\n        else:\n            if item['price'] > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (item['price'], item))\n    result = [item for (price, item) in heap]\n    result.sort(key=lambda x: -x['price'])\n    return result[:n] if n < len(result) else result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5847": {
    "question_id": "mbpp/584",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef expensive_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5848": {
    "question_id": "mbpp/584",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef expensive_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5849": {
    "question_id": "mbpp/584",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef expensive_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (item['price'], item))\n        else:\n            if item['price'] > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (item['price'], item))\n    result = [item for (price, item) in heap]\n    result.sort(key=lambda x: -x['price'])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5850": {
    "question_id": "mbpp/585",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_Arr(arr, n, k):\n    if n == 0 or k == 0:\n        return arr\n    k = k % n\n    return arr[k:] + arr[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5851": {
    "question_id": "mbpp/585",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_Arr(arr, n, k):\n    if n == 0 or k == 0 or k >= n:\n        return arr\n    return arr[k:] + arr[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5852": {
    "question_id": "mbpp/585",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_Arr(arr, n, k):\n    if n == 0 or k == 0 or k >= n:\n        return arr\n    return arr[k:] + arr[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5853": {
    "question_id": "mbpp/585",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_Arr(arr, n, k):\n    if n == 0 or k == 0 or k >= n:\n        return arr\n    return arr[k:] + arr[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5854": {
    "question_id": "mbpp/585",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_Arr(arr, n, k):\n    if n == 0 or k == 0 or k >= n:\n        return arr\n    return arr[k:] + arr[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5855": {
    "question_id": "mbpp/585",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_Arr(arr, n, k):\n    if n == 0 or k == 0 or k >= n:\n        return arr\n    return arr[k:] + arr[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5856": {
    "question_id": "mbpp/585",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_Arr(arr, n, k):\n    if n == 0 or k == 0 or k >= n:\n        return arr\n    return arr[k:] + arr[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5857": {
    "question_id": "mbpp/585",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_Arr(arr, n, k):\n    if n == 0 or k == 0 or k >= n:\n        return arr.copy()\n    return arr[k:] + arr[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5858": {
    "question_id": "mbpp/585",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_Arr(arr, n, k):\n    if n == 0 or k == 0 or k >= n:\n        return arr\n    return arr[k:] + arr[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5859": {
    "question_id": "mbpp/585",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_Arr(arr, n, k):\n    if n == 0 or k == 0 or k >= n:\n        return arr\n    return arr[k:] + arr[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5860": {
    "question_id": "mbpp/586",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5861": {
    "question_id": "mbpp/586",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5862": {
    "question_id": "mbpp/586",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5863": {
    "question_id": "mbpp/586",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5864": {
    "question_id": "mbpp/586",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5865": {
    "question_id": "mbpp/586",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5866": {
    "question_id": "mbpp/586",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5867": {
    "question_id": "mbpp/586",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5868": {
    "question_id": "mbpp/586",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5869": {
    "question_id": "mbpp/586",
    "model": "deepseek-v3-250324",
    "generation_code": "def list_tuple(lst):\n    return tuple(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5870": {
    "question_id": "mbpp/587",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_diff(nums):\n    if len(nums) == 0:\n        return 0\n    return max(nums) - min(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5871": {
    "question_id": "mbpp/587",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_diff(nums):\n    if len(nums) == 0:\n        return 0\n    return max(nums) - min(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5872": {
    "question_id": "mbpp/587",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_diff(nums):\n    if len(nums) == 0:\n        return 0\n    return max(nums) - min(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5873": {
    "question_id": "mbpp/587",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_diff(nums):\n    if len(nums) == 0:\n        return 0\n    return max(nums) - min(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5874": {
    "question_id": "mbpp/587",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_diff(nums):\n    if len(nums) == 0:\n        return 0\n    return max(nums) - min(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5875": {
    "question_id": "mbpp/587",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_diff(nums):\n    if len(nums) == 0:\n        return 0\n    return max(nums) - min(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5876": {
    "question_id": "mbpp/587",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_diff(nums):\n    if len(nums) == 0:\n        return 0\n    return max(nums) - min(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5877": {
    "question_id": "mbpp/587",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_diff(nums):\n    if len(nums) == 0:\n        return 0\n    return max(nums) - min(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5878": {
    "question_id": "mbpp/587",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_diff(nums):\n    if len(nums) == 0:\n        return 0\n    return max(nums) - min(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5879": {
    "question_id": "mbpp/587",
    "model": "deepseek-v3-250324",
    "generation_code": "def big_diff(nums):\n    if len(nums) == 0:\n        return 0\n    return max(nums) - min(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5880": {
    "question_id": "mbpp/588",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perfect_squares(a, b):\n    if a > b:\n        return []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [x * x for x in range(start, end + 1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5881": {
    "question_id": "mbpp/588",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perfect_squares(a, b):\n    if a > b:\n        return []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [x * x for x in range(start, end + 1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5882": {
    "question_id": "mbpp/588",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perfect_squares(a, b):\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [x * x for x in range(start, end + 1)] if start <= end else []",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5883": {
    "question_id": "mbpp/588",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perfect_squares(a, b):\n    if a > b:\n        return []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [x * x for x in range(start, end + 1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5884": {
    "question_id": "mbpp/588",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perfect_squares(a, b):\n    squares = []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for i in range(start, end + 1):\n        squares.append(i * i)\n    return squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5885": {
    "question_id": "mbpp/588",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perfect_squares(a, b):\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [x * x for x in range(start, end + 1)] if a <= b else []",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5886": {
    "question_id": "mbpp/588",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perfect_squares(a, b):\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [x * x for x in range(start, end + 1)] if a <= b else []",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5887": {
    "question_id": "mbpp/588",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perfect_squares(a, b):\n    if a > b:\n        return []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [i*i for i in range(start, end + 1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5888": {
    "question_id": "mbpp/588",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perfect_squares(a, b):\n    squares = []\n    lower = math.ceil(math.sqrt(a))\n    upper = math.floor(math.sqrt(b))\n    for i in range(lower, upper + 1):\n        squares.append(i * i)\n    return squares",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5889": {
    "question_id": "mbpp/588",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef perfect_squares(a, b):\n    if a > b:\n        return []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [i*i for i in range(start, end + 1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5890": {
    "question_id": "mbpp/589",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    z = cmath.rect(r, theta)\n    rect_coords = (z.real, z.imag)\n    polar_coords = (abs(z), cmath.phase(z))\n    return (polar_coords, z)",
    "test_output": "FAILED: expect ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)),in fact ((3.0, -2.2831853071795867), (-1.960930862590836-2.2704074859237844j))",
    "test_result": "False"
  },
  "5891": {
    "question_id": "mbpp/589",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    z = cmath.rect(r, theta)\n    rect_coords = (z.real, z.imag)\n    polar_coords = (abs(z), cmath.phase(z))\n    return (polar_coords, rect_coords)",
    "test_output": "FAILED: expect ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)),in fact ((3.0, -2.2831853071795867), (-1.960930862590836, -2.2704074859237844))",
    "test_result": "False"
  },
  "5892": {
    "question_id": "mbpp/589",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    rect = cmath.rect(r, theta)\n    polar = (math.hypot(rect.real, rect.imag), math.atan2(rect.imag, rect.real))\n    return (polar, rect)",
    "test_output": "FAILED: expect ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)),in fact ((3.0, -2.2831853071795867), (-1.960930862590836-2.2704074859237844j))",
    "test_result": "False"
  },
  "5893": {
    "question_id": "mbpp/589",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    rect = cmath.rect(r, theta)\n    polar = (math.hypot(rect.real, rect.imag), math.atan2(rect.imag, rect.real))\n    return (polar, rect)",
    "test_output": "FAILED: expect ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)),in fact ((3.0, -2.2831853071795867), (-1.960930862590836-2.2704074859237844j))",
    "test_result": "False"
  },
  "5894": {
    "question_id": "mbpp/589",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    rect_coord = complex(x, y)\n    polar_coord = (math.hypot(x, y), math.atan2(y, x))\n    return (polar_coord, rect_coord)",
    "test_output": "FAILED: expect ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)),in fact ((3.0, -2.2831853071795867), (-1.960930862590836-2.2704074859237844j))",
    "test_result": "False"
  },
  "5895": {
    "question_id": "mbpp/589",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    rect = cmath.rect(r, theta)\n    polar = (math.hypot(rect.real, rect.imag), math.atan2(rect.imag, rect.real))\n    return (polar, rect)",
    "test_output": "FAILED: expect ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)),in fact ((3.0, -2.2831853071795867), (-1.960930862590836-2.2704074859237844j))",
    "test_result": "False"
  },
  "5896": {
    "question_id": "mbpp/589",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    rect = cmath.rect(r, theta)\n    polar = (math.hypot(rect.real, rect.imag), math.atan2(rect.imag, rect.real))\n    return (polar, rect)",
    "test_output": "FAILED: expect ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)),in fact ((3.0, -2.2831853071795867), (-1.960930862590836-2.2704074859237844j))",
    "test_result": "False"
  },
  "5897": {
    "question_id": "mbpp/589",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    rect = cmath.rect(r, theta)\n    polar = (math.hypot(rect.real, rect.imag), math.atan2(rect.imag, rect.real))\n    return (polar, rect)",
    "test_output": "FAILED: expect ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)),in fact ((3.0, -2.2831853071795867), (-1.960930862590836-2.2704074859237844j))",
    "test_result": "False"
  },
  "5898": {
    "question_id": "mbpp/589",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    rect = cmath.rect(r, theta)\n    polar = (math.hypot(rect.real, rect.imag), math.atan2(rect.imag, rect.real))\n    return (polar, rect)",
    "test_output": "FAILED: expect ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)),in fact ((3.0, -2.2831853071795867), (-1.960930862590836-2.2704074859237844j))",
    "test_result": "False"
  },
  "5899": {
    "question_id": "mbpp/589",
    "model": "deepseek-v3-250324",
    "generation_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    rect = complex(x, y)\n    polar = (abs(rect), cmath.phase(rect))\n    return (polar, rect)",
    "test_output": "FAILED: expect ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)),in fact ((3.0, -2.2831853071795867), (-1.960930862590836-2.2704074859237844j))",
    "test_result": "False"
  },
  "5900": {
    "question_id": "mbpp/590",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5901": {
    "question_id": "mbpp/590",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5902": {
    "question_id": "mbpp/590",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5903": {
    "question_id": "mbpp/590",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5904": {
    "question_id": "mbpp/590",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5905": {
    "question_id": "mbpp/590",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5906": {
    "question_id": "mbpp/590",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5907": {
    "question_id": "mbpp/590",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5908": {
    "question_id": "mbpp/590",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5909": {
    "question_id": "mbpp/590",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5910": {
    "question_id": "mbpp/591",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_product(n):\n    if n < 0:\n        return 0\n    sum_val = 0\n    for k in range(1, n + 1):\n        product = (n * n) // (k * k)\n        sum_val += product\n    return sum_val",
    "test_output": "FAILED: expect 15,in fact 12",
    "test_result": "False"
  },
  "5911": {
    "question_id": "mbpp/591",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_product(n):\n    if n == 0:\n        return 0\n    sum_val = 0\n    for k in range(1, n+1):\n        product = 1\n        for i in range(1, k+1):\n            product *= (n - i + 1) // i\n        sum_val += product\n    return sum_val",
    "test_output": "FAILED: expect 15,in fact 6",
    "test_result": "False"
  },
  "5912": {
    "question_id": "mbpp/591",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_product(n):\n    if n == 0:\n        return 0\n    sum_val = 0\n    for k in range(1, n+1):\n        product = 1\n        for i in range(1, k+1):\n            product *= (n - i + 1) // i\n        sum_val += product\n    return sum_val",
    "test_output": "FAILED: expect 15,in fact 6",
    "test_result": "False"
  },
  "5913": {
    "question_id": "mbpp/591",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_product(n):\n    if n == 0:\n        return 0\n    sum_val = 0\n    for k in range(1, n+1):\n        product = 1\n        for i in range(1, k+1):\n            product *= (n - i + 1) // i\n        sum_val += product\n    return sum_val",
    "test_output": "FAILED: expect 15,in fact 6",
    "test_result": "False"
  },
  "5914": {
    "question_id": "mbpp/591",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_product(n):\n    if n == 0:\n        return 0\n    sum_val = 0\n    for k in range(1, n+1):\n        product = 1\n        for i in range(1, k+1):\n            product *= (n - i + 1) // i\n        sum_val += product\n    return sum_val",
    "test_output": "FAILED: expect 15,in fact 6",
    "test_result": "False"
  },
  "5915": {
    "question_id": "mbpp/591",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_product(n):\n    if n == 0:\n        return 0\n    sum_val = 0\n    for k in range(1, n + 1):\n        product = 1\n        for i in range(1, k + 1):\n            product *= (n - i + 1) // i\n        sum_val += product\n    return sum_val",
    "test_output": "FAILED: expect 15,in fact 6",
    "test_result": "False"
  },
  "5916": {
    "question_id": "mbpp/591",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_product(n):\n    if n == 0:\n        return 0\n    sum_val = 0\n    for k in range(1, n + 1):\n        product = (n * n) // (k * k)\n        sum_val += product\n    return sum_val",
    "test_output": "FAILED: expect 15,in fact 12",
    "test_result": "False"
  },
  "5917": {
    "question_id": "mbpp/591",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_product(n):\n    if n <= 0:\n        return 0\n    sum_val = 0\n    for k in range(1, n + 1):\n        product = 1\n        for i in range(1, k + 1):\n            product *= (n - i + 1) // i\n        sum_val += product\n    return sum_val",
    "test_output": "FAILED: expect 15,in fact 6",
    "test_result": "False"
  },
  "5918": {
    "question_id": "mbpp/591",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_product(n):\n    if n == 0:\n        return 0\n    sum_val = 0\n    for k in range(1, n+1):\n        product = 1\n        for i in range(1, k+1):\n            product *= (n - i + 1) // i\n        sum_val += product\n    return sum_val",
    "test_output": "FAILED: expect 15,in fact 6",
    "test_result": "False"
  },
  "5919": {
    "question_id": "mbpp/591",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_product(n):\n    if n == 0:\n        return 0\n    sum_val = 0\n    for k in range(1, n+1):\n        product = 1\n        for i in range(1, k+1):\n            product *= (n - i + 1) // i\n        sum_val += product\n    return sum_val",
    "test_output": "FAILED: expect 15,in fact 6",
    "test_result": "False"
  },
  "5920": {
    "question_id": "mbpp/592",
    "model": "deepseek-v3-250324",
    "generation_code": "def removezero_ip(ip):\n    parts = ip.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5921": {
    "question_id": "mbpp/592",
    "model": "deepseek-v3-250324",
    "generation_code": "def removezero_ip(ip):\n    parts = ip.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5922": {
    "question_id": "mbpp/592",
    "model": "deepseek-v3-250324",
    "generation_code": "def removezero_ip(ip):\n    parts = ip.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5923": {
    "question_id": "mbpp/592",
    "model": "deepseek-v3-250324",
    "generation_code": "def removezero_ip(ip):\n    parts = ip.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5924": {
    "question_id": "mbpp/592",
    "model": "deepseek-v3-250324",
    "generation_code": "def removezero_ip(ip):\n    parts = ip.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5925": {
    "question_id": "mbpp/592",
    "model": "deepseek-v3-250324",
    "generation_code": "def removezero_ip(ip):\n    parts = ip.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5926": {
    "question_id": "mbpp/592",
    "model": "deepseek-v3-250324",
    "generation_code": "def removezero_ip(ip):\n    parts = ip.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5927": {
    "question_id": "mbpp/592",
    "model": "deepseek-v3-250324",
    "generation_code": "def removezero_ip(ip):\n    parts = ip.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5928": {
    "question_id": "mbpp/592",
    "model": "deepseek-v3-250324",
    "generation_code": "def removezero_ip(ip):\n    parts = ip.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5929": {
    "question_id": "mbpp/592",
    "model": "deepseek-v3-250324",
    "generation_code": "def removezero_ip(ip):\n    parts = ip.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5930": {
    "question_id": "mbpp/593",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5931": {
    "question_id": "mbpp/593",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5932": {
    "question_id": "mbpp/593",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5933": {
    "question_id": "mbpp/593",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5934": {
    "question_id": "mbpp/593",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5935": {
    "question_id": "mbpp/593",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5936": {
    "question_id": "mbpp/593",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    return abs(first_even - first_odd)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5937": {
    "question_id": "mbpp/593",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5938": {
    "question_id": "mbpp/593",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5939": {
    "question_id": "mbpp/593",
    "model": "deepseek-v3-250324",
    "generation_code": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    return abs(first_even - first_odd)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5940": {
    "question_id": "mbpp/594",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swaps = 0\n    mismatch = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            mismatch += 1\n    if mismatch % 2 != 0:\n        return -1\n    swaps = mismatch // 2\n    return swaps",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "5941": {
    "question_id": "mbpp/594",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swaps = 0\n    mismatch = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            mismatch += 1\n    if mismatch % 2 != 0:\n        return -1\n    swaps = mismatch // 2\n    return swaps",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "5942": {
    "question_id": "mbpp/594",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swaps = 0\n    mismatch_positions = []\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            mismatch_positions.append(i)\n    if len(mismatch_positions) % 2 != 0:\n        return -1\n    for i in range(0, len(mismatch_positions), 2):\n        swaps += 1\n    return swaps",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "5943": {
    "question_id": "mbpp/594",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    diff = 0\n    for c1, c2 in zip(s1, s2):\n        if c1 != c2:\n            diff += 1\n    if diff % 2 != 0:\n        return -1\n    return diff // 2",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "5944": {
    "question_id": "mbpp/594",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    diff = 0\n    for c1, c2 in zip(s1, s2):\n        if c1 != c2:\n            diff += 1\n    if diff % 2 != 0:\n        return -1\n    return diff // 2",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "5945": {
    "question_id": "mbpp/594",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    diff = 0\n    for c1, c2 in zip(s1, s2):\n        if c1 != c2:\n            diff += 1\n    if diff % 2 != 0:\n        return -1\n    return diff // 2",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "5946": {
    "question_id": "mbpp/594",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    diff = 0\n    for c1, c2 in zip(s1, s2):\n        if c1 != c2:\n            diff += 1\n    if diff % 2 != 0:\n        return -1\n    return diff // 2",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "5947": {
    "question_id": "mbpp/594",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    diff = 0\n    for c1, c2 in zip(s1, s2):\n        if c1 != c2:\n            diff += 1\n    if diff % 2 != 0:\n        return -1\n    return diff // 2",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "5948": {
    "question_id": "mbpp/594",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swaps = 0\n    diff_positions = []\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            diff_positions.append(i)\n    if len(diff_positions) % 2 != 0:\n        return -1\n    for i in range(0, len(diff_positions), 2):\n        swaps += 1\n    return swaps",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "5949": {
    "question_id": "mbpp/594",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    diff = 0\n    for c1, c2 in zip(s1, s2):\n        if c1 != c2:\n            diff += 1\n    if diff % 2 != 0:\n        return -1\n    return diff // 2",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "5950": {
    "question_id": "mbpp/595",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)",
    "test_output": "FAILED: NameError: name 'sys' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 286, in execute_test_case\n    expected = eval(expected.strip())\n  File \"<string>\", line 1, in <module>\nNameError: name 'sys' is not defined\n",
    "test_result": "False"
  },
  "5951": {
    "question_id": "mbpp/595",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)",
    "test_output": "FAILED: NameError: name 'sys' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 286, in execute_test_case\n    expected = eval(expected.strip())\n  File \"<string>\", line 1, in <module>\nNameError: name 'sys' is not defined\n",
    "test_result": "False"
  },
  "5952": {
    "question_id": "mbpp/595",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)",
    "test_output": "FAILED: NameError: name 'sys' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 286, in execute_test_case\n    expected = eval(expected.strip())\n  File \"<string>\", line 1, in <module>\nNameError: name 'sys' is not defined\n",
    "test_result": "False"
  },
  "5953": {
    "question_id": "mbpp/595",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)",
    "test_output": "FAILED: NameError: name 'sys' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 286, in execute_test_case\n    expected = eval(expected.strip())\n  File \"<string>\", line 1, in <module>\nNameError: name 'sys' is not defined\n",
    "test_result": "False"
  },
  "5954": {
    "question_id": "mbpp/595",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)",
    "test_output": "FAILED: NameError: name 'sys' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 286, in execute_test_case\n    expected = eval(expected.strip())\n  File \"<string>\", line 1, in <module>\nNameError: name 'sys' is not defined\n",
    "test_result": "False"
  },
  "5955": {
    "question_id": "mbpp/595",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)",
    "test_output": "FAILED: NameError: name 'sys' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 286, in execute_test_case\n    expected = eval(expected.strip())\n  File \"<string>\", line 1, in <module>\nNameError: name 'sys' is not defined\n",
    "test_result": "False"
  },
  "5956": {
    "question_id": "mbpp/595",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)",
    "test_output": "FAILED: NameError: name 'sys' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 286, in execute_test_case\n    expected = eval(expected.strip())\n  File \"<string>\", line 1, in <module>\nNameError: name 'sys' is not defined\n",
    "test_result": "False"
  },
  "5957": {
    "question_id": "mbpp/595",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)",
    "test_output": "FAILED: NameError: name 'sys' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 286, in execute_test_case\n    expected = eval(expected.strip())\n  File \"<string>\", line 1, in <module>\nNameError: name 'sys' is not defined\n",
    "test_result": "False"
  },
  "5958": {
    "question_id": "mbpp/595",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)",
    "test_output": "FAILED: NameError: name 'sys' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 286, in execute_test_case\n    expected = eval(expected.strip())\n  File \"<string>\", line 1, in <module>\nNameError: name 'sys' is not defined\n",
    "test_result": "False"
  },
  "5959": {
    "question_id": "mbpp/595",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)",
    "test_output": "FAILED: NameError: name 'sys' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 286, in execute_test_case\n    expected = eval(expected.strip())\n  File \"<string>\", line 1, in <module>\nNameError: name 'sys' is not defined\n",
    "test_result": "False"
  },
  "5960": {
    "question_id": "mbpp/596",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_kth(arr1, arr2, m, n, k):\n    i, j = 0, 0\n    count = 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n    while i < m:\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n    while j < n:\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5961": {
    "question_id": "mbpp/596",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_kth(arr1, arr2, m, n, k):\n    i, j = 0, 0\n    count = 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n    while i < m:\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n    while j < n:\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5962": {
    "question_id": "mbpp/596",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_kth(arr1, arr2, m, n, k):\n    i, j = 0, 0\n    count = 0\n    result = 0\n    \n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            result = arr1[i]\n            i += 1\n        else:\n            result = arr2[j]\n            j += 1\n        count += 1\n        if count == k:\n            return result\n    \n    while i < m:\n        result = arr1[i]\n        i += 1\n        count += 1\n        if count == k:\n            return result\n    \n    while j < n:\n        result = arr2[j]\n        j += 1\n        count += 1\n        if count == k:\n            return result\n    \n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5963": {
    "question_id": "mbpp/596",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_kth(arr1, arr2, m, n, k):\n    i, j = 0, 0\n    count = 0\n    result = 0\n    \n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            result = arr1[i]\n            i += 1\n        else:\n            result = arr2[j]\n            j += 1\n        count += 1\n        if count == k:\n            return result\n    \n    while i < m:\n        result = arr1[i]\n        i += 1\n        count += 1\n        if count == k:\n            return result\n    \n    while j < n:\n        result = arr2[j]\n        j += 1\n        count += 1\n        if count == k:\n            return result\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5964": {
    "question_id": "mbpp/596",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_kth(arr1, arr2, m, n, k):\n    i, j = 0, 0\n    count = 0\n    result = 0\n    \n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            result = arr1[i]\n            i += 1\n        else:\n            result = arr2[j]\n            j += 1\n        count += 1\n        if count == k:\n            return result\n    \n    while i < m:\n        result = arr1[i]\n        i += 1\n        count += 1\n        if count == k:\n            return result\n    \n    while j < n:\n        result = arr2[j]\n        j += 1\n        count += 1\n        if count == k:\n            return result\n    \n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5965": {
    "question_id": "mbpp/596",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_kth(arr1, arr2, m, n, k):\n    i, j = 0, 0\n    count = 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n    while i < m:\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n    while j < n:\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5966": {
    "question_id": "mbpp/596",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_kth(arr1, arr2, m, n, k):\n    i, j = 0, 0\n    count = 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n    while i < m:\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n    while j < n:\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5967": {
    "question_id": "mbpp/596",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_kth(arr1, arr2, m, n, k):\n    i, j = 0, 0\n    count = 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n    while i < m:\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n    while j < n:\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5968": {
    "question_id": "mbpp/596",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_kth(arr1, arr2, m, n, k):\n    i, j = 0, 0\n    count = 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n    while i < m:\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n    while j < n:\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5969": {
    "question_id": "mbpp/596",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_kth(arr1, arr2, m, n, k):\n    i, j = 0, 0\n    count = 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n    while i < m:\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n    while j < n:\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5970": {
    "question_id": "mbpp/597",
    "model": "deepseek-v3-250324",
    "generation_code": "def armstrong_number(num):\n    if num < 0:\n        return False\n    original_num = num\n    sum = 0\n    n = len(str(num))\n    while num > 0:\n        digit = num % 10\n        sum += digit ** n\n        num = num // 10\n    return sum == original_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5971": {
    "question_id": "mbpp/597",
    "model": "deepseek-v3-250324",
    "generation_code": "def armstrong_number(num):\n    if num < 0:\n        return False\n    original_num = num\n    sum = 0\n    power = len(str(num))\n    while num > 0:\n        digit = num % 10\n        sum += digit ** power\n        num = num // 10\n    return sum == original_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5972": {
    "question_id": "mbpp/597",
    "model": "deepseek-v3-250324",
    "generation_code": "def armstrong_number(num):\n    if num < 0:\n        return False\n    original_num = num\n    sum = 0\n    n = len(str(num))\n    while num > 0:\n        digit = num % 10\n        sum += digit ** n\n        num = num // 10\n    return sum == original_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5973": {
    "question_id": "mbpp/597",
    "model": "deepseek-v3-250324",
    "generation_code": "def armstrong_number(num):\n    if num < 0:\n        return False\n    original_num = num\n    sum = 0\n    power = len(str(num))\n    while num > 0:\n        digit = num % 10\n        sum += digit ** power\n        num = num // 10\n    return sum == original_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5974": {
    "question_id": "mbpp/597",
    "model": "deepseek-v3-250324",
    "generation_code": "def armstrong_number(num):\n    if num < 0:\n        return False\n    original_num = num\n    sum = 0\n    n = len(str(num))\n    while num > 0:\n        digit = num % 10\n        sum += digit ** n\n        num = num // 10\n    return sum == original_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5975": {
    "question_id": "mbpp/597",
    "model": "deepseek-v3-250324",
    "generation_code": "def armstrong_number(num):\n    if num < 0:\n        return False\n    original_num = num\n    sum = 0\n    n = len(str(num))\n    while num > 0:\n        digit = num % 10\n        sum += digit ** n\n        num = num // 10\n    return sum == original_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5976": {
    "question_id": "mbpp/597",
    "model": "deepseek-v3-250324",
    "generation_code": "def armstrong_number(num):\n    if num < 0:\n        return False\n    original_num = num\n    sum = 0\n    n = len(str(num))\n    while num > 0:\n        digit = num % 10\n        sum += digit ** n\n        num = num // 10\n    return sum == original_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5977": {
    "question_id": "mbpp/597",
    "model": "deepseek-v3-250324",
    "generation_code": "def armstrong_number(num):\n    if num < 0:\n        return False\n    original_num = num\n    sum = 0\n    length = len(str(num))\n    while num > 0:\n        digit = num % 10\n        sum += digit ** length\n        num = num // 10\n    return sum == original_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5978": {
    "question_id": "mbpp/597",
    "model": "deepseek-v3-250324",
    "generation_code": "def armstrong_number(num):\n    if num < 0:\n        return False\n    original_num = num\n    sum = 0\n    power = len(str(num))\n    while num > 0:\n        digit = num % 10\n        sum += digit ** power\n        num = num // 10\n    return sum == original_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5979": {
    "question_id": "mbpp/597",
    "model": "deepseek-v3-250324",
    "generation_code": "def armstrong_number(num):\n    if num < 0:\n        return False\n    original_num = num\n    sum = 0\n    power = len(str(num))\n    while num > 0:\n        digit = num % 10\n        sum += digit ** power\n        num = num // 10\n    return sum == original_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5980": {
    "question_id": "mbpp/598",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_average(n):\n    if n <= 0:\n        return (0, 0.0)\n    total = n * (n + 1) // 2\n    average = total / n\n    return (total, average)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5981": {
    "question_id": "mbpp/598",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_average(n):\n    if n <= 0:\n        return (0, 0.0)\n    total = n * (n + 1) // 2\n    average = total / n\n    return (total, average)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5982": {
    "question_id": "mbpp/598",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_average(n):\n    if n <= 0:\n        return (0, 0.0)\n    total = n * (n + 1) // 2\n    average = total / n\n    return (total, average)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5983": {
    "question_id": "mbpp/598",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_average(n):\n    if n <= 0:\n        return (0, 0.0)\n    total = n * (n + 1) // 2\n    average = total / n\n    return (total, average)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5984": {
    "question_id": "mbpp/598",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_average(n):\n    if n <= 0:\n        return (0, 0.0)\n    total = n * (n + 1) // 2\n    average = total / n\n    return (total, average)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5985": {
    "question_id": "mbpp/598",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_average(n):\n    if n <= 0:\n        return (0, 0.0)\n    total = n * (n + 1) // 2\n    average = total / n\n    return (total, average)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5986": {
    "question_id": "mbpp/598",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_average(n):\n    if n <= 0:\n        return (0, 0.0)\n    total = n * (n + 1) // 2\n    average = total / n\n    return (total, average)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5987": {
    "question_id": "mbpp/598",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_average(n):\n    if n <= 0:\n        return (0, 0.0)\n    total = n * (n + 1) // 2\n    average = total / n\n    return (total, average)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5988": {
    "question_id": "mbpp/598",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_average(n):\n    if n <= 0:\n        return (0, 0.0)\n    total = n * (n + 1) // 2\n    average = total / n\n    return (total, average)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5989": {
    "question_id": "mbpp/598",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_average(n):\n    if n <= 0:\n        return (0, 0.0)\n    total = n * (n + 1) // 2\n    average = total / n\n    return (total, average)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5990": {
    "question_id": "mbpp/599",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Even(n):\n    return (n & 1) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5991": {
    "question_id": "mbpp/599",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Even(n):\n    return (n & 1) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5992": {
    "question_id": "mbpp/599",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Even(n):\n    return (n & 1) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5993": {
    "question_id": "mbpp/599",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Even(n):\n    return (n & 1) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5994": {
    "question_id": "mbpp/599",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Even(n):\n    return (n & 1) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5995": {
    "question_id": "mbpp/599",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Even(n):\n    return (n & 1) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5996": {
    "question_id": "mbpp/599",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Even(n):\n    return (n & 1) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5997": {
    "question_id": "mbpp/599",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Even(n):\n    return (n & 1) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5998": {
    "question_id": "mbpp/599",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Even(n):\n    return (n & 1) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "5999": {
    "question_id": "mbpp/599",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Even(n):\n    return (n & 1) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6000": {
    "question_id": "mbpp/600",
    "model": "deepseek-v3-250324",
    "generation_code": "class Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(arr, n):\n    if n == 0:\n        return 0\n    \n    arr.sort(key=lambda x: x.b)\n    \n    max_length = 1\n    prev_b = arr[0].b\n    \n    for i in range(1, n):\n        if arr[i].a > prev_b:\n            max_length += 1\n            prev_b = arr[i].b\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6001": {
    "question_id": "mbpp/600",
    "model": "deepseek-v3-250324",
    "generation_code": "class Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(arr, n):\n    if n == 0:\n        return 0\n    \n    arr.sort(key=lambda x: x.b)\n    \n    max_length = 1\n    prev_end = arr[0].b\n    \n    for i in range(1, n):\n        if arr[i].a > prev_end:\n            max_length += 1\n            prev_end = arr[i].b\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6002": {
    "question_id": "mbpp/600",
    "model": "deepseek-v3-250324",
    "generation_code": "class Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(arr, n):\n    if n == 0:\n        return 0\n    \n    arr.sort(key=lambda x: x.b)\n    \n    max_length = 1\n    prev_b = arr[0].b\n    \n    for i in range(1, n):\n        if arr[i].a > prev_b:\n            max_length += 1\n            prev_b = arr[i].b\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6003": {
    "question_id": "mbpp/600",
    "model": "deepseek-v3-250324",
    "generation_code": "class Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(arr, n):\n    if n == 0:\n        return 0\n    \n    arr.sort(key=lambda x: x.b)\n    \n    max_length = 1\n    prev_end = arr[0].b\n    \n    for i in range(1, n):\n        if arr[i].a > prev_end:\n            max_length += 1\n            prev_end = arr[i].b\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6004": {
    "question_id": "mbpp/600",
    "model": "deepseek-v3-250324",
    "generation_code": "class Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(pairs, n):\n    if not pairs or n == 0:\n        return 0\n    \n    # Sort pairs based on the second element\n    pairs.sort(key=lambda x: x.b)\n    \n    max_length = 1\n    prev_end = pairs[0].b\n    \n    for i in range(1, n):\n        if pairs[i].a > prev_end:\n            max_length += 1\n            prev_end = pairs[i].b\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6005": {
    "question_id": "mbpp/600",
    "model": "deepseek-v3-250324",
    "generation_code": "class Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(arr, n):\n    if n == 0:\n        return 0\n    \n    arr.sort(key=lambda x: x.b)\n    \n    max_length = 1\n    prev_end = arr[0].b\n    \n    for i in range(1, n):\n        if arr[i].a > prev_end:\n            max_length += 1\n            prev_end = arr[i].b\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6006": {
    "question_id": "mbpp/600",
    "model": "deepseek-v3-250324",
    "generation_code": "class Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(pairs, n):\n    if n == 0:\n        return 0\n    \n    # Sort pairs based on the second element\n    pairs.sort(key=lambda x: x.b)\n    \n    dp = [1] * n\n    max_len = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if pairs[j].b < pairs[i].a and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n                if dp[i] > max_len:\n                    max_len = dp[i]\n    \n    return max_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6007": {
    "question_id": "mbpp/600",
    "model": "deepseek-v3-250324",
    "generation_code": "class Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(pairs, n):\n    if n == 0:\n        return 0\n    \n    # Sort pairs based on the second element\n    pairs.sort(key=lambda x: x.b)\n    \n    dp = [1] * n\n    max_len = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if pairs[j].b < pairs[i].a and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n                if dp[i] > max_len:\n                    max_len = dp[i]\n    \n    return max_len",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6008": {
    "question_id": "mbpp/600",
    "model": "deepseek-v3-250324",
    "generation_code": "class Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(arr, n):\n    if n == 0:\n        return 0\n    \n    arr.sort(key=lambda x: x.b)\n    \n    max_length = 1\n    prev_end = arr[0].b\n    \n    for i in range(1, n):\n        if arr[i].a > prev_end:\n            max_length += 1\n            prev_end = arr[i].b\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6009": {
    "question_id": "mbpp/600",
    "model": "deepseek-v3-250324",
    "generation_code": "class Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(arr, n):\n    if n == 0:\n        return 0\n    \n    arr.sort(key=lambda x: x.b)\n    \n    max_length = 1\n    prev_end = arr[0].b\n    \n    for i in range(1, n):\n        if arr[i].a > prev_end:\n            max_length += 1\n            prev_end = arr[i].b\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6010": {
    "question_id": "mbpp/601",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "6011": {
    "question_id": "mbpp/601",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "6012": {
    "question_id": "mbpp/601",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "6013": {
    "question_id": "mbpp/601",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "6014": {
    "question_id": "mbpp/601",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "6015": {
    "question_id": "mbpp/601",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "6016": {
    "question_id": "mbpp/601",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "6017": {
    "question_id": "mbpp/601",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "6018": {
    "question_id": "mbpp/601",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "6019": {
    "question_id": "mbpp/601",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
    "test_output": "FAILED: expect None,in fact None",
    "test_result": "False"
  },
  "6020": {
    "question_id": "mbpp/602",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_ludic(n):\n    if n < 1:\n        return []\n    ludics = list(range(1, n + 1))\n    index = 1\n    while index < len(ludics):\n        current = ludics[index]\n        step = current\n        i = step\n        while i < len(ludics):\n            ludics.pop(i)\n            i += step - 1\n        index += 1\n    return ludics",
    "test_output": "FAILED: expect [1, 2, 3, 5, 7],in fact [1, 2, 4, 6, 10]",
    "test_result": "False"
  },
  "6021": {
    "question_id": "mbpp/602",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_ludic(n):\n    if n < 1:\n        return []\n    ludics = list(range(1, n + 1))\n    index = 1\n    while index < len(ludics):\n        current = ludics[index]\n        step = current\n        i = step - 1\n        while i < len(ludics):\n            ludics.pop(i)\n            i += step - 1\n        index += 1\n    return ludics",
    "test_output": "FAILED: expect [1, 2, 3, 5, 7],in fact [1, 3, 5, 7]",
    "test_result": "False"
  },
  "6022": {
    "question_id": "mbpp/602",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_ludic(n):\n    if n < 1:\n        return []\n    ludics = list(range(1, n + 1))\n    index = 1\n    while index < len(ludics):\n        current = ludics[index]\n        step = current\n        # Start removing elements from current + step - 1, with step 'step'\n        remove_index = current\n        while remove_index < len(ludics):\n            ludics.pop(remove_index)\n            remove_index += current - 1  # Because we just removed one element\n        index += 1\n    return ludics",
    "test_output": "FAILED: expect [1, 2, 3, 5, 7],in fact [1, 2, 4, 6, 10]",
    "test_result": "False"
  },
  "6023": {
    "question_id": "mbpp/602",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_ludic(n):\n    if n < 1:\n        return []\n    ludics = list(range(1, n + 1))\n    index = 1\n    while index < len(ludics):\n        current = ludics[index]\n        step = current\n        i = step - 1\n        while i < len(ludics):\n            ludics.pop(i)\n            i += step - 1\n        index += 1\n    return ludics",
    "test_output": "FAILED: expect [1, 2, 3, 5, 7],in fact [1, 3, 5, 7]",
    "test_result": "False"
  },
  "6024": {
    "question_id": "mbpp/602",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_ludic(n):\n    if n < 1:\n        return []\n    ludics = list(range(1, n + 1))\n    index = 1\n    while index < len(ludics):\n        current = ludics[index]\n        step = current\n        i = step - 1\n        while i < len(ludics):\n            ludics.pop(i)\n            i += step - 1\n        index += 1\n    return ludics",
    "test_output": "FAILED: expect [1, 2, 3, 5, 7],in fact [1, 3, 5, 7]",
    "test_result": "False"
  },
  "6025": {
    "question_id": "mbpp/602",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_ludic(n):\n    if n < 1:\n        return []\n    ludics = list(range(1, n + 1))\n    index = 1\n    while index < len(ludics):\n        current = ludics[index]\n        step = current\n        i = step - 1\n        while i < len(ludics):\n            ludics.pop(i)\n            i += step - 1\n        index += 1\n    return ludics",
    "test_output": "FAILED: expect [1, 2, 3, 5, 7],in fact [1, 3, 5, 7]",
    "test_result": "False"
  },
  "6026": {
    "question_id": "mbpp/602",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_ludic(n):\n    if n < 1:\n        return []\n    ludics = list(range(1, n + 1))\n    index = 1\n    while index < len(ludics):\n        current = ludics[index]\n        step = current\n        i = step - 1\n        while i < len(ludics):\n            ludics.pop(i)\n            if i < len(ludics) and ludics[i] == current + step:\n                step += current\n            i += step - 1\n        index += 1\n    return ludics",
    "test_output": "FAILED: expect [1, 2, 3, 5, 7],in fact [1, 3, 5, 7]",
    "test_result": "False"
  },
  "6027": {
    "question_id": "mbpp/602",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_ludic(n):\n    if n < 1:\n        return []\n    ludics = list(range(1, n + 1))\n    index = 1\n    while index < len(ludics):\n        current = ludics[index]\n        step = current\n        i = step - 1\n        while i < len(ludics):\n            ludics.pop(i)\n            i += step - 1\n        index += 1\n    return ludics",
    "test_output": "FAILED: expect [1, 2, 3, 5, 7],in fact [1, 3, 5, 7]",
    "test_result": "False"
  },
  "6028": {
    "question_id": "mbpp/602",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_ludic(n):\n    if n < 1:\n        return []\n    ludics = list(range(1, n + 1))\n    index = 1\n    while index < len(ludics):\n        current = ludics[index]\n        step = current\n        i = step - 1\n        while i < len(ludics):\n            ludics.pop(i)\n            i += step - 1\n        index += 1\n    return ludics",
    "test_output": "FAILED: expect [1, 2, 3, 5, 7],in fact [1, 3, 5, 7]",
    "test_result": "False"
  },
  "6029": {
    "question_id": "mbpp/602",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_ludic(n):\n    if n < 1:\n        return []\n    ludics = list(range(1, n + 1))\n    index = 1\n    while index < len(ludics):\n        current = ludics[index]\n        step = current\n        i = step - 1\n        while i < len(ludics):\n            ludics.pop(i)\n            i += step - 1\n        index += 1\n    return ludics",
    "test_output": "FAILED: expect [1, 2, 3, 5, 7],in fact [1, 3, 5, 7]",
    "test_result": "False"
  },
  "6030": {
    "question_id": "mbpp/603",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6031": {
    "question_id": "mbpp/603",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6032": {
    "question_id": "mbpp/603",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6033": {
    "question_id": "mbpp/603",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6034": {
    "question_id": "mbpp/603",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6035": {
    "question_id": "mbpp/603",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6036": {
    "question_id": "mbpp/603",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6037": {
    "question_id": "mbpp/603",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6038": {
    "question_id": "mbpp/603",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6039": {
    "question_id": "mbpp/603",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6040": {
    "question_id": "mbpp/604",
    "model": "deepseek-v3-250324",
    "generation_code": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6041": {
    "question_id": "mbpp/604",
    "model": "deepseek-v3-250324",
    "generation_code": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6042": {
    "question_id": "mbpp/604",
    "model": "deepseek-v3-250324",
    "generation_code": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6043": {
    "question_id": "mbpp/604",
    "model": "deepseek-v3-250324",
    "generation_code": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6044": {
    "question_id": "mbpp/604",
    "model": "deepseek-v3-250324",
    "generation_code": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6045": {
    "question_id": "mbpp/604",
    "model": "deepseek-v3-250324",
    "generation_code": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6046": {
    "question_id": "mbpp/604",
    "model": "deepseek-v3-250324",
    "generation_code": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6047": {
    "question_id": "mbpp/604",
    "model": "deepseek-v3-250324",
    "generation_code": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6048": {
    "question_id": "mbpp/604",
    "model": "deepseek-v3-250324",
    "generation_code": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6049": {
    "question_id": "mbpp/604",
    "model": "deepseek-v3-250324",
    "generation_code": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6050": {
    "question_id": "mbpp/605",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6051": {
    "question_id": "mbpp/605",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6052": {
    "question_id": "mbpp/605",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6053": {
    "question_id": "mbpp/605",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6054": {
    "question_id": "mbpp/605",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6055": {
    "question_id": "mbpp/605",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6056": {
    "question_id": "mbpp/605",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6057": {
    "question_id": "mbpp/605",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6058": {
    "question_id": "mbpp/605",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6059": {
    "question_id": "mbpp/605",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6060": {
    "question_id": "mbpp/606",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6061": {
    "question_id": "mbpp/606",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6062": {
    "question_id": "mbpp/606",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6063": {
    "question_id": "mbpp/606",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6064": {
    "question_id": "mbpp/606",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6065": {
    "question_id": "mbpp/606",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return (pattern, -1, -1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6066": {
    "question_id": "mbpp/606",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6067": {
    "question_id": "mbpp/606",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6068": {
    "question_id": "mbpp/606",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6069": {
    "question_id": "mbpp/606",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6070": {
    "question_id": "mbpp/607",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_Number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n+1) for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6071": {
    "question_id": "mbpp/607",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_Number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6072": {
    "question_id": "mbpp/607",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_Number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n+1) for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6073": {
    "question_id": "mbpp/607",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_Number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n+1) for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6074": {
    "question_id": "mbpp/607",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_Number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6075": {
    "question_id": "mbpp/607",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_Number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n+1) for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6076": {
    "question_id": "mbpp/607",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_Number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n+1) for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6077": {
    "question_id": "mbpp/607",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_Number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n+1) for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6078": {
    "question_id": "mbpp/607",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_Number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6079": {
    "question_id": "mbpp/607",
    "model": "deepseek-v3-250324",
    "generation_code": "def bell_Number(n):\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6080": {
    "question_id": "mbpp/608",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Min(x, y, k):\n    if k == 0:\n        return 0\n    return max(x, y) - ((max(x, y) - min(x, y)) % k + k) % k // 2",
    "test_output": "FAILED: expect 0,in fact 2",
    "test_result": "False"
  },
  "6081": {
    "question_id": "mbpp/608",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Min(x, y, k):\n    if k == 0:\n        return 0\n    m = (x + y) // k\n    return m",
    "test_output": "FAILED: expect 15,in fact 1",
    "test_result": "False"
  },
  "6082": {
    "question_id": "mbpp/608",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Min(x, y, k):\n    if k == 0:\n        return 0\n    return max(x, y) - (max(x, y) - min(x, y)) % k // 2",
    "test_output": "FAILED: expect 0,in fact 2",
    "test_result": "False"
  },
  "6083": {
    "question_id": "mbpp/608",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Min(a, b, c):\n    return (a + b + c) // 2",
    "test_output": "FAILED: expect 15,in fact 30",
    "test_result": "False"
  },
  "6084": {
    "question_id": "mbpp/608",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Min(a, b, c):\n    return (a * b) // c",
    "test_output": "FAILED: expect 15,in fact 6",
    "test_result": "False"
  },
  "6085": {
    "question_id": "mbpp/608",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Min(a, b, c):\n    return (c - b) // a",
    "test_output": "FAILED: expect 15,in fact 1",
    "test_result": "False"
  },
  "6086": {
    "question_id": "mbpp/608",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Min(x, y, k):\n    if k == 0:\n        return min(x, y)\n    min_val = min(x, y)\n    max_val = max(x, y)\n    diff = max_val - min_val\n    if diff <= k:\n        return min_val\n    else:\n        return max_val - k",
    "test_output": "FAILED: expect 15,in fact 10",
    "test_result": "False"
  },
  "6087": {
    "question_id": "mbpp/608",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Min(x, y, k):\n    if k == 0:\n        return min(x, y)\n    return min(x, y, (x + y + k) // 2)",
    "test_output": "FAILED: expect 15,in fact 10",
    "test_result": "False"
  },
  "6088": {
    "question_id": "mbpp/608",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Min(x, y, k):\n    if k == 0:\n        return 0\n    return max(x, y) - ((max(x, y) - min(x, y)) % k + k) % k // 2",
    "test_output": "FAILED: expect 0,in fact 2",
    "test_result": "False"
  },
  "6089": {
    "question_id": "mbpp/608",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Min(x, y, k):\n    if k == 0:\n        return 0\n    m = (x + y) // k\n    return m",
    "test_output": "FAILED: expect 15,in fact 1",
    "test_result": "False"
  },
  "6090": {
    "question_id": "mbpp/609",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_kth_element(lst, k):\n    if k <= 0 or k > len(lst):\n        return lst.copy()\n    return lst[:k-1] + lst[k:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6091": {
    "question_id": "mbpp/609",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_kth_element(lst, k):\n    if k <= 0 or k > len(lst):\n        return lst.copy()\n    return lst[:k-1] + lst[k:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6092": {
    "question_id": "mbpp/609",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_kth_element(lst, k):\n    if k <= 0 or k > len(lst):\n        return lst.copy()\n    return lst[:k-1] + lst[k:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6093": {
    "question_id": "mbpp/609",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_kth_element(lst, k):\n    if k <= 0 or k > len(lst):\n        return lst.copy()\n    return lst[:k-1] + lst[k:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6094": {
    "question_id": "mbpp/609",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_kth_element(lst, k):\n    if k <= 0 or k > len(lst):\n        return lst.copy()\n    return lst[:k-1] + lst[k:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6095": {
    "question_id": "mbpp/609",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_kth_element(lst, k):\n    if k <= 0 or k > len(lst):\n        return lst.copy()\n    return lst[:k-1] + lst[k:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6096": {
    "question_id": "mbpp/609",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_kth_element(lst, k):\n    if k <= 0 or k > len(lst):\n        return lst.copy()\n    return lst[:k-1] + lst[k:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6097": {
    "question_id": "mbpp/609",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_kth_element(lst, k):\n    if k <= 0 or k > len(lst):\n        return lst.copy()\n    return lst[:k-1] + lst[k:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6098": {
    "question_id": "mbpp/609",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_kth_element(lst, k):\n    if k <= 0 or k > len(lst):\n        return lst\n    return lst[:k-1] + lst[k:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6099": {
    "question_id": "mbpp/609",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_kth_element(lst, k):\n    if k <= 0 or k > len(lst):\n        return lst.copy()\n    return lst[:k-1] + lst[k:]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6100": {
    "question_id": "mbpp/610",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_nth(tuple_list, n):\n    if not tuple_list or n < 0:\n        return None\n    try:\n        return max(t[n] for t in tuple_list)\n    except IndexError:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6101": {
    "question_id": "mbpp/610",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_nth(tuple_list, n):\n    if not tuple_list or n < 0 or n >= len(tuple_list[0]):\n        return None\n    max_val = tuple_list[0][n]\n    for t in tuple_list:\n        if t[n] > max_val:\n            max_val = t[n]\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6102": {
    "question_id": "mbpp/610",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_nth(tuple_list, n):\n    if not tuple_list or n < 0:\n        return None\n    try:\n        return max(t[n] for t in tuple_list if len(t) > n)\n    except ValueError:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6103": {
    "question_id": "mbpp/610",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_nth(tuple_list, n):\n    if not tuple_list or n < 0 or n >= len(tuple_list[0]):\n        return None\n    return max(tup[n] for tup in tuple_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6104": {
    "question_id": "mbpp/610",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_nth(tuple_list, n):\n    if not tuple_list or n < 0 or n >= len(tuple_list[0]):\n        return None\n    max_val = tuple_list[0][n]\n    for t in tuple_list:\n        if n < len(t) and t[n] > max_val:\n            max_val = t[n]\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6105": {
    "question_id": "mbpp/610",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_nth(tuple_list, n):\n    if not tuple_list or n < 0:\n        return None\n    try:\n        return max(t[n] for t in tuple_list if len(t) > n)\n    except ValueError:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6106": {
    "question_id": "mbpp/610",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_nth(tuple_list, n):\n    if not tuple_list or n < 0 or n >= len(tuple_list[0]):\n        return None\n    max_val = tuple_list[0][n]\n    for t in tuple_list:\n        if len(t) <= n:\n            return None\n        if t[n] > max_val:\n            max_val = t[n]\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6107": {
    "question_id": "mbpp/610",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_nth(tuple_list, n):\n    if not tuple_list or n < 0:\n        return None\n    try:\n        return max(t[n] for t in tuple_list)\n    except IndexError:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6108": {
    "question_id": "mbpp/610",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_nth(tuple_list, n):\n    if not tuple_list or n < 0 or n >= len(tuple_list[0]):\n        return None\n    return max(tup[n] for tup in tuple_list)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6109": {
    "question_id": "mbpp/610",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_nth(tuple_list, n):\n    if not tuple_list or n < 0 or n >= len(tuple_list[0]):\n        return None\n    max_val = tuple_list[0][n]\n    for t in tuple_list:\n        if t[n] > max_val:\n            max_val = t[n]\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6110": {
    "question_id": "mbpp/611",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge(lst):\n    if not lst:\n        return []\n    first_elements = []\n    last_elements = []\n    for sublist in lst:\n        if sublist:\n            first_elements.append(sublist[0])\n            last_elements.append(sublist[-1])\n    return [first_elements, last_elements]",
    "test_output": "FAILED: expect [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']],in fact [['x', 'a', 'm'], ['z', 'c', 'o']]",
    "test_result": "False"
  },
  "6111": {
    "question_id": "mbpp/611",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge(lst):\n    if not lst:\n        return []\n    first_elements = []\n    last_elements = []\n    for sublist in lst:\n        if sublist:\n            first_elements.append(sublist[0])\n            last_elements.append(sublist[-1])\n    return [first_elements, last_elements]",
    "test_output": "FAILED: expect [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']],in fact [['x', 'a', 'm'], ['z', 'c', 'o']]",
    "test_result": "False"
  },
  "6112": {
    "question_id": "mbpp/611",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge(lst):\n    if not lst:\n        return []\n    first_elements = []\n    last_elements = []\n    for sublist in lst:\n        if sublist:\n            first_elements.append(sublist[0])\n            last_elements.append(sublist[-1])\n    return [first_elements, last_elements]",
    "test_output": "FAILED: expect [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']],in fact [['x', 'a', 'm'], ['z', 'c', 'o']]",
    "test_result": "False"
  },
  "6113": {
    "question_id": "mbpp/611",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge(lst):\n    if not lst:\n        return []\n    first_elements = []\n    last_elements = []\n    for sublist in lst:\n        if sublist:\n            first_elements.append(sublist[0])\n            last_elements.append(sublist[-1])\n    return [first_elements, last_elements]",
    "test_output": "FAILED: expect [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']],in fact [['x', 'a', 'm'], ['z', 'c', 'o']]",
    "test_result": "False"
  },
  "6114": {
    "question_id": "mbpp/611",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge(lst):\n    if not lst:\n        return []\n    first_elements = []\n    last_elements = []\n    for sublist in lst:\n        if sublist:\n            first_elements.append(sublist[0])\n            last_elements.append(sublist[-1])\n    return [first_elements, last_elements]",
    "test_output": "FAILED: expect [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']],in fact [['x', 'a', 'm'], ['z', 'c', 'o']]",
    "test_result": "False"
  },
  "6115": {
    "question_id": "mbpp/611",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge(lst):\n    if not lst:\n        return []\n    first_elements = []\n    last_elements = []\n    for sublist in lst:\n        if sublist:\n            first_elements.append(sublist[0])\n            last_elements.append(sublist[-1])\n    return [first_elements, last_elements]",
    "test_output": "FAILED: expect [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']],in fact [['x', 'a', 'm'], ['z', 'c', 'o']]",
    "test_result": "False"
  },
  "6116": {
    "question_id": "mbpp/611",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge(lst):\n    if not lst:\n        return []\n    first_elements = []\n    last_elements = []\n    for sublist in lst:\n        if sublist:\n            first_elements.append(sublist[0])\n            last_elements.append(sublist[-1])\n    return [first_elements, last_elements]",
    "test_output": "FAILED: expect [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']],in fact [['x', 'a', 'm'], ['z', 'c', 'o']]",
    "test_result": "False"
  },
  "6117": {
    "question_id": "mbpp/611",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge(lst):\n    if not lst:\n        return []\n    first_elements = []\n    last_elements = []\n    for sublist in lst:\n        if sublist:\n            first_elements.append(sublist[0])\n            last_elements.append(sublist[-1])\n    return [first_elements, last_elements]",
    "test_output": "FAILED: expect [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']],in fact [['x', 'a', 'm'], ['z', 'c', 'o']]",
    "test_result": "False"
  },
  "6118": {
    "question_id": "mbpp/611",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge(lst):\n    if not lst:\n        return []\n    first_elements = []\n    last_elements = []\n    for sublist in lst:\n        if sublist:\n            first_elements.append(sublist[0])\n            last_elements.append(sublist[-1])\n    return [first_elements, last_elements]",
    "test_output": "FAILED: expect [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']],in fact [['x', 'a', 'm'], ['z', 'c', 'o']]",
    "test_result": "False"
  },
  "6119": {
    "question_id": "mbpp/611",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge(lst):\n    if not lst:\n        return []\n    first_elements = []\n    last_elements = []\n    for sublist in lst:\n        if sublist:\n            first_elements.append(sublist[0])\n            last_elements.append(sublist[-1])\n    return [first_elements, last_elements]",
    "test_output": "FAILED: expect [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']],in fact [['x', 'a', 'm'], ['z', 'c', 'o']]",
    "test_result": "False"
  },
  "6120": {
    "question_id": "mbpp/612",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_value(tuple_list):\n    result = []\n    for item in tuple_list:\n        key, values = item\n        max_val = max(values)\n        result.append((key, max_val))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6121": {
    "question_id": "mbpp/612",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_value(lst):\n    return [(key, max(val)) for key, val in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6122": {
    "question_id": "mbpp/612",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_value(lst):\n    return [(tup[0], max(tup[1])) for tup in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6123": {
    "question_id": "mbpp/612",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_value(lst):\n    return [(item[0], max(item[1])) for item in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6124": {
    "question_id": "mbpp/612",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_value(lst):\n    return [(key, max(values)) for key, values in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6125": {
    "question_id": "mbpp/612",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_value(tuple_list):\n    return [(key, max(lst)) for key, lst in tuple_list]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6126": {
    "question_id": "mbpp/612",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_value(records):\n    return [(key, max(lst)) for key, lst in records]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6127": {
    "question_id": "mbpp/612",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_value(lst):\n    return [(key, max(values)) for key, values in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6128": {
    "question_id": "mbpp/612",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_value(lst):\n    return [(key, max(values)) for key, values in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6129": {
    "question_id": "mbpp/612",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_value(lst):\n    return [(key, max(val)) for key, val in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6130": {
    "question_id": "mbpp/613",
    "model": "deepseek-v3-250324",
    "generation_code": "def cummulative_sum(tuple_list):\n    total = 0\n    for t in tuple_list:\n        total += sum(t)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6131": {
    "question_id": "mbpp/613",
    "model": "deepseek-v3-250324",
    "generation_code": "def cummulative_sum(tuple_list):\n    total = 0\n    for t in tuple_list:\n        total += sum(t)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6132": {
    "question_id": "mbpp/613",
    "model": "deepseek-v3-250324",
    "generation_code": "def cummulative_sum(tuple_list):\n    total = 0\n    for t in tuple_list:\n        total += sum(t)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6133": {
    "question_id": "mbpp/613",
    "model": "deepseek-v3-250324",
    "generation_code": "def cummulative_sum(tuple_list):\n    total = 0\n    for t in tuple_list:\n        total += sum(t)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6134": {
    "question_id": "mbpp/613",
    "model": "deepseek-v3-250324",
    "generation_code": "def cummulative_sum(tuple_list):\n    total = 0\n    for t in tuple_list:\n        total += sum(t)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6135": {
    "question_id": "mbpp/613",
    "model": "deepseek-v3-250324",
    "generation_code": "def cummulative_sum(tuple_list):\n    total = 0\n    for t in tuple_list:\n        total += sum(t)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6136": {
    "question_id": "mbpp/613",
    "model": "deepseek-v3-250324",
    "generation_code": "def cummulative_sum(tuple_list):\n    total = 0\n    for t in tuple_list:\n        total += sum(t)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6137": {
    "question_id": "mbpp/613",
    "model": "deepseek-v3-250324",
    "generation_code": "def cummulative_sum(tuple_list):\n    total = 0\n    for t in tuple_list:\n        total += sum(t)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6138": {
    "question_id": "mbpp/613",
    "model": "deepseek-v3-250324",
    "generation_code": "def cummulative_sum(tuple_list):\n    total = 0\n    for t in tuple_list:\n        total += sum(t)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6139": {
    "question_id": "mbpp/613",
    "model": "deepseek-v3-250324",
    "generation_code": "def cummulative_sum(tuple_list):\n    total = 0\n    for t in tuple_list:\n        total += sum(t)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6140": {
    "question_id": "mbpp/614",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_tuple(nums):\n    if not nums:\n        return []\n    return [sum(col) / len(col) for col in zip(*nums)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6141": {
    "question_id": "mbpp/614",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_tuple(nums):\n    if not nums:\n        return []\n    return [sum(col) / len(col) for col in zip(*nums)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6142": {
    "question_id": "mbpp/614",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_tuple(nums):\n    if not nums:\n        return []\n    return [sum(col) / len(col) for col in zip(*nums)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6143": {
    "question_id": "mbpp/614",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_tuple(nums):\n    if not nums:\n        return []\n    return [sum(col) / len(col) for col in zip(*nums)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6144": {
    "question_id": "mbpp/614",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_tuple(nums):\n    if not nums:\n        return []\n    return [sum(col) / len(col) for col in zip(*nums)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6145": {
    "question_id": "mbpp/614",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_tuple(nums):\n    if not nums:\n        return []\n    return [sum(x) / len(x) for x in zip(*nums)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6146": {
    "question_id": "mbpp/614",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_tuple(nums):\n    if not nums:\n        return []\n    return [sum(col) / len(col) for col in zip(*nums)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6147": {
    "question_id": "mbpp/614",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_tuple(nums):\n    if not nums:\n        return []\n    return [sum(col) / len(col) for col in zip(*nums)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6148": {
    "question_id": "mbpp/614",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_tuple(nums):\n    if not nums:\n        return []\n    return [sum(col) / len(col) for col in zip(*nums)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6149": {
    "question_id": "mbpp/614",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_tuple(nums):\n    if not nums:\n        return []\n    return [sum(col) / len(col) for col in zip(*nums)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6150": {
    "question_id": "mbpp/615",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6151": {
    "question_id": "mbpp/615",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a % b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6152": {
    "question_id": "mbpp/615",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a % b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6153": {
    "question_id": "mbpp/615",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a % b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6154": {
    "question_id": "mbpp/615",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6155": {
    "question_id": "mbpp/615",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(x % y for x, y in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6156": {
    "question_id": "mbpp/615",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a % b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6157": {
    "question_id": "mbpp/615",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a % b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6158": {
    "question_id": "mbpp/615",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a % b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6159": {
    "question_id": "mbpp/615",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a % b for a, b in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6160": {
    "question_id": "mbpp/616",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef min_Jumps(x, y, p):\n    distance = math.sqrt(x**2 + y**2)\n    if distance == 0:\n        return 0\n    if p == 0:\n        return float('inf')\n    return distance / p",
    "test_output": "FAILED: expect 3.5,in fact 0.45454545454545453",
    "test_result": "False"
  },
  "6161": {
    "question_id": "mbpp/616",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef min_Jumps(x, y, d):\n    distance = math.sqrt(x**2 + y**2)\n    if distance == 0:\n        return 0\n    if d == 0:\n        return float('inf')\n    jumps = distance / d\n    return jumps",
    "test_output": "FAILED: expect 3.5,in fact 0.45454545454545453",
    "test_result": "False"
  },
  "6162": {
    "question_id": "mbpp/616",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef min_Jumps(x, y, d):\n    distance = math.sqrt(x**2 + y**2)\n    if distance == 0:\n        return 0\n    if d == 0:\n        return float('inf')\n    jumps = distance / d\n    return jumps",
    "test_output": "FAILED: expect 3.5,in fact 0.45454545454545453",
    "test_result": "False"
  },
  "6163": {
    "question_id": "mbpp/616",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef min_Jumps(x, y, D):\n    if D == 0:\n        return 0\n    distance = math.sqrt(x**2 + y**2)\n    if distance == 0:\n        return 0\n    jumps = distance / D\n    return jumps",
    "test_output": "FAILED: expect 3.5,in fact 0.45454545454545453",
    "test_result": "False"
  },
  "6164": {
    "question_id": "mbpp/616",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef min_Jumps(x, y, D):\n    distance = math.sqrt(x**2 + y**2)\n    if D == 0:\n        return float('inf')\n    return distance / D",
    "test_output": "FAILED: expect 3.5,in fact 0.45454545454545453",
    "test_result": "False"
  },
  "6165": {
    "question_id": "mbpp/616",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef min_Jumps(x, y, d):\n    distance = math.sqrt(x**2 + y**2)\n    if d == 0:\n        return float('inf') if distance != 0 else 0.0\n    jumps = distance / d\n    return jumps",
    "test_output": "FAILED: expect 3.5,in fact 0.45454545454545453",
    "test_result": "False"
  },
  "6166": {
    "question_id": "mbpp/616",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef min_Jumps(x, y, p):\n    distance = math.sqrt(x**2 + y**2)\n    if distance == 0:\n        return 0\n    if p == 0:\n        return float('inf')\n    jumps = distance / p\n    return jumps",
    "test_output": "FAILED: expect 3.5,in fact 0.45454545454545453",
    "test_result": "False"
  },
  "6167": {
    "question_id": "mbpp/616",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef min_Jumps(x, y, d):\n    distance = math.sqrt(x**2 + y**2)\n    if d == 0:\n        return float('inf') if distance != 0 else 0.0\n    jumps = distance / d\n    return jumps if jumps.is_integer() else float(jumps)",
    "test_output": "FAILED: expect 3.5,in fact 0.45454545454545453",
    "test_result": "False"
  },
  "6168": {
    "question_id": "mbpp/616",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef min_Jumps(x, y, p):\n    distance = math.sqrt(x**2 + y**2)\n    if p == 0:\n        return float('inf') if distance != 0 else 0.0\n    jumps = distance / p\n    return jumps if jumps.is_integer() else jumps",
    "test_output": "FAILED: expect 3.5,in fact 0.45454545454545453",
    "test_result": "False"
  },
  "6169": {
    "question_id": "mbpp/616",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef min_Jumps(x, y, d):\n    distance = math.sqrt(x**2 + y**2)\n    if distance == 0:\n        return 0\n    if d == 0:\n        return float('inf')\n    jumps = distance / d\n    return jumps",
    "test_output": "FAILED: expect 3.5,in fact 0.45454545454545453",
    "test_result": "False"
  },
  "6170": {
    "question_id": "mbpp/617",
    "model": "deepseek-v3-250324",
    "generation_code": "div_list = lambda a, b: list(map(lambda x, y: x / y, a, b))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6171": {
    "question_id": "mbpp/617",
    "model": "deepseek-v3-250324",
    "generation_code": "div_list = lambda a, b: list(map(lambda x, y: x / y, a, b))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6172": {
    "question_id": "mbpp/617",
    "model": "deepseek-v3-250324",
    "generation_code": "div_list = lambda list1, list2: list(map(lambda x, y: x / y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6173": {
    "question_id": "mbpp/617",
    "model": "deepseek-v3-250324",
    "generation_code": "div_list = lambda list1, list2: list(map(lambda x, y: x / y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6174": {
    "question_id": "mbpp/617",
    "model": "deepseek-v3-250324",
    "generation_code": "div_list = lambda lst1, lst2: list(map(lambda x, y: x / y, lst1, lst2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6175": {
    "question_id": "mbpp/617",
    "model": "deepseek-v3-250324",
    "generation_code": "div_list = lambda x, y: list(map(lambda a, b: a / b, x, y))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6176": {
    "question_id": "mbpp/617",
    "model": "deepseek-v3-250324",
    "generation_code": "div_list = lambda list1, list2: list(map(lambda x, y: x / y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6177": {
    "question_id": "mbpp/617",
    "model": "deepseek-v3-250324",
    "generation_code": "div_list = lambda a, b: list(map(lambda x, y: x / y, a, b))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6178": {
    "question_id": "mbpp/617",
    "model": "deepseek-v3-250324",
    "generation_code": "div_list = lambda x, y: list(map(lambda a, b: a / b, x, y))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6179": {
    "question_id": "mbpp/617",
    "model": "deepseek-v3-250324",
    "generation_code": "div_list = lambda a, b: list(map(lambda x, y: x / y, a, b))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6180": {
    "question_id": "mbpp/618",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_num(s):\n    non_nums = []\n    nums = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums.append(char)\n    return ''.join(non_nums) + ''.join(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6181": {
    "question_id": "mbpp/618",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_num(s):\n    num_part = []\n    non_num_part = []\n    for char in s:\n        if char.isdigit():\n            num_part.append(char)\n        else:\n            non_num_part.append(char)\n    return ''.join(non_num_part) + ''.join(num_part)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6182": {
    "question_id": "mbpp/618",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_num(s):\n    nums = []\n    non_nums = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums.append(char)\n    return ''.join(non_nums) + ''.join(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6183": {
    "question_id": "mbpp/618",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_num(s):\n    num_part = []\n    non_num_part = []\n    for char in s:\n        if char.isdigit():\n            num_part.append(char)\n        else:\n            non_num_part.append(char)\n    return ''.join(non_num_part) + ''.join(num_part)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6184": {
    "question_id": "mbpp/618",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_num(s):\n    num_part = []\n    non_num_part = []\n    for char in s:\n        if char.isdigit():\n            num_part.append(char)\n        else:\n            non_num_part.append(char)\n    return ''.join(non_num_part) + ''.join(num_part)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6185": {
    "question_id": "mbpp/618",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_num(s):\n    nums = []\n    non_nums = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums.append(char)\n    return ''.join(non_nums) + ''.join(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6186": {
    "question_id": "mbpp/618",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_num(s):\n    nums = []\n    non_nums = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums.append(char)\n    return ''.join(non_nums) + ''.join(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6187": {
    "question_id": "mbpp/618",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_num(s):\n    nums = []\n    non_nums = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums.append(char)\n    return ''.join(non_nums) + ''.join(nums)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6188": {
    "question_id": "mbpp/618",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_num(s):\n    num_part = []\n    non_num_part = []\n    for char in s:\n        if char.isdigit():\n            num_part.append(char)\n        else:\n            non_num_part.append(char)\n    return ''.join(non_num_part) + ''.join(num_part)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6189": {
    "question_id": "mbpp/618",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_num(s):\n    num_part = []\n    non_num_part = []\n    for char in s:\n        if char.isdigit():\n            num_part.append(char)\n        else:\n            non_num_part.append(char)\n    return ''.join(non_num_part) + ''.join(num_part)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6190": {
    "question_id": "mbpp/619",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_subset(arr, n):\n    if n == 0:\n        return 0\n    \n    arr.sort()\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] % arr[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n    \n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6191": {
    "question_id": "mbpp/619",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_subset(a, n):\n    if not a:\n        return 0\n    \n    a.sort()\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n    \n    return max(dp) if dp else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6192": {
    "question_id": "mbpp/619",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_subset(a, n):\n    if not a:\n        return 0\n    \n    a.sort()\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n    \n    return max(dp) if dp else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6193": {
    "question_id": "mbpp/619",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_subset(a, n):\n    if not a:\n        return 0\n    \n    a.sort()\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n    \n    return max(dp) if dp else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6194": {
    "question_id": "mbpp/619",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_subset(a, n):\n    if n == 0:\n        return 0\n    \n    a.sort()\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n    \n    return max(dp) if dp else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6195": {
    "question_id": "mbpp/619",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_subset(a, n):\n    if not a:\n        return 0\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6196": {
    "question_id": "mbpp/619",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_subset(a, n):\n    if not a:\n        return 0\n    \n    a.sort()\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n    \n    return max(dp) if n > 0 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6197": {
    "question_id": "mbpp/619",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_subset(a, n):\n    if not a:\n        return 0\n    \n    a.sort()\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n    \n    return max(dp) if dp else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6198": {
    "question_id": "mbpp/619",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_subset(a, n):\n    if not a:\n        return 0\n    \n    a.sort()\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n    \n    return max(dp) if n > 0 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6199": {
    "question_id": "mbpp/619",
    "model": "deepseek-v3-250324",
    "generation_code": "def largest_subset(a, n):\n    if not a:\n        return 0\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n    return max(dp)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6200": {
    "question_id": "mbpp/620",
    "model": "deepseek-v3-250324",
    "generation_code": "def increment_numerics(strings, k):\n    result = []\n    for s in strings:\n        if s.isdigit():\n            incremented = str(int(s) + k)\n            result.append(incremented)\n        else:\n            result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6201": {
    "question_id": "mbpp/620",
    "model": "deepseek-v3-250324",
    "generation_code": "def increment_numerics(strings, k):\n    result = []\n    for s in strings:\n        if s.isdigit():\n            incremented = str(int(s) + k)\n            result.append(incremented)\n        else:\n            result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6202": {
    "question_id": "mbpp/620",
    "model": "deepseek-v3-250324",
    "generation_code": "def increment_numerics(strings, k):\n    result = []\n    for s in strings:\n        if s.isdigit():\n            incremented = str(int(s) + k)\n            result.append(incremented)\n        else:\n            result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6203": {
    "question_id": "mbpp/620",
    "model": "deepseek-v3-250324",
    "generation_code": "def increment_numerics(strings, k):\n    result = []\n    for s in strings:\n        if s.isdigit():\n            incremented = str(int(s) + k)\n            result.append(incremented)\n        else:\n            result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6204": {
    "question_id": "mbpp/620",
    "model": "deepseek-v3-250324",
    "generation_code": "def increment_numerics(strings, k):\n    result = []\n    for s in strings:\n        if s.isdigit():\n            incremented = str(int(s) + k)\n            result.append(incremented)\n        else:\n            result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6205": {
    "question_id": "mbpp/620",
    "model": "deepseek-v3-250324",
    "generation_code": "def increment_numerics(strings, k):\n    result = []\n    for s in strings:\n        if s.isdigit():\n            incremented = str(int(s) + k)\n            result.append(incremented)\n        else:\n            result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6206": {
    "question_id": "mbpp/620",
    "model": "deepseek-v3-250324",
    "generation_code": "def increment_numerics(strings, k):\n    result = []\n    for s in strings:\n        if s.isdigit():\n            incremented = str(int(s) + k)\n            result.append(incremented)\n        else:\n            result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6207": {
    "question_id": "mbpp/620",
    "model": "deepseek-v3-250324",
    "generation_code": "def increment_numerics(strings, k):\n    result = []\n    for s in strings:\n        if s.isdigit():\n            incremented = str(int(s) + k)\n            result.append(incremented)\n        else:\n            result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6208": {
    "question_id": "mbpp/620",
    "model": "deepseek-v3-250324",
    "generation_code": "def increment_numerics(strings, k):\n    result = []\n    for s in strings:\n        if s.isdigit():\n            incremented = str(int(s) + k)\n            result.append(incremented)\n        else:\n            result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6209": {
    "question_id": "mbpp/620",
    "model": "deepseek-v3-250324",
    "generation_code": "def increment_numerics(strings, k):\n    result = []\n    for s in strings:\n        if s.isdigit():\n            incremented = str(int(s) + k)\n            result.append(incremented)\n        else:\n            result.append(s)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6210": {
    "question_id": "mbpp/621",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_median(arr1, arr2, n):\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    count = 0\n    while count <= n:\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        count += 1\n    return (m1 + m2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6211": {
    "question_id": "mbpp/621",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_median(arr1, arr2, n):\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    count = 0\n    while count <= n:\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        count += 1\n    return (m1 + m2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6212": {
    "question_id": "mbpp/621",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_median(arr1, arr2, n):\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6213": {
    "question_id": "mbpp/621",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_median(arr1, arr2, n):\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count <= n:\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        count += 1\n    return (m1 + m2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6214": {
    "question_id": "mbpp/621",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_median(arr1, arr2, n):\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count <= n:\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        count += 1\n    return (m1 + m2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6215": {
    "question_id": "mbpp/621",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_median(arr1, arr2, n):\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6216": {
    "question_id": "mbpp/621",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_median(arr1, arr2, n):\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count <= n:\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        count += 1\n    return (m1 + m2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6217": {
    "question_id": "mbpp/621",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_median(arr1, arr2, n):\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count <= n:\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        count += 1\n    return (m1 + m2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6218": {
    "question_id": "mbpp/621",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_median(arr1, arr2, n):\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    for count in range(n + 1):\n        m1 = m2\n        if i == n:\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m2 = arr1[i]\n            i += 1\n        else:\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6219": {
    "question_id": "mbpp/621",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_median(arr1, arr2, n):\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count <= n:\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        count += 1\n    return (m1 + m2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6220": {
    "question_id": "mbpp/622",
    "model": "deepseek-v3-250324",
    "generation_code": "nth_nums = lambda lst, n: list(map(lambda x: x ** n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6221": {
    "question_id": "mbpp/622",
    "model": "deepseek-v3-250324",
    "generation_code": "nth_nums = lambda lst, n: list(map(lambda x: x ** n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6222": {
    "question_id": "mbpp/622",
    "model": "deepseek-v3-250324",
    "generation_code": "nth_nums = lambda lst, n: list(map(lambda x: x ** n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6223": {
    "question_id": "mbpp/622",
    "model": "deepseek-v3-250324",
    "generation_code": "nth_nums = lambda lst, n: list(map(lambda x: x ** n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6224": {
    "question_id": "mbpp/622",
    "model": "deepseek-v3-250324",
    "generation_code": "nth_nums = lambda lst, n: list(map(lambda x: x ** n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6225": {
    "question_id": "mbpp/622",
    "model": "deepseek-v3-250324",
    "generation_code": "nth_nums = lambda lst, n: [x ** n for x in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6226": {
    "question_id": "mbpp/622",
    "model": "deepseek-v3-250324",
    "generation_code": "nth_nums = lambda lst, n: list(map(lambda x: x ** n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6227": {
    "question_id": "mbpp/622",
    "model": "deepseek-v3-250324",
    "generation_code": "nth_nums = lambda lst, n: list(map(lambda x: x ** n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6228": {
    "question_id": "mbpp/622",
    "model": "deepseek-v3-250324",
    "generation_code": "nth_nums = lambda lst, n: [x ** n for x in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6229": {
    "question_id": "mbpp/622",
    "model": "deepseek-v3-250324",
    "generation_code": "nth_nums = lambda lst, n: list(map(lambda x: x ** n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6230": {
    "question_id": "mbpp/623",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_upper(s):\n    return s.upper()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6231": {
    "question_id": "mbpp/623",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_upper(s):\n    return s.upper()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6232": {
    "question_id": "mbpp/623",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_upper(s):\n    return s.upper()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6233": {
    "question_id": "mbpp/623",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_upper(s):\n    return s.upper()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6234": {
    "question_id": "mbpp/623",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_upper(s):\n    return s.upper()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6235": {
    "question_id": "mbpp/623",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_upper(s):\n    return s.upper()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6236": {
    "question_id": "mbpp/623",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_upper(s):\n    return s.upper()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6237": {
    "question_id": "mbpp/623",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_upper(s):\n    return s.upper()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6238": {
    "question_id": "mbpp/623",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_upper(s):\n    return s.upper()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6239": {
    "question_id": "mbpp/623",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_upper(s):\n    return s.upper()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6240": {
    "question_id": "mbpp/624",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6241": {
    "question_id": "mbpp/624",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6242": {
    "question_id": "mbpp/624",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6243": {
    "question_id": "mbpp/624",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6244": {
    "question_id": "mbpp/624",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6245": {
    "question_id": "mbpp/624",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6246": {
    "question_id": "mbpp/624",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6247": {
    "question_id": "mbpp/624",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6248": {
    "question_id": "mbpp/624",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6249": {
    "question_id": "mbpp/624",
    "model": "deepseek-v3-250324",
    "generation_code": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6250": {
    "question_id": "mbpp/625",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef triangle_area(r):\n    if r <= 0:\n        return 0\n    return r ** 2",
    "test_output": "FAILED: expect -1,in fact 0",
    "test_result": "False"
  },
  "6251": {
    "question_id": "mbpp/625",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef triangle_area(r):\n    if r <= 0:\n        return 0\n    return r * r",
    "test_output": "FAILED: expect -1,in fact 0",
    "test_result": "False"
  },
  "6252": {
    "question_id": "mbpp/625",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef triangle_area(r):\n    if r <= 0:\n        return 0\n    return r ** 2",
    "test_output": "FAILED: expect -1,in fact 0",
    "test_result": "False"
  },
  "6253": {
    "question_id": "mbpp/625",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef triangle_area(r):\n    if r <= 0:\n        return 0\n    return r ** 2",
    "test_output": "FAILED: expect -1,in fact 0",
    "test_result": "False"
  },
  "6254": {
    "question_id": "mbpp/625",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef triangle_area(r):\n    if r <= 0:\n        return 0\n    return r ** 2",
    "test_output": "FAILED: expect -1,in fact 0",
    "test_result": "False"
  },
  "6255": {
    "question_id": "mbpp/625",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef triangle_area(r):\n    if r <= 0:\n        return 0\n    return r ** 2",
    "test_output": "FAILED: expect -1,in fact 0",
    "test_result": "False"
  },
  "6256": {
    "question_id": "mbpp/625",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef triangle_area(r):\n    if r <= 0:\n        return 0\n    return r ** 2",
    "test_output": "FAILED: expect -1,in fact 0",
    "test_result": "False"
  },
  "6257": {
    "question_id": "mbpp/625",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef triangle_area(r):\n    if r <= 0:\n        return 0\n    return r ** 2",
    "test_output": "FAILED: expect -1,in fact 0",
    "test_result": "False"
  },
  "6258": {
    "question_id": "mbpp/625",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef triangle_area(r):\n    if r <= 0:\n        return 0\n    return r ** 2",
    "test_output": "FAILED: expect -1,in fact 0",
    "test_result": "False"
  },
  "6259": {
    "question_id": "mbpp/625",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef triangle_area(r):\n    if r <= 0:\n        return 0\n    return r ** 2",
    "test_output": "FAILED: expect -1,in fact 0",
    "test_result": "False"
  },
  "6260": {
    "question_id": "mbpp/626",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_First_Missing(array, start, end):\n    for i in range(start, end + 2):\n        if i not in array:\n            return i\n    return end + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6261": {
    "question_id": "mbpp/626",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_First_Missing(array, start, end):\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6262": {
    "question_id": "mbpp/626",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_First_Missing(array, start, end):\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6263": {
    "question_id": "mbpp/626",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_First_Missing(array, start, end):\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6264": {
    "question_id": "mbpp/626",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_First_Missing(array, start, end):\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6265": {
    "question_id": "mbpp/626",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_First_Missing(array, start, end):\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6266": {
    "question_id": "mbpp/626",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_First_Missing(array, start, end):\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6267": {
    "question_id": "mbpp/626",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_First_Missing(array, start, end):\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6268": {
    "question_id": "mbpp/626",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_First_Missing(array, start, end):\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6269": {
    "question_id": "mbpp/626",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_First_Missing(array, start, end):\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6270": {
    "question_id": "mbpp/627",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6271": {
    "question_id": "mbpp/627",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6272": {
    "question_id": "mbpp/627",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6273": {
    "question_id": "mbpp/627",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6274": {
    "question_id": "mbpp/627",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6275": {
    "question_id": "mbpp/627",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6276": {
    "question_id": "mbpp/627",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6277": {
    "question_id": "mbpp/627",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6278": {
    "question_id": "mbpp/627",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6279": {
    "question_id": "mbpp/627",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6280": {
    "question_id": "mbpp/628",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6281": {
    "question_id": "mbpp/628",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6282": {
    "question_id": "mbpp/628",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6283": {
    "question_id": "mbpp/628",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6284": {
    "question_id": "mbpp/628",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6285": {
    "question_id": "mbpp/628",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6286": {
    "question_id": "mbpp/628",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6287": {
    "question_id": "mbpp/628",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if isinstance(x, int) and x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6288": {
    "question_id": "mbpp/628",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6289": {
    "question_id": "mbpp/628",
    "model": "deepseek-v3-250324",
    "generation_code": "def Split(lst):\n    return [x for x in lst if isinstance(x, int) and x % 2 == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6290": {
    "question_id": "mbpp/629",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_coordinates(coord):\n    x, y = coord\n    adjacent = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            adjacent.append([i, j])\n    return adjacent",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6291": {
    "question_id": "mbpp/629",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            adjacent_coords.append([i, j])\n    return adjacent_coords",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6292": {
    "question_id": "mbpp/629",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            adjacent_coords.append([i, j])\n    return adjacent_coords",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6293": {
    "question_id": "mbpp/629",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            adjacent_coords.append([i, j])\n    return adjacent_coords",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6294": {
    "question_id": "mbpp/629",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            adjacent_coords.append([i, j])\n    return adjacent_coords",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6295": {
    "question_id": "mbpp/629",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_coordinates(coord):\n    x, y = coord\n    adjacent = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            adjacent.append([i, j])\n    return adjacent",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6296": {
    "question_id": "mbpp/629",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            adjacent_coords.append([x + dx, y + dy])\n    return adjacent_coords",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6297": {
    "question_id": "mbpp/629",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            adjacent_coords.append([x + dx, y + dy])\n    return adjacent_coords",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6298": {
    "question_id": "mbpp/629",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            adjacent_coords.append([i, j])\n    return adjacent_coords",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6299": {
    "question_id": "mbpp/629",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            adjacent_coords.append([i, j])\n    return adjacent_coords",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6300": {
    "question_id": "mbpp/630",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef replace_spaces(text):\n    return re.sub(r'\\s', '_', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6301": {
    "question_id": "mbpp/630",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef replace_spaces(text):\n    return re.sub(r' ', '_', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6302": {
    "question_id": "mbpp/630",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef replace_spaces(text):\n    return re.sub(r'\\s', '_', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6303": {
    "question_id": "mbpp/630",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef replace_spaces(s):\n    return re.sub(r'\\s', '_', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6304": {
    "question_id": "mbpp/630",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef replace_spaces(s):\n    return re.sub(r'\\s', '_', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6305": {
    "question_id": "mbpp/630",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef replace_spaces(text):\n    return re.sub(r'\\s', '_', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6306": {
    "question_id": "mbpp/630",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef replace_spaces(s):\n    return re.sub(r'\\s', '_', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6307": {
    "question_id": "mbpp/630",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef replace_spaces(s):\n    return re.sub(r' ', '_', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6308": {
    "question_id": "mbpp/630",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef replace_spaces(s):\n    return re.sub(r'\\s', '_', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6309": {
    "question_id": "mbpp/630",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef replace_spaces(s):\n    return re.sub(r'\\s', '_', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6310": {
    "question_id": "mbpp/631",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_zero(lst):\n    non_zeros = [x for x in lst if x != 0]\n    zeros = [0] * (len(lst) - len(non_zeros))\n    return non_zeros + zeros",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6311": {
    "question_id": "mbpp/631",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_zero(lst):\n    non_zeros = [x for x in lst if x != 0]\n    zeros = [0] * (len(lst) - len(non_zeros))\n    return non_zeros + zeros",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6312": {
    "question_id": "mbpp/631",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_zero(lst):\n    non_zero = [x for x in lst if x != 0]\n    zero_count = len(lst) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6313": {
    "question_id": "mbpp/631",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_zero(lst):\n    non_zero = [x for x in lst if x != 0]\n    zero_count = len(lst) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6314": {
    "question_id": "mbpp/631",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_zero(lst):\n    non_zero = [x for x in lst if x != 0]\n    zero_count = len(lst) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6315": {
    "question_id": "mbpp/631",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_zero(lst):\n    non_zero = [x for x in lst if x != 0]\n    zero_count = len(lst) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6316": {
    "question_id": "mbpp/631",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_zero(lst):\n    non_zero = [x for x in lst if x != 0]\n    zero_count = len(lst) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6317": {
    "question_id": "mbpp/631",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_zero(lst):\n    non_zeros = [x for x in lst if x != 0]\n    zeros = [0] * (len(lst) - len(non_zeros))\n    return non_zeros + zeros",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6318": {
    "question_id": "mbpp/631",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_zero(lst):\n    non_zero = [x for x in lst if x != 0]\n    zero_count = len(lst) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6319": {
    "question_id": "mbpp/631",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_zero(lst):\n    non_zero = [x for x in lst if x != 0]\n    zero_count = len(lst) - len(non_zero)\n    return non_zero + [0] * zero_count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6320": {
    "question_id": "mbpp/632",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_OR_Sum(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += arr[i] ^ arr[j]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6321": {
    "question_id": "mbpp/632",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_OR_Sum(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += arr[i] ^ arr[j]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6322": {
    "question_id": "mbpp/632",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_OR_Sum(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += arr[i] ^ arr[j]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6323": {
    "question_id": "mbpp/632",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_OR_Sum(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += arr[i] ^ arr[j]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6324": {
    "question_id": "mbpp/632",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_OR_Sum(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += arr[i] ^ arr[j]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6325": {
    "question_id": "mbpp/632",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_OR_Sum(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += arr[i] ^ arr[j]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6326": {
    "question_id": "mbpp/632",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_OR_Sum(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += arr[i] ^ arr[j]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6327": {
    "question_id": "mbpp/632",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_OR_Sum(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += arr[i] ^ arr[j]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6328": {
    "question_id": "mbpp/632",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_OR_Sum(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += arr[i] ^ arr[j]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6329": {
    "question_id": "mbpp/632",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_OR_Sum(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += arr[i] ^ arr[j]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6330": {
    "question_id": "mbpp/633",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6331": {
    "question_id": "mbpp/633",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum += even_num ** 4\n    return sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6332": {
    "question_id": "mbpp/633",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum += even_num ** 4\n    return sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6333": {
    "question_id": "mbpp/633",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6334": {
    "question_id": "mbpp/633",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6335": {
    "question_id": "mbpp/633",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6336": {
    "question_id": "mbpp/633",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6337": {
    "question_id": "mbpp/633",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6338": {
    "question_id": "mbpp/633",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum_power = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum_power += even_num ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6339": {
    "question_id": "mbpp/633",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum += even_num ** 4\n    return sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6340": {
    "question_id": "mbpp/634",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_sort(arr):\n    if not arr:\n        return []\n    heapq.heapify(arr)\n    sorted_arr = []\n    while arr:\n        sorted_arr.append(heapq.heappop(arr))\n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6341": {
    "question_id": "mbpp/634",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_sort(lst):\n    if not lst:\n        return []\n    heapq.heapify(lst)\n    sorted_list = []\n    while lst:\n        sorted_list.append(heapq.heappop(lst))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6342": {
    "question_id": "mbpp/634",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_sort(arr):\n    if not arr:\n        return []\n    heapq.heapify(arr)\n    sorted_list = []\n    while arr:\n        sorted_list.append(heapq.heappop(arr))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6343": {
    "question_id": "mbpp/634",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_sort(arr):\n    if not arr:\n        return []\n    heapq.heapify(arr)\n    sorted_list = []\n    while arr:\n        sorted_list.append(heapq.heappop(arr))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6344": {
    "question_id": "mbpp/634",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_sort(arr):\n    if not arr:\n        return []\n    heapq.heapify(arr)\n    sorted_list = []\n    while arr:\n        sorted_list.append(heapq.heappop(arr))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6345": {
    "question_id": "mbpp/634",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_sort(arr):\n    if not arr:\n        return []\n    heapq.heapify(arr)\n    sorted_arr = []\n    while arr:\n        sorted_arr.append(heapq.heappop(arr))\n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6346": {
    "question_id": "mbpp/634",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_sort(arr):\n    if not arr:\n        return []\n    heapq.heapify(arr)\n    sorted_arr = []\n    while arr:\n        sorted_arr.append(heapq.heappop(arr))\n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6347": {
    "question_id": "mbpp/634",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        heapq.heappush(h, value)\n    return [heapq.heappop(h) for _ in range(len(h))]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6348": {
    "question_id": "mbpp/634",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_sort(arr):\n    if not arr:\n        return []\n    heapq.heapify(arr)\n    sorted_list = []\n    while arr:\n        sorted_list.append(heapq.heappop(arr))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6349": {
    "question_id": "mbpp/634",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef heap_sort(arr):\n    if not arr:\n        return []\n    heapq.heapify(arr)\n    sorted_list = []\n    while arr:\n        sorted_list.append(heapq.heappop(arr))\n    return sorted_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6350": {
    "question_id": "mbpp/635",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0 or c == 0:\n        return \"No\"\n    if a == c and b == 0:\n        return \"Yes\"\n    return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "6351": {
    "question_id": "mbpp/635",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0 or c == 0:\n        return \"No\"\n    if b == 0 and a == c:\n        return \"Yes\"\n    if b != 0:\n        return \"No\"\n    return \"Yes\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "6352": {
    "question_id": "mbpp/635",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0 or c == 0:\n        return \"No\"\n    if b == 0 and a == c:\n        return \"Yes\"\n    if b != 0:\n        return \"No\"\n    return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "6353": {
    "question_id": "mbpp/635",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    if c == 0:\n        return \"No\"\n    if a == c and b == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "6354": {
    "question_id": "mbpp/635",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    if c == 0:\n        return \"No\"\n    if a == c and b == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "6355": {
    "question_id": "mbpp/635",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0 or c == 0:\n        return \"No\"\n    if b == 0 and a == c:\n        return \"Yes\"\n    if b != 0:\n        return \"No\"\n    return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "6356": {
    "question_id": "mbpp/635",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0 or c == 0:\n        return \"No\"\n    if b == 0 and a == c:\n        return \"Yes\"\n    if b != 0:\n        return \"No\"\n    return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "6357": {
    "question_id": "mbpp/635",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0 or c == 0:\n        return \"No\"\n    if b == 0 and a == c:\n        return \"Yes\"\n    if b != 0:\n        return \"No\"\n    return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "6358": {
    "question_id": "mbpp/635",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    root1 = (-b + (discriminant)**0.5) / (2*a)\n    root2 = (-b - (discriminant)**0.5) / (2*a)\n    if abs(root1 * root2 - 1) < 1e-9:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "6359": {
    "question_id": "mbpp/635",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0 or c == 0:\n        return \"No\"\n    if b == 0 and a == c:\n        return \"Yes\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    root1 = (-b + (discriminant)**0.5) / (2*a)\n    root2 = (-b - (discriminant)**0.5) / (2*a)\n    if abs(root1 * root2 - 1) < 1e-9:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6360": {
    "question_id": "mbpp/636",
    "model": "deepseek-v3-250324",
    "generation_code": "def noprofit_noloss(actual, predicted):\n    return actual == predicted",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6361": {
    "question_id": "mbpp/636",
    "model": "deepseek-v3-250324",
    "generation_code": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6362": {
    "question_id": "mbpp/636",
    "model": "deepseek-v3-250324",
    "generation_code": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6363": {
    "question_id": "mbpp/636",
    "model": "deepseek-v3-250324",
    "generation_code": "def noprofit_noloss(actual, estimated):\n    return actual == estimated",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6364": {
    "question_id": "mbpp/636",
    "model": "deepseek-v3-250324",
    "generation_code": "def noprofit_noloss(actual, predicted):\n    return actual == predicted",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6365": {
    "question_id": "mbpp/636",
    "model": "deepseek-v3-250324",
    "generation_code": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6366": {
    "question_id": "mbpp/636",
    "model": "deepseek-v3-250324",
    "generation_code": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6367": {
    "question_id": "mbpp/636",
    "model": "deepseek-v3-250324",
    "generation_code": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6368": {
    "question_id": "mbpp/636",
    "model": "deepseek-v3-250324",
    "generation_code": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6369": {
    "question_id": "mbpp/636",
    "model": "deepseek-v3-250324",
    "generation_code": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6370": {
    "question_id": "mbpp/637",
    "model": "deepseek-v3-250324",
    "generation_code": "def wind_chill(wind_speed, temperature):\n    if wind_speed < 5 or temperature > 10:\n        return round(temperature)\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) + 0.3965 * temperature * (wind_speed ** 0.16)\n    return round(wind_chill_index)",
    "test_output": "FAILED: expect 40,in fact 35",
    "test_result": "False"
  },
  "6371": {
    "question_id": "mbpp/637",
    "model": "deepseek-v3-250324",
    "generation_code": "def wind_chill(wind_speed, temperature):\n    if wind_speed < 5 or temperature > 10:\n        return round(temperature)\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) + 0.3965 * temperature * (wind_speed ** 0.16)\n    return round(wind_chill_index)",
    "test_output": "FAILED: expect 40,in fact 35",
    "test_result": "False"
  },
  "6372": {
    "question_id": "mbpp/637",
    "model": "deepseek-v3-250324",
    "generation_code": "def wind_chill(wind_speed, temperature):\n    if wind_speed < 5 or temperature > 50:\n        return temperature\n    wind_chill_index = 35.74 + 0.6215 * temperature - 35.75 * (wind_speed ** 0.16) + 0.4275 * temperature * (wind_speed ** 0.16)\n    return round(wind_chill_index)",
    "test_output": "FAILED: expect 40,in fact 13",
    "test_result": "False"
  },
  "6373": {
    "question_id": "mbpp/637",
    "model": "deepseek-v3-250324",
    "generation_code": "def wind_chill(wind_speed, temperature):\n    if wind_speed < 5 or temperature > 10:\n        return round(temperature)\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) + 0.3965 * temperature * (wind_speed ** 0.16)\n    return round(wind_chill_index)",
    "test_output": "FAILED: expect 40,in fact 35",
    "test_result": "False"
  },
  "6374": {
    "question_id": "mbpp/637",
    "model": "deepseek-v3-250324",
    "generation_code": "def wind_chill(wind_speed, temperature):\n    if wind_speed < 5 or temperature > 10:\n        return round(temperature)\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) + 0.3965 * temperature * (wind_speed ** 0.16)\n    return round(wind_chill_index)",
    "test_output": "FAILED: expect 40,in fact 35",
    "test_result": "False"
  },
  "6375": {
    "question_id": "mbpp/637",
    "model": "deepseek-v3-250324",
    "generation_code": "def wind_chill(wind_speed, temperature):\n    if wind_speed < 3 or temperature > 50:\n        return round(temperature)\n    wind_chill_index = 35.74 + 0.6215 * temperature - 35.75 * (wind_speed ** 0.16) + 0.4275 * temperature * (wind_speed ** 0.16)\n    return round(wind_chill_index)",
    "test_output": "FAILED: expect 40,in fact 13",
    "test_result": "False"
  },
  "6376": {
    "question_id": "mbpp/637",
    "model": "deepseek-v3-250324",
    "generation_code": "def wind_chill(wind_speed, temperature):\n    if wind_speed < 5 or temperature > 50:\n        return temperature\n    wci = 35.74 + 0.6215 * temperature - 35.75 * (wind_speed ** 0.16) + 0.4275 * temperature * (wind_speed ** 0.16)\n    return round(wci)",
    "test_output": "FAILED: expect 40,in fact 13",
    "test_result": "False"
  },
  "6377": {
    "question_id": "mbpp/637",
    "model": "deepseek-v3-250324",
    "generation_code": "def wind_chill(wind_speed, temperature):\n    if wind_speed < 3 or temperature > 50:\n        return round(temperature)\n    wind_chill_index = 35.74 + 0.6215 * temperature - 35.75 * (wind_speed ** 0.16) + 0.4275 * temperature * (wind_speed ** 0.16)\n    return round(wind_chill_index)",
    "test_output": "FAILED: expect 40,in fact 13",
    "test_result": "False"
  },
  "6378": {
    "question_id": "mbpp/637",
    "model": "deepseek-v3-250324",
    "generation_code": "def wind_chill(wind_speed, temperature):\n    if wind_speed < 5 or temperature > 50:\n        return round(temperature)\n    wind_chill_index = 35.74 + 0.6215 * temperature - 35.75 * (wind_speed ** 0.16) + 0.4275 * temperature * (wind_speed ** 0.16)\n    return round(wind_chill_index)",
    "test_output": "FAILED: expect 40,in fact 13",
    "test_result": "False"
  },
  "6379": {
    "question_id": "mbpp/637",
    "model": "deepseek-v3-250324",
    "generation_code": "def wind_chill(wind_speed, temperature):\n    if wind_speed < 5 or temperature > 50:\n        return temperature\n    wci = 35.74 + 0.6215 * temperature - 35.75 * (wind_speed ** 0.16) + 0.4275 * temperature * (wind_speed ** 0.16)\n    return round(wci)",
    "test_output": "FAILED: expect 40,in fact 13",
    "test_result": "False"
  },
  "6380": {
    "question_id": "mbpp/638",
    "model": "deepseek-v3-250324",
    "generation_code": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if name and name[0].isupper():\n            total_length += len(name)\n    return total_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6381": {
    "question_id": "mbpp/638",
    "model": "deepseek-v3-250324",
    "generation_code": "def sample_nam(names):\n    total = 0\n    for name in names:\n        if name and name[0].isupper():\n            total += len(name)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6382": {
    "question_id": "mbpp/638",
    "model": "deepseek-v3-250324",
    "generation_code": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if len(name) > 0 and name[0].isupper():\n            total_length += len(name)\n    return total_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6383": {
    "question_id": "mbpp/638",
    "model": "deepseek-v3-250324",
    "generation_code": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if len(name) > 0 and name[0].isupper():\n            total_length += len(name)\n    return total_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6384": {
    "question_id": "mbpp/638",
    "model": "deepseek-v3-250324",
    "generation_code": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if len(name) > 0 and name[0].isupper():\n            total_length += len(name)\n    return total_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6385": {
    "question_id": "mbpp/638",
    "model": "deepseek-v3-250324",
    "generation_code": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if len(name) > 0 and name[0].isupper():\n            total_length += len(name)\n    return total_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6386": {
    "question_id": "mbpp/638",
    "model": "deepseek-v3-250324",
    "generation_code": "def sample_nam(names):\n    total = 0\n    for name in names:\n        if name and name[0].isupper():\n            total += len(name)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6387": {
    "question_id": "mbpp/638",
    "model": "deepseek-v3-250324",
    "generation_code": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if len(name) > 0 and name[0].isupper():\n            total_length += len(name)\n    return total_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6388": {
    "question_id": "mbpp/638",
    "model": "deepseek-v3-250324",
    "generation_code": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if len(name) > 0 and name[0].isupper():\n            total_length += len(name)\n    return total_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6389": {
    "question_id": "mbpp/638",
    "model": "deepseek-v3-250324",
    "generation_code": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if len(name) > 0 and name[0].isupper():\n            total_length += len(name)\n    return total_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6390": {
    "question_id": "mbpp/639",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_parenthesis(lst):\n    if not lst:\n        return \"\"\n    s = lst[0]\n    result = []\n    inside = False\n    for char in s:\n        if char == '(':\n            inside = True\n        elif char == ')':\n            inside = False\n        else:\n            if not inside:\n                result.append(char)\n    return ''.join(result)",
    "test_output": "FAILED: expect python,in fact python ",
    "test_result": "False"
  },
  "6391": {
    "question_id": "mbpp/639",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_parenthesis(lst):\n    result = []\n    for s in lst:\n        new_s = []\n        in_paren = False\n        for char in s:\n            if char == '(':\n                in_paren = True\n            elif char == ')':\n                in_paren = False\n            else:\n                if not in_paren:\n                    new_s.append(char)\n        result.append(''.join(new_s))\n    return tuple(result)",
    "test_output": "FAILED: expect python,in fact ('python ',)",
    "test_result": "False"
  },
  "6392": {
    "question_id": "mbpp/639",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_parenthesis(lst):\n    if not lst:\n        return \"\"\n    s = lst[0]\n    start = s.find('(')\n    end = s.find(')')\n    if start != -1 and end != -1:\n        return s[:start].strip()\n    return s",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6393": {
    "question_id": "mbpp/639",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_parenthesis(lst):\n    if not lst:\n        return \"\"\n    s = lst[0]\n    start = s.find('(')\n    end = s.find(')')\n    if start != -1 and end != -1:\n        return s[:start] + s[end+1:]\n    return s",
    "test_output": "FAILED: expect python,in fact python ",
    "test_result": "False"
  },
  "6394": {
    "question_id": "mbpp/639",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_parenthesis(lst):\n    if not lst:\n        return \"\"\n    s = lst[0]\n    start = s.find('(')\n    end = s.find(')')\n    if start != -1 and end != -1:\n        return s[:start].strip()\n    return s",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6395": {
    "question_id": "mbpp/639",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_parenthesis(lst):\n    if not lst:\n        return \"\"\n    s = lst[0]\n    result = []\n    inside = False\n    for char in s:\n        if char == '(':\n            inside = True\n        elif char == ')':\n            inside = False\n        else:\n            if not inside:\n                result.append(char)\n    return ''.join(result)",
    "test_output": "FAILED: expect python,in fact python ",
    "test_result": "False"
  },
  "6396": {
    "question_id": "mbpp/639",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_parenthesis(lst):\n    if not lst:\n        return \"\"\n    s = lst[0]\n    result = []\n    in_paren = False\n    for char in s:\n        if char == '(':\n            in_paren = True\n        elif char == ')':\n            in_paren = False\n        elif not in_paren:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "FAILED: expect python,in fact python ",
    "test_result": "False"
  },
  "6397": {
    "question_id": "mbpp/639",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_parenthesis(lst):\n    result = []\n    for s in lst:\n        new_s = []\n        in_paren = False\n        for char in s:\n            if char == '(':\n                in_paren = True\n            elif char == ')':\n                in_paren = False\n            else:\n                if not in_paren:\n                    new_s.append(char)\n        result.append(''.join(new_s))\n    return tuple(result)",
    "test_output": "FAILED: expect python,in fact ('python ',)",
    "test_result": "False"
  },
  "6398": {
    "question_id": "mbpp/639",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_parenthesis(lst):\n    if not lst:\n        return \"\"\n    s = lst[0]\n    result = []\n    inside = False\n    for char in s:\n        if char == '(':\n            inside = True\n        elif char == ')':\n            inside = False\n        else:\n            if not inside:\n                result.append(char)\n    return ''.join(result)",
    "test_output": "FAILED: expect python,in fact python ",
    "test_result": "False"
  },
  "6399": {
    "question_id": "mbpp/639",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_parenthesis(lst):\n    result = []\n    for s in lst:\n        new_s = []\n        in_paren = False\n        for char in s:\n            if char == '(':\n                in_paren = True\n            elif char == ')':\n                in_paren = False\n            else:\n                if not in_paren:\n                    new_s.append(char)\n        result.append(''.join(new_s))\n    return tuple(result)",
    "test_output": "FAILED: expect python,in fact ('python ',)",
    "test_result": "False"
  },
  "6400": {
    "question_id": "mbpp/640",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6401": {
    "question_id": "mbpp/640",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6402": {
    "question_id": "mbpp/640",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6403": {
    "question_id": "mbpp/640",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6404": {
    "question_id": "mbpp/640",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6405": {
    "question_id": "mbpp/640",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6406": {
    "question_id": "mbpp/640",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6407": {
    "question_id": "mbpp/640",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6408": {
    "question_id": "mbpp/640",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6409": {
    "question_id": "mbpp/640",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6410": {
    "question_id": "mbpp/641",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_similar_row(matrix):\n    seen = set()\n    result = set()\n    for row in matrix:\n        sorted_row = tuple(sorted(row))\n        if sorted_row not in seen:\n            seen.add(sorted_row)\n            result.add(tuple(row))\n    return result",
    "test_output": "FAILED: expect {((2, 2), (4, 6)), ((3, 2), (4, 5))},in fact {((2, 2), (4, 6)), ((4, 5), (3, 2))}",
    "test_result": "False"
  },
  "6411": {
    "question_id": "mbpp/641",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_similar_row(matrix):\n    seen = set()\n    result = set()\n    for row in matrix:\n        sorted_row = tuple(sorted(row))\n        if sorted_row not in seen:\n            seen.add(sorted_row)\n            result.add(row)\n    return result",
    "test_output": "FAILED: TypeError: unhashable type: 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 8, in remove_similar_row\nTypeError: unhashable type: 'list'\n",
    "test_result": "False"
  },
  "6412": {
    "question_id": "mbpp/641",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_similar_row(matrix):\n    seen = set()\n    unique_rows = set()\n    for row in matrix:\n        sorted_row = tuple(sorted(row))\n        if sorted_row not in seen:\n            seen.add(sorted_row)\n            unique_rows.add(row)\n    return unique_rows",
    "test_output": "FAILED: TypeError: unhashable type: 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 8, in remove_similar_row\nTypeError: unhashable type: 'list'\n",
    "test_result": "False"
  },
  "6413": {
    "question_id": "mbpp/641",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_similar_row(matrix):\n    seen = set()\n    unique_rows = set()\n    for row in matrix:\n        sorted_row = tuple(sorted(row))\n        if sorted_row not in seen:\n            seen.add(sorted_row)\n            unique_rows.add(row)\n    return unique_rows",
    "test_output": "FAILED: TypeError: unhashable type: 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 8, in remove_similar_row\nTypeError: unhashable type: 'list'\n",
    "test_result": "False"
  },
  "6414": {
    "question_id": "mbpp/641",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_similar_row(matrix):\n    seen = set()\n    unique_rows = set()\n    for row in matrix:\n        sorted_row = tuple(sorted(row))\n        if sorted_row not in seen:\n            seen.add(sorted_row)\n            unique_rows.add(tuple(row))\n    return unique_rows",
    "test_output": "FAILED: expect {((2, 2), (4, 6)), ((3, 2), (4, 5))},in fact {((2, 2), (4, 6)), ((4, 5), (3, 2))}",
    "test_result": "False"
  },
  "6415": {
    "question_id": "mbpp/641",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_similar_row(matrix):\n    seen = set()\n    unique_rows = []\n    for row in matrix:\n        row_tuple = tuple(tuple(element) for element in row)\n        if row_tuple not in seen:\n            seen.add(row_tuple)\n            unique_rows.append(row)\n    return {tuple(tuple(element) for element in row) for row in unique_rows}",
    "test_output": "FAILED: expect {((2, 2), (4, 6)), ((3, 2), (4, 5))},in fact {((2, 2), (4, 6)), ((4, 5), (3, 2)), ((3, 2), (4, 5))}",
    "test_result": "False"
  },
  "6416": {
    "question_id": "mbpp/641",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_similar_row(matrix):\n    seen = set()\n    unique_rows = set()\n    for row in matrix:\n        sorted_row = tuple(sorted(row))\n        if sorted_row not in seen:\n            seen.add(sorted_row)\n            unique_rows.add(tuple(row))\n    return unique_rows",
    "test_output": "FAILED: expect {((2, 2), (4, 6)), ((3, 2), (4, 5))},in fact {((2, 2), (4, 6)), ((4, 5), (3, 2))}",
    "test_result": "False"
  },
  "6417": {
    "question_id": "mbpp/641",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_similar_row(matrix):\n    seen = set()\n    unique_rows = set()\n    for row in matrix:\n        sorted_row = tuple(sorted(row))\n        if sorted_row not in seen:\n            seen.add(sorted_row)\n            unique_rows.add(tuple(row))\n    return unique_rows",
    "test_output": "FAILED: expect {((2, 2), (4, 6)), ((3, 2), (4, 5))},in fact {((2, 2), (4, 6)), ((4, 5), (3, 2))}",
    "test_result": "False"
  },
  "6418": {
    "question_id": "mbpp/641",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_similar_row(matrix):\n    seen = set()\n    unique_rows = set()\n    for row in matrix:\n        row_tuple = tuple(row)\n        sorted_row = tuple(sorted(row_tuple))\n        if sorted_row not in seen:\n            seen.add(sorted_row)\n            unique_rows.add(row_tuple)\n    return unique_rows",
    "test_output": "FAILED: expect {((2, 2), (4, 6)), ((3, 2), (4, 5))},in fact {((2, 2), (4, 6)), ((4, 5), (3, 2))}",
    "test_result": "False"
  },
  "6419": {
    "question_id": "mbpp/641",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_similar_row(matrix):\n    seen = set()\n    result = set()\n    for row in matrix:\n        sorted_row = tuple(sorted(row))\n        if sorted_row not in seen:\n            seen.add(sorted_row)\n            result.add(row)\n    return result",
    "test_output": "FAILED: TypeError: unhashable type: 'list'\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 8, in remove_similar_row\nTypeError: unhashable type: 'list'\n",
    "test_result": "False"
  },
  "6420": {
    "question_id": "mbpp/642",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz_middle(text):\n    if re.search(r'\\Bz\\B', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6421": {
    "question_id": "mbpp/642",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz_middle(text):\n    if re.search(r'\\Bz\\B', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6422": {
    "question_id": "mbpp/642",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz_middle(text):\n    if re.search(r'\\Bz\\B', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6423": {
    "question_id": "mbpp/642",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\Bz\\B'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6424": {
    "question_id": "mbpp/642",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz_middle(text):\n    if re.search(r'\\Bz\\B', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6425": {
    "question_id": "mbpp/642",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\Bz\\B'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6426": {
    "question_id": "mbpp/642",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz_middle(text):\n    if re.search(r'\\Bz\\B', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6427": {
    "question_id": "mbpp/642",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz_middle(text):\n    if re.search(r'\\Bz\\B', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6428": {
    "question_id": "mbpp/642",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz_middle(text):\n    if re.search(r'\\Bz\\B', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6429": {
    "question_id": "mbpp/642",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_wordz_middle(text):\n    if re.search(r'\\Bz\\B', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6430": {
    "question_id": "mbpp/643",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_Array_Upto_K(arr, k):\n    if k <= 0 or k > len(arr):\n        return arr.copy()\n    reversed_part = arr[:k][::-1]\n    remaining_part = arr[k:]\n    return reversed_part + remaining_part",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6431": {
    "question_id": "mbpp/643",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_Array_Upto_K(arr, k):\n    if k <= 0 or k > len(arr):\n        return arr.copy()\n    reversed_part = arr[:k][::-1]\n    remaining_part = arr[k:]\n    return reversed_part + remaining_part",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6432": {
    "question_id": "mbpp/643",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_Array_Upto_K(arr, k):\n    if k <= 0 or k > len(arr):\n        return arr.copy()\n    reversed_part = arr[:k][::-1]\n    remaining_part = arr[k:]\n    return reversed_part + remaining_part",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6433": {
    "question_id": "mbpp/643",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_Array_Upto_K(arr, k):\n    if k <= 0 or k > len(arr):\n        return arr.copy()\n    reversed_part = arr[:k][::-1]\n    remaining_part = arr[k:]\n    return reversed_part + remaining_part",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6434": {
    "question_id": "mbpp/643",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_Array_Upto_K(arr, k):\n    if k <= 0 or k > len(arr):\n        return arr.copy()\n    reversed_part = arr[:k][::-1]\n    remaining_part = arr[k:]\n    return reversed_part + remaining_part",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6435": {
    "question_id": "mbpp/643",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_Array_Upto_K(arr, k):\n    if k <= 0 or k > len(arr):\n        return arr.copy()\n    reversed_part = arr[:k][::-1]\n    remaining_part = arr[k:]\n    return reversed_part + remaining_part",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6436": {
    "question_id": "mbpp/643",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_Array_Upto_K(arr, k):\n    if k <= 0 or k > len(arr):\n        return arr.copy()\n    reversed_part = arr[:k][::-1]\n    remaining_part = arr[k:]\n    return reversed_part + remaining_part",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6437": {
    "question_id": "mbpp/643",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_Array_Upto_K(arr, k):\n    if k <= 0 or k > len(arr):\n        return arr.copy()\n    reversed_part = arr[:k][::-1]\n    remaining_part = arr[k:]\n    return reversed_part + remaining_part",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6438": {
    "question_id": "mbpp/643",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_Array_Upto_K(arr, k):\n    if k <= 0 or k > len(arr):\n        return arr.copy()\n    reversed_part = arr[:k][::-1]\n    remaining_part = arr[k:]\n    return reversed_part + remaining_part",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6439": {
    "question_id": "mbpp/643",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_Array_Upto_K(arr, k):\n    if k <= 0 or k > len(arr):\n        return arr.copy()\n    reversed_part = arr[:k][::-1]\n    remaining_part = arr[k:]\n    return reversed_part + remaining_part",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6440": {
    "question_id": "mbpp/644",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_k_product(tuples_list, k):\n    product = 1\n    for t in tuples_list:\n        if k < len(t):\n            product *= t[k]\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6441": {
    "question_id": "mbpp/644",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_k_product(tuples_list, k):\n    product = 1\n    for t in tuples_list:\n        if k < len(t):\n            product *= t[k]\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6442": {
    "question_id": "mbpp/644",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_k_product(tuples_list, k):\n    product = 1\n    for t in tuples_list:\n        if k < len(t):\n            product *= t[k]\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6443": {
    "question_id": "mbpp/644",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_k_product(tuples_list, k):\n    product = 1\n    for t in tuples_list:\n        if k < len(t):\n            product *= t[k]\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6444": {
    "question_id": "mbpp/644",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_k_product(tuples_list, k):\n    product = 1\n    for t in tuples_list:\n        if k < len(t):\n            product *= t[k]\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6445": {
    "question_id": "mbpp/644",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_k_product(tuples_list, k):\n    product = 1\n    for t in tuples_list:\n        if k < len(t):\n            product *= t[k]\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6446": {
    "question_id": "mbpp/644",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_k_product(tuples_list, k):\n    product = 1\n    for t in tuples_list:\n        if k < len(t):\n            product *= t[k]\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6447": {
    "question_id": "mbpp/644",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_k_product(tuples_list, k):\n    product = 1\n    for t in tuples_list:\n        if k < len(t):\n            product *= t[k]\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6448": {
    "question_id": "mbpp/644",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_k_product(tuples_list, k):\n    product = 1\n    for t in tuples_list:\n        if k < len(t):\n            product *= t[k]\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6449": {
    "question_id": "mbpp/644",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_k_product(tuples_list, k):\n    product = 1\n    for t in tuples_list:\n        if k < len(t):\n            product *= t[k]\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6450": {
    "question_id": "mbpp/645",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_cubes(n, k):\n    if k > n:\n        return 0\n    return (n - k + 1) ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6451": {
    "question_id": "mbpp/645",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_cubes(n, k):\n    if k > n:\n        return 0\n    return (n - k + 1) ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6452": {
    "question_id": "mbpp/645",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_cubes(n, k):\n    if k > n or n <= 0 or k <= 0:\n        return 0\n    return (n - k + 1) ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6453": {
    "question_id": "mbpp/645",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_cubes(n, k):\n    if k > n:\n        return 0\n    return (n - k + 1) ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6454": {
    "question_id": "mbpp/645",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_cubes(n, k):\n    if k > n:\n        return 0\n    return (n - k + 1) ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6455": {
    "question_id": "mbpp/645",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_cubes(n, k):\n    if k > n or n <= 0 or k <= 0:\n        return 0\n    return (n - k + 1) ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6456": {
    "question_id": "mbpp/645",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_cubes(n, k):\n    if k > n:\n        return 0\n    return (n - k + 1) ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6457": {
    "question_id": "mbpp/645",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_cubes(n, k):\n    if k > n or n <= 0 or k <= 0:\n        return 0\n    return (n - k + 1) ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6458": {
    "question_id": "mbpp/645",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_cubes(n, k):\n    if k > n:\n        return 0\n    return (n - k + 1) ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6459": {
    "question_id": "mbpp/645",
    "model": "deepseek-v3-250324",
    "generation_code": "def No_of_cubes(n, k):\n    if k > n:\n        return 0\n    return (n - k + 1) ** 3",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6460": {
    "question_id": "mbpp/646",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_upperstring(s):\n    if not s:\n        return []\n    \n    result = []\n    start = 0\n    \n    for i in range(1, len(s)):\n        if s[i].isupper():\n            result.append(s[start:i])\n            start = i\n    \n    result.append(s[start:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6461": {
    "question_id": "mbpp/646",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_upperstring(s):\n    if not s:\n        return []\n    \n    result = []\n    start = 0\n    \n    for i in range(1, len(s)):\n        if s[i].isupper():\n            result.append(s[start:i])\n            start = i\n    \n    result.append(s[start:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6462": {
    "question_id": "mbpp/646",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_upperstring(s):\n    if not s:\n        return []\n    \n    result = []\n    start = 0\n    \n    for i in range(1, len(s)):\n        if s[i].isupper():\n            result.append(s[start:i])\n            start = i\n    \n    result.append(s[start:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6463": {
    "question_id": "mbpp/646",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_upperstring(s):\n    if not s:\n        return []\n    \n    result = []\n    start = 0\n    for i in range(1, len(s)):\n        if s[i].isupper():\n            result.append(s[start:i])\n            start = i\n    result.append(s[start:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6464": {
    "question_id": "mbpp/646",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_upperstring(s):\n    if not s:\n        return []\n    \n    result = []\n    start = 0\n    \n    for i in range(1, len(s)):\n        if s[i].isupper():\n            result.append(s[start:i])\n            start = i\n    \n    result.append(s[start:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6465": {
    "question_id": "mbpp/646",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_upperstring(s):\n    if not s:\n        return []\n    \n    result = []\n    start = 0\n    \n    for i in range(1, len(s)):\n        if s[i].isupper():\n            result.append(s[start:i])\n            start = i\n    \n    result.append(s[start:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6466": {
    "question_id": "mbpp/646",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_upperstring(s):\n    if not s:\n        return []\n    \n    result = []\n    start = 0\n    for i in range(1, len(s)):\n        if s[i].isupper():\n            result.append(s[start:i])\n            start = i\n    result.append(s[start:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6467": {
    "question_id": "mbpp/646",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_upperstring(s):\n    result = []\n    start = 0\n    for i in range(1, len(s)):\n        if s[i].isupper():\n            result.append(s[start:i])\n            start = i\n    result.append(s[start:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6468": {
    "question_id": "mbpp/646",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_upperstring(s):\n    if not s:\n        return []\n    result = []\n    start = 0\n    for i in range(1, len(s)):\n        if s[i].isupper():\n            result.append(s[start:i])\n            start = i\n    result.append(s[start:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6469": {
    "question_id": "mbpp/646",
    "model": "deepseek-v3-250324",
    "generation_code": "def split_upperstring(s):\n    if not s:\n        return []\n    \n    result = []\n    start = 0\n    \n    for i in range(1, len(s)):\n        if s[i].isupper():\n            result.append(s[start:i])\n            start = i\n    \n    result.append(s[start:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6470": {
    "question_id": "mbpp/647",
    "model": "deepseek-v3-250324",
    "generation_code": "def exchange_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6471": {
    "question_id": "mbpp/647",
    "model": "deepseek-v3-250324",
    "generation_code": "def exchange_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6472": {
    "question_id": "mbpp/647",
    "model": "deepseek-v3-250324",
    "generation_code": "def exchange_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6473": {
    "question_id": "mbpp/647",
    "model": "deepseek-v3-250324",
    "generation_code": "def exchange_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6474": {
    "question_id": "mbpp/647",
    "model": "deepseek-v3-250324",
    "generation_code": "def exchange_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6475": {
    "question_id": "mbpp/647",
    "model": "deepseek-v3-250324",
    "generation_code": "def exchange_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6476": {
    "question_id": "mbpp/647",
    "model": "deepseek-v3-250324",
    "generation_code": "def exchange_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6477": {
    "question_id": "mbpp/647",
    "model": "deepseek-v3-250324",
    "generation_code": "def exchange_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6478": {
    "question_id": "mbpp/647",
    "model": "deepseek-v3-250324",
    "generation_code": "def exchange_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6479": {
    "question_id": "mbpp/647",
    "model": "deepseek-v3-250324",
    "generation_code": "def exchange_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6480": {
    "question_id": "mbpp/648",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6481": {
    "question_id": "mbpp/648",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6482": {
    "question_id": "mbpp/648",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6483": {
    "question_id": "mbpp/648",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6484": {
    "question_id": "mbpp/648",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6485": {
    "question_id": "mbpp/648",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6486": {
    "question_id": "mbpp/648",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6487": {
    "question_id": "mbpp/648",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6488": {
    "question_id": "mbpp/648",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6489": {
    "question_id": "mbpp/648",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Range_list(lst, start, end):\n    if not lst or start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end+1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6490": {
    "question_id": "mbpp/649",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    return sorted(arr1) == sorted(arr2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6491": {
    "question_id": "mbpp/649",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    return sorted(arr1) == sorted(arr2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6492": {
    "question_id": "mbpp/649",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    return sorted(arr1) == sorted(arr2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6493": {
    "question_id": "mbpp/649",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    return sorted(arr1) == sorted(arr2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6494": {
    "question_id": "mbpp/649",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    return sorted(arr1) == sorted(arr2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6495": {
    "question_id": "mbpp/649",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    return sorted(arr1) == sorted(arr2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6496": {
    "question_id": "mbpp/649",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    return sorted(arr1) == sorted(arr2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6497": {
    "question_id": "mbpp/649",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    return sorted(arr1) == sorted(arr2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6498": {
    "question_id": "mbpp/649",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    return sorted(arr1) == sorted(arr2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6499": {
    "question_id": "mbpp/649",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    return sorted(arr1) == sorted(arr2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6500": {
    "question_id": "mbpp/650",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(tuple1, tuple2):\n    return all(elem in tuple1 for elem in tuple2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6501": {
    "question_id": "mbpp/650",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(tuple1, tuple2):\n    return all(elem in tuple1 for elem in tuple2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6502": {
    "question_id": "mbpp/650",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(tuple1, tuple2):\n    return all(elem in tuple1 for elem in tuple2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6503": {
    "question_id": "mbpp/650",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(tuple1, tuple2):\n    return all(elem in tuple1 for elem in tuple2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6504": {
    "question_id": "mbpp/650",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(tuple1, tuple2):\n    return all(elem in tuple1 for elem in tuple2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6505": {
    "question_id": "mbpp/650",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(tuple1, tuple2):\n    return all(elem in tuple1 for elem in tuple2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6506": {
    "question_id": "mbpp/650",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(tuple1, tuple2):\n    return all(elem in tuple1 for elem in tuple2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6507": {
    "question_id": "mbpp/650",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(tuple1, tuple2):\n    return all(elem in tuple1 for elem in tuple2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6508": {
    "question_id": "mbpp/650",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(tuple1, tuple2):\n    return all(elem in tuple1 for elem in tuple2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6509": {
    "question_id": "mbpp/650",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(tuple1, tuple2):\n    return all(elem in tuple1 for elem in tuple2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6510": {
    "question_id": "mbpp/651",
    "model": "deepseek-v3-250324",
    "generation_code": "def matrix_to_list(matrix):\n    if not matrix:\n        return []\n    transposed = list(zip(*matrix))\n    flattened = []\n    for column in transposed:\n        flat_column = []\n        for tup in column:\n            flat_column.extend(tup)\n        flattened.append(tuple(flat_column))\n    return flattened",
    "test_output": "FAILED: expect [(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)],in fact [(4, 5, 10, 13, 0, 4), (7, 8, 18, 17, 10, 1)]",
    "test_result": "False"
  },
  "6511": {
    "question_id": "mbpp/651",
    "model": "deepseek-v3-250324",
    "generation_code": "def matrix_to_list(matrix):\n    if not matrix:\n        return []\n    transposed = list(zip(*matrix))\n    flattened = []\n    for column in transposed:\n        flat_column = []\n        for tup in column:\n            flat_column.extend(tup)\n        flattened.append(tuple(flat_column))\n    return flattened",
    "test_output": "FAILED: expect [(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)],in fact [(4, 5, 10, 13, 0, 4), (7, 8, 18, 17, 10, 1)]",
    "test_result": "False"
  },
  "6512": {
    "question_id": "mbpp/651",
    "model": "deepseek-v3-250324",
    "generation_code": "def matrix_to_list(matrix):\n    if not matrix:\n        return []\n    transposed = list(zip(*matrix))\n    flattened = []\n    for column in transposed:\n        flat_column = []\n        for tup in column:\n            flat_column.extend(tup)\n        flattened.append(tuple(flat_column))\n    return flattened",
    "test_output": "FAILED: expect [(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)],in fact [(4, 5, 10, 13, 0, 4), (7, 8, 18, 17, 10, 1)]",
    "test_result": "False"
  },
  "6513": {
    "question_id": "mbpp/651",
    "model": "deepseek-v3-250324",
    "generation_code": "def matrix_to_list(matrix):\n    if not matrix:\n        return []\n    transposed = list(zip(*matrix))\n    flattened = []\n    for column in transposed:\n        flat_column = []\n        for tup in column:\n            flat_column.extend(tup)\n        flattened.append(tuple(flat_column))\n    return flattened",
    "test_output": "FAILED: expect [(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)],in fact [(4, 5, 10, 13, 0, 4), (7, 8, 18, 17, 10, 1)]",
    "test_result": "False"
  },
  "6514": {
    "question_id": "mbpp/651",
    "model": "deepseek-v3-250324",
    "generation_code": "def matrix_to_list(matrix):\n    if not matrix:\n        return []\n    transposed = list(zip(*matrix))\n    flattened = []\n    for column in transposed:\n        flat_column = []\n        for tup in column:\n            flat_column.extend(tup)\n        flattened.append(tuple(flat_column))\n    return flattened",
    "test_output": "FAILED: expect [(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)],in fact [(4, 5, 10, 13, 0, 4), (7, 8, 18, 17, 10, 1)]",
    "test_result": "False"
  },
  "6515": {
    "question_id": "mbpp/651",
    "model": "deepseek-v3-250324",
    "generation_code": "def matrix_to_list(matrix):\n    if not matrix:\n        return []\n    transposed = list(zip(*matrix))\n    flattened = []\n    for column in transposed:\n        flat_column = []\n        for tup in column:\n            flat_column.extend(tup)\n        flattened.append(tuple(flat_column))\n    return flattened",
    "test_output": "FAILED: expect [(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)],in fact [(4, 5, 10, 13, 0, 4), (7, 8, 18, 17, 10, 1)]",
    "test_result": "False"
  },
  "6516": {
    "question_id": "mbpp/651",
    "model": "deepseek-v3-250324",
    "generation_code": "def matrix_to_list(matrix):\n    if not matrix:\n        return []\n    transposed = list(zip(*matrix))\n    flattened = []\n    for column in transposed:\n        flat_column = []\n        for tup in column:\n            flat_column.extend(tup)\n        flattened.append(tuple(flat_column))\n    return flattened",
    "test_output": "FAILED: expect [(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)],in fact [(4, 5, 10, 13, 0, 4), (7, 8, 18, 17, 10, 1)]",
    "test_result": "False"
  },
  "6517": {
    "question_id": "mbpp/651",
    "model": "deepseek-v3-250324",
    "generation_code": "def matrix_to_list(matrix):\n    if not matrix:\n        return []\n    transposed = list(zip(*matrix))\n    flattened = []\n    for column in transposed:\n        flat_column = []\n        for tup in column:\n            flat_column.extend(tup)\n        flattened.append(tuple(flat_column))\n    return flattened",
    "test_output": "FAILED: expect [(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)],in fact [(4, 5, 10, 13, 0, 4), (7, 8, 18, 17, 10, 1)]",
    "test_result": "False"
  },
  "6518": {
    "question_id": "mbpp/651",
    "model": "deepseek-v3-250324",
    "generation_code": "def matrix_to_list(matrix):\n    if not matrix:\n        return []\n    transposed = list(zip(*matrix))\n    flattened = []\n    for column in transposed:\n        flat_column = []\n        for tup in column:\n            flat_column.extend(tup)\n        flattened.append(tuple(flat_column))\n    return flattened",
    "test_output": "FAILED: expect [(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)],in fact [(4, 5, 10, 13, 0, 4), (7, 8, 18, 17, 10, 1)]",
    "test_result": "False"
  },
  "6519": {
    "question_id": "mbpp/651",
    "model": "deepseek-v3-250324",
    "generation_code": "def matrix_to_list(matrix):\n    if not matrix:\n        return []\n    transposed = list(zip(*matrix))\n    flattened = []\n    for column in transposed:\n        flat_column = []\n        for tup in column:\n            flat_column.extend(tup)\n        flattened.append(tuple(flat_column))\n    return flattened",
    "test_output": "FAILED: expect [(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)],in fact [(4, 5, 10, 13, 0, 4), (7, 8, 18, 17, 10, 1)]",
    "test_result": "False"
  },
  "6520": {
    "question_id": "mbpp/652",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef grouping_dictionary(sequence):\n    grouped_dict = defaultdict(list)\n    for key, value in sequence:\n        grouped_dict[key].append(value)\n    return dict(grouped_dict)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6521": {
    "question_id": "mbpp/652",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef grouping_dictionary(sequence):\n    grouped_dict = defaultdict(list)\n    for key, value in sequence:\n        grouped_dict[key].append(value)\n    return dict(grouped_dict)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6522": {
    "question_id": "mbpp/652",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef grouping_dictionary(sequence):\n    grouped_dict = defaultdict(list)\n    for key, value in sequence:\n        grouped_dict[key].append(value)\n    return dict(grouped_dict)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6523": {
    "question_id": "mbpp/652",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef grouping_dictionary(sequence):\n    grouped_dict = defaultdict(list)\n    for key, value in sequence:\n        grouped_dict[key].append(value)\n    return dict(grouped_dict)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6524": {
    "question_id": "mbpp/652",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef grouping_dictionary(sequence):\n    grouped_dict = defaultdict(list)\n    for key, value in sequence:\n        grouped_dict[key].append(value)\n    return dict(grouped_dict)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6525": {
    "question_id": "mbpp/652",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef grouping_dictionary(sequence):\n    grouped_dict = defaultdict(list)\n    for key, value in sequence:\n        grouped_dict[key].append(value)\n    return dict(grouped_dict)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6526": {
    "question_id": "mbpp/652",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef grouping_dictionary(sequence):\n    grouped_dict = defaultdict(list)\n    for key, value in sequence:\n        grouped_dict[key].append(value)\n    return dict(grouped_dict)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6527": {
    "question_id": "mbpp/652",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef grouping_dictionary(sequence):\n    grouped_dict = defaultdict(list)\n    for key, value in sequence:\n        grouped_dict[key].append(value)\n    return dict(grouped_dict)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6528": {
    "question_id": "mbpp/652",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef grouping_dictionary(sequence):\n    grouped_dict = defaultdict(list)\n    for key, value in sequence:\n        grouped_dict[key].append(value)\n    return dict(grouped_dict)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6529": {
    "question_id": "mbpp/652",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import defaultdict\n\ndef grouping_dictionary(sequence):\n    grouped_dict = defaultdict(list)\n    for key, value in sequence:\n        grouped_dict[key].append(value)\n    return dict(grouped_dict)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6530": {
    "question_id": "mbpp/653",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6531": {
    "question_id": "mbpp/653",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6532": {
    "question_id": "mbpp/653",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6533": {
    "question_id": "mbpp/653",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6534": {
    "question_id": "mbpp/653",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6535": {
    "question_id": "mbpp/653",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6536": {
    "question_id": "mbpp/653",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6537": {
    "question_id": "mbpp/653",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6538": {
    "question_id": "mbpp/653",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6539": {
    "question_id": "mbpp/653",
    "model": "deepseek-v3-250324",
    "generation_code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6540": {
    "question_id": "mbpp/654",
    "model": "deepseek-v3-250324",
    "generation_code": "def fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6541": {
    "question_id": "mbpp/654",
    "model": "deepseek-v3-250324",
    "generation_code": "def fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6542": {
    "question_id": "mbpp/654",
    "model": "deepseek-v3-250324",
    "generation_code": "def fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6543": {
    "question_id": "mbpp/654",
    "model": "deepseek-v3-250324",
    "generation_code": "def fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6544": {
    "question_id": "mbpp/654",
    "model": "deepseek-v3-250324",
    "generation_code": "def fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6545": {
    "question_id": "mbpp/654",
    "model": "deepseek-v3-250324",
    "generation_code": "def fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6546": {
    "question_id": "mbpp/654",
    "model": "deepseek-v3-250324",
    "generation_code": "def fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6547": {
    "question_id": "mbpp/654",
    "model": "deepseek-v3-250324",
    "generation_code": "def fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6548": {
    "question_id": "mbpp/654",
    "model": "deepseek-v3-250324",
    "generation_code": "def fifth_Power_Sum(n):\n    return sum([i**5 for i in range(1, n+1)])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6549": {
    "question_id": "mbpp/654",
    "model": "deepseek-v3-250324",
    "generation_code": "def fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6550": {
    "question_id": "mbpp/655",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(a, b, n):\n    a_sorted = sorted(a)\n    b_sorted = sorted(b)\n    min_sum = 0\n    for i in range(n):\n        min_sum += abs(a_sorted[i] - b_sorted[i])\n    return min_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6551": {
    "question_id": "mbpp/655",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(A, B, N):\n    A_sorted = sorted(A)\n    B_sorted = sorted(B)\n    min_sum = 0\n    for a, b in zip(A_sorted, B_sorted):\n        min_sum += abs(a - b)\n    return min_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6552": {
    "question_id": "mbpp/655",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(A, B, N):\n    A_sorted = sorted(A)\n    B_sorted = sorted(B)\n    min_sum = 0\n    for a, b in zip(A_sorted, B_sorted):\n        min_sum += abs(a - b)\n    return min_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6553": {
    "question_id": "mbpp/655",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(a, b, n):\n    a_sorted = sorted(a)\n    b_sorted = sorted(b)\n    min_sum = 0\n    for i in range(n):\n        min_sum += abs(a_sorted[i] - b_sorted[i])\n    return min_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6554": {
    "question_id": "mbpp/655",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(a, b, n):\n    a_sorted = sorted(a)\n    b_sorted = sorted(b)\n    total = 0\n    for i in range(n):\n        total += abs(a_sorted[i] - b_sorted[i])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6555": {
    "question_id": "mbpp/655",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(A, B, N):\n    A_sorted = sorted(A)\n    B_sorted = sorted(B)\n    min_sum = 0\n    for a, b in zip(A_sorted, B_sorted):\n        min_sum += abs(a - b)\n    return min_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6556": {
    "question_id": "mbpp/655",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(a, b, n):\n    a_sorted = sorted(a)\n    b_sorted = sorted(b)\n    min_sum = 0\n    for i in range(n):\n        min_sum += abs(a_sorted[i] - b_sorted[i])\n    return min_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6557": {
    "question_id": "mbpp/655",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(a, b, n):\n    a_sorted = sorted(a)\n    b_sorted = sorted(b)\n    min_sum = 0\n    for i in range(n):\n        min_sum += abs(a_sorted[i] - b_sorted[i])\n    return min_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6558": {
    "question_id": "mbpp/655",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(a, b, n):\n    a_sorted = sorted(a)\n    b_sorted = sorted(b)\n    min_sum = 0\n    for i in range(n):\n        min_sum += abs(a_sorted[i] - b_sorted[i])\n    return min_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6559": {
    "question_id": "mbpp/655",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Sum(A, B, N):\n    A_sorted = sorted(A)\n    B_sorted = sorted(B)\n    min_sum = 0\n    for a, b in zip(A_sorted, B_sorted):\n        min_sum += abs(a - b)\n    return min_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6560": {
    "question_id": "mbpp/656",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    fact = math.factorial(n)\n    while fact >= 10:\n        fact = fact // 10\n    return fact",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6561": {
    "question_id": "mbpp/656",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    fact = math.factorial(n)\n    while fact >= 10:\n        fact = fact // 10\n    return fact",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6562": {
    "question_id": "mbpp/656",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    fact = math.factorial(n)\n    while fact >= 10:\n        fact = fact // 10\n    return fact",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6563": {
    "question_id": "mbpp/656",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    fact = math.factorial(n)\n    while fact >= 10:\n        fact = fact // 10\n    return fact",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6564": {
    "question_id": "mbpp/656",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    fact = math.factorial(n)\n    while fact >= 10:\n        fact = fact // 10\n    return fact",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6565": {
    "question_id": "mbpp/656",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    fact = math.factorial(n)\n    while fact >= 10:\n        fact = fact // 10\n    return fact",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6566": {
    "question_id": "mbpp/656",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    fact = math.factorial(n)\n    while fact >= 10:\n        fact = fact // 10\n    return fact",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6567": {
    "question_id": "mbpp/656",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    fact = math.factorial(n)\n    while fact >= 10:\n        fact = fact // 10\n    return fact",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6568": {
    "question_id": "mbpp/656",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    fact = math.factorial(n)\n    while fact >= 10:\n        fact = fact // 10\n    return fact",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6569": {
    "question_id": "mbpp/656",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    fact = math.factorial(n)\n    while fact >= 10:\n        fact = fact // 10\n    return fact",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6570": {
    "question_id": "mbpp/657",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    max_items = [k for k, v in frequency.items() if v == max_count]\n    return max_items[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6571": {
    "question_id": "mbpp/657",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    max_items = [k for k, v in frequency.items() if v == max_count]\n    return max_items[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6572": {
    "question_id": "mbpp/657",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    max_items = [k for k, v in frequency.items() if v == max_count]\n    return max_items[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6573": {
    "question_id": "mbpp/657",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    max_count = 0\n    max_item = None\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n        if frequency[item] > max_count:\n            max_count = frequency[item]\n            max_item = item\n    return max_item",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6574": {
    "question_id": "mbpp/657",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    max_items = [k for k, v in frequency.items() if v == max_count]\n    return max_items[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6575": {
    "question_id": "mbpp/657",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    max_items = [k for k, v in frequency.items() if v == max_count]\n    return max_items[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6576": {
    "question_id": "mbpp/657",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    max_items = [k for k, v in frequency.items() if v == max_count]\n    return max_items[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6577": {
    "question_id": "mbpp/657",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    max_items = [k for k, v in frequency.items() if v == max_count]\n    return max_items[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6578": {
    "question_id": "mbpp/657",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    max_items = [k for k, v in frequency.items() if v == max_count]\n    return max_items[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6579": {
    "question_id": "mbpp/657",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_count = max(frequency.values())\n    max_items = [k for k, v in frequency.items() if v == max_count]\n    return min(max_items) if max_items else None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6580": {
    "question_id": "mbpp/658",
    "model": "deepseek-v3-250324",
    "generation_code": "def Repeat(x):\n    duplicates = []\n    seen = set()\n    for num in x:\n        if x.count(num) > 1 and num not in seen:\n            duplicates.append(num)\n            seen.add(num)\n    return duplicates",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6581": {
    "question_id": "mbpp/658",
    "model": "deepseek-v3-250324",
    "generation_code": "def Repeat(x):\n    duplicates = []\n    seen = set()\n    for num in x:\n        if num in seen and num not in duplicates:\n            duplicates.append(num)\n        seen.add(num)\n    return duplicates",
    "test_output": "FAILED: expect [20, 30, -20, 60],in fact [20, 30, 60, -20]",
    "test_result": "False"
  },
  "6582": {
    "question_id": "mbpp/658",
    "model": "deepseek-v3-250324",
    "generation_code": "def Repeat(x):\n    duplicates = []\n    seen = set()\n    for num in x:\n        if num in seen and num not in duplicates:\n            duplicates.append(num)\n        seen.add(num)\n    return duplicates",
    "test_output": "FAILED: expect [20, 30, -20, 60],in fact [20, 30, 60, -20]",
    "test_result": "False"
  },
  "6583": {
    "question_id": "mbpp/658",
    "model": "deepseek-v3-250324",
    "generation_code": "def Repeat(x):\n    duplicates = []\n    seen = set()\n    for num in x:\n        if num in seen and num not in duplicates:\n            duplicates.append(num)\n        seen.add(num)\n    return duplicates",
    "test_output": "FAILED: expect [20, 30, -20, 60],in fact [20, 30, 60, -20]",
    "test_result": "False"
  },
  "6584": {
    "question_id": "mbpp/658",
    "model": "deepseek-v3-250324",
    "generation_code": "def Repeat(x):\n    duplicates = []\n    seen = set()\n    for num in x:\n        if num in seen and num not in duplicates:\n            duplicates.append(num)\n        seen.add(num)\n    return duplicates",
    "test_output": "FAILED: expect [20, 30, -20, 60],in fact [20, 30, 60, -20]",
    "test_result": "False"
  },
  "6585": {
    "question_id": "mbpp/658",
    "model": "deepseek-v3-250324",
    "generation_code": "def Repeat(x):\n    duplicates = []\n    seen = set()\n    for num in x:\n        if num in seen and num not in duplicates:\n            duplicates.append(num)\n        seen.add(num)\n    return duplicates",
    "test_output": "FAILED: expect [20, 30, -20, 60],in fact [20, 30, 60, -20]",
    "test_result": "False"
  },
  "6586": {
    "question_id": "mbpp/658",
    "model": "deepseek-v3-250324",
    "generation_code": "def Repeat(x):\n    duplicates = []\n    seen = set()\n    for num in x:\n        if num in seen and num not in duplicates:\n            duplicates.append(num)\n        seen.add(num)\n    return duplicates",
    "test_output": "FAILED: expect [20, 30, -20, 60],in fact [20, 30, 60, -20]",
    "test_result": "False"
  },
  "6587": {
    "question_id": "mbpp/658",
    "model": "deepseek-v3-250324",
    "generation_code": "def Repeat(x):\n    duplicates = []\n    seen = set()\n    for num in x:\n        if num in seen and num not in duplicates:\n            duplicates.append(num)\n        seen.add(num)\n    return duplicates",
    "test_output": "FAILED: expect [20, 30, -20, 60],in fact [20, 30, 60, -20]",
    "test_result": "False"
  },
  "6588": {
    "question_id": "mbpp/658",
    "model": "deepseek-v3-250324",
    "generation_code": "def Repeat(list1):\n    duplicates = []\n    seen = set()\n    for num in list1:\n        if list1.count(num) > 1 and num not in seen:\n            duplicates.append(num)\n            seen.add(num)\n    return duplicates",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6589": {
    "question_id": "mbpp/658",
    "model": "deepseek-v3-250324",
    "generation_code": "def Repeat(x):\n    duplicates = []\n    seen = set()\n    for num in x:\n        if x.count(num) > 1 and num not in seen:\n            duplicates.append(num)\n            seen.add(num)\n    return duplicates",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6590": {
    "question_id": "mbpp/659",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Points(l1, r1, l2, r2):\n    if l1 < l2:\n        if r1 < l2:\n            return (l1, r2)\n        else:\n            return (l1, r2) if r1 < r2 else (l1, r2)\n    else:\n        if l1 > r2:\n            return (l2, r1)\n        else:\n            return (l2, r1) if r2 < r1 else (l2, r1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6591": {
    "question_id": "mbpp/659",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Points(l1, r1, l2, r2):\n    if r1 < l2:\n        return (r1, l2)\n    elif r2 < l1:\n        return (r2, l1)\n    else:\n        return (min(l1, l2) - 1, max(r1, r2) + 1)",
    "test_output": "FAILED: expect (1, 10),in fact (0, 11)",
    "test_result": "False"
  },
  "6592": {
    "question_id": "mbpp/659",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Points(a, b, c, d):\n    if b < c or d < a:\n        return (a, d)\n    else:\n        if a < c:\n            return (a, d)\n        else:\n            return (c, b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6593": {
    "question_id": "mbpp/659",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Points(l1, r1, l2, r2):\n    if r1 < l2:\n        return (l1, r2)\n    elif r2 < l1:\n        return (l2, r1)\n    else:\n        if l1 < l2:\n            return (l1, r2)\n        else:\n            return (l2, r1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6594": {
    "question_id": "mbpp/659",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Points(l1, r1, l2, r2):\n    if r1 < l2:\n        return (l1, r2)\n    elif r2 < l1:\n        return (l2, r1)\n    else:\n        if l1 < l2:\n            return (l1, r2)\n        else:\n            return (l2, r1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6595": {
    "question_id": "mbpp/659",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Points(l1, r1, l2, r2):\n    if r1 < l2:\n        return (l1, r2)\n    elif r2 < l1:\n        return (l2, r1)\n    else:\n        if l1 < l2:\n            return (l1, r2)\n        else:\n            return (l2, r1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6596": {
    "question_id": "mbpp/659",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Points(l1, r1, l2, r2):\n    if l1 > r1 or l2 > r2:\n        return (None, None)\n    if r1 < l2:\n        return (l1, r2)\n    elif r2 < l1:\n        return (l2, r1)\n    else:\n        if l1 < l2:\n            return (l1, r2)\n        else:\n            return (l2, r1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6597": {
    "question_id": "mbpp/659",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Points(l1, r1, l2, r2):\n    if l1 < l2:\n        point1 = l1\n    else:\n        point1 = r1\n    \n    if r2 > r1:\n        point2 = r2\n    else:\n        point2 = l2\n    \n    if l1 >= l2 and r1 <= r2:\n        return (l1 - 1, r2 + 1) if (l1 - 1) != r2 else (l1 - 1, r2 + 2)\n    elif l2 >= l1 and r2 <= r1:\n        return (l2 - 1, r1 + 1) if (l2 - 1) != r1 else (l2 - 1, r1 + 2)\n    else:\n        return (point1, point2)",
    "test_output": "FAILED: expect (1, 10),in fact (10, 1)",
    "test_result": "False"
  },
  "6598": {
    "question_id": "mbpp/659",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Points(l1, r1, l2, r2):\n    if l1 < l2:\n        return (l1, r2)\n    else:\n        return (l2, r1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6599": {
    "question_id": "mbpp/659",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Points(a, b, c, d):\n    if b < c or d < a:\n        return (a, d)\n    else:\n        if a < c:\n            return (a, d)\n        else:\n            return (c, b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6600": {
    "question_id": "mbpp/660",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_of_three_consecutive(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] + arr[1]\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    dp[2] = max(arr[0] + arr[1], arr[1] + arr[2], arr[0] + arr[2])\n    \n    for i in range(3, n):\n        dp[i] = max(\n            dp[i-1],  # Exclude current element\n            dp[i-2] + arr[i],  # Exclude previous element\n            dp[i-3] + arr[i-1] + arr[i]  # Exclude the one before previous\n        )\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6601": {
    "question_id": "mbpp/660",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_of_three_consecutive(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] + arr[1]\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    dp[2] = max(arr[0] + arr[1], arr[0] + arr[2], arr[1] + arr[2])\n    \n    for i in range(3, n):\n        dp[i] = max(\n            dp[i-1],  # Exclude current element\n            dp[i-2] + arr[i],  # Exclude previous element\n            dp[i-3] + arr[i-1] + arr[i]  # Exclude element before previous\n        )\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6602": {
    "question_id": "mbpp/660",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_of_three_consecutive(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] + arr[1]\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    dp[2] = max(arr[0] + arr[1], arr[0] + arr[2], arr[1] + arr[2])\n    \n    for i in range(3, n):\n        dp[i] = max(\n            dp[i-1],  # Exclude current element\n            dp[i-2] + arr[i],  # Exclude previous element\n            dp[i-3] + arr[i-1] + arr[i]  # Exclude the one before previous\n        )\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6603": {
    "question_id": "mbpp/660",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_of_three_consecutive(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] + arr[1]\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    dp[2] = max(arr[0] + arr[1], arr[0] + arr[2], arr[1] + arr[2])\n    \n    for i in range(3, n):\n        dp[i] = max(\n            dp[i-1],  # Exclude current element\n            dp[i-2] + arr[i],  # Exclude previous element\n            dp[i-3] + arr[i-1] + arr[i]  # Exclude the one before previous\n        )\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6604": {
    "question_id": "mbpp/660",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_of_three_consecutive(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] + arr[1]\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    dp[2] = max(arr[0] + arr[1], arr[0] + arr[2], arr[1] + arr[2])\n    \n    for i in range(3, n):\n        dp[i] = max(\n            dp[i-1],  # Exclude current element\n            dp[i-2] + arr[i],  # Exclude previous element\n            dp[i-3] + arr[i-1] + arr[i]  # Exclude the one before previous\n        )\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6605": {
    "question_id": "mbpp/660",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_of_three_consecutive(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] + arr[1]\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    dp[2] = max(arr[0] + arr[1], arr[0] + arr[2], arr[1] + arr[2])\n    \n    for i in range(3, n):\n        dp[i] = max(\n            dp[i-1],\n            dp[i-2] + arr[i],\n            dp[i-3] + arr[i-1] + arr[i]\n        )\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6606": {
    "question_id": "mbpp/660",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_of_three_consecutive(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] + arr[1]\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    dp[2] = max(arr[0] + arr[1], arr[1] + arr[2], arr[0] + arr[2])\n    \n    for i in range(3, n):\n        dp[i] = max(\n            dp[i-1],  # Exclude current element\n            dp[i-2] + arr[i],  # Exclude previous element\n            dp[i-3] + arr[i-1] + arr[i]  # Exclude the one before previous\n        )\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6607": {
    "question_id": "mbpp/660",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_of_three_consecutive(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] + arr[1]\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    dp[2] = max(arr[0] + arr[1], arr[0] + arr[2], arr[1] + arr[2])\n    \n    for i in range(3, n):\n        dp[i] = max(\n            dp[i-1],  # Exclude current element\n            dp[i-2] + arr[i],  # Exclude previous element\n            dp[i-3] + arr[i-1] + arr[i]  # Exclude the one before previous\n        )\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6608": {
    "question_id": "mbpp/660",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_of_three_consecutive(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] + arr[1]\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    dp[2] = max(arr[0] + arr[1], arr[0] + arr[2], arr[1] + arr[2])\n    \n    for i in range(3, n):\n        dp[i] = max(\n            dp[i-1],  # Exclude current element\n            dp[i-2] + arr[i],  # Exclude previous element\n            dp[i-3] + arr[i-1] + arr[i]  # Exclude the one before previous\n        )\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6609": {
    "question_id": "mbpp/660",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_of_three_consecutive(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] + arr[1]\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    dp[2] = max(arr[0] + arr[1], arr[0] + arr[2], arr[1] + arr[2])\n    \n    for i in range(3, n):\n        dp[i] = max(\n            dp[i-1],  # exclude current element\n            dp[i-2] + arr[i],  # exclude previous element\n            dp[i-3] + arr[i-1] + arr[i]  # exclude the one before previous\n        )\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6610": {
    "question_id": "mbpp/661",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6611": {
    "question_id": "mbpp/661",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6612": {
    "question_id": "mbpp/661",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6613": {
    "question_id": "mbpp/661",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6614": {
    "question_id": "mbpp/661",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6615": {
    "question_id": "mbpp/661",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6616": {
    "question_id": "mbpp/661",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6617": {
    "question_id": "mbpp/661",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6618": {
    "question_id": "mbpp/661",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6619": {
    "question_id": "mbpp/661",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_dict(d):\n    return {k: sorted(v) for k, v in d.items()}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6620": {
    "question_id": "mbpp/662",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max_val(n, x, y):\n    max_k = -1\n    for k in range(n, -1, -1):\n        if k % x == y:\n            return k\n    return max_k",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6621": {
    "question_id": "mbpp/662",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max_val(M, x, y):\n    if x == 0:\n        return -1\n    max_k = (M // x) * x + y\n    if max_k > M:\n        max_k -= x\n    return max_k if max_k >= 0 else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6622": {
    "question_id": "mbpp/662",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max_val(N, x, y):\n    if y >= x:\n        return -1\n    max_k = (N // x) * x + y\n    if max_k > N:\n        max_k -= x\n    return max_k if max_k >= 0 else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6623": {
    "question_id": "mbpp/662",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max_val(n, x, y):\n    if y >= x:\n        return -1\n    max_k = (n // x) * x + y\n    if max_k > n:\n        max_k -= x\n    return max_k if max_k >= 0 else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6624": {
    "question_id": "mbpp/662",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max_val(N, x, y):\n    if y >= x:\n        return -1\n    max_k = N - (N % x) + y\n    if max_k > N:\n        max_k -= x\n    return max_k if max_k >= 0 else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6625": {
    "question_id": "mbpp/662",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max_val(n, x, y):\n    if y >= x:\n        return -1\n    max_k = (n // x) * x + y\n    if max_k > n:\n        max_k -= x\n    return max_k if max_k >= 0 else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6626": {
    "question_id": "mbpp/662",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max_val(n, x, y):\n    if y >= x:\n        return -1\n    max_k = (n // x) * x + y\n    if max_k > n:\n        max_k -= x\n    return max_k if max_k >= 0 else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6627": {
    "question_id": "mbpp/662",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max_val(n, x, y):\n    if y >= x:\n        return -1\n    max_k = (n // x) * x + y\n    if max_k > n:\n        max_k -= x\n    return max_k if max_k >= 0 else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6628": {
    "question_id": "mbpp/662",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max_val(n, x, y):\n    if y >= x:\n        return -1\n    max_k = (n // x) * x + y\n    if max_k > n:\n        max_k -= x\n    return max_k if max_k >= 0 else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6629": {
    "question_id": "mbpp/662",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_max_val(n, x, y):\n    if y >= x:\n        return -1\n    max_k = (n // x) * x + y\n    if max_k > n:\n        max_k -= x\n    return max_k if max_k >= 0 else -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6630": {
    "question_id": "mbpp/663",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Even(n):\n    if n < 2:\n        return 0\n    total = 0\n    count = 0\n    for num in range(2, n + 1, 2):\n        total += num\n        count += 1\n    return total / count if count > 0 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6631": {
    "question_id": "mbpp/663",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Even(n):\n    if n < 2:\n        return 0\n    total = 0\n    count = 0\n    for num in range(2, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6632": {
    "question_id": "mbpp/663",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Even(n):\n    if n < 2:\n        return 0\n    total = 0\n    count = 0\n    for num in range(2, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6633": {
    "question_id": "mbpp/663",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Even(n):\n    if n < 2:\n        return 0\n    total = 0\n    count = 0\n    for num in range(2, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6634": {
    "question_id": "mbpp/663",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Even(n):\n    if n < 2:\n        return 0\n    total = 0\n    count = 0\n    for num in range(2, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6635": {
    "question_id": "mbpp/663",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Even(n):\n    if n < 2:\n        return 0\n    total = 0\n    count = 0\n    for num in range(2, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6636": {
    "question_id": "mbpp/663",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Even(n):\n    if n < 2:\n        return 0\n    total = 0\n    count = 0\n    for num in range(2, n + 1, 2):\n        total += num\n        count += 1\n    return total // count if count != 0 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6637": {
    "question_id": "mbpp/663",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Even(n):\n    if n % 2 != 0 or n < 2:\n        return 0\n    total = 0\n    count = 0\n    for num in range(2, n + 1, 2):\n        total += num\n        count += 1\n    return total // count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6638": {
    "question_id": "mbpp/663",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Even(n):\n    if n < 2:\n        return 0\n    total = 0\n    count = 0\n    for num in range(2, n + 1, 2):\n        total += num\n        count += 1\n    return total / count if count != 0 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6639": {
    "question_id": "mbpp/663",
    "model": "deepseek-v3-250324",
    "generation_code": "def average_Even(n):\n    if n < 2:\n        return 0\n    total = 0\n    count = 0\n    for num in range(2, n + 1, 2):\n        total += num\n        count += 1\n    return total / count if count != 0 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6640": {
    "question_id": "mbpp/664",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_last(lst):\n    if len(lst) <= 1:\n        return lst.copy() if isinstance(lst, list) else lst\n    return lst[1:] + [lst[0]]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6641": {
    "question_id": "mbpp/664",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_last(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else lst\n    return lst[1:] + [lst[0]]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6642": {
    "question_id": "mbpp/664",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_last(lst):\n    if len(lst) <= 1:\n        return lst.copy()\n    return lst[1:] + [lst[0]]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6643": {
    "question_id": "mbpp/664",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_last(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else lst\n    return lst[1:] + [lst[0]]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6644": {
    "question_id": "mbpp/664",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_last(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else lst\n    return lst[1:] + [lst[0]]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6645": {
    "question_id": "mbpp/664",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_last(lst):\n    if len(lst) <= 1:\n        return lst.copy()\n    return lst[1:] + [lst[0]]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6646": {
    "question_id": "mbpp/664",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_last(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else []\n    return lst[1:] + [lst[0]]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6647": {
    "question_id": "mbpp/664",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_last(lst):\n    if len(lst) <= 1:\n        return lst.copy() if lst else lst\n    return lst[1:] + [lst[0]]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6648": {
    "question_id": "mbpp/664",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_last(lst):\n    if len(lst) <= 1:\n        return lst.copy()\n    return lst[1:] + [lst[0]]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6649": {
    "question_id": "mbpp/664",
    "model": "deepseek-v3-250324",
    "generation_code": "def move_last(lst):\n    if len(lst) <= 1:\n        return lst.copy()\n    return lst[1:] + [lst[0]]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6650": {
    "question_id": "mbpp/665",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char(s, char):\n    return s.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6651": {
    "question_id": "mbpp/665",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char(s, char):\n    return s.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6652": {
    "question_id": "mbpp/665",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char(s, char):\n    return s.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6653": {
    "question_id": "mbpp/665",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char(s, char):\n    return s.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6654": {
    "question_id": "mbpp/665",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char(s, char):\n    return s.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6655": {
    "question_id": "mbpp/665",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char(s, char):\n    return s.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6656": {
    "question_id": "mbpp/665",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char(s, char):\n    return s.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6657": {
    "question_id": "mbpp/665",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char(s, char):\n    return s.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6658": {
    "question_id": "mbpp/665",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char(s, char):\n    return s.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6659": {
    "question_id": "mbpp/665",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_char(s, char):\n    return s.count(char)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6660": {
    "question_id": "mbpp/666",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Vow(string, vowels):\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6661": {
    "question_id": "mbpp/666",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Vow(string, vowels):\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6662": {
    "question_id": "mbpp/666",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Vow(string, vowels):\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6663": {
    "question_id": "mbpp/666",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Vow(string, vowels):\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6664": {
    "question_id": "mbpp/666",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Vow(string, vowels):\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6665": {
    "question_id": "mbpp/666",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Vow(string, vowels):\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6666": {
    "question_id": "mbpp/666",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Vow(string, vowels):\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6667": {
    "question_id": "mbpp/666",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Vow(string, vowels):\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6668": {
    "question_id": "mbpp/666",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Vow(string, vowels):\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6669": {
    "question_id": "mbpp/666",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Vow(string, vowels):\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6670": {
    "question_id": "mbpp/667",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace(s, char):\n    if not s:\n        return s\n    result = []\n    prev_char = None\n    for c in s:\n        if c == char and prev_char == char:\n            continue\n        result.append(c)\n        prev_char = c\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6671": {
    "question_id": "mbpp/667",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace(s, char):\n    if not s:\n        return s\n    result = []\n    prev = None\n    for c in s:\n        if c == char and prev == char:\n            continue\n        result.append(c)\n        prev = c\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6672": {
    "question_id": "mbpp/667",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace(s, char):\n    if not s:\n        return s\n    result = []\n    prev = None\n    for c in s:\n        if c == char and prev == char:\n            continue\n        result.append(c)\n        prev = c\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6673": {
    "question_id": "mbpp/667",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace(s, char):\n    if not s:\n        return s\n    result = []\n    prev = None\n    for c in s:\n        if c == char and prev == char:\n            continue\n        result.append(c)\n        prev = c\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6674": {
    "question_id": "mbpp/667",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace(s, char):\n    if not s or not char:\n        return s\n    result = []\n    prev = None\n    for c in s:\n        if c == char and prev == char:\n            continue\n        result.append(c)\n        prev = c\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6675": {
    "question_id": "mbpp/667",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace(s, char):\n    if not s:\n        return s\n    result = []\n    prev = None\n    for c in s:\n        if c == char and prev == char:\n            continue\n        result.append(c)\n        prev = c\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6676": {
    "question_id": "mbpp/667",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace(s, char):\n    if not s:\n        return s\n    result = []\n    prev_char = None\n    for c in s:\n        if c == char and prev_char == char:\n            continue\n        result.append(c)\n        prev_char = c\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6677": {
    "question_id": "mbpp/667",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace(s, char):\n    if not s:\n        return s\n    result = []\n    prev = None\n    for c in s:\n        if c == char and prev == char:\n            continue\n        result.append(c)\n        prev = c\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6678": {
    "question_id": "mbpp/667",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace(s, char):\n    if not s:\n        return s\n    result = []\n    prev = None\n    for c in s:\n        if c == char and prev == char:\n            continue\n        result.append(c)\n        prev = c\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6679": {
    "question_id": "mbpp/667",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace(s, char):\n    if not s:\n        return s\n    result = []\n    prev = None\n    for c in s:\n        if c == char and prev == char:\n            continue\n        result.append(c)\n        prev = c\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6680": {
    "question_id": "mbpp/668",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_IP(ip):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6681": {
    "question_id": "mbpp/668",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_IP(ip):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6682": {
    "question_id": "mbpp/668",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_IP(ip):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6683": {
    "question_id": "mbpp/668",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_IP(ip):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6684": {
    "question_id": "mbpp/668",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_IP(ip):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6685": {
    "question_id": "mbpp/668",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_IP(ip):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6686": {
    "question_id": "mbpp/668",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_IP(ip):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6687": {
    "question_id": "mbpp/668",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_IP(ip):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6688": {
    "question_id": "mbpp/668",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_IP(ip):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6689": {
    "question_id": "mbpp/668",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_IP(ip):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6690": {
    "question_id": "mbpp/669",
    "model": "deepseek-v3-250324",
    "generation_code": "def decreasing_trend(sequence):\n    if len(sequence) <= 1:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] <= sequence[i + 1]:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "6691": {
    "question_id": "mbpp/669",
    "model": "deepseek-v3-250324",
    "generation_code": "def decreasing_trend(sequence):\n    if len(sequence) <= 1:\n        return True\n    for i in range(len(sequence) - 1):\n        if sequence[i] < sequence[i + 1]:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "6692": {
    "question_id": "mbpp/669",
    "model": "deepseek-v3-250324",
    "generation_code": "def decreasing_trend(sequence):\n    if len(sequence) < 2:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] <= sequence[i + 1]:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "6693": {
    "question_id": "mbpp/669",
    "model": "deepseek-v3-250324",
    "generation_code": "def decreasing_trend(sequence):\n    if len(sequence) <= 1:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] <= sequence[i + 1]:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "6694": {
    "question_id": "mbpp/669",
    "model": "deepseek-v3-250324",
    "generation_code": "def decreasing_trend(sequence):\n    if len(sequence) <= 1:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] <= sequence[i + 1]:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "6695": {
    "question_id": "mbpp/669",
    "model": "deepseek-v3-250324",
    "generation_code": "def decreasing_trend(sequence):\n    if len(sequence) <= 1:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] <= sequence[i + 1]:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "6696": {
    "question_id": "mbpp/669",
    "model": "deepseek-v3-250324",
    "generation_code": "def decreasing_trend(sequence):\n    if len(sequence) <= 1:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] <= sequence[i + 1]:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "6697": {
    "question_id": "mbpp/669",
    "model": "deepseek-v3-250324",
    "generation_code": "def decreasing_trend(sequence):\n    if len(sequence) <= 1:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] <= sequence[i + 1]:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "6698": {
    "question_id": "mbpp/669",
    "model": "deepseek-v3-250324",
    "generation_code": "def decreasing_trend(sequence):\n    if len(sequence) <= 1:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] <= sequence[i + 1]:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "6699": {
    "question_id": "mbpp/669",
    "model": "deepseek-v3-250324",
    "generation_code": "def decreasing_trend(sequence):\n    if len(sequence) <= 1:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] <= sequence[i + 1]:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "6700": {
    "question_id": "mbpp/670",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Right_most_Unset_Bit(num):\n    if num == 0:\n        return 1\n    if (num & (num + 1)) == 0:\n        return num\n    return num | (num + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6701": {
    "question_id": "mbpp/670",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Right_most_Unset_Bit(num):\n    if num == 0:\n        return 1\n    return num | (num + 1)",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "6702": {
    "question_id": "mbpp/670",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Right_most_Unset_Bit(num):\n    if num == 0:\n        return 1\n    return num | (num + 1)",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "6703": {
    "question_id": "mbpp/670",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Right_most_Unset_Bit(num):\n    if num == 0:\n        return 1\n    return num | (num + 1)",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "6704": {
    "question_id": "mbpp/670",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Right_most_Unset_Bit(n):\n    if n == 0:\n        return 1\n    if (n & (n + 1)) == 0:\n        return n\n    return n | (n + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6705": {
    "question_id": "mbpp/670",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Right_most_Unset_Bit(n):\n    if n == 0:\n        return 1\n    if (n & (n + 1)) == 0:\n        return n\n    return n | (n + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6706": {
    "question_id": "mbpp/670",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Right_most_Unset_Bit(num):\n    if num == 0:\n        return 1\n    return num | (num + 1)",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "6707": {
    "question_id": "mbpp/670",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Right_most_Unset_Bit(num):\n    if num == 0:\n        return 1\n    return num | (num + 1)",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "6708": {
    "question_id": "mbpp/670",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Right_most_Unset_Bit(n):\n    if n == 0:\n        return 1\n    return n | (n + 1)",
    "test_output": "FAILED: expect 15,in fact 31",
    "test_result": "False"
  },
  "6709": {
    "question_id": "mbpp/670",
    "model": "deepseek-v3-250324",
    "generation_code": "def set_Right_most_Unset_Bit(num):\n    if num == 0:\n        return 1\n    if (num & (num + 1)) == 0:\n        return num\n    return num | (num + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6710": {
    "question_id": "mbpp/671",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6711": {
    "question_id": "mbpp/671",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6712": {
    "question_id": "mbpp/671",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6713": {
    "question_id": "mbpp/671",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6714": {
    "question_id": "mbpp/671",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6715": {
    "question_id": "mbpp/671",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6716": {
    "question_id": "mbpp/671",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6717": {
    "question_id": "mbpp/671",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6718": {
    "question_id": "mbpp/671",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6719": {
    "question_id": "mbpp/671",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_three(a, b, c):\n    return max(a, b, c)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6720": {
    "question_id": "mbpp/672",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert(lst):\n    if not lst:\n        return 0\n    num_str = ''.join(map(str, lst))\n    return int(num_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6721": {
    "question_id": "mbpp/672",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert(lst):\n    if not lst:\n        return 0\n    num_str = ''.join(map(str, lst))\n    return int(num_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6722": {
    "question_id": "mbpp/672",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert(lst):\n    if not lst:\n        return 0\n    num_str = ''.join(map(str, lst))\n    return int(num_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6723": {
    "question_id": "mbpp/672",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert(lst):\n    if not lst:\n        return 0\n    num_str = ''.join(map(str, lst))\n    return int(num_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6724": {
    "question_id": "mbpp/672",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert(lst):\n    if not lst:\n        return 0\n    num_str = ''.join(map(str, lst))\n    return int(num_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6725": {
    "question_id": "mbpp/672",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert(lst):\n    if not lst:\n        return 0\n    num_str = ''.join(map(str, lst))\n    return int(num_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6726": {
    "question_id": "mbpp/672",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert(lst):\n    if not lst:\n        return 0\n    num_str = ''.join(map(str, lst))\n    return int(num_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6727": {
    "question_id": "mbpp/672",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert(lst):\n    if not lst:\n        return 0\n    num_str = ''.join(map(str, lst))\n    return int(num_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6728": {
    "question_id": "mbpp/672",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert(lst):\n    if not lst:\n        return 0\n    num_str = ''.join(map(str, lst))\n    return int(num_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6729": {
    "question_id": "mbpp/672",
    "model": "deepseek-v3-250324",
    "generation_code": "def convert(lst):\n    if not lst:\n        return 0\n    num_str = ''.join(map(str, lst))\n    return int(num_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6730": {
    "question_id": "mbpp/673",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import OrderedDict\n\ndef remove_duplicate(s):\n    words = s.split()\n    unique_words = OrderedDict.fromkeys(words)\n    return ' '.join(unique_words.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6731": {
    "question_id": "mbpp/673",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import OrderedDict\n\ndef remove_duplicate(s):\n    words = s.split()\n    unique_words = OrderedDict.fromkeys(words)\n    return ' '.join(unique_words.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6732": {
    "question_id": "mbpp/673",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import OrderedDict\n\ndef remove_duplicate(s):\n    words = s.split()\n    unique_words = OrderedDict.fromkeys(words)\n    return ' '.join(unique_words.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6733": {
    "question_id": "mbpp/673",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import OrderedDict\n\ndef remove_duplicate(s):\n    words = s.split()\n    unique_words = OrderedDict.fromkeys(words)\n    return ' '.join(unique_words.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6734": {
    "question_id": "mbpp/673",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import OrderedDict\n\ndef remove_duplicate(s):\n    words = s.split()\n    unique_words = OrderedDict.fromkeys(words)\n    return ' '.join(unique_words.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6735": {
    "question_id": "mbpp/673",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import OrderedDict\n\ndef remove_duplicate(s):\n    words = s.split()\n    unique_words = OrderedDict.fromkeys(words)\n    return ' '.join(unique_words.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6736": {
    "question_id": "mbpp/673",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import OrderedDict\n\ndef remove_duplicate(s):\n    words = s.split()\n    unique_words = OrderedDict.fromkeys(words)\n    return ' '.join(unique_words.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6737": {
    "question_id": "mbpp/673",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import OrderedDict\n\ndef remove_duplicate(s):\n    words = s.split()\n    unique_words = OrderedDict.fromkeys(words)\n    return ' '.join(unique_words.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6738": {
    "question_id": "mbpp/673",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import OrderedDict\n\ndef remove_duplicate(s):\n    if not s:\n        return \"\"\n    words = s.split()\n    unique_words = OrderedDict.fromkeys(words)\n    return ' '.join(unique_words.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6739": {
    "question_id": "mbpp/673",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import OrderedDict\n\ndef remove_duplicate(s):\n    words = s.split()\n    unique_words = OrderedDict.fromkeys(words)\n    return ' '.join(unique_words.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6740": {
    "question_id": "mbpp/674",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_nums(a, b, range_start, range_end):\n    total = a + b\n    if range_start <= total <= range_end:\n        return 20\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6741": {
    "question_id": "mbpp/674",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_nums(a, b, range_start, range_end):\n    total = a + b\n    if range_start <= total <= range_end:\n        return 20\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6742": {
    "question_id": "mbpp/674",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_nums(a, b, range_start, range_end):\n    total = a + b\n    if range_start <= total <= range_end:\n        return 20\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6743": {
    "question_id": "mbpp/674",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_nums(a, b, range_start, range_end):\n    total = a + b\n    if range_start <= total <= range_end:\n        return 20\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6744": {
    "question_id": "mbpp/674",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_nums(a, b, lower, upper):\n    total = a + b\n    if lower <= total <= upper:\n        return 20\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6745": {
    "question_id": "mbpp/674",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_nums(a, b, range_start, range_end):\n    total = a + b\n    if range_start <= total <= range_end:\n        return 20\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6746": {
    "question_id": "mbpp/674",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_nums(a, b, range_start, range_end):\n    total = a + b\n    if range_start <= total <= range_end:\n        return 20\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6747": {
    "question_id": "mbpp/674",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_nums(a, b, range_start, range_end):\n    total = a + b\n    if range_start <= total <= range_end:\n        return 20\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6748": {
    "question_id": "mbpp/674",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_nums(a, b, range_start, range_end):\n    total = a + b\n    if range_start <= total <= range_end:\n        return 20\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6749": {
    "question_id": "mbpp/674",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_nums(a, b, range_start, range_end):\n    total = a + b\n    if range_start <= total <= range_end:\n        return 20\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6750": {
    "question_id": "mbpp/675",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_extra_char(string):\n    return re.sub(r'[^a-zA-Z0-9]', '', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6751": {
    "question_id": "mbpp/675",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_extra_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6752": {
    "question_id": "mbpp/675",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_extra_char(string):\n    return re.sub(r'[^a-zA-Z0-9]', '', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6753": {
    "question_id": "mbpp/675",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_extra_char(string):\n    return re.sub(r'[^a-zA-Z0-9]', '', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6754": {
    "question_id": "mbpp/675",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_extra_char(string):\n    return re.sub(r'[^a-zA-Z0-9]', '', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6755": {
    "question_id": "mbpp/675",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_extra_char(string):\n    return re.sub(r'[^a-zA-Z0-9]', '', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6756": {
    "question_id": "mbpp/675",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_extra_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6757": {
    "question_id": "mbpp/675",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_extra_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6758": {
    "question_id": "mbpp/675",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_extra_char(string):\n    return re.sub(r'[^a-zA-Z0-9]', '', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6759": {
    "question_id": "mbpp/675",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_extra_char(string):\n    return re.sub(r'[^a-zA-Z0-9]', '', string)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6760": {
    "question_id": "mbpp/676",
    "model": "deepseek-v3-250324",
    "generation_code": "def validity_triangle(angle1, angle2, angle3):\n    if angle1 + angle2 + angle3 == 180 and angle1 > 0 and angle2 > 0 and angle3 > 0:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6761": {
    "question_id": "mbpp/676",
    "model": "deepseek-v3-250324",
    "generation_code": "def validity_triangle(angle1, angle2, angle3):\n    if angle1 + angle2 + angle3 != 180:\n        return False\n    if angle1 <= 0 or angle2 <= 0 or angle3 <= 0:\n        return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6762": {
    "question_id": "mbpp/676",
    "model": "deepseek-v3-250324",
    "generation_code": "def validity_triangle(angle1, angle2, angle3):\n    if angle1 + angle2 + angle3 != 180:\n        return False\n    if angle1 <= 0 or angle2 <= 0 or angle3 <= 0:\n        return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6763": {
    "question_id": "mbpp/676",
    "model": "deepseek-v3-250324",
    "generation_code": "def validity_triangle(angle1, angle2, angle3):\n    if angle1 <= 0 or angle2 <= 0 or angle3 <= 0:\n        return False\n    if angle1 + angle2 + angle3 != 180:\n        return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6764": {
    "question_id": "mbpp/676",
    "model": "deepseek-v3-250324",
    "generation_code": "def validity_triangle(angle1, angle2, angle3):\n    if angle1 <= 0 or angle2 <= 0 or angle3 <= 0:\n        return False\n    if angle1 + angle2 + angle3 != 180:\n        return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6765": {
    "question_id": "mbpp/676",
    "model": "deepseek-v3-250324",
    "generation_code": "def validity_triangle(angle1, angle2, angle3):\n    if angle1 + angle2 + angle3 != 180:\n        return False\n    if angle1 <= 0 or angle2 <= 0 or angle3 <= 0:\n        return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6766": {
    "question_id": "mbpp/676",
    "model": "deepseek-v3-250324",
    "generation_code": "def validity_triangle(angle1, angle2, angle3):\n    if angle1 + angle2 + angle3 != 180:\n        return False\n    if angle1 <= 0 or angle2 <= 0 or angle3 <= 0:\n        return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6767": {
    "question_id": "mbpp/676",
    "model": "deepseek-v3-250324",
    "generation_code": "def validity_triangle(angle1, angle2, angle3):\n    if angle1 + angle2 + angle3 == 180 and angle1 > 0 and angle2 > 0 and angle3 > 0:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6768": {
    "question_id": "mbpp/676",
    "model": "deepseek-v3-250324",
    "generation_code": "def validity_triangle(angle1, angle2, angle3):\n    if angle1 <= 0 or angle2 <= 0 or angle3 <= 0:\n        return False\n    if angle1 + angle2 + angle3 != 180:\n        return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6769": {
    "question_id": "mbpp/676",
    "model": "deepseek-v3-250324",
    "generation_code": "def validity_triangle(angle1, angle2, angle3):\n    if angle1 + angle2 + angle3 == 180 and angle1 > 0 and angle2 > 0 and angle3 > 0:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6770": {
    "question_id": "mbpp/677",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6771": {
    "question_id": "mbpp/677",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6772": {
    "question_id": "mbpp/677",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6773": {
    "question_id": "mbpp/677",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6774": {
    "question_id": "mbpp/677",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6775": {
    "question_id": "mbpp/677",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6776": {
    "question_id": "mbpp/677",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6777": {
    "question_id": "mbpp/677",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6778": {
    "question_id": "mbpp/677",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6779": {
    "question_id": "mbpp/677",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6780": {
    "question_id": "mbpp/678",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_key(dictionary, index):\n    keys = list(dictionary.keys())\n    if index < 0 or index >= len(keys):\n        return None\n    return keys[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6781": {
    "question_id": "mbpp/678",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_key(dictionary, index):\n    keys = list(dictionary.keys())\n    if index < 0 or index >= len(keys):\n        return None\n    return keys[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6782": {
    "question_id": "mbpp/678",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_key(dictionary, index):\n    keys = list(dictionary.keys())\n    if index < 0 or index >= len(keys):\n        return None\n    return keys[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6783": {
    "question_id": "mbpp/678",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_key(dictionary, index):\n    keys = list(dictionary.keys())\n    if index < 0 or index >= len(keys):\n        return None\n    return keys[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6784": {
    "question_id": "mbpp/678",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_key(dictionary, index):\n    keys = list(dictionary.keys())\n    if index < 0 or index >= len(keys):\n        return None\n    return keys[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6785": {
    "question_id": "mbpp/678",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_key(dictionary, index):\n    keys = list(dictionary.keys())\n    if index < 0 or index >= len(keys):\n        return None\n    return keys[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6786": {
    "question_id": "mbpp/678",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_key(dictionary, index):\n    keys = list(dictionary.keys())\n    if index < 0 or index >= len(keys):\n        return None\n    return keys[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6787": {
    "question_id": "mbpp/678",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_key(dictionary, index):\n    keys = list(dictionary.keys())\n    if index < 0 or index >= len(keys):\n        return None\n    return keys[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6788": {
    "question_id": "mbpp/678",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_key(dictionary, index):\n    keys = list(dictionary.keys())\n    if index < 0 or index >= len(keys):\n        return None\n    return keys[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6789": {
    "question_id": "mbpp/678",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_key(dictionary, index):\n    keys = list(dictionary.keys())\n    if index < 0 or index >= len(keys):\n        return None\n    return keys[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6790": {
    "question_id": "mbpp/679",
    "model": "deepseek-v3-250324",
    "generation_code": "def increasing_trend(sequence):\n    if len(sequence) <= 1:\n        return True\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i+1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6791": {
    "question_id": "mbpp/679",
    "model": "deepseek-v3-250324",
    "generation_code": "def increasing_trend(sequence):\n    if len(sequence) <= 1:\n        return True\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i+1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6792": {
    "question_id": "mbpp/679",
    "model": "deepseek-v3-250324",
    "generation_code": "def increasing_trend(sequence):\n    if len(sequence) <= 1:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i+1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6793": {
    "question_id": "mbpp/679",
    "model": "deepseek-v3-250324",
    "generation_code": "def increasing_trend(sequence):\n    if len(sequence) <= 1:\n        return True\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i+1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6794": {
    "question_id": "mbpp/679",
    "model": "deepseek-v3-250324",
    "generation_code": "def increasing_trend(sequence):\n    if len(sequence) < 2:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i+1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6795": {
    "question_id": "mbpp/679",
    "model": "deepseek-v3-250324",
    "generation_code": "def increasing_trend(sequence):\n    if len(sequence) <= 1:\n        return True\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i + 1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6796": {
    "question_id": "mbpp/679",
    "model": "deepseek-v3-250324",
    "generation_code": "def increasing_trend(sequence):\n    if len(sequence) < 2:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i+1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6797": {
    "question_id": "mbpp/679",
    "model": "deepseek-v3-250324",
    "generation_code": "def increasing_trend(sequence):\n    if len(sequence) < 2:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i+1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6798": {
    "question_id": "mbpp/679",
    "model": "deepseek-v3-250324",
    "generation_code": "def increasing_trend(sequence):\n    if len(sequence) < 2:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i+1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6799": {
    "question_id": "mbpp/679",
    "model": "deepseek-v3-250324",
    "generation_code": "def increasing_trend(sequence):\n    if len(sequence) < 2:\n        return False\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i+1]:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6800": {
    "question_id": "mbpp/680",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_Divisor(n):\n    if n <= 1:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6801": {
    "question_id": "mbpp/680",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_Divisor(n):\n    if n <= 1:\n        return None\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += w\n        w = 6 - w\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6802": {
    "question_id": "mbpp/680",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_Divisor(n):\n    if n <= 1:\n        return None\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += w\n        w = 6 - w\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6803": {
    "question_id": "mbpp/680",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_Divisor(n):\n    if n <= 1:\n        return None\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += w\n        w = 6 - w\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6804": {
    "question_id": "mbpp/680",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_Divisor(n):\n    if n <= 1:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6805": {
    "question_id": "mbpp/680",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_Divisor(n):\n    if n <= 1:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6806": {
    "question_id": "mbpp/680",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_Divisor(n):\n    if n <= 1:\n        return None\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += w\n        w = 6 - w\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6807": {
    "question_id": "mbpp/680",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_Divisor(n):\n    if n <= 1:\n        return None\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += w\n        w = 6 - w\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6808": {
    "question_id": "mbpp/680",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_Divisor(n):\n    if n <= 1:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6809": {
    "question_id": "mbpp/680",
    "model": "deepseek-v3-250324",
    "generation_code": "def smallest_Divisor(n):\n    if n <= 1:\n        return None\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += w\n        w = 6 - w\n    return n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6810": {
    "question_id": "mbpp/681",
    "model": "deepseek-v3-250324",
    "generation_code": "mul_list = lambda list1, list2: list(map(lambda x, y: x * y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6811": {
    "question_id": "mbpp/681",
    "model": "deepseek-v3-250324",
    "generation_code": "mul_list = lambda list1, list2: list(map(lambda x, y: x * y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6812": {
    "question_id": "mbpp/681",
    "model": "deepseek-v3-250324",
    "generation_code": "mul_list = lambda list1, list2: list(map(lambda x, y: x * y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6813": {
    "question_id": "mbpp/681",
    "model": "deepseek-v3-250324",
    "generation_code": "mul_list = lambda list1, list2: list(map(lambda x, y: x * y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6814": {
    "question_id": "mbpp/681",
    "model": "deepseek-v3-250324",
    "generation_code": "mul_list = lambda list1, list2: list(map(lambda x, y: x * y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6815": {
    "question_id": "mbpp/681",
    "model": "deepseek-v3-250324",
    "generation_code": "mul_list = lambda list1, list2: list(map(lambda x, y: x * y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6816": {
    "question_id": "mbpp/681",
    "model": "deepseek-v3-250324",
    "generation_code": "mul_list = lambda list1, list2: list(map(lambda x, y: x * y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6817": {
    "question_id": "mbpp/681",
    "model": "deepseek-v3-250324",
    "generation_code": "mul_list = lambda list1, list2: list(map(lambda x, y: x * y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6818": {
    "question_id": "mbpp/681",
    "model": "deepseek-v3-250324",
    "generation_code": "mul_list = lambda list1, list2: list(map(lambda x, y: x * y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6819": {
    "question_id": "mbpp/681",
    "model": "deepseek-v3-250324",
    "generation_code": "mul_list = lambda list1, list2: list(map(lambda x, y: x * y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6820": {
    "question_id": "mbpp/682",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5) + 1):\n        remainder = n - i*i\n        if remainder >= 0 and int(remainder**0.5)**2 == remainder:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6821": {
    "question_id": "mbpp/682",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5) + 1):\n        remainder = n - i*i\n        if remainder >= 0 and int(remainder**0.5)**2 == remainder:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6822": {
    "question_id": "mbpp/682",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Square(n):\n    for i in range(int(n**0.5) + 1):\n        remainder = n - i*i\n        if remainder >= 0:\n            j = int(remainder**0.5)\n            if j*j == remainder:\n                return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6823": {
    "question_id": "mbpp/682",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5) + 1):\n        remainder = n - i*i\n        if remainder < 0:\n            continue\n        j = int(remainder**0.5)\n        if j*j == remainder:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6824": {
    "question_id": "mbpp/682",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5) + 1):\n        remainder = n - i*i\n        if remainder >= 0 and (int(remainder**0.5) ** 2) == remainder:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6825": {
    "question_id": "mbpp/682",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5) + 1):\n        remainder = n - i*i\n        if remainder >= 0 and int(remainder**0.5)**2 == remainder:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6826": {
    "question_id": "mbpp/682",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5) + 1):\n        remainder = n - i*i\n        if remainder >= 0:\n            j = int(remainder**0.5)\n            if j*j == remainder:\n                return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6827": {
    "question_id": "mbpp/682",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Square(n):\n    for i in range(int(n**0.5) + 1):\n        j = (n - i*i)**0.5\n        if j == int(j):\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6828": {
    "question_id": "mbpp/682",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5) + 1):\n        remainder = n - i*i\n        if remainder < 0:\n            continue\n        j = int(remainder**0.5)\n        if j*j == remainder:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6829": {
    "question_id": "mbpp/682",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Square(n):\n    for i in range(int(n ** 0.5) + 1):\n        j = (n - i*i) ** 0.5\n        if j == int(j):\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6830": {
    "question_id": "mbpp/683",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Char(s, c):\n    if not s or not c:\n        return 0\n    count_in_single = s.count(c)\n    return count_in_single",
    "test_output": "FAILED: expect 4,in fact 2",
    "test_result": "False"
  },
  "6831": {
    "question_id": "mbpp/683",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Char(s, c):\n    if not s or not c:\n        return 0\n    count_in_single = s.count(c)\n    length = len(s)\n    if length == 0:\n        return 0\n    repetitions = 100 // length\n    remainder = 100 % length\n    total = count_in_single * repetitions\n    total += s[:remainder].count(c)\n    return total",
    "test_output": "FAILED: expect 4,in fact 40",
    "test_result": "False"
  },
  "6832": {
    "question_id": "mbpp/683",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Char(s, c):\n    if not s or not c:\n        return 0\n    count_in_single = s.count(c)\n    if count_in_single == 0:\n        return 0\n    full_repeats = 10 // len(s)\n    remainder = 10 % len(s)\n    total = full_repeats * count_in_single + s[:remainder].count(c)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6833": {
    "question_id": "mbpp/683",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Char(s, c):\n    if not s or not c:\n        return 0\n    count_in_single = s.count(c)\n    full_repeats = (10 // len(s))\n    remainder = 10 % len(s)\n    total = count_in_single * full_repeats + s[:remainder].count(c)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6834": {
    "question_id": "mbpp/683",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Char(s, c):\n    if not s or not c:\n        return 0\n    count_in_single = s.count(c)\n    if count_in_single == 0:\n        return 0\n    full_repeats = 10 // len(s)\n    remainder = 10 % len(s)\n    total = full_repeats * count_in_single + s[:remainder].count(c)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6835": {
    "question_id": "mbpp/683",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Char(s, c):\n    if not s or not c:\n        return 0\n    count_in_single = s.count(c)\n    full_repeats = (10 // len(s))\n    remainder = 10 % len(s)\n    total = count_in_single * full_repeats + s[:remainder].count(c)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6836": {
    "question_id": "mbpp/683",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Char(s, c):\n    if not s or not c:\n        return 0\n    count_in_single = s.count(c)\n    length = len(s)\n    full_repeats = (10**6) // length\n    remainder = (10**6) % length\n    total = full_repeats * count_in_single + s[:remainder].count(c)\n    return total",
    "test_output": "FAILED: expect 4,in fact 400000",
    "test_result": "False"
  },
  "6837": {
    "question_id": "mbpp/683",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Char(s, c):\n    if not s or not c:\n        return 0\n    count_in_single = s.count(c)\n    full_repeats = (10 // len(s))\n    remainder = 10 % len(s)\n    total = count_in_single * full_repeats + s[:remainder].count(c)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6838": {
    "question_id": "mbpp/683",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Char(s, c):\n    if not s or not c:\n        return 0\n    count_in_single = s.count(c)\n    full_repeats = (10 // len(s))\n    remainder = 10 % len(s)\n    total = count_in_single * full_repeats + s[:remainder].count(c)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6839": {
    "question_id": "mbpp/683",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Char(s, c):\n    if not s or not c:\n        return 0\n    count_in_single = s.count(c)\n    full_repeats = 10 // len(s)\n    remainder = 10 % len(s)\n    total = count_in_single * full_repeats + s[:remainder].count(c)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6840": {
    "question_id": "mbpp/684",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            primes[i*i : n+1 : i] = [False] * len(primes[i*i : n+1 : i])\n    return sum(i for i, is_prime in enumerate(primes) if is_prime)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6841": {
    "question_id": "mbpp/684",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for current in range(2, int(n ** 0.5) + 1):\n        if sieve[current]:\n            sieve[current*current :: current] = [False] * len(sieve[current*current :: current])\n    primes = [i for i, is_prime in enumerate(sieve) if is_prime]\n    return sum(primes)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6842": {
    "question_id": "mbpp/684",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for current in range(2, int(n ** 0.5) + 1):\n        if sieve[current]:\n            sieve[current*current :: current] = [False] * len(sieve[current*current :: current])\n    primes = [i for i, is_prime in enumerate(sieve) if is_prime]\n    return sum(primes)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6843": {
    "question_id": "mbpp/684",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            primes[i*i : n+1 : i] = [False] * len(primes[i*i : n+1 : i])\n    return sum(i for i, is_prime in enumerate(primes) if is_prime)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6844": {
    "question_id": "mbpp/684",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            primes[i*i : n+1 : i] = [False] * len(primes[i*i : n+1 : i])\n    return sum(i for i, is_prime in enumerate(primes) if is_prime)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6845": {
    "question_id": "mbpp/684",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for current in range(2, int(n ** 0.5) + 1):\n        if sieve[current]:\n            sieve[current*current :: current] = [False] * len(sieve[current*current :: current])\n    primes = [i for i, is_prime in enumerate(sieve) if is_prime]\n    return sum(primes)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6846": {
    "question_id": "mbpp/684",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    sum_primes = 0\n    for num in range(2, n + 1):\n        if is_prime(num):\n            sum_primes += num\n    return sum_primes",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6847": {
    "question_id": "mbpp/684",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for current in range(2, int(n ** 0.5) + 1):\n        if sieve[current]:\n            sieve[current*current :: current] = [False] * len(sieve[current*current :: current])\n    primes = [i for i, is_prime in enumerate(sieve) if is_prime]\n    return sum(primes)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6848": {
    "question_id": "mbpp/684",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            primes[i*i : n+1 : i] = [False] * len(primes[i*i : n+1 : i])\n    return sum(i for i, is_prime in enumerate(primes) if is_prime)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6849": {
    "question_id": "mbpp/684",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for current in range(2, int(n ** 0.5) + 1):\n        if sieve[current]:\n            sieve[current*current :: current] = [False] * len(sieve[current*current :: current])\n    primes = [i for i, is_prime in enumerate(sieve) if is_prime]\n    return sum(primes)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6850": {
    "question_id": "mbpp/685",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_element(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return str(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6851": {
    "question_id": "mbpp/685",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_element(lst):\n    freq = {}\n    for element in lst:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return str(freq)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6852": {
    "question_id": "mbpp/685",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_element(lst):\n    frequency = {}\n    for element in lst:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return str(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6853": {
    "question_id": "mbpp/685",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_element(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return str(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6854": {
    "question_id": "mbpp/685",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_element(lst):\n    frequency = {}\n    for element in lst:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return str(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6855": {
    "question_id": "mbpp/685",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_element(lst):\n    frequency = {}\n    for element in lst:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return str(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6856": {
    "question_id": "mbpp/685",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_element(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return str(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6857": {
    "question_id": "mbpp/685",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_element(lst):\n    frequency = {}\n    for element in lst:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return str(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6858": {
    "question_id": "mbpp/685",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_element(lst):\n    frequency = {}\n    for element in lst:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return str(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6859": {
    "question_id": "mbpp/685",
    "model": "deepseek-v3-250324",
    "generation_code": "def freq_element(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return str(frequency)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6860": {
    "question_id": "mbpp/686",
    "model": "deepseek-v3-250324",
    "generation_code": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6861": {
    "question_id": "mbpp/686",
    "model": "deepseek-v3-250324",
    "generation_code": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    return recur_gcd(b, a % b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6862": {
    "question_id": "mbpp/686",
    "model": "deepseek-v3-250324",
    "generation_code": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    return recur_gcd(b, a % b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6863": {
    "question_id": "mbpp/686",
    "model": "deepseek-v3-250324",
    "generation_code": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    return recur_gcd(b, a % b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6864": {
    "question_id": "mbpp/686",
    "model": "deepseek-v3-250324",
    "generation_code": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6865": {
    "question_id": "mbpp/686",
    "model": "deepseek-v3-250324",
    "generation_code": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    return recur_gcd(b, a % b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6866": {
    "question_id": "mbpp/686",
    "model": "deepseek-v3-250324",
    "generation_code": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    return recur_gcd(b, a % b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6867": {
    "question_id": "mbpp/686",
    "model": "deepseek-v3-250324",
    "generation_code": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6868": {
    "question_id": "mbpp/686",
    "model": "deepseek-v3-250324",
    "generation_code": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    return recur_gcd(b, a % b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6869": {
    "question_id": "mbpp/686",
    "model": "deepseek-v3-250324",
    "generation_code": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6870": {
    "question_id": "mbpp/687",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef len_complex(a, b):\n    return math.sqrt(a**2 + b**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6871": {
    "question_id": "mbpp/687",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef len_complex(a, b):\n    return math.sqrt(a**2 + b**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6872": {
    "question_id": "mbpp/687",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6873": {
    "question_id": "mbpp/687",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6874": {
    "question_id": "mbpp/687",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6875": {
    "question_id": "mbpp/687",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6876": {
    "question_id": "mbpp/687",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6877": {
    "question_id": "mbpp/687",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6878": {
    "question_id": "mbpp/687",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6879": {
    "question_id": "mbpp/687",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef len_complex(a, b):\n    return math.sqrt(a**2 + b**2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6880": {
    "question_id": "mbpp/688",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    \n    max_reach = arr[0]\n    steps = arr[0]\n    jumps = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        max_reach = max(max_reach, i + arr[i])\n        steps -= 1\n        if steps == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            steps = max_reach - i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6881": {
    "question_id": "mbpp/688",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    \n    max_reach = arr[0]\n    steps = arr[0]\n    jumps = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        max_reach = max(max_reach, i + arr[i])\n        steps -= 1\n        if steps == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            steps = max_reach - i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6882": {
    "question_id": "mbpp/688",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    \n    max_reach = arr[0]\n    steps = arr[0]\n    jumps = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        max_reach = max(max_reach, i + arr[i])\n        steps -= 1\n        if steps == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            steps = max_reach - i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6883": {
    "question_id": "mbpp/688",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    \n    max_reach = arr[0]\n    steps = arr[0]\n    jumps = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        \n        max_reach = max(max_reach, i + arr[i])\n        steps -= 1\n        \n        if steps == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            steps = max_reach - i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6884": {
    "question_id": "mbpp/688",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    \n    max_reach = arr[0]\n    steps = arr[0]\n    jumps = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        max_reach = max(max_reach, i + arr[i])\n        steps -= 1\n        if steps == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            steps = max_reach - i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6885": {
    "question_id": "mbpp/688",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    \n    max_reach = arr[0]\n    steps = arr[0]\n    jumps = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        max_reach = max(max_reach, i + arr[i])\n        steps -= 1\n        if steps == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            steps = max_reach - i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6886": {
    "question_id": "mbpp/688",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    \n    max_reach = arr[0]\n    steps = arr[0]\n    jumps = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        max_reach = max(max_reach, i + arr[i])\n        steps -= 1\n        if steps == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            steps = max_reach - i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6887": {
    "question_id": "mbpp/688",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    \n    max_reach = arr[0]\n    steps = arr[0]\n    jumps = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        \n        max_reach = max(max_reach, i + arr[i])\n        steps -= 1\n        \n        if steps == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            steps = max_reach - i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6888": {
    "question_id": "mbpp/688",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    \n    max_reach = arr[0]\n    steps = arr[0]\n    jumps = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        max_reach = max(max_reach, i + arr[i])\n        steps -= 1\n        if steps == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            steps = max_reach - i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6889": {
    "question_id": "mbpp/688",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    \n    max_reach = arr[0]\n    step = arr[0]\n    jump = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jump\n        max_reach = max(max_reach, i + arr[i])\n        step -= 1\n        if step == 0:\n            jump += 1\n            if i >= max_reach:\n                return -1\n            step = max_reach - i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6890": {
    "question_id": "mbpp/689",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_consecutive_nums(nums):\n    if len(nums) < 2:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] * nums[i + 1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6891": {
    "question_id": "mbpp/689",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_consecutive_nums(nums):\n    if len(nums) < 2:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] * nums[i + 1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6892": {
    "question_id": "mbpp/689",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_consecutive_nums(nums):\n    if len(nums) < 2:\n        return []\n    result = []\n    for i in range(len(nums)-1):\n        result.append(nums[i] * nums[i+1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6893": {
    "question_id": "mbpp/689",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_consecutive_nums(nums):\n    if len(nums) <= 1:\n        return []\n    result = []\n    for i in range(len(nums)-1):\n        result.append(nums[i] * nums[i+1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6894": {
    "question_id": "mbpp/689",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_consecutive_nums(nums):\n    if not nums:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] * nums[i + 1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6895": {
    "question_id": "mbpp/689",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_consecutive_nums(nums):\n    if len(nums) < 2:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] * nums[i+1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6896": {
    "question_id": "mbpp/689",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_consecutive_nums(nums):\n    if len(nums) < 2:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] * nums[i + 1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6897": {
    "question_id": "mbpp/689",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_consecutive_nums(nums):\n    if len(nums) < 2:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] * nums[i + 1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6898": {
    "question_id": "mbpp/689",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_consecutive_nums(nums):\n    if len(nums) < 2:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] * nums[i + 1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6899": {
    "question_id": "mbpp/689",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_consecutive_nums(nums):\n    if len(nums) < 2:\n        return []\n    return [nums[i] * nums[i+1] for i in range(len(nums)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6900": {
    "question_id": "mbpp/690",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_element(lst):\n    result = {}\n    for first, second in lst:\n        if second in result:\n            result[second].append(first)\n        else:\n            result[second] = [first]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6901": {
    "question_id": "mbpp/690",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_element(lst):\n    result = {}\n    for first, second in lst:\n        if second in result:\n            result[second].append(first)\n        else:\n            result[second] = [first]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6902": {
    "question_id": "mbpp/690",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_element(lst):\n    result = {}\n    for first, second in lst:\n        if second in result:\n            result[second].append(first)\n        else:\n            result[second] = [first]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6903": {
    "question_id": "mbpp/690",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_element(lst):\n    result = {}\n    for first, second in lst:\n        if second not in result:\n            result[second] = []\n        result[second].append(first)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6904": {
    "question_id": "mbpp/690",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_element(lst):\n    result = {}\n    for first, second in lst:\n        if second in result:\n            result[second].append(first)\n        else:\n            result[second] = [first]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6905": {
    "question_id": "mbpp/690",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_element(lst):\n    result = {}\n    for first, second in lst:\n        if second not in result:\n            result[second] = []\n        result[second].append(first)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6906": {
    "question_id": "mbpp/690",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_element(lst):\n    result = {}\n    for first, second in lst:\n        if second in result:\n            result[second].append(first)\n        else:\n            result[second] = [first]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6907": {
    "question_id": "mbpp/690",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_element(lst):\n    result = {}\n    for first, second in lst:\n        if second in result:\n            result[second].append(first)\n        else:\n            result[second] = [first]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6908": {
    "question_id": "mbpp/690",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_element(lst):\n    result = {}\n    for first, second in lst:\n        if second in result:\n            result[second].append(first)\n        else:\n            result[second] = [first]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6909": {
    "question_id": "mbpp/690",
    "model": "deepseek-v3-250324",
    "generation_code": "def group_element(lst):\n    result = {}\n    for first, second in lst:\n        if second not in result:\n            result[second] = []\n        result[second].append(first)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6910": {
    "question_id": "mbpp/691",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Two_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    res = 1\n    for i in range(2, n+1):\n        res *= i\n        # Keep only last two digits to prevent overflow and improve performance\n        res %= 100\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6911": {
    "question_id": "mbpp/691",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Two_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n        # Keep only the last two digits to prevent overflow and improve performance\n        result %= 100\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6912": {
    "question_id": "mbpp/691",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Two_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n        # Keep only last two digits to prevent overflow and improve performance\n        result %= 100\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6913": {
    "question_id": "mbpp/691",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Two_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n        # Keep only last two digits to prevent overflow and improve performance\n        result %= 100\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6914": {
    "question_id": "mbpp/691",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Two_Digits(n):\n    if n < 0:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n        # Keep only the last two digits to prevent overflow and improve performance\n        result %= 100\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6915": {
    "question_id": "mbpp/691",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Two_Digits(n):\n    if n < 0:\n        return 0\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n        result %= 100\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6916": {
    "question_id": "mbpp/691",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Two_Digits(n):\n    if n < 0:\n        return 0\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n        # Keep only last two digits to prevent overflow and improve performance\n        result %= 100\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6917": {
    "question_id": "mbpp/691",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Two_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n        # Keep only the last two digits to prevent overflow and improve performance\n        result %= 100\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6918": {
    "question_id": "mbpp/691",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Two_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n        # Keep only last two digits to prevent overflow and improve performance\n        result %= 100\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6919": {
    "question_id": "mbpp/691",
    "model": "deepseek-v3-250324",
    "generation_code": "def last_Two_Digits(n):\n    if n < 0:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n        # Keep only last two digits to prevent overflow and improve performance\n        result %= 100\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6920": {
    "question_id": "mbpp/692",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r' +', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6921": {
    "question_id": "mbpp/692",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r' +', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6922": {
    "question_id": "mbpp/692",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r' +', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6923": {
    "question_id": "mbpp/692",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r' +', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6924": {
    "question_id": "mbpp/692",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r' +', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6925": {
    "question_id": "mbpp/692",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r' +', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6926": {
    "question_id": "mbpp/692",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_multiple_spaces(text):\n    return re.sub(r' +', ' ', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6927": {
    "question_id": "mbpp/692",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r' +', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6928": {
    "question_id": "mbpp/692",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r' +', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6929": {
    "question_id": "mbpp/692",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r' +', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6930": {
    "question_id": "mbpp/693",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_unique(dictionary):\n    unique_values = set()\n    for value_list in dictionary.values():\n        unique_values.update(value_list)\n    return sorted(unique_values)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6931": {
    "question_id": "mbpp/693",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_unique(dictionary):\n    unique_values = set()\n    for value in dictionary.values():\n        unique_values.update(value)\n    return sorted(unique_values)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6932": {
    "question_id": "mbpp/693",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_unique(dictionary):\n    unique_values = set()\n    for value in dictionary.values():\n        if isinstance(value, list):\n            unique_values.update(value)\n        else:\n            unique_values.add(value)\n    return sorted(unique_values)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6933": {
    "question_id": "mbpp/693",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_unique(dictionary):\n    unique_values = set()\n    for value in dictionary.values():\n        unique_values.update(value)\n    return sorted(unique_values)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6934": {
    "question_id": "mbpp/693",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_unique(dictionary):\n    unique_values = set()\n    for value in dictionary.values():\n        unique_values.update(value)\n    return sorted(unique_values)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6935": {
    "question_id": "mbpp/693",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_unique(dictionary):\n    unique_values = set()\n    for value in dictionary.values():\n        unique_values.update(value)\n    return sorted(unique_values)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6936": {
    "question_id": "mbpp/693",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_unique(dictionary):\n    unique_values = set()\n    for value in dictionary.values():\n        if isinstance(value, list):\n            unique_values.update(value)\n        else:\n            unique_values.add(value)\n    return sorted(unique_values)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6937": {
    "question_id": "mbpp/693",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_unique(dictionary):\n    unique_values = set()\n    for value_list in dictionary.values():\n        unique_values.update(value_list)\n    return sorted(unique_values)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6938": {
    "question_id": "mbpp/693",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_unique(dictionary):\n    unique_values = set()\n    for value in dictionary.values():\n        if isinstance(value, list):\n            unique_values.update(value)\n        else:\n            unique_values.add(value)\n    return sorted(unique_values)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6939": {
    "question_id": "mbpp/693",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_unique(dictionary):\n    unique_values = set()\n    for value in dictionary.values():\n        if isinstance(value, list):\n            unique_values.update(value)\n        else:\n            unique_values.add(value)\n    return sorted(unique_values)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6940": {
    "question_id": "mbpp/694",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b <= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6941": {
    "question_id": "mbpp/694",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b <= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6942": {
    "question_id": "mbpp/694",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b <= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6943": {
    "question_id": "mbpp/694",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b <= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6944": {
    "question_id": "mbpp/694",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b <= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6945": {
    "question_id": "mbpp/694",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b <= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6946": {
    "question_id": "mbpp/694",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b <= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6947": {
    "question_id": "mbpp/694",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b <= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6948": {
    "question_id": "mbpp/694",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b <= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6949": {
    "question_id": "mbpp/694",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_greater(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b <= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6950": {
    "question_id": "mbpp/695",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_list(list1, list2):\n    result = []\n    min_len = min(len(list1), len(list2))\n    for i in range(min_len):\n        combined = list1[i] + list2[i]\n        result.append(combined)\n    if len(list1) > min_len:\n        result.extend(list1[min_len:])\n    elif len(list2) > min_len:\n        result.extend(list2[min_len:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6951": {
    "question_id": "mbpp/695",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_list(list1, list2):\n    result = []\n    min_len = min(len(list1), len(list2))\n    for i in range(min_len):\n        combined = list1[i] + list2[i]\n        result.append(combined)\n    if len(list1) > len(list2):\n        result.extend(list1[min_len:])\n    elif len(list2) > len(list1):\n        result.extend(list2[min_len:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6952": {
    "question_id": "mbpp/695",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_list(list1, list2):\n    result = []\n    min_len = min(len(list1), len(list2))\n    for i in range(min_len):\n        combined = list1[i] + list2[i]\n        result.append(combined)\n    if len(list1) > min_len:\n        result.extend(list1[min_len:])\n    elif len(list2) > min_len:\n        result.extend(list2[min_len:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6953": {
    "question_id": "mbpp/695",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_list(list1, list2):\n    result = []\n    min_len = min(len(list1), len(list2))\n    for i in range(min_len):\n        combined = list1[i] + list2[i]\n        result.append(combined)\n    if len(list1) > min_len:\n        result.extend(list1[min_len:])\n    elif len(list2) > min_len:\n        result.extend(list2[min_len:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6954": {
    "question_id": "mbpp/695",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_list(list1, list2):\n    result = []\n    min_len = min(len(list1), len(list2))\n    for i in range(min_len):\n        combined = list1[i] + list2[i]\n        result.append(combined)\n    if len(list1) > len(list2):\n        result.extend(list1[min_len:])\n    elif len(list2) > len(list1):\n        result.extend(list2[min_len:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6955": {
    "question_id": "mbpp/695",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_list(list1, list2):\n    result = []\n    min_len = min(len(list1), len(list2))\n    for i in range(min_len):\n        combined = list1[i] + list2[i]\n        result.append(combined)\n    if len(list1) > len(list2):\n        result.extend(list1[min_len:])\n    elif len(list2) > len(list1):\n        result.extend(list2[min_len:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6956": {
    "question_id": "mbpp/695",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_list(list1, list2):\n    result = []\n    for sublist1, sublist2 in zip(list1, list2):\n        combined = sublist1 + sublist2\n        result.append(combined)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6957": {
    "question_id": "mbpp/695",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_list(list1, list2):\n    result = []\n    min_len = min(len(list1), len(list2))\n    for i in range(min_len):\n        combined = list1[i] + list2[i]\n        result.append(combined)\n    if len(list1) > len(list2):\n        result.extend(list1[min_len:])\n    elif len(list2) > len(list1):\n        result.extend(list2[min_len:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6958": {
    "question_id": "mbpp/695",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_list(list1, list2):\n    result = []\n    min_len = min(len(list1), len(list2))\n    for i in range(min_len):\n        combined = list1[i] + list2[i]\n        result.append(combined)\n    if len(list1) > min_len:\n        result.extend(list1[min_len:])\n    elif len(list2) > min_len:\n        result.extend(list2[min_len:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6959": {
    "question_id": "mbpp/695",
    "model": "deepseek-v3-250324",
    "generation_code": "def zip_list(list1, list2):\n    result = []\n    min_len = min(len(list1), len(list2))\n    for i in range(min_len):\n        combined = list1[i] + list2[i]\n        result.append(combined)\n    if len(list1) > min_len:\n        result.extend(list1[min_len:])\n    elif len(list2) > min_len:\n        result.extend(list2[min_len:])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6960": {
    "question_id": "mbpp/696",
    "model": "deepseek-v3-250324",
    "generation_code": "count_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6961": {
    "question_id": "mbpp/696",
    "model": "deepseek-v3-250324",
    "generation_code": "count_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6962": {
    "question_id": "mbpp/696",
    "model": "deepseek-v3-250324",
    "generation_code": "count_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6963": {
    "question_id": "mbpp/696",
    "model": "deepseek-v3-250324",
    "generation_code": "count_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6964": {
    "question_id": "mbpp/696",
    "model": "deepseek-v3-250324",
    "generation_code": "count_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6965": {
    "question_id": "mbpp/696",
    "model": "deepseek-v3-250324",
    "generation_code": "count_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6966": {
    "question_id": "mbpp/696",
    "model": "deepseek-v3-250324",
    "generation_code": "count_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6967": {
    "question_id": "mbpp/696",
    "model": "deepseek-v3-250324",
    "generation_code": "count_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6968": {
    "question_id": "mbpp/696",
    "model": "deepseek-v3-250324",
    "generation_code": "count_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6969": {
    "question_id": "mbpp/696",
    "model": "deepseek-v3-250324",
    "generation_code": "count_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6970": {
    "question_id": "mbpp/697",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_dict_item(d):\n    sorted_items = sorted(d.items(), key=lambda item: item[0][0] * item[0][1])\n    return dict(sorted_items)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6971": {
    "question_id": "mbpp/697",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0] * item[0][1]))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6972": {
    "question_id": "mbpp/697",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0] * item[0][1]))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6973": {
    "question_id": "mbpp/697",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0] * item[0][1]))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6974": {
    "question_id": "mbpp/697",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0] * item[0][1]))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6975": {
    "question_id": "mbpp/697",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0] * item[0][1]))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6976": {
    "question_id": "mbpp/697",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0] * item[0][1]))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6977": {
    "question_id": "mbpp/697",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0] * item[0][1]))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6978": {
    "question_id": "mbpp/697",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_dict_item(d):\n    sorted_items = sorted(d.items(), key=lambda item: item[0][0] * item[0][1])\n    return dict(sorted_items)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6979": {
    "question_id": "mbpp/697",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_dict_item(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0] * item[0][1]))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6980": {
    "question_id": "mbpp/698",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    diff = 0\n    for c1, c2 in zip(s1, s2):\n        if c1 != c2:\n            diff += 1\n    if diff % 2 != 0:\n        return -1\n    return diff // 2",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "6981": {
    "question_id": "mbpp/698",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swaps = 0\n    diff = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            diff += 1\n    if diff % 2 != 0:\n        return -1\n    swaps = diff // 2\n    return swaps",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "6982": {
    "question_id": "mbpp/698",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swaps = 0\n    diff = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            diff += 1\n    if diff % 2 != 0:\n        return -1\n    swaps = diff // 2\n    return swaps",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "6983": {
    "question_id": "mbpp/698",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    diff = 0\n    for c1, c2 in zip(s1, s2):\n        if c1 != c2:\n            diff += 1\n    if diff % 2 != 0:\n        return -1\n    return diff // 2",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "6984": {
    "question_id": "mbpp/698",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swaps = 0\n    mismatch = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            mismatch += 1\n    if mismatch % 2 != 0:\n        return -1\n    swaps = mismatch // 2\n    return swaps",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "6985": {
    "question_id": "mbpp/698",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swaps = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            swaps += 1\n    return swaps // 2",
    "test_output": "FAILED: expect Not Possible,in fact 1",
    "test_result": "False"
  },
  "6986": {
    "question_id": "mbpp/698",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swaps = 0\n    diff = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            diff += 1\n    if diff % 2 != 0:\n        return -1\n    swaps = diff // 2\n    return swaps",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "6987": {
    "question_id": "mbpp/698",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swaps = 0\n    diff = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            diff += 1\n    if diff % 2 != 0:\n        return -1\n    swaps = diff // 2\n    return swaps",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "6988": {
    "question_id": "mbpp/698",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swaps = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            swaps += 1\n    return swaps // 2",
    "test_output": "FAILED: expect Not Possible,in fact 1",
    "test_result": "False"
  },
  "6989": {
    "question_id": "mbpp/698",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swaps = 0\n    mismatch = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            mismatch += 1\n    if mismatch % 2 != 0:\n        return -1\n    swaps = mismatch // 2\n    return swaps",
    "test_output": "FAILED: expect Not Possible,in fact -1",
    "test_result": "False"
  },
  "6990": {
    "question_id": "mbpp/699",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_range_in_list(lst, min_val, max_val):\n    count = 0\n    for num in lst:\n        if min_val <= num <= max_val:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6991": {
    "question_id": "mbpp/699",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_range_in_list(lst, min_val, max_val):\n    count = 0\n    for num in lst:\n        if min_val <= num <= max_val:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6992": {
    "question_id": "mbpp/699",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_range_in_list(lst, min_val, max_val):\n    count = 0\n    for num in lst:\n        if min_val <= num <= max_val:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6993": {
    "question_id": "mbpp/699",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_range_in_list(lst, min_val, max_val):\n    count = 0\n    for num in lst:\n        if min_val <= num <= max_val:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6994": {
    "question_id": "mbpp/699",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_range_in_list(lst, min_val, max_val):\n    count = 0\n    for num in lst:\n        if min_val <= num <= max_val:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6995": {
    "question_id": "mbpp/699",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_range_in_list(lst, lower, upper):\n    count = 0\n    for num in lst:\n        if lower <= num <= upper:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6996": {
    "question_id": "mbpp/699",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_range_in_list(lst, min_val, max_val):\n    count = 0\n    for num in lst:\n        if min_val <= num <= max_val:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6997": {
    "question_id": "mbpp/699",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_range_in_list(lst, min_val, max_val):\n    count = 0\n    for num in lst:\n        if min_val <= num <= max_val:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6998": {
    "question_id": "mbpp/699",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_range_in_list(lst, lower, upper):\n    count = 0\n    for num in lst:\n        if lower <= num <= upper:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "6999": {
    "question_id": "mbpp/699",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_range_in_list(lst, min_val, max_val):\n    count = 0\n    for num in lst:\n        if min_val <= num <= max_val:\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7000": {
    "question_id": "mbpp/700",
    "model": "deepseek-v3-250324",
    "generation_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return i\n        left_sum += num\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7001": {
    "question_id": "mbpp/700",
    "model": "deepseek-v3-250324",
    "generation_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return i\n        left_sum += num\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7002": {
    "question_id": "mbpp/700",
    "model": "deepseek-v3-250324",
    "generation_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        total_sum -= arr[i]\n        if left_sum == total_sum:\n            return i\n        left_sum += arr[i]\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7003": {
    "question_id": "mbpp/700",
    "model": "deepseek-v3-250324",
    "generation_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        total_sum -= arr[i]\n        if left_sum == total_sum:\n            return i\n        left_sum += arr[i]\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7004": {
    "question_id": "mbpp/700",
    "model": "deepseek-v3-250324",
    "generation_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        total_sum -= arr[i]\n        if left_sum == total_sum:\n            return i\n        left_sum += arr[i]\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7005": {
    "question_id": "mbpp/700",
    "model": "deepseek-v3-250324",
    "generation_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        total_sum -= arr[i]\n        if left_sum == total_sum:\n            return i\n        left_sum += arr[i]\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7006": {
    "question_id": "mbpp/700",
    "model": "deepseek-v3-250324",
    "generation_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return i\n        left_sum += num\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7007": {
    "question_id": "mbpp/700",
    "model": "deepseek-v3-250324",
    "generation_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        total_sum -= arr[i]\n        if left_sum == total_sum:\n            return i\n        left_sum += arr[i]\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7008": {
    "question_id": "mbpp/700",
    "model": "deepseek-v3-250324",
    "generation_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        total_sum -= arr[i]\n        if left_sum == total_sum:\n            return i\n        left_sum += arr[i]\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7009": {
    "question_id": "mbpp/700",
    "model": "deepseek-v3-250324",
    "generation_code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        total_sum -= arr[i]\n        if left_sum == total_sum:\n            return i\n        left_sum += arr[i]\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7010": {
    "question_id": "mbpp/701",
    "model": "deepseek-v3-250324",
    "generation_code": "def removals(arr, n, k):\n    arr.sort()\n    min_removals = float('inf')\n    \n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] - arr[i] <= k:\n                current_removals = n - (j - i + 1)\n                if current_removals < min_removals:\n                    min_removals = current_removals\n    \n    return min_removals if min_removals != float('inf') else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7011": {
    "question_id": "mbpp/701",
    "model": "deepseek-v3-250324",
    "generation_code": "def removals(arr, n, k):\n    arr.sort()\n    min_removals = n\n    \n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] - arr[i] <= k:\n                current_removals = i + (n - 1 - j)\n                if current_removals < min_removals:\n                    min_removals = current_removals\n    \n    return min_removals",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7012": {
    "question_id": "mbpp/701",
    "model": "deepseek-v3-250324",
    "generation_code": "def removals(arr, n, k):\n    arr.sort()\n    min_removals = float('inf')\n    \n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] - arr[i] <= k:\n                current_removals = n - (j - i + 1)\n                if current_removals < min_removals:\n                    min_removals = current_removals\n    \n    return min_removals",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7013": {
    "question_id": "mbpp/701",
    "model": "deepseek-v3-250324",
    "generation_code": "def removals(arr, n, k):\n    arr.sort()\n    min_removals = float('inf')\n    \n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] - arr[i] <= k:\n                current_removals = n - (j - i + 1)\n                if current_removals < min_removals:\n                    min_removals = current_removals\n    \n    return min_removals",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7014": {
    "question_id": "mbpp/701",
    "model": "deepseek-v3-250324",
    "generation_code": "def removals(arr, n, k):\n    arr.sort()\n    min_removals = float('inf')\n    \n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] - arr[i] <= k:\n                current_removals = i + (n - 1 - j)\n                if current_removals < min_removals:\n                    min_removals = current_removals\n    \n    return min_removals if min_removals != float('inf') else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7015": {
    "question_id": "mbpp/701",
    "model": "deepseek-v3-250324",
    "generation_code": "def removals(arr, n, k):\n    arr.sort()\n    min_removals = n\n    \n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] - arr[i] <= k:\n                current_removals = i + (n - 1 - j)\n                if current_removals < min_removals:\n                    min_removals = current_removals\n    \n    return min_removals",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7016": {
    "question_id": "mbpp/701",
    "model": "deepseek-v3-250324",
    "generation_code": "def removals(arr, n, k):\n    arr.sort()\n    min_removals = float('inf')\n    \n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] - arr[i] <= k:\n                current_removals = n - (j - i + 1)\n                if current_removals < min_removals:\n                    min_removals = current_removals\n    \n    return min_removals if min_removals != float('inf') else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7017": {
    "question_id": "mbpp/701",
    "model": "deepseek-v3-250324",
    "generation_code": "def removals(arr, n, k):\n    arr.sort()\n    min_removals = n\n    \n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] - arr[i] <= k:\n                removals_needed = n - (j - i + 1)\n                if removals_needed < min_removals:\n                    min_removals = removals_needed\n    \n    return min_removals",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7018": {
    "question_id": "mbpp/701",
    "model": "deepseek-v3-250324",
    "generation_code": "def removals(arr, n, k):\n    arr.sort()\n    min_removals = n\n    \n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] - arr[i] <= k:\n                current_removals = n - (j - i + 1)\n                if current_removals < min_removals:\n                    min_removals = current_removals\n    \n    return min_removals",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7019": {
    "question_id": "mbpp/701",
    "model": "deepseek-v3-250324",
    "generation_code": "def removals(arr, n, k):\n    arr.sort()\n    min_removals = n\n    \n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] - arr[i] <= k:\n                current_removals = n - (j - i + 1)\n                if current_removals < min_removals:\n                    min_removals = current_removals\n    \n    return min_removals",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7020": {
    "question_id": "mbpp/702",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_key_present(dictionary, key):\n    return key in dictionary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7021": {
    "question_id": "mbpp/702",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_key_present(dictionary, key):\n    return key in dictionary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7022": {
    "question_id": "mbpp/702",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_key_present(dictionary, key):\n    return key in dictionary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7023": {
    "question_id": "mbpp/702",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_key_present(dictionary, key):\n    return key in dictionary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7024": {
    "question_id": "mbpp/702",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_key_present(dictionary, key):\n    return key in dictionary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7025": {
    "question_id": "mbpp/702",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_key_present(dictionary, key):\n    return key in dictionary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7026": {
    "question_id": "mbpp/702",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_key_present(dictionary, key):\n    return key in dictionary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7027": {
    "question_id": "mbpp/702",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_key_present(dictionary, key):\n    return key in dictionary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7028": {
    "question_id": "mbpp/702",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_key_present(dictionary, key):\n    return key in dictionary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7029": {
    "question_id": "mbpp/702",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_key_present(dictionary, key):\n    return key in dictionary",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7030": {
    "question_id": "mbpp/703",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total",
    "test_output": "FAILED: expect 2.9289682539682538,in fact 2.8289682539682537",
    "test_result": "False"
  },
  "7031": {
    "question_id": "mbpp/703",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total",
    "test_output": "FAILED: expect 2.9289682539682538,in fact 2.8289682539682537",
    "test_result": "False"
  },
  "7032": {
    "question_id": "mbpp/703",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1 / i\n    return total",
    "test_output": "FAILED: expect 2.9289682539682538,in fact 2.8289682539682537",
    "test_result": "False"
  },
  "7033": {
    "question_id": "mbpp/703",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total",
    "test_output": "FAILED: expect 2.9289682539682538,in fact 2.8289682539682537",
    "test_result": "False"
  },
  "7034": {
    "question_id": "mbpp/703",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total",
    "test_output": "FAILED: expect 2.9289682539682538,in fact 2.8289682539682537",
    "test_result": "False"
  },
  "7035": {
    "question_id": "mbpp/703",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total",
    "test_output": "FAILED: expect 2.9289682539682538,in fact 2.8289682539682537",
    "test_result": "False"
  },
  "7036": {
    "question_id": "mbpp/703",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total",
    "test_output": "FAILED: expect 2.9289682539682538,in fact 2.8289682539682537",
    "test_result": "False"
  },
  "7037": {
    "question_id": "mbpp/703",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1 / i\n    return total",
    "test_output": "FAILED: expect 2.9289682539682538,in fact 2.8289682539682537",
    "test_result": "False"
  },
  "7038": {
    "question_id": "mbpp/703",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total",
    "test_output": "FAILED: expect 2.9289682539682538,in fact 2.8289682539682537",
    "test_result": "False"
  },
  "7039": {
    "question_id": "mbpp/703",
    "model": "deepseek-v3-250324",
    "generation_code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 / i\n    return total",
    "test_output": "FAILED: expect 2.9289682539682538,in fact 2.8289682539682537",
    "test_result": "False"
  },
  "7040": {
    "question_id": "mbpp/704",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7041": {
    "question_id": "mbpp/704",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7042": {
    "question_id": "mbpp/704",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7043": {
    "question_id": "mbpp/704",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7044": {
    "question_id": "mbpp/704",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7045": {
    "question_id": "mbpp/704",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7046": {
    "question_id": "mbpp/704",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7047": {
    "question_id": "mbpp/704",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7048": {
    "question_id": "mbpp/704",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7049": {
    "question_id": "mbpp/704",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7050": {
    "question_id": "mbpp/705",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset(arr1, n, arr2, m):\n    if m > n:\n        return False\n    set_arr1 = set(arr1)\n    for elem in arr2:\n        if elem not in set_arr1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7051": {
    "question_id": "mbpp/705",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset(arr1, n, arr2, m):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return set2.issubset(set1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7052": {
    "question_id": "mbpp/705",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset(arr1, n, arr2, m):\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n    set_arr1 = set(arr1)\n    set_arr2 = set(arr2)\n    return set_arr2.issubset(set_arr1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7053": {
    "question_id": "mbpp/705",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset(arr1, n, arr2, m):\n    if m > n:\n        return False\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return set2.issubset(set1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7054": {
    "question_id": "mbpp/705",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset(arr1, n, arr2, m):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return set2.issubset(set1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7055": {
    "question_id": "mbpp/705",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset(arr1, n, arr2, m):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return set2.issubset(set1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7056": {
    "question_id": "mbpp/705",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset(arr1, n, arr2, m):\n    if m > n:\n        return False\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return set2.issubset(set1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7057": {
    "question_id": "mbpp/705",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset(arr1, n, arr2, m):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return set2.issubset(set1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7058": {
    "question_id": "mbpp/705",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset(arr1, m, arr2, n):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return set2.issubset(set1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7059": {
    "question_id": "mbpp/705",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_subset(arr1, n, arr2, m):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return set2.issubset(set1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7060": {
    "question_id": "mbpp/706",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    if n <= 0:\n        return 0\n    count = 0\n    power_of_two = 1\n    while power_of_two <= n:\n        next_power = power_of_two * 2\n        pairs = (n + 1) // next_power\n        count += pairs * power_of_two\n        remainder = (n + 1) % next_power\n        count += max(0, remainder - power_of_two)\n        power_of_two = next_power\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7061": {
    "question_id": "mbpp/706",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    if n <= 0:\n        return 0\n    count = 0\n    power_of_two = 1\n    while power_of_two <= n:\n        next_power = power_of_two * 2\n        full_cycles = (n + 1) // next_power\n        count += full_cycles * power_of_two\n        remainder = (n + 1) % next_power\n        count += max(0, remainder - power_of_two)\n        power_of_two = next_power\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7062": {
    "question_id": "mbpp/706",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    if n <= 0:\n        return 0\n    count = 0\n    k = 0\n    while (1 << k) <= n:\n        power = 1 << k\n        next_power = power << 1\n        complete_cycles = (n + 1) // next_power\n        count += complete_cycles * power\n        remainder = (n + 1) % next_power\n        count += max(0, remainder - power)\n        k += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7063": {
    "question_id": "mbpp/706",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    if n <= 0:\n        return 0\n    x = 0\n    while (1 << (x + 1)) <= n:\n        x += 1\n    max_pow_2 = 1 << x\n    bits_till_max_pow_2 = x * (1 << (x - 1))\n    remaining = n - max_pow_2 + 1\n    return bits_till_max_pow_2 + remaining + count_Set_Bits(n - max_pow_2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7064": {
    "question_id": "mbpp/706",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    if n <= 0:\n        return 0\n    x = 0\n    while (1 << (x + 1)) <= n:\n        x += 1\n    msb = x\n    bits_till_2x = msb * (1 << (msb - 1))\n    remaining = n - (1 << msb) + 1\n    return bits_till_2x + remaining + count_Set_Bits(n - (1 << msb))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7065": {
    "question_id": "mbpp/706",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    count = 0\n    i = 0\n    while (1 << i) <= n:\n        next_power = 1 << (i + 1)\n        half_power = 1 << i\n        complete_cycles = (n + 1) // next_power\n        count += complete_cycles * half_power\n        remainder = (n + 1) % next_power\n        count += max(0, remainder - half_power)\n        i += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7066": {
    "question_id": "mbpp/706",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    count = 0\n    i = 0\n    while (1 << i) <= n:\n        k = 1 << (i + 1)\n        count += (n // k) * (1 << i)\n        remainder = n % k\n        if remainder >= (1 << i):\n            count += remainder - (1 << i) + 1\n        i += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7067": {
    "question_id": "mbpp/706",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    if n <= 0:\n        return 0\n    x = 0\n    while (1 << (x + 1)) <= n:\n        x += 1\n    msb = 1 << x\n    rest = n - msb\n    return (x * (1 << (x - 1))) + (rest + 1) + count_Set_Bits(rest)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7068": {
    "question_id": "mbpp/706",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    if n <= 0:\n        return 0\n    x = 0\n    while (1 << (x + 1)) <= n:\n        x += 1\n    msb = x\n    bits_upto_2x = msb * (1 << (msb - 1))\n    remaining = n - (1 << msb) + 1\n    res = bits_upto_2x + remaining + count_Set_Bits(n - (1 << msb))\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7069": {
    "question_id": "mbpp/706",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Set_Bits(n):\n    count = 0\n    i = 0\n    while (1 << i) <= n:\n        next_power = 1 << (i + 1)\n        half_power = 1 << i\n        complete_cycles = (n + 1) // next_power\n        count += complete_cycles * half_power\n        remainder = (n + 1) % next_power\n        count += max(0, remainder - half_power)\n        i += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7070": {
    "question_id": "mbpp/707",
    "model": "deepseek-v3-250324",
    "generation_code": "def Convert(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7071": {
    "question_id": "mbpp/707",
    "model": "deepseek-v3-250324",
    "generation_code": "def Convert(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7072": {
    "question_id": "mbpp/707",
    "model": "deepseek-v3-250324",
    "generation_code": "def Convert(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7073": {
    "question_id": "mbpp/707",
    "model": "deepseek-v3-250324",
    "generation_code": "def Convert(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7074": {
    "question_id": "mbpp/707",
    "model": "deepseek-v3-250324",
    "generation_code": "def Convert(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7075": {
    "question_id": "mbpp/707",
    "model": "deepseek-v3-250324",
    "generation_code": "def Convert(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7076": {
    "question_id": "mbpp/707",
    "model": "deepseek-v3-250324",
    "generation_code": "def Convert(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7077": {
    "question_id": "mbpp/707",
    "model": "deepseek-v3-250324",
    "generation_code": "def Convert(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7078": {
    "question_id": "mbpp/707",
    "model": "deepseek-v3-250324",
    "generation_code": "def Convert(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7079": {
    "question_id": "mbpp/707",
    "model": "deepseek-v3-250324",
    "generation_code": "def Convert(s):\n    return s.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7080": {
    "question_id": "mbpp/708",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_unique(tuples_list):\n    value_dict = {}\n    for key, value in tuples_list:\n        if value not in value_dict:\n            value_dict[value] = set()\n        value_dict[value].add(key)\n    result = {value: len(keys) for value, keys in value_dict.items()}\n    return str(result).replace(\" \", \"\")",
    "test_output": "FAILED: expect {4: 4, 2: 3, 1: 2},in fact {4:4,2:3,1:2}",
    "test_result": "False"
  },
  "7081": {
    "question_id": "mbpp/708",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_unique(tuples_list):\n    value_dict = {}\n    for key, value in tuples_list:\n        if value not in value_dict:\n            value_dict[value] = set()\n        value_dict[value].add(key)\n    result = {k: len(v) for k, v in value_dict.items()}\n    return str(result).replace(\" \", \"\")",
    "test_output": "FAILED: expect {4: 4, 2: 3, 1: 2},in fact {4:4,2:3,1:2}",
    "test_result": "False"
  },
  "7082": {
    "question_id": "mbpp/708",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_unique(tuples_list):\n    value_dict = {}\n    for key, value in tuples_list:\n        if value not in value_dict:\n            value_dict[value] = set()\n        value_dict[value].add(key)\n    result = {value: len(keys) for value, keys in value_dict.items()}\n    return str(result).replace(\" \", \"\")",
    "test_output": "FAILED: expect {4: 4, 2: 3, 1: 2},in fact {4:4,2:3,1:2}",
    "test_result": "False"
  },
  "7083": {
    "question_id": "mbpp/708",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_unique(tuples_list):\n    value_dict = {}\n    for key, value in tuples_list:\n        if value not in value_dict:\n            value_dict[value] = set()\n        value_dict[value].add(key)\n    result = {value: len(keys) for value, keys in value_dict.items()}\n    return str(result).replace(\" \", \"\")",
    "test_output": "FAILED: expect {4: 4, 2: 3, 1: 2},in fact {4:4,2:3,1:2}",
    "test_result": "False"
  },
  "7084": {
    "question_id": "mbpp/708",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_unique(tuples_list):\n    value_dict = {}\n    for key, value in tuples_list:\n        if value not in value_dict:\n            value_dict[value] = set()\n        value_dict[value].add(key)\n    \n    result = {}\n    for value in value_dict:\n        result[value] = len(value_dict[value])\n    \n    sorted_result = dict(sorted(result.items()))\n    return str(sorted_result).replace(\" \", \"\")",
    "test_output": "FAILED: expect {4: 4, 2: 3, 1: 2},in fact {1:2,2:3,4:4}",
    "test_result": "False"
  },
  "7085": {
    "question_id": "mbpp/708",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_unique(tuples_list):\n    value_dict = {}\n    for key, value in tuples_list:\n        if value not in value_dict:\n            value_dict[value] = set()\n        value_dict[value].add(key)\n    \n    result = {}\n    for value in value_dict:\n        result[value] = len(value_dict[value])\n    \n    return str(result).replace(\" \", \"\")",
    "test_output": "FAILED: expect {4: 4, 2: 3, 1: 2},in fact {4:4,2:3,1:2}",
    "test_result": "False"
  },
  "7086": {
    "question_id": "mbpp/708",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_unique(tuples_list):\n    value_dict = {}\n    for key, value in tuples_list:\n        if value not in value_dict:\n            value_dict[value] = set()\n        value_dict[value].add(key)\n    \n    result = {value: len(keys) for value, keys in value_dict.items()}\n    return str(result).replace(\" \", \"\")",
    "test_output": "FAILED: expect {4: 4, 2: 3, 1: 2},in fact {4:4,2:3,1:2}",
    "test_result": "False"
  },
  "7087": {
    "question_id": "mbpp/708",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_unique(tuples_list):\n    value_dict = {}\n    for key, value in tuples_list:\n        if value not in value_dict:\n            value_dict[value] = set()\n        value_dict[value].add(key)\n    result = {value: len(keys) for value, keys in value_dict.items()}\n    return str(result).replace(\" \", \"\")",
    "test_output": "FAILED: expect {4: 4, 2: 3, 1: 2},in fact {4:4,2:3,1:2}",
    "test_result": "False"
  },
  "7088": {
    "question_id": "mbpp/708",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_unique(lst):\n    value_dict = {}\n    for key, value in lst:\n        if value not in value_dict:\n            value_dict[value] = set()\n        value_dict[value].add(key)\n    result = {k: len(v) for k, v in value_dict.items()}\n    return str(result).replace(\" \", \"\")",
    "test_output": "FAILED: expect {4: 4, 2: 3, 1: 2},in fact {4:4,2:3,1:2}",
    "test_result": "False"
  },
  "7089": {
    "question_id": "mbpp/708",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_unique(tuples_list):\n    value_to_keys = {}\n    for key, value in tuples_list:\n        if value not in value_to_keys:\n            value_to_keys[value] = set()\n        value_to_keys[value].add(key)\n    \n    result = {}\n    for value in value_to_keys:\n        result[value] = len(value_to_keys[value])\n    \n    return str(result).replace(\" \", \"\")",
    "test_output": "FAILED: expect {4: 4, 2: 3, 1: 2},in fact {4:4,2:3,1:2}",
    "test_result": "False"
  },
  "7090": {
    "question_id": "mbpp/709",
    "model": "deepseek-v3-250324",
    "generation_code": "def front_and_rear(record):\n    if not record:\n        return ()\n    return (record[0], record[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7091": {
    "question_id": "mbpp/709",
    "model": "deepseek-v3-250324",
    "generation_code": "def front_and_rear(record):\n    if not record:\n        return ()\n    return (record[0], record[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7092": {
    "question_id": "mbpp/709",
    "model": "deepseek-v3-250324",
    "generation_code": "def front_and_rear(record):\n    if not record:\n        return ()\n    return (record[0], record[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7093": {
    "question_id": "mbpp/709",
    "model": "deepseek-v3-250324",
    "generation_code": "def front_and_rear(record):\n    if not record:\n        return ()\n    return (record[0], record[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7094": {
    "question_id": "mbpp/709",
    "model": "deepseek-v3-250324",
    "generation_code": "def front_and_rear(record):\n    if not record:\n        return ()\n    return (record[0], record[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7095": {
    "question_id": "mbpp/709",
    "model": "deepseek-v3-250324",
    "generation_code": "def front_and_rear(record):\n    if not record:\n        return ()\n    return (record[0], record[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7096": {
    "question_id": "mbpp/709",
    "model": "deepseek-v3-250324",
    "generation_code": "def front_and_rear(record):\n    if not record:\n        return ()\n    return (record[0], record[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7097": {
    "question_id": "mbpp/709",
    "model": "deepseek-v3-250324",
    "generation_code": "def front_and_rear(record):\n    if not record:\n        return ()\n    return (record[0], record[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7098": {
    "question_id": "mbpp/709",
    "model": "deepseek-v3-250324",
    "generation_code": "def front_and_rear(record):\n    if not record:\n        return ()\n    return (record[0], record[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7099": {
    "question_id": "mbpp/709",
    "model": "deepseek-v3-250324",
    "generation_code": "def front_and_rear(record):\n    if not record:\n        return ()\n    return (record[0], record[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7100": {
    "question_id": "mbpp/710",
    "model": "deepseek-v3-250324",
    "generation_code": "def product_Equal(n):\n    if n < 10:\n        return False\n    digits = [int(d) for d in str(n)]\n    even_product = 1\n    odd_product = 1\n    for i in range(len(digits)):\n        if (i + 1) % 2 == 0:\n            even_product *= digits[i]\n        else:\n            odd_product *= digits[i]\n    return even_product == odd_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7101": {
    "question_id": "mbpp/710",
    "model": "deepseek-v3-250324",
    "generation_code": "def product_Equal(n):\n    if n < 10:\n        return False\n    str_num = str(n)\n    even_product = 1\n    odd_product = 1\n    for i in range(len(str_num)):\n        digit = int(str_num[i])\n        if (i + 1) % 2 == 0:\n            even_product *= digit\n        else:\n            odd_product *= digit\n    return even_product == odd_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7102": {
    "question_id": "mbpp/710",
    "model": "deepseek-v3-250324",
    "generation_code": "def product_Equal(n):\n    if n < 10:\n        return False\n    str_num = str(n)\n    even_product = 1\n    odd_product = 1\n    for i in range(len(str_num)):\n        digit = int(str_num[i])\n        if (i + 1) % 2 == 0:  # even position (1-based)\n            even_product *= digit\n        else:  # odd position (1-based)\n            odd_product *= digit\n    return even_product == odd_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7103": {
    "question_id": "mbpp/710",
    "model": "deepseek-v3-250324",
    "generation_code": "def product_Equal(n):\n    if n < 10:\n        return False\n    digits = [int(d) for d in str(n)]\n    even_product = 1\n    odd_product = 1\n    for i in range(len(digits)):\n        if (i + 1) % 2 == 0:\n            even_product *= digits[i]\n        else:\n            odd_product *= digits[i]\n    return even_product == odd_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7104": {
    "question_id": "mbpp/710",
    "model": "deepseek-v3-250324",
    "generation_code": "def product_Equal(n):\n    if n < 10:\n        return False\n    str_num = str(n)\n    even_product = 1\n    odd_product = 1\n    for i in range(len(str_num)):\n        digit = int(str_num[i])\n        if (i + 1) % 2 == 0:\n            even_product *= digit\n        else:\n            odd_product *= digit\n    return even_product == odd_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7105": {
    "question_id": "mbpp/710",
    "model": "deepseek-v3-250324",
    "generation_code": "def product_Equal(n):\n    if n < 10:\n        return False\n    num_str = str(n)\n    even_product = 1\n    odd_product = 1\n    for i in range(len(num_str)):\n        digit = int(num_str[i])\n        if (i + 1) % 2 == 0:\n            even_product *= digit\n        else:\n            odd_product *= digit\n    return even_product == odd_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7106": {
    "question_id": "mbpp/710",
    "model": "deepseek-v3-250324",
    "generation_code": "def product_Equal(n):\n    if n < 10:\n        return False\n    digits = [int(d) for d in str(n)]\n    even_product = 1\n    odd_product = 1\n    for i in range(len(digits)):\n        if (i + 1) % 2 == 0:\n            even_product *= digits[i]\n        else:\n            odd_product *= digits[i]\n    return even_product == odd_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7107": {
    "question_id": "mbpp/710",
    "model": "deepseek-v3-250324",
    "generation_code": "def product_Equal(n):\n    if n < 10:\n        return False\n    \n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n = n // 10\n    digits = digits[::-1]  # Reverse to get original order\n    \n    even_product = 1\n    odd_product = 1\n    \n    for i in range(len(digits)):\n        if (i + 1) % 2 == 0:  # Even position (1-based)\n            even_product *= digits[i]\n        else:  # Odd position (1-based)\n            odd_product *= digits[i]\n    \n    return even_product == odd_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7108": {
    "question_id": "mbpp/710",
    "model": "deepseek-v3-250324",
    "generation_code": "def product_Equal(n):\n    if n < 10:\n        return False\n    str_num = str(n)\n    even_product = 1\n    odd_product = 1\n    for i in range(len(str_num)):\n        digit = int(str_num[i])\n        if (i + 1) % 2 == 0:\n            even_product *= digit\n        else:\n            odd_product *= digit\n    return even_product == odd_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7109": {
    "question_id": "mbpp/710",
    "model": "deepseek-v3-250324",
    "generation_code": "def product_Equal(n):\n    if n < 10:\n        return False\n    str_num = str(n)\n    even_product = 1\n    odd_product = 1\n    for i in range(len(str_num)):\n        digit = int(str_num[i])\n        if (i + 1) % 2 == 0:\n            even_product *= digit\n        else:\n            odd_product *= digit\n    return even_product == odd_product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7110": {
    "question_id": "mbpp/711",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplicate(lst):\n    seen = []\n    result = []\n    for sublist in lst:\n        if sublist not in seen:\n            seen.append(sublist)\n            result.append(sublist)\n    return result",
    "test_output": "FAILED: expect [[10, 20], [30, 56, 25], [33], [40]],in fact [[10, 20], [40], [30, 56, 25], [33]]",
    "test_result": "False"
  },
  "7111": {
    "question_id": "mbpp/711",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplicate(lst):\n    seen = []\n    result = []\n    for sublist in lst:\n        if sublist not in seen:\n            seen.append(sublist)\n            result.append(sublist)\n    return result",
    "test_output": "FAILED: expect [[10, 20], [30, 56, 25], [33], [40]],in fact [[10, 20], [40], [30, 56, 25], [33]]",
    "test_result": "False"
  },
  "7112": {
    "question_id": "mbpp/711",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplicate(lst):\n    seen = []\n    result = []\n    for sublist in lst:\n        if sublist not in seen:\n            seen.append(sublist)\n            result.append(sublist)\n    return result",
    "test_output": "FAILED: expect [[10, 20], [30, 56, 25], [33], [40]],in fact [[10, 20], [40], [30, 56, 25], [33]]",
    "test_result": "False"
  },
  "7113": {
    "question_id": "mbpp/711",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplicate(lst):\n    seen = []\n    result = []\n    for sublist in lst:\n        if sublist not in seen:\n            seen.append(sublist)\n            result.append(sublist)\n    return result",
    "test_output": "FAILED: expect [[10, 20], [30, 56, 25], [33], [40]],in fact [[10, 20], [40], [30, 56, 25], [33]]",
    "test_result": "False"
  },
  "7114": {
    "question_id": "mbpp/711",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplicate(lst):\n    seen = []\n    result = []\n    for sublist in lst:\n        if sublist not in seen:\n            seen.append(sublist)\n            result.append(sublist)\n    return result",
    "test_output": "FAILED: expect [[10, 20], [30, 56, 25], [33], [40]],in fact [[10, 20], [40], [30, 56, 25], [33]]",
    "test_result": "False"
  },
  "7115": {
    "question_id": "mbpp/711",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplicate(lst):\n    seen = []\n    result = []\n    for sublist in lst:\n        if sublist not in seen:\n            seen.append(sublist)\n            result.append(sublist)\n    return result",
    "test_output": "FAILED: expect [[10, 20], [30, 56, 25], [33], [40]],in fact [[10, 20], [40], [30, 56, 25], [33]]",
    "test_result": "False"
  },
  "7116": {
    "question_id": "mbpp/711",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplicate(lst):\n    seen = []\n    result = []\n    for sublist in lst:\n        if sublist not in seen:\n            seen.append(sublist)\n            result.append(sublist)\n    return result",
    "test_output": "FAILED: expect [[10, 20], [30, 56, 25], [33], [40]],in fact [[10, 20], [40], [30, 56, 25], [33]]",
    "test_result": "False"
  },
  "7117": {
    "question_id": "mbpp/711",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplicate(lst):\n    seen = []\n    result = []\n    for sublist in lst:\n        if sublist not in seen:\n            seen.append(sublist)\n            result.append(sublist)\n    return result",
    "test_output": "FAILED: expect [[10, 20], [30, 56, 25], [33], [40]],in fact [[10, 20], [40], [30, 56, 25], [33]]",
    "test_result": "False"
  },
  "7118": {
    "question_id": "mbpp/711",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplicate(lst):\n    seen = []\n    result = []\n    for sublist in lst:\n        if sublist not in seen:\n            seen.append(sublist)\n            result.append(sublist)\n    return result",
    "test_output": "FAILED: expect [[10, 20], [30, 56, 25], [33], [40]],in fact [[10, 20], [40], [30, 56, 25], [33]]",
    "test_result": "False"
  },
  "7119": {
    "question_id": "mbpp/711",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplicate(lst):\n    seen = []\n    result = []\n    for sublist in lst:\n        if sublist not in seen:\n            seen.append(sublist)\n            result.append(sublist)\n    return result",
    "test_output": "FAILED: expect [[10, 20], [30, 56, 25], [33], [40]],in fact [[10, 20], [40], [30, 56, 25], [33]]",
    "test_result": "False"
  },
  "7120": {
    "question_id": "mbpp/712",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_valid(t):\n    return all(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7121": {
    "question_id": "mbpp/712",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_valid(t):\n    return all(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7122": {
    "question_id": "mbpp/712",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_valid(t):\n    return all(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7123": {
    "question_id": "mbpp/712",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_valid(t):\n    return all(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7124": {
    "question_id": "mbpp/712",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_valid(t):\n    return all(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7125": {
    "question_id": "mbpp/712",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_valid(t):\n    return all(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7126": {
    "question_id": "mbpp/712",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_valid(t):\n    return all(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7127": {
    "question_id": "mbpp/712",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_valid(t):\n    return all(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7128": {
    "question_id": "mbpp/712",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_valid(t):\n    return all(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7129": {
    "question_id": "mbpp/712",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_valid(t):\n    return all(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7130": {
    "question_id": "mbpp/713",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Fac(n):\n    if n <= 1:\n        return 0\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n // i\n        i += 1\n    if n > 1:\n        count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "7131": {
    "question_id": "mbpp/713",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Fac(n):\n    if n <= 1:\n        return 0\n    count = 0\n    # Handle 2 separately\n    if n % 2 == 0:\n        count += 1\n        while n % 2 == 0:\n            n = n // 2\n    # Check for odd divisors up to sqrt(n)\n    i = 3\n    max_factor = int(n**0.5) + 1\n    while i <= max_factor:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n // i\n            max_factor = int(n**0.5) + 1\n        i += 2\n    if n > 1:\n        count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "7132": {
    "question_id": "mbpp/713",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Fac(n):\n    if n <= 1:\n        return 0\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n // i\n        i += 1\n    if n > 1:\n        count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "7133": {
    "question_id": "mbpp/713",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Fac(n):\n    if n <= 1:\n        return 0\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n // i\n        i += 1\n    if n > 1:\n        count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "7134": {
    "question_id": "mbpp/713",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Fac(n):\n    if n <= 1:\n        return 0\n    factors = set()\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            count = 0\n            while n % i == 0:\n                n = n // i\n                count += 1\n            factors.add(count)\n        i += 1\n    if n > 1:\n        factors.add(1)\n    return len(factors)",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "7135": {
    "question_id": "mbpp/713",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Fac(n):\n    if n <= 1:\n        return 0\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n // i\n        i += 1\n    if n > 1:\n        count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "7136": {
    "question_id": "mbpp/713",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Fac(n):\n    if n <= 1:\n        return 0\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n // i\n        i += 1\n    if n > 1:\n        count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "7137": {
    "question_id": "mbpp/713",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef count_Fac(n):\n    if n <= 1:\n        return 0\n    count = 0\n    # Handle 2 separately\n    if n % 2 == 0:\n        count += 1\n        while n % 2 == 0:\n            n = n // 2\n    # Check for odd divisors up to sqrt(n)\n    i = 3\n    max_factor = math.sqrt(n) + 1\n    while i <= max_factor:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n // i\n            max_factor = math.sqrt(n) + 1\n        i += 2\n    if n > 1:\n        count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "7138": {
    "question_id": "mbpp/713",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Fac(n):\n    if n <= 1:\n        return 0\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n // i\n        i += 1\n    if n > 1:\n        count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "7139": {
    "question_id": "mbpp/713",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Fac(n):\n    if n <= 1:\n        return 0\n    count = 0\n    # Check for 2 separately\n    if n % 2 == 0:\n        count += 1\n        while n % 2 == 0:\n            n = n // 2\n    # Check for odd divisors up to sqrt(n)\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n // i\n        i += 2\n    # If remaining n is a prime > 2\n    if n > 2:\n        count += 1\n    return count",
    "test_output": "FAILED: expect 3,in fact 2",
    "test_result": "False"
  },
  "7140": {
    "question_id": "mbpp/714",
    "model": "deepseek-v3-250324",
    "generation_code": "def str_to_tuple(s):\n    if not s.strip():\n        return ()\n    elements = s.split(',')\n    return tuple(int(x.strip()) for x in elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7141": {
    "question_id": "mbpp/714",
    "model": "deepseek-v3-250324",
    "generation_code": "def str_to_tuple(s):\n    if not s.strip():\n        return ()\n    elements = s.split(',')\n    return tuple(int(x.strip()) for x in elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7142": {
    "question_id": "mbpp/714",
    "model": "deepseek-v3-250324",
    "generation_code": "def str_to_tuple(s):\n    if not s.strip():\n        return ()\n    elements = s.split(',')\n    return tuple(int(x.strip()) for x in elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7143": {
    "question_id": "mbpp/714",
    "model": "deepseek-v3-250324",
    "generation_code": "def str_to_tuple(s):\n    if not s.strip():\n        return ()\n    elements = s.split(',')\n    return tuple(int(x.strip()) for x in elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7144": {
    "question_id": "mbpp/714",
    "model": "deepseek-v3-250324",
    "generation_code": "def str_to_tuple(s):\n    if not s.strip():\n        return ()\n    elements = s.split(',')\n    return tuple(int(elem.strip()) for elem in elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7145": {
    "question_id": "mbpp/714",
    "model": "deepseek-v3-250324",
    "generation_code": "def str_to_tuple(s):\n    if not s.strip():\n        return ()\n    elements = s.split(',')\n    return tuple(int(x.strip()) for x in elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7146": {
    "question_id": "mbpp/714",
    "model": "deepseek-v3-250324",
    "generation_code": "def str_to_tuple(s):\n    if not s.strip():\n        return ()\n    elements = s.split(',')\n    return tuple(int(x.strip()) for x in elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7147": {
    "question_id": "mbpp/714",
    "model": "deepseek-v3-250324",
    "generation_code": "def str_to_tuple(s):\n    if not s.strip():\n        return ()\n    elements = s.split(',')\n    return tuple(int(x.strip()) for x in elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7148": {
    "question_id": "mbpp/714",
    "model": "deepseek-v3-250324",
    "generation_code": "def str_to_tuple(s):\n    if not s.strip():\n        return tuple()\n    elements = s.split(',')\n    return tuple(int(x.strip()) for x in elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7149": {
    "question_id": "mbpp/714",
    "model": "deepseek-v3-250324",
    "generation_code": "def str_to_tuple(s):\n    if not s.strip():\n        return tuple()\n    elements = s.split(',')\n    return tuple(int(x.strip()) for x in elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7150": {
    "question_id": "mbpp/715",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7151": {
    "question_id": "mbpp/715",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7152": {
    "question_id": "mbpp/715",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7153": {
    "question_id": "mbpp/715",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7154": {
    "question_id": "mbpp/715",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7155": {
    "question_id": "mbpp/715",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7156": {
    "question_id": "mbpp/715",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7157": {
    "question_id": "mbpp/715",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7158": {
    "question_id": "mbpp/715",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7159": {
    "question_id": "mbpp/715",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_perimeter(side):\n    return 4 * side",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7160": {
    "question_id": "mbpp/716",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sd_calc(data):\n    if len(data) < 2:\n        return 0.0\n    mean = sum(data) / len(data)\n    variance = sum((x - mean) ** 2 for x in data) / (len(data) - 1)\n    return math.sqrt(variance)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7161": {
    "question_id": "mbpp/716",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sd_calc(data):\n    if len(data) < 2:\n        return 0.0\n    mean = sum(data) / len(data)\n    variance = sum((x - mean) ** 2 for x in data) / (len(data) - 1)\n    return math.sqrt(variance)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7162": {
    "question_id": "mbpp/716",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sd_calc(data):\n    if len(data) < 2:\n        return 0.0\n    mean = sum(data) / len(data)\n    variance = sum((x - mean) ** 2 for x in data) / (len(data) - 1)\n    return math.sqrt(variance)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7163": {
    "question_id": "mbpp/716",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sd_calc(data):\n    if len(data) < 2:\n        return 0.0\n    mean = sum(data) / len(data)\n    variance = sum((x - mean) ** 2 for x in data) / (len(data) - 1)\n    return math.sqrt(variance)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7164": {
    "question_id": "mbpp/716",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sd_calc(data):\n    if len(data) < 2:\n        return 0.0\n    mean = sum(data) / len(data)\n    variance = sum((x - mean) ** 2 for x in data) / (len(data) - 1)\n    return math.sqrt(variance)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7165": {
    "question_id": "mbpp/716",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sd_calc(data):\n    if len(data) < 2:\n        return 0.0\n    mean = sum(data) / len(data)\n    variance = sum((x - mean) ** 2 for x in data) / (len(data) - 1)\n    return math.sqrt(variance)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7166": {
    "question_id": "mbpp/716",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sd_calc(numbers):\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    squared_diffs = [(x - mean) ** 2 for x in numbers]\n    variance = sum(squared_diffs) / len(numbers)\n    return math.sqrt(variance)",
    "test_output": "FAILED: expect 2.23606797749979,in fact 2.0",
    "test_result": "False"
  },
  "7167": {
    "question_id": "mbpp/716",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sd_calc(data):\n    n = len(data)\n    if n == 0:\n        return 0.0\n    mean = sum(data) / n\n    variance = sum((x - mean) ** 2 for x in data) / n\n    return math.sqrt(variance)",
    "test_output": "FAILED: expect 2.23606797749979,in fact 2.0",
    "test_result": "False"
  },
  "7168": {
    "question_id": "mbpp/716",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sd_calc(data):\n    if len(data) < 2:\n        return 0.0\n    mean = sum(data) / len(data)\n    variance = sum((x - mean) ** 2 for x in data) / (len(data) - 1)\n    return math.sqrt(variance)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7169": {
    "question_id": "mbpp/716",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sd_calc(data):\n    if len(data) < 2:\n        return 0.0\n    mean = sum(data) / len(data)\n    variance = sum((x - mean) ** 2 for x in data) / (len(data) - 1)\n    return math.sqrt(variance)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7170": {
    "question_id": "mbpp/717",
    "model": "deepseek-v3-250324",
    "generation_code": "def alternate_elements(lst):\n    return lst[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7171": {
    "question_id": "mbpp/717",
    "model": "deepseek-v3-250324",
    "generation_code": "def alternate_elements(lst):\n    return lst[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7172": {
    "question_id": "mbpp/717",
    "model": "deepseek-v3-250324",
    "generation_code": "def alternate_elements(lst):\n    return lst[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7173": {
    "question_id": "mbpp/717",
    "model": "deepseek-v3-250324",
    "generation_code": "def alternate_elements(lst):\n    return lst[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7174": {
    "question_id": "mbpp/717",
    "model": "deepseek-v3-250324",
    "generation_code": "def alternate_elements(lst):\n    return lst[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7175": {
    "question_id": "mbpp/717",
    "model": "deepseek-v3-250324",
    "generation_code": "def alternate_elements(lst):\n    return lst[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7176": {
    "question_id": "mbpp/717",
    "model": "deepseek-v3-250324",
    "generation_code": "def alternate_elements(lst):\n    return lst[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7177": {
    "question_id": "mbpp/717",
    "model": "deepseek-v3-250324",
    "generation_code": "def alternate_elements(lst):\n    return lst[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7178": {
    "question_id": "mbpp/717",
    "model": "deepseek-v3-250324",
    "generation_code": "def alternate_elements(lst):\n    return lst[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7179": {
    "question_id": "mbpp/717",
    "model": "deepseek-v3-250324",
    "generation_code": "def alternate_elements(lst):\n    return lst[::2]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7180": {
    "question_id": "mbpp/718",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "7181": {
    "question_id": "mbpp/718",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "7182": {
    "question_id": "mbpp/718",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "7183": {
    "question_id": "mbpp/718",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "7184": {
    "question_id": "mbpp/718",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "7185": {
    "question_id": "mbpp/718",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "7186": {
    "question_id": "mbpp/718",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "7187": {
    "question_id": "mbpp/718",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "7188": {
    "question_id": "mbpp/718",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "7189": {
    "question_id": "mbpp/718",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "7190": {
    "question_id": "mbpp/719",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict_to_tuple(tuple_data, dict_data):\n    return tuple_data + (dict_data,)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7191": {
    "question_id": "mbpp/719",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict_to_tuple(t, d):\n    return t + (d,)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7192": {
    "question_id": "mbpp/719",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict_to_tuple(input_tuple, input_dict):\n    return input_tuple + (input_dict,)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7193": {
    "question_id": "mbpp/719",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict_to_tuple(input_tuple, input_dict):\n    return input_tuple + (input_dict,)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7194": {
    "question_id": "mbpp/719",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict_to_tuple(t, d):\n    return t + (d,)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7195": {
    "question_id": "mbpp/719",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict_to_tuple(t, d):\n    return t + (d,)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7196": {
    "question_id": "mbpp/719",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict_to_tuple(t, d):\n    return t + (d,)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7197": {
    "question_id": "mbpp/719",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict_to_tuple(t, d):\n    return t + (d,)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7198": {
    "question_id": "mbpp/719",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict_to_tuple(t, d):\n    return t + (d,)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7199": {
    "question_id": "mbpp/719",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict_to_tuple(input_tuple, input_dict):\n    return input_tuple + (input_dict,)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7200": {
    "question_id": "mbpp/720",
    "model": "deepseek-v3-250324",
    "generation_code": "def maxAverageOfPath(matrix, n):\n    dp = [[0] * n for _ in range(n)]\n    count = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    count[0][0] = 1\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        count[i][0] = count[i-1][0] + 1\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n        count[0][j] = count[0][j-1] + 1\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            if dp[i-1][j] / count[i-1][j] > dp[i][j-1] / count[i][j-1]:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n                count[i][j] = count[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n                count[i][j] = count[i][j-1] + 1\n    \n    return dp[n-1][n-1] / count[n-1][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7201": {
    "question_id": "mbpp/720",
    "model": "deepseek-v3-250324",
    "generation_code": "def maxAverageOfPath(matrix, n):\n    dp = [[0.0 for _ in range(n)] for _ in range(n)]\n    count = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    count[0][0] = 1\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        count[i][0] = count[i-1][0] + 1\n    \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n        count[0][j] = count[0][j-1] + 1\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            if dp[i-1][j] / count[i-1][j] > dp[i][j-1] / count[i][j-1]:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n                count[i][j] = count[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n                count[i][j] = count[i][j-1] + 1\n    \n    return dp[n-1][n-1] / count[n-1][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7202": {
    "question_id": "mbpp/720",
    "model": "deepseek-v3-250324",
    "generation_code": "def maxAverageOfPath(matrix, n):\n    dp = [[0.0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    \n    max_sum = dp[n-1][n-1]\n    path_length = 2 * n - 1\n    return max_sum / path_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7203": {
    "question_id": "mbpp/720",
    "model": "deepseek-v3-250324",
    "generation_code": "def maxAverageOfPath(matrix, n):\n    dp = [[0] * n for _ in range(n)]\n    count = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    count[0][0] = 1\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        count[i][0] = count[i-1][0] + 1\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n        count[0][j] = count[0][j-1] + 1\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            if dp[i-1][j] / count[i-1][j] > dp[i][j-1] / count[i][j-1]:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n                count[i][j] = count[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n                count[i][j] = count[i][j-1] + 1\n    \n    return dp[n-1][n-1] / count[n-1][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7204": {
    "question_id": "mbpp/720",
    "model": "deepseek-v3-250324",
    "generation_code": "def maxAverageOfPath(matrix, n):\n    dp = [[0] * n for _ in range(n)]\n    count = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    count[0][0] = 1\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        count[i][0] = count[i-1][0] + 1\n    \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n        count[0][j] = count[0][j-1] + 1\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            if dp[i-1][j] / count[i-1][j] > dp[i][j-1] / count[i][j-1]:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n                count[i][j] = count[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n                count[i][j] = count[i][j-1] + 1\n    \n    return dp[n-1][n-1] / count[n-1][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7205": {
    "question_id": "mbpp/720",
    "model": "deepseek-v3-250324",
    "generation_code": "def maxAverageOfPath(matrix, n):\n    dp = [[0.0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    \n    max_sum = dp[n-1][n-1]\n    path_length = 2 * n - 1\n    return max_sum / path_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7206": {
    "question_id": "mbpp/720",
    "model": "deepseek-v3-250324",
    "generation_code": "def maxAverageOfPath(matrix, n):\n    dp = [[0.0 for _ in range(n)] for _ in range(n)]\n    count = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    count[0][0] = 1\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        count[i][0] = count[i-1][0] + 1\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n        count[0][j] = count[0][j-1] + 1\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            if dp[i-1][j] / count[i-1][j] > dp[i][j-1] / count[i][j-1]:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n                count[i][j] = count[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n                count[i][j] = count[i][j-1] + 1\n    \n    return dp[n-1][n-1] / count[n-1][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7207": {
    "question_id": "mbpp/720",
    "model": "deepseek-v3-250324",
    "generation_code": "def maxAverageOfPath(matrix, n):\n    dp = [[0.0 for _ in range(n)] for _ in range(n)]\n    count = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    count[0][0] = 1\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        count[i][0] = count[i-1][0] + 1\n    \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n        count[0][j] = count[0][j-1] + 1\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            if dp[i-1][j] / count[i-1][j] > dp[i][j-1] / count[i][j-1]:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n                count[i][j] = count[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n                count[i][j] = count[i][j-1] + 1\n    \n    return dp[n-1][n-1] / count[n-1][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7208": {
    "question_id": "mbpp/720",
    "model": "deepseek-v3-250324",
    "generation_code": "def maxAverageOfPath(matrix, n):\n    dp = [[0.0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    \n    # Initialize first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    \n    # Initialize first column\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    \n    # Fill the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    \n    max_sum = dp[n-1][n-1]\n    path_length = 2 * n - 1\n    return max_sum / path_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7209": {
    "question_id": "mbpp/720",
    "model": "deepseek-v3-250324",
    "generation_code": "def maxAverageOfPath(matrix, n):\n    dp = [[0] * n for _ in range(n)]\n    count = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    count[0][0] = 1\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        count[i][0] = count[i-1][0] + 1\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n        count[0][j] = count[0][j-1] + 1\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            if dp[i-1][j] / count[i-1][j] > dp[i][j-1] / count[i][j-1]:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n                count[i][j] = count[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n                count[i][j] = count[i][j-1] + 1\n    \n    return dp[n-1][n-1] / count[n-1][n-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7210": {
    "question_id": "mbpp/721",
    "model": "deepseek-v3-250324",
    "generation_code": "def filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= min_height and weight >= min_weight}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7211": {
    "question_id": "mbpp/721",
    "model": "deepseek-v3-250324",
    "generation_code": "def filter_data(data, min_height, min_width):\n    filtered = {}\n    for name, (height, width) in data.items():\n        if height >= min_height and width >= min_width:\n            filtered[name] = (height, width)\n    return filtered",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7212": {
    "question_id": "mbpp/721",
    "model": "deepseek-v3-250324",
    "generation_code": "def filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= min_height and weight >= min_weight}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7213": {
    "question_id": "mbpp/721",
    "model": "deepseek-v3-250324",
    "generation_code": "def filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= min_height and weight >= min_weight}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7214": {
    "question_id": "mbpp/721",
    "model": "deepseek-v3-250324",
    "generation_code": "def filter_data(students, min_height, min_width):\n    return {name: (height, width) for name, (height, width) in students.items() if height >= min_height and width >= min_width}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7215": {
    "question_id": "mbpp/721",
    "model": "deepseek-v3-250324",
    "generation_code": "def filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= min_height and weight >= min_weight}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7216": {
    "question_id": "mbpp/721",
    "model": "deepseek-v3-250324",
    "generation_code": "def filter_data(data, min_height, min_width):\n    return {k: v for k, v in data.items() if v[0] >= min_height and v[1] >= min_width}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7217": {
    "question_id": "mbpp/721",
    "model": "deepseek-v3-250324",
    "generation_code": "def filter_data(students, min_height, min_width):\n    return {name: (height, width) for name, (height, width) in students.items() if height >= min_height and width >= min_width}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7218": {
    "question_id": "mbpp/721",
    "model": "deepseek-v3-250324",
    "generation_code": "def filter_data(students, min_height, min_width):\n    return {name: (height, width) for name, (height, width) in students.items() if height >= min_height and width >= min_width}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7219": {
    "question_id": "mbpp/721",
    "model": "deepseek-v3-250324",
    "generation_code": "def filter_data(students, min_height, min_width):\n    filtered = {}\n    for name, (height, width) in students.items():\n        if height >= min_height and width >= min_width:\n            filtered[name] = (height, width)\n    return filtered",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7220": {
    "question_id": "mbpp/722",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_same_pair(list1, list2):\n    return sum(map(lambda x, y: 1 if x == y else 0, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7221": {
    "question_id": "mbpp/722",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_same_pair(list1, list2):\n    return sum(map(lambda x, y: 1 if x == y else 0, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7222": {
    "question_id": "mbpp/722",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_same_pair(list1, list2):\n    return sum(map(lambda x, y: 1 if x == y else 0, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7223": {
    "question_id": "mbpp/722",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_same_pair(list1, list2):\n    return sum(map(lambda x, y: 1 if x == y else 0, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7224": {
    "question_id": "mbpp/722",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_same_pair(list1, list2):\n    return sum(map(lambda x, y: 1 if x == y else 0, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7225": {
    "question_id": "mbpp/722",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_same_pair(list1, list2):\n    return sum(map(lambda x, y: 1 if x == y else 0, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7226": {
    "question_id": "mbpp/722",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_same_pair(list1, list2):\n    return sum(map(lambda x, y: 1 if x == y else 0, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7227": {
    "question_id": "mbpp/722",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_same_pair(list1, list2):\n    return sum(map(lambda x, y: 1 if x == y else 0, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7228": {
    "question_id": "mbpp/722",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_same_pair(list1, list2):\n    return sum(map(lambda x, y: 1 if x == y else 0, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7229": {
    "question_id": "mbpp/722",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_same_pair(list1, list2):\n    return sum(map(lambda x, y: 1 if x == y else 0, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7230": {
    "question_id": "mbpp/723",
    "model": "deepseek-v3-250324",
    "generation_code": "def power_base_sum(base, power):\n    num = base ** power\n    total = 0\n    for digit in str(num):\n        total += int(digit)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7231": {
    "question_id": "mbpp/723",
    "model": "deepseek-v3-250324",
    "generation_code": "def power_base_sum(base, power):\n    num = base ** power\n    total = 0\n    for digit in str(num):\n        total += int(digit)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7232": {
    "question_id": "mbpp/723",
    "model": "deepseek-v3-250324",
    "generation_code": "def power_base_sum(base, power):\n    num = base ** power\n    total = 0\n    for digit in str(num):\n        total += int(digit)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7233": {
    "question_id": "mbpp/723",
    "model": "deepseek-v3-250324",
    "generation_code": "def power_base_sum(base, power):\n    num = base ** power\n    total = 0\n    for digit in str(num):\n        total += int(digit)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7234": {
    "question_id": "mbpp/723",
    "model": "deepseek-v3-250324",
    "generation_code": "def power_base_sum(base, power):\n    num = base ** power\n    total = 0\n    for digit in str(num):\n        total += int(digit)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7235": {
    "question_id": "mbpp/723",
    "model": "deepseek-v3-250324",
    "generation_code": "def power_base_sum(base, power):\n    num = pow(base, power)\n    total = 0\n    for digit in str(num):\n        total += int(digit)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7236": {
    "question_id": "mbpp/723",
    "model": "deepseek-v3-250324",
    "generation_code": "def power_base_sum(base, power):\n    num = base ** power\n    return sum(int(digit) for digit in str(num))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7237": {
    "question_id": "mbpp/723",
    "model": "deepseek-v3-250324",
    "generation_code": "def power_base_sum(base, power):\n    num = base ** power\n    total = 0\n    for digit in str(num):\n        total += int(digit)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7238": {
    "question_id": "mbpp/723",
    "model": "deepseek-v3-250324",
    "generation_code": "def power_base_sum(base, power):\n    num = base ** power\n    total = 0\n    for digit in str(num):\n        total += int(digit)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7239": {
    "question_id": "mbpp/723",
    "model": "deepseek-v3-250324",
    "generation_code": "def power_base_sum(base, power):\n    num = base ** power\n    total = 0\n    for digit in str(num):\n        total += int(digit)\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7240": {
    "question_id": "mbpp/724",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7241": {
    "question_id": "mbpp/724",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7242": {
    "question_id": "mbpp/724",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"(.*?)\"', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7243": {
    "question_id": "mbpp/724",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7244": {
    "question_id": "mbpp/724",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7245": {
    "question_id": "mbpp/724",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"(.*?)\"', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7246": {
    "question_id": "mbpp/724",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7247": {
    "question_id": "mbpp/724",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7248": {
    "question_id": "mbpp/724",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7249": {
    "question_id": "mbpp/724",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7250": {
    "question_id": "mbpp/725",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_elements(t):\n    if len(t) < 2:\n        return ()\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7251": {
    "question_id": "mbpp/725",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_elements(t):\n    if len(t) < 2:\n        return ()\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7252": {
    "question_id": "mbpp/725",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_elements(t):\n    if len(t) < 2:\n        return ()\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7253": {
    "question_id": "mbpp/725",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7254": {
    "question_id": "mbpp/725",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7255": {
    "question_id": "mbpp/725",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7256": {
    "question_id": "mbpp/725",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_elements(t):\n    if len(t) < 2:\n        return ()\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7257": {
    "question_id": "mbpp/725",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_elements(t):\n    if len(t) < 2:\n        return ()\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7258": {
    "question_id": "mbpp/725",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_elements(t):\n    if len(t) < 2:\n        return ()\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7259": {
    "question_id": "mbpp/725",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7260": {
    "question_id": "mbpp/726",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7261": {
    "question_id": "mbpp/726",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7262": {
    "question_id": "mbpp/726",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7263": {
    "question_id": "mbpp/726",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7264": {
    "question_id": "mbpp/726",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7265": {
    "question_id": "mbpp/726",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7266": {
    "question_id": "mbpp/726",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7267": {
    "question_id": "mbpp/726",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7268": {
    "question_id": "mbpp/726",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7269": {
    "question_id": "mbpp/726",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7270": {
    "question_id": "mbpp/727",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7271": {
    "question_id": "mbpp/727",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7272": {
    "question_id": "mbpp/727",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7273": {
    "question_id": "mbpp/727",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7274": {
    "question_id": "mbpp/727",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7275": {
    "question_id": "mbpp/727",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7276": {
    "question_id": "mbpp/727",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7277": {
    "question_id": "mbpp/727",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_list(list1, list2):\n    if len(list1) != len(list2):\n        return []\n    return [x + y for x, y in zip(list1, list2)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7278": {
    "question_id": "mbpp/727",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7279": {
    "question_id": "mbpp/727",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7280": {
    "question_id": "mbpp/728",
    "model": "deepseek-v3-250324",
    "generation_code": "add_list = lambda list1, list2: list(map(lambda x, y: x + y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7281": {
    "question_id": "mbpp/728",
    "model": "deepseek-v3-250324",
    "generation_code": "add_list = lambda list1, list2: list(map(lambda x, y: x + y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7282": {
    "question_id": "mbpp/728",
    "model": "deepseek-v3-250324",
    "generation_code": "add_list = lambda list1, list2: list(map(lambda x, y: x + y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7283": {
    "question_id": "mbpp/728",
    "model": "deepseek-v3-250324",
    "generation_code": "add_list = lambda list1, list2: list(map(lambda x, y: x + y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7284": {
    "question_id": "mbpp/728",
    "model": "deepseek-v3-250324",
    "generation_code": "add_list = lambda list1, list2: list(map(lambda x, y: x + y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7285": {
    "question_id": "mbpp/728",
    "model": "deepseek-v3-250324",
    "generation_code": "add_list = lambda list1, list2: list(map(lambda x, y: x + y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7286": {
    "question_id": "mbpp/728",
    "model": "deepseek-v3-250324",
    "generation_code": "add_list = lambda list1, list2: list(map(lambda x, y: x + y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7287": {
    "question_id": "mbpp/728",
    "model": "deepseek-v3-250324",
    "generation_code": "add_list = lambda list1, list2: list(map(lambda x, y: x + y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7288": {
    "question_id": "mbpp/728",
    "model": "deepseek-v3-250324",
    "generation_code": "add_list = lambda list1, list2: list(map(lambda x, y: x + y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7289": {
    "question_id": "mbpp/728",
    "model": "deepseek-v3-250324",
    "generation_code": "add_list = lambda list1, list2: list(map(lambda x, y: x + y, list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7290": {
    "question_id": "mbpp/729",
    "model": "deepseek-v3-250324",
    "generation_code": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7291": {
    "question_id": "mbpp/729",
    "model": "deepseek-v3-250324",
    "generation_code": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7292": {
    "question_id": "mbpp/729",
    "model": "deepseek-v3-250324",
    "generation_code": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7293": {
    "question_id": "mbpp/729",
    "model": "deepseek-v3-250324",
    "generation_code": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7294": {
    "question_id": "mbpp/729",
    "model": "deepseek-v3-250324",
    "generation_code": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7295": {
    "question_id": "mbpp/729",
    "model": "deepseek-v3-250324",
    "generation_code": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7296": {
    "question_id": "mbpp/729",
    "model": "deepseek-v3-250324",
    "generation_code": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for item in lst[1:]:\n        if item != result[-1]:\n            result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7297": {
    "question_id": "mbpp/729",
    "model": "deepseek-v3-250324",
    "generation_code": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for item in lst[1:]:\n        if item != result[-1]:\n            result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7298": {
    "question_id": "mbpp/729",
    "model": "deepseek-v3-250324",
    "generation_code": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7299": {
    "question_id": "mbpp/729",
    "model": "deepseek-v3-250324",
    "generation_code": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for item in lst[1:]:\n        if item != result[-1]:\n            result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7300": {
    "question_id": "mbpp/730",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsurface_cone(radius, height):\n    slant_height = math.sqrt(radius**2 + height**2)\n    lateral_area = math.pi * radius * slant_height\n    return lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7301": {
    "question_id": "mbpp/730",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsurface_cone(radius, height):\n    slant_height = math.sqrt(radius**2 + height**2)\n    lateral_area = math.pi * radius * slant_height\n    return lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7302": {
    "question_id": "mbpp/730",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsurface_cone(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    slant_height = math.sqrt(radius**2 + height**2)\n    lateral_area = math.pi * radius * slant_height\n    return lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7303": {
    "question_id": "mbpp/730",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsurface_cone(radius, height):\n    slant_height = math.sqrt(radius**2 + height**2)\n    return math.pi * radius * slant_height",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7304": {
    "question_id": "mbpp/730",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsurface_cone(radius, height):\n    slant_height = math.sqrt(radius**2 + height**2)\n    lateral_area = math.pi * radius * slant_height\n    return lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7305": {
    "question_id": "mbpp/730",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsurface_cone(radius, height):\n    slant_height = math.sqrt(radius**2 + height**2)\n    lateral_area = math.pi * radius * slant_height\n    return lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7306": {
    "question_id": "mbpp/730",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsurface_cone(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    slant_height = math.sqrt(radius**2 + height**2)\n    lateral_area = math.pi * radius * slant_height\n    return lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7307": {
    "question_id": "mbpp/730",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsurface_cone(radius, height):\n    slant_height = math.sqrt(radius**2 + height**2)\n    lateral_area = math.pi * radius * slant_height\n    return lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7308": {
    "question_id": "mbpp/730",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsurface_cone(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    slant_height = math.sqrt(radius**2 + height**2)\n    lateral_area = math.pi * radius * slant_height\n    return lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7309": {
    "question_id": "mbpp/730",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lateralsurface_cone(radius, height):\n    slant_height = math.sqrt(radius**2 + height**2)\n    lateral_area = math.pi * radius * slant_height\n    return lateral_area",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7310": {
    "question_id": "mbpp/731",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_specialchar(text):\n    import re\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7311": {
    "question_id": "mbpp/731",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_specialchar(text):\n    import re\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7312": {
    "question_id": "mbpp/731",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_specialchar(text):\n    result = []\n    for char in text:\n        if char in ' ,.':\n            result.append(':')\n        else:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7313": {
    "question_id": "mbpp/731",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_specialchar(text):\n    result = []\n    for char in text:\n        if char in [' ', ',', '.']:\n            result.append(':')\n        else:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7314": {
    "question_id": "mbpp/731",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_specialchar(text):\n    import re\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7315": {
    "question_id": "mbpp/731",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7316": {
    "question_id": "mbpp/731",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_specialchar(text):\n    result = []\n    for char in text:\n        if char in [' ', ',', '.']:\n            result.append(':')\n        else:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7317": {
    "question_id": "mbpp/731",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7318": {
    "question_id": "mbpp/731",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_specialchar(text):\n    result = []\n    for char in text:\n        if char in ' ,.':\n            result.append(':')\n        else:\n            result.append(char)\n    return ''.join(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7319": {
    "question_id": "mbpp/731",
    "model": "deepseek-v3-250324",
    "generation_code": "def replace_specialchar(text):\n    import re\n    return re.sub(r'[ ,.]', ':', text)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7320": {
    "question_id": "mbpp/732",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7321": {
    "question_id": "mbpp/732",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7322": {
    "question_id": "mbpp/732",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7323": {
    "question_id": "mbpp/732",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7324": {
    "question_id": "mbpp/732",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_occurrence(nums, target):\n    left, right = 0, len(nums) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            result = mid\n            right = mid - 1\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7325": {
    "question_id": "mbpp/732",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7326": {
    "question_id": "mbpp/732",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7327": {
    "question_id": "mbpp/732",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7328": {
    "question_id": "mbpp/732",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7329": {
    "question_id": "mbpp/732",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7330": {
    "question_id": "mbpp/733",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Subarray_Prod(arr, n):\n    total = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total += product\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7331": {
    "question_id": "mbpp/733",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Subarray_Prod(arr, n):\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7332": {
    "question_id": "mbpp/733",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Subarray_Prod(arr, n):\n    total = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total += product\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7333": {
    "question_id": "mbpp/733",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Subarray_Prod(arr, n):\n    total = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total += product\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7334": {
    "question_id": "mbpp/733",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Subarray_Prod(arr, n):\n    total = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total += product\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7335": {
    "question_id": "mbpp/733",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Subarray_Prod(arr, n):\n    total = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total += product\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7336": {
    "question_id": "mbpp/733",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Subarray_Prod(arr, n):\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7337": {
    "question_id": "mbpp/733",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Subarray_Prod(arr, n):\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7338": {
    "question_id": "mbpp/733",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Subarray_Prod(arr, n):\n    total = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total += product\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7339": {
    "question_id": "mbpp/733",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Of_Subarray_Prod(arr, n):\n    total = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total += product\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7340": {
    "question_id": "mbpp/734",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_middle_bits(num):\n    if num < 2:\n        return num\n    first_bit = num & (1 << (num.bit_length() - 1))\n    last_bit = num & 1\n    mask = (1 << (num.bit_length() - 1)) - 1\n    middle_bits = num & mask\n    middle_bits ^= (mask >> 1) << 1\n    return first_bit | middle_bits | last_bit",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7341": {
    "question_id": "mbpp/734",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_middle_bits(num):\n    if num == 0:\n        return 0\n    binary = bin(num)[2:]\n    if len(binary) <= 2:\n        return num\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    middle_bits = binary[1:-1]\n    toggled_middle = ''.join(['1' if bit == '0' else '0' for bit in middle_bits])\n    new_binary = first_bit + toggled_middle + last_bit\n    return int(new_binary, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7342": {
    "question_id": "mbpp/734",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_middle_bits(num):\n    if num < 2:\n        return num\n    binary = bin(num)[2:]\n    if len(binary) <= 2:\n        return num\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    middle_bits = binary[1:-1]\n    toggled_middle = ''.join(['1' if bit == '0' else '0' for bit in middle_bits])\n    new_binary = first_bit + toggled_middle + last_bit\n    return int(new_binary, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7343": {
    "question_id": "mbpp/734",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_middle_bits(num):\n    if num == 0:\n        return 0\n    binary = bin(num)[2:]\n    if len(binary) <= 2:\n        return num\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    middle_bits = binary[1:-1]\n    toggled_middle = ''.join(['1' if bit == '0' else '0' for bit in middle_bits])\n    new_binary = first_bit + toggled_middle + last_bit\n    return int(new_binary, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7344": {
    "question_id": "mbpp/734",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_middle_bits(num):\n    if num < 2:\n        return num\n    first_bit = num & (1 << (num.bit_length() - 1))\n    last_bit = num & 1\n    mask = (1 << (num.bit_length() - 1)) - 1\n    middle_bits = num & mask\n    middle_bits ^= (mask >> 1) if last_bit else mask\n    return first_bit | middle_bits | last_bit",
    "test_output": "FAILED: expect 15,in fact 11",
    "test_result": "False"
  },
  "7345": {
    "question_id": "mbpp/734",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_middle_bits(num):\n    if num < 2:\n        return num\n    bits = num.bit_length()\n    if bits <= 2:\n        return num\n    mask = (1 << (bits - 1)) - 1\n    mask &= ~1\n    return num ^ mask",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7346": {
    "question_id": "mbpp/734",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_middle_bits(num):\n    if num < 2:\n        return num\n    first_bit = num & (1 << (num.bit_length() - 1))\n    last_bit = num & 1\n    mask = (1 << (num.bit_length() - 1)) - 1\n    middle_bits = num & mask\n    middle_bits ^= (mask >> 1) << 1\n    return first_bit | middle_bits | last_bit",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7347": {
    "question_id": "mbpp/734",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_middle_bits(num):\n    if num == 0:\n        return 0\n    binary = bin(num)[2:]\n    if len(binary) <= 2:\n        return num\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    middle_bits = binary[1:-1]\n    toggled_middle = ''.join(['1' if bit == '0' else '0' for bit in middle_bits])\n    new_binary = first_bit + toggled_middle + last_bit\n    return int(new_binary, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7348": {
    "question_id": "mbpp/734",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_middle_bits(num):\n    if num == 0:\n        return 0\n    binary = bin(num)[2:]\n    if len(binary) <= 2:\n        return num\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    middle_bits = binary[1:-1]\n    toggled_middle = ''.join(['1' if bit == '0' else '0' for bit in middle_bits])\n    new_binary = first_bit + toggled_middle + last_bit\n    return int(new_binary, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7349": {
    "question_id": "mbpp/734",
    "model": "deepseek-v3-250324",
    "generation_code": "def toggle_middle_bits(num):\n    if num == 0:\n        return 0\n    binary = bin(num)[2:]\n    if len(binary) <= 2:\n        return num\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    middle_bits = binary[1:-1]\n    toggled_middle = ''.join(['1' if bit == '0' else '0' for bit in middle_bits])\n    new_binary = first_bit + toggled_middle + last_bit\n    return int(new_binary, 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7350": {
    "question_id": "mbpp/735",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_insertion(nums, target):\n    left, right = 0, len(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7351": {
    "question_id": "mbpp/735",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_insertion(nums, target):\n    left, right = 0, len(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7352": {
    "question_id": "mbpp/735",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_insertion(nums, target):\n    left, right = 0, len(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7353": {
    "question_id": "mbpp/735",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_insertion(arr, n):\n    left = 0\n    right = len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < n:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7354": {
    "question_id": "mbpp/735",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_insertion(arr, x):\n    low = 0\n    high = len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7355": {
    "question_id": "mbpp/735",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_insertion(nums, target):\n    left, right = 0, len(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7356": {
    "question_id": "mbpp/735",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_insertion(nums, target):\n    left, right = 0, len(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7357": {
    "question_id": "mbpp/735",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_insertion(nums, target):\n    left, right = 0, len(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7358": {
    "question_id": "mbpp/735",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_insertion(arr, value):\n    low = 0\n    high = len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7359": {
    "question_id": "mbpp/735",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_insertion(nums, target):\n    left, right = 0, len(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7360": {
    "question_id": "mbpp/736",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_str(string):\n    if re.match(r'^[aeiouAEIOU]', string):\n        return 'Valid'\n    else:\n        return 'Invalid'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7361": {
    "question_id": "mbpp/736",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_str(string):\n    if re.match(r'^[aeiouAEIOU]', string):\n        return 'Valid'\n    else:\n        return 'Invalid'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7362": {
    "question_id": "mbpp/736",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_str(string):\n    if re.match(r'^[aeiouAEIOU]', string):\n        return 'Valid'\n    else:\n        return 'Invalid'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7363": {
    "question_id": "mbpp/736",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_str(string):\n    if re.match(r'^[aeiouAEIOU]', string):\n        return 'Valid'\n    else:\n        return 'Invalid'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7364": {
    "question_id": "mbpp/736",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_str(string):\n    if re.match(r'^[aeiouAEIOU]', string):\n        return 'Valid'\n    else:\n        return 'Invalid'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7365": {
    "question_id": "mbpp/736",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_str(string):\n    if re.match(r'^[aeiouAEIOU]', string):\n        return 'Valid'\n    else:\n        return 'Invalid'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7366": {
    "question_id": "mbpp/736",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_str(string):\n    if re.match(r'^[aeiouAEIOU]', string):\n        return 'Valid'\n    else:\n        return 'Invalid'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7367": {
    "question_id": "mbpp/736",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_str(string):\n    if re.match(r'^[aeiouAEIOU]', string):\n        return 'Valid'\n    else:\n        return 'Invalid'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7368": {
    "question_id": "mbpp/736",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_str(string):\n    if re.match(r'^[aeiouAEIOU]', string):\n        return 'Valid'\n    else:\n        return 'Invalid'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7369": {
    "question_id": "mbpp/736",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_str(string):\n    if re.match(r'^[aeiouAEIOU]', string):\n        return 'Valid'\n    else:\n        return 'Invalid'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7370": {
    "question_id": "mbpp/737",
    "model": "deepseek-v3-250324",
    "generation_code": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    return sum(1 / (2 ** i) for i in range(n))",
    "test_output": "FAILED: expect 1.9921875,in fact 1.984375",
    "test_result": "False"
  },
  "7371": {
    "question_id": "mbpp/737",
    "model": "deepseek-v3-250324",
    "generation_code": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    return sum(1 / (2 ** i) for i in range(n))",
    "test_output": "FAILED: expect 1.9921875,in fact 1.984375",
    "test_result": "False"
  },
  "7372": {
    "question_id": "mbpp/737",
    "model": "deepseek-v3-250324",
    "generation_code": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    return sum(1 / (2 ** i) for i in range(n))",
    "test_output": "FAILED: expect 1.9921875,in fact 1.984375",
    "test_result": "False"
  },
  "7373": {
    "question_id": "mbpp/737",
    "model": "deepseek-v3-250324",
    "generation_code": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    return (1 - 0.5 ** n) / (1 - 0.5)",
    "test_output": "FAILED: expect 1.9921875,in fact 1.984375",
    "test_result": "False"
  },
  "7374": {
    "question_id": "mbpp/737",
    "model": "deepseek-v3-250324",
    "generation_code": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    return (1 - (0.5) ** n) / (1 - 0.5)",
    "test_output": "FAILED: expect 1.9921875,in fact 1.984375",
    "test_result": "False"
  },
  "7375": {
    "question_id": "mbpp/737",
    "model": "deepseek-v3-250324",
    "generation_code": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    return 1 - (0.5) ** n",
    "test_output": "FAILED: expect 1.9921875,in fact 0.9921875",
    "test_result": "False"
  },
  "7376": {
    "question_id": "mbpp/737",
    "model": "deepseek-v3-250324",
    "generation_code": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    return sum(1 / (2 ** i) for i in range(n))",
    "test_output": "FAILED: expect 1.9921875,in fact 1.984375",
    "test_result": "False"
  },
  "7377": {
    "question_id": "mbpp/737",
    "model": "deepseek-v3-250324",
    "generation_code": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    return (1 - (0.5) ** n) / (1 - 0.5) - 1",
    "test_output": "FAILED: expect 1.9921875,in fact 0.984375",
    "test_result": "False"
  },
  "7378": {
    "question_id": "mbpp/737",
    "model": "deepseek-v3-250324",
    "generation_code": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    return 1 - (0.5) ** n",
    "test_output": "FAILED: expect 1.9921875,in fact 0.9921875",
    "test_result": "False"
  },
  "7379": {
    "question_id": "mbpp/737",
    "model": "deepseek-v3-250324",
    "generation_code": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    return (1 - (0.5) ** n) / (1 - 0.5)",
    "test_output": "FAILED: expect 1.9921875,in fact 1.984375",
    "test_result": "False"
  },
  "7380": {
    "question_id": "mbpp/738",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Index(n):\n    if n == 0:\n        return 0\n    lower = 10 ** (n - 1)\n    k = 1\n    while True:\n        triangular = k * (k + 1) // 2\n        if triangular >= lower:\n            return k\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7381": {
    "question_id": "mbpp/738",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Index(n):\n    if n == 0:\n        return 0\n    lower = 10 ** (n - 1)\n    k = 1\n    while True:\n        triangular = k * (k + 1) // 2\n        if triangular >= lower:\n            return k\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7382": {
    "question_id": "mbpp/738",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Index(n):\n    if n == 0:\n        return 0\n    lower = 10 ** (n - 1)\n    k = math.ceil((2 * math.sqrt(2 * lower + 1) - 1) / 2)\n    while True:\n        triangular = k * (k + 1) // 2\n        if triangular >= 10 ** (n - 1):\n            return k\n        k += 1",
    "test_output": "FAILED: expect 4,in fact 5",
    "test_result": "False"
  },
  "7383": {
    "question_id": "mbpp/738",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Index(n):\n    if n == 0:\n        return 0\n    lower = 10 ** (n - 1)\n    k = 0\n    while True:\n        k += 1\n        triangular = k * (k + 1) // 2\n        if triangular >= lower:\n            return k",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7384": {
    "question_id": "mbpp/738",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Index(n):\n    if n <= 0:\n        return 0\n    \n    lower = 10 ** (n - 1)\n    k = 1\n    while True:\n        triangular = k * (k + 1) // 2\n        if triangular >= lower:\n            return k\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7385": {
    "question_id": "mbpp/738",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Index(n):\n    if n == 0:\n        return 0\n    lower = 10 ** (n - 1)\n    k = math.ceil((2 * math.sqrt(2 * lower + 1) - 1) / 2)\n    while True:\n        triangular = k * (k + 1) // 2\n        if triangular >= 10 ** (n - 1):\n            return k\n        k += 1",
    "test_output": "FAILED: expect 4,in fact 5",
    "test_result": "False"
  },
  "7386": {
    "question_id": "mbpp/738",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Index(n):\n    if n == 0:\n        return 0\n    lower = 10 ** (n - 1)\n    k = math.ceil((math.sqrt(8 * lower + 1) - 1) / 2)\n    while True:\n        triangular = k * (k + 1) // 2\n        if triangular >= 10 ** (n - 1):\n            return k\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7387": {
    "question_id": "mbpp/738",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Index(n):\n    if n == 0:\n        return 0\n    lower = 10 ** (n - 1)\n    k = 0\n    while True:\n        k += 1\n        triangular = k * (k + 1) // 2\n        if triangular >= lower:\n            return k",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7388": {
    "question_id": "mbpp/738",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Index(n):\n    if n == 0:\n        return 0\n    lower = 10 ** (n - 1)\n    k = 0\n    while True:\n        triangular = k * (k + 1) // 2\n        if triangular >= lower:\n            return k\n        k += 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7389": {
    "question_id": "mbpp/738",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Index(n):\n    if n == 1:\n        return 1\n    lower = 10 ** (n - 1)\n    k = math.ceil((math.sqrt(8 * lower + 1) - 1) / 2)\n    triangular = k * (k + 1) // 2\n    while triangular < 10 ** n:\n        if triangular >= lower:\n            return k\n        k += 1\n        triangular = k * (k + 1) // 2\n    return k",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7390": {
    "question_id": "mbpp/739",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_dict(t):\n    if len(t) % 2 != 0:\n        t = t[:-1]\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7391": {
    "question_id": "mbpp/739",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_dict(t):\n    if len(t) % 2 != 0:\n        return {}\n    result = {}\n    for i in range(0, len(t), 2):\n        result[t[i]] = t[i+1]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7392": {
    "question_id": "mbpp/739",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_dict(t):\n    result = {}\n    for i in range(0, len(t), 2):\n        if i + 1 < len(t):\n            result[t[i]] = t[i+1]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7393": {
    "question_id": "mbpp/739",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_dict(t):\n    if len(t) % 2 != 0:\n        return {}\n    result = {}\n    for i in range(0, len(t), 2):\n        result[t[i]] = t[i+1]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7394": {
    "question_id": "mbpp/739",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_dict(t):\n    if len(t) % 2 != 0:\n        return {}\n    result = {}\n    for i in range(0, len(t), 2):\n        key = t[i]\n        value = t[i+1]\n        result[key] = value\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7395": {
    "question_id": "mbpp/739",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_dict(t):\n    result = {}\n    for i in range(0, len(t), 2):\n        if i + 1 < len(t):\n            result[t[i]] = t[i+1]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7396": {
    "question_id": "mbpp/739",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_dict(t):\n    if len(t) % 2 != 0:\n        return {}\n    result = {}\n    for i in range(0, len(t), 2):\n        result[t[i]] = t[i+1]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7397": {
    "question_id": "mbpp/739",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_dict(t):\n    if len(t) % 2 != 0:\n        return {}\n    result = {}\n    for i in range(0, len(t), 2):\n        result[t[i]] = t[i+1]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7398": {
    "question_id": "mbpp/739",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_dict(t):\n    if len(t) % 2 != 0:\n        t = t[:-1]\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7399": {
    "question_id": "mbpp/739",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_dict(t):\n    if len(t) % 2 != 0:\n        return {}\n    result = {}\n    for i in range(0, len(t), 2):\n        key = t[i]\n        value = t[i+1]\n        result[key] = value\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7400": {
    "question_id": "mbpp/740",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7401": {
    "question_id": "mbpp/740",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7402": {
    "question_id": "mbpp/740",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7403": {
    "question_id": "mbpp/740",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7404": {
    "question_id": "mbpp/740",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7405": {
    "question_id": "mbpp/740",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7406": {
    "question_id": "mbpp/740",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7407": {
    "question_id": "mbpp/740",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7408": {
    "question_id": "mbpp/740",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7409": {
    "question_id": "mbpp/740",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7410": {
    "question_id": "mbpp/741",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_tetrahedron(side):\n    if side <= 0:\n        return 0\n    return (math.sqrt(3) * side ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7411": {
    "question_id": "mbpp/741",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_tetrahedron(a):\n    return (math.sqrt(3) * a * a)",
    "test_output": "FAILED: expect 15.588457268119894,in fact 15.588457268119896",
    "test_result": "False"
  },
  "7412": {
    "question_id": "mbpp/741",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_tetrahedron(a):\n    if a <= 0:\n        return 0\n    return (math.sqrt(3) * a * a)",
    "test_output": "FAILED: expect 15.588457268119894,in fact 15.588457268119896",
    "test_result": "False"
  },
  "7413": {
    "question_id": "mbpp/741",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_tetrahedron(side):\n    if side <= 0:\n        return 0\n    return math.sqrt(3) * side * side",
    "test_output": "FAILED: expect 15.588457268119894,in fact 15.588457268119896",
    "test_result": "False"
  },
  "7414": {
    "question_id": "mbpp/741",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_tetrahedron(a):\n    return (math.sqrt(3) * a ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7415": {
    "question_id": "mbpp/741",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_tetrahedron(side):\n    return (math.sqrt(3) * side ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7416": {
    "question_id": "mbpp/741",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_tetrahedron(a):\n    return (math.sqrt(3) * a ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7417": {
    "question_id": "mbpp/741",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_tetrahedron(a):\n    return (math.sqrt(3) * a ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7418": {
    "question_id": "mbpp/741",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_tetrahedron(a):\n    return (math.sqrt(3) * a ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7419": {
    "question_id": "mbpp/741",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef area_tetrahedron(a):\n    if a <= 0:\n        return 0\n    return (math.sqrt(3) * a ** 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7420": {
    "question_id": "mbpp/742",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_right(lst, items, length):\n    if not lst or items <= 0 or length <= 0 or length > len(lst):\n        return lst\n    items = items % length\n    rotated_part = lst[-items:]\n    remaining_part = lst[:len(lst)-items]\n    return rotated_part + remaining_part",
    "test_output": "FAILED: expect [8, 9, 10, 1, 2, 3, 4, 5, 6],in fact [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
    "test_result": "False"
  },
  "7421": {
    "question_id": "mbpp/742",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_right(lst, items, length):\n    if not lst or items <= 0 or length <= 0 or length > len(lst):\n        return lst\n    items = items % length\n    rotated_part = lst[-items:]\n    remaining_part = lst[:length - items]\n    return rotated_part + remaining_part",
    "test_output": "FAILED: expect [8, 9, 10, 1, 2, 3, 4, 5, 6],in fact [8, 9, 10, 1]",
    "test_result": "False"
  },
  "7422": {
    "question_id": "mbpp/742",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_right(lst, items, length):\n    if not lst or length <= 0 or items <= 0:\n        return lst[:length] if length <= len(lst) else lst.copy()\n    effective_length = min(length, len(lst))\n    effective_items = items % effective_length\n    rotated_part = lst[-effective_items:] + lst[:effective_length - effective_items]\n    return rotated_part[:effective_length]",
    "test_output": "FAILED: expect [8, 9, 10, 1, 2, 3, 4, 5, 6],in fact [8, 9, 10, 1]",
    "test_result": "False"
  },
  "7423": {
    "question_id": "mbpp/742",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_right(lst, items, length):\n    if not lst or items <= 0 or length <= 0 or length > len(lst):\n        return lst[:length]\n    items = items % len(lst)\n    rotated = lst[-items:] + lst[:-items]\n    return rotated[:length]",
    "test_output": "FAILED: expect [8, 9, 10, 1, 2, 3, 4, 5, 6],in fact [8, 9, 10, 1]",
    "test_result": "False"
  },
  "7424": {
    "question_id": "mbpp/742",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_right(lst, items, length):\n    if not lst or items <= 0 or length <= 0 or length > len(lst):\n        return lst\n    items = items % length\n    rotated_part = lst[-items:]\n    remaining_part = lst[:len(lst)-items]\n    return rotated_part + remaining_part",
    "test_output": "FAILED: expect [8, 9, 10, 1, 2, 3, 4, 5, 6],in fact [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
    "test_result": "False"
  },
  "7425": {
    "question_id": "mbpp/742",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_right(lst, items, length):\n    if not lst or items <= 0 or length <= 0 or length > len(lst):\n        return lst\n    items = items % length\n    rotated_part = lst[-items:]\n    remaining_part = lst[:length - items]\n    return rotated_part + remaining_part",
    "test_output": "FAILED: expect [8, 9, 10, 1, 2, 3, 4, 5, 6],in fact [8, 9, 10, 1]",
    "test_result": "False"
  },
  "7426": {
    "question_id": "mbpp/742",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_right(lst, items, length):\n    if not lst or items <= 0 or length <= 0 or length > len(lst):\n        return lst\n    items = items % length\n    return lst[-items:] + lst[:length - items]",
    "test_output": "FAILED: expect [8, 9, 10, 1, 2, 3, 4, 5, 6],in fact [8, 9, 10, 1]",
    "test_result": "False"
  },
  "7427": {
    "question_id": "mbpp/742",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_right(lst, items, length):\n    if not lst or items <= 0 or length <= 0 or length > len(lst):\n        return lst[:length]\n    items = items % len(lst)\n    rotated = lst[-items:] + lst[:-items]\n    return rotated[:length]",
    "test_output": "FAILED: expect [8, 9, 10, 1, 2, 3, 4, 5, 6],in fact [8, 9, 10, 1]",
    "test_result": "False"
  },
  "7428": {
    "question_id": "mbpp/742",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_right(lst, n, k):\n    if not lst or k <= 0:\n        return lst.copy() if lst else []\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k][:n]",
    "test_output": "FAILED: expect [8, 9, 10, 1, 2, 3, 4, 5, 6],in fact [7, 8, 9, 10, 1, 2, 3]",
    "test_result": "False"
  },
  "7429": {
    "question_id": "mbpp/742",
    "model": "deepseek-v3-250324",
    "generation_code": "def rotate_right(lst, items, length):\n    if not lst or items <= 0 or length <= 0 or length > len(lst):\n        return lst\n    items = items % length\n    rotated_part = lst[-items:] + lst[:length - items]\n    return rotated_part",
    "test_output": "FAILED: expect [8, 9, 10, 1, 2, 3, 4, 5, 6],in fact [8, 9, 10, 1]",
    "test_result": "False"
  },
  "7430": {
    "question_id": "mbpp/743",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_none(tup):\n    return None in tup",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7431": {
    "question_id": "mbpp/743",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_none(tup):\n    return None in tup",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7432": {
    "question_id": "mbpp/743",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_none(tup):\n    return None in tup",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7433": {
    "question_id": "mbpp/743",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_none(t):\n    return None in t",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7434": {
    "question_id": "mbpp/743",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_none(t):\n    return None in t",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7435": {
    "question_id": "mbpp/743",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_none(t):\n    return None in t",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7436": {
    "question_id": "mbpp/743",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_none(t):\n    return None in t",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7437": {
    "question_id": "mbpp/743",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_none(tup):\n    return None in tup",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7438": {
    "question_id": "mbpp/743",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_none(t):\n    return None in t",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7439": {
    "question_id": "mbpp/743",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_none(t):\n    return None in t",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7440": {
    "question_id": "mbpp/744",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if num == 0:\n            continue\n        digits = [int(d) for d in str(num) if d != '0']\n        if all(d != 0 and num % d == 0 for d in digits):\n            result.append(num)\n    return result",
    "test_output": "FAILED: expect [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22],in fact [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]",
    "test_result": "False"
  },
  "7441": {
    "question_id": "mbpp/744",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if num == 0:\n            continue\n        digits = [int(d) for d in str(num) if d != '0']\n        valid = True\n        for d in digits:\n            if d == 0 or num % d != 0:\n                valid = False\n                break\n        if valid:\n            result.append(num)\n    return result",
    "test_output": "FAILED: expect [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22],in fact [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]",
    "test_result": "False"
  },
  "7442": {
    "question_id": "mbpp/744",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if num == 0:\n            continue\n        digits = [int(d) for d in str(abs(num)) if d != '0']\n        valid = True\n        for d in digits:\n            if d == 0 or num % d != 0:\n                valid = False\n                break\n        if valid:\n            result.append(num)\n    return result",
    "test_output": "FAILED: expect [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22],in fact [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]",
    "test_result": "False"
  },
  "7443": {
    "question_id": "mbpp/744",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if num == 0:\n            continue\n        temp = num\n        divisible = True\n        for digit in str(num):\n            if digit == '0':\n                divisible = False\n                break\n            if num % int(digit) != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(num)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7444": {
    "question_id": "mbpp/744",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if num == 0:\n            continue\n        digits = [int(d) for d in str(num) if d != '0']\n        valid = True\n        for d in digits:\n            if num % d != 0:\n                valid = False\n                break\n        if valid and digits:\n            result.append(num)\n    return result",
    "test_output": "FAILED: expect [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22],in fact [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]",
    "test_result": "False"
  },
  "7445": {
    "question_id": "mbpp/744",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if num == 0:\n            continue\n        valid = True\n        temp = num\n        while temp > 0:\n            digit = temp % 10\n            if digit == 0 or num % digit != 0:\n                valid = False\n                break\n            temp = temp // 10\n        if valid:\n            result.append(num)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7446": {
    "question_id": "mbpp/744",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if num == 0:\n            continue\n        digits = [int(d) for d in str(abs(num)) if d != '0']\n        valid = True\n        for d in digits:\n            if d == 0 or num % d != 0:\n                valid = False\n                break\n        if valid:\n            result.append(num)\n    return result",
    "test_output": "FAILED: expect [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22],in fact [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]",
    "test_result": "False"
  },
  "7447": {
    "question_id": "mbpp/744",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all(digits) and all(num % d == 0 for d in digits):\n            result.append(num)\n    return result",
    "test_output": "FAILED: expect [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22],in fact [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]",
    "test_result": "False"
  },
  "7448": {
    "question_id": "mbpp/744",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if num == 0:\n            continue\n        digits = [int(d) for d in str(num) if d != '0']\n        valid = True\n        for d in digits:\n            if num % d != 0:\n                valid = False\n                break\n        if valid:\n            result.append(num)\n    return result",
    "test_output": "FAILED: expect [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22],in fact [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]",
    "test_result": "False"
  },
  "7449": {
    "question_id": "mbpp/744",
    "model": "deepseek-v3-250324",
    "generation_code": "def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if num == 0:\n            continue\n        valid = True\n        temp = num\n        while temp > 0:\n            digit = temp % 10\n            if digit == 0:\n                valid = False\n                break\n            if num % digit != 0:\n                valid = False\n                break\n            temp = temp // 10\n        if valid:\n            result.append(num)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7450": {
    "question_id": "mbpp/745",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sector_area(radius, angle):\n    return (angle / 360) * math.pi * (radius ** 2)",
    "test_output": "FAILED: expect 6.285714285714286,in fact 6.283185307179586",
    "test_result": "False"
  },
  "7451": {
    "question_id": "mbpp/745",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sector_area(radius, angle):\n    return (angle / 360) * math.pi * radius ** 2",
    "test_output": "FAILED: expect 6.285714285714286,in fact 6.283185307179586",
    "test_result": "False"
  },
  "7452": {
    "question_id": "mbpp/745",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sector_area(radius, angle):\n    return (angle / 360) * math.pi * radius ** 2",
    "test_output": "FAILED: expect 6.285714285714286,in fact 6.283185307179586",
    "test_result": "False"
  },
  "7453": {
    "question_id": "mbpp/745",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sector_area(radius, angle):\n    return (angle / 360) * math.pi * (radius ** 2)",
    "test_output": "FAILED: expect 6.285714285714286,in fact 6.283185307179586",
    "test_result": "False"
  },
  "7454": {
    "question_id": "mbpp/745",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sector_area(radius, angle):\n    return (angle / 360) * math.pi * (radius ** 2)",
    "test_output": "FAILED: expect 6.285714285714286,in fact 6.283185307179586",
    "test_result": "False"
  },
  "7455": {
    "question_id": "mbpp/745",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sector_area(radius, angle):\n    return (angle / 360) * math.pi * radius ** 2",
    "test_output": "FAILED: expect 6.285714285714286,in fact 6.283185307179586",
    "test_result": "False"
  },
  "7456": {
    "question_id": "mbpp/745",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sector_area(radius, angle):\n    return (angle / 360) * math.pi * (radius ** 2)",
    "test_output": "FAILED: expect 6.285714285714286,in fact 6.283185307179586",
    "test_result": "False"
  },
  "7457": {
    "question_id": "mbpp/745",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sector_area(radius, angle):\n    return (angle / 360) * math.pi * (radius ** 2)",
    "test_output": "FAILED: expect 6.285714285714286,in fact 6.283185307179586",
    "test_result": "False"
  },
  "7458": {
    "question_id": "mbpp/745",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sector_area(radius, angle):\n    return (angle / 360) * math.pi * radius ** 2",
    "test_output": "FAILED: expect 6.285714285714286,in fact 6.283185307179586",
    "test_result": "False"
  },
  "7459": {
    "question_id": "mbpp/745",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sector_area(radius, angle):\n    return (angle / 360) * math.pi * (radius ** 2)",
    "test_output": "FAILED: expect 6.285714285714286,in fact 6.283185307179586",
    "test_result": "False"
  },
  "7460": {
    "question_id": "mbpp/746",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for __ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    return dp[m][n][o]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7461": {
    "question_id": "mbpp/746",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for __ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    return dp[m][n][o]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7462": {
    "question_id": "mbpp/746",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for __ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    return dp[m][n][o]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7463": {
    "question_id": "mbpp/746",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for __ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    return dp[m][n][o]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7464": {
    "question_id": "mbpp/746",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for __ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    return dp[m][n][o]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7465": {
    "question_id": "mbpp/746",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0 for _ in range(o+1)] for __ in range(n+1)] for ___ in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    return dp[m][n][o]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7466": {
    "question_id": "mbpp/746",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for __ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    return dp[m][n][o]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7467": {
    "question_id": "mbpp/746",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for __ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    return dp[m][n][o]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7468": {
    "question_id": "mbpp/746",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for __ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    return dp[m][n][o]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7469": {
    "question_id": "mbpp/746",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0 for _ in range(o+1)] for __ in range(n+1)] for ___ in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    return dp[m][n][o]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7470": {
    "question_id": "mbpp/747",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7471": {
    "question_id": "mbpp/747",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<!^)(?=[A-Z])', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7472": {
    "question_id": "mbpp/747",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<=.)(?=[A-Z])', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7473": {
    "question_id": "mbpp/747",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7474": {
    "question_id": "mbpp/747",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<!^)(?=[A-Z])', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7475": {
    "question_id": "mbpp/747",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<=.)([A-Z])', r' \\1', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7476": {
    "question_id": "mbpp/747",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<!^)(?=[A-Z])', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7477": {
    "question_id": "mbpp/747",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<=.)([A-Z])', r' \\1', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7478": {
    "question_id": "mbpp/747",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<!^)(?=[A-Z])', ' ', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7479": {
    "question_id": "mbpp/747",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<=.)([A-Z])', r' \\1', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7480": {
    "question_id": "mbpp/748",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7481": {
    "question_id": "mbpp/748",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7482": {
    "question_id": "mbpp/748",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7483": {
    "question_id": "mbpp/748",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7484": {
    "question_id": "mbpp/748",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7485": {
    "question_id": "mbpp/748",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7486": {
    "question_id": "mbpp/748",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7487": {
    "question_id": "mbpp/748",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7488": {
    "question_id": "mbpp/748",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7489": {
    "question_id": "mbpp/748",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_numeric_strings(lst):\n    return sorted([int(x) for x in lst])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7490": {
    "question_id": "mbpp/749",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_tuple(lst, tpl):\n    return lst + list(tpl)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7491": {
    "question_id": "mbpp/749",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_tuple(lst, tup):\n    return lst + list(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7492": {
    "question_id": "mbpp/749",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_tuple(lst, tup):\n    return lst + list(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7493": {
    "question_id": "mbpp/749",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_tuple(lst, tup):\n    return lst + list(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7494": {
    "question_id": "mbpp/749",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_tuple(lst, tup):\n    return lst + list(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7495": {
    "question_id": "mbpp/749",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_tuple(lst, tup):\n    return lst + list(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7496": {
    "question_id": "mbpp/749",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_tuple(lst, tup):\n    return lst + list(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7497": {
    "question_id": "mbpp/749",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_tuple(lst, tup):\n    return lst + list(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7498": {
    "question_id": "mbpp/749",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_tuple(lst, tup):\n    return lst + list(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7499": {
    "question_id": "mbpp/749",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_tuple(lst, tup):\n    return lst + list(tup)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7500": {
    "question_id": "mbpp/750",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_min_heap(arr, i):\n    n = len(arr)\n    if 2 * i + 2 > n:\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == n) or (arr[i] <= arr[2 * i + 2] and check_min_heap(arr, 2 * i + 2))\n    return left_child and right_child",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7501": {
    "question_id": "mbpp/750",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_min_heap(arr, i):\n    n = len(arr)\n    if 2 * i + 2 > n:\n        return True\n    left = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right = (2 * i + 2 == n) or (arr[i] <= arr[2 * i + 2] and check_min_heap(arr, 2 * i + 2))\n    return left and right",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7502": {
    "question_id": "mbpp/750",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_min_heap(arr, i):\n    n = len(arr)\n    if 2 * i + 2 > n:\n        return True\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    left_valid = True\n    right_valid = True\n    if left_child < n:\n        if arr[i] > arr[left_child]:\n            return False\n        left_valid = check_min_heap(arr, left_child)\n    if right_child < n:\n        if arr[i] > arr[right_child]:\n            return False\n        right_valid = check_min_heap(arr, right_child)\n    return left_valid and right_valid",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7503": {
    "question_id": "mbpp/750",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_min_heap(arr, i):\n    n = len(arr)\n    if 2 * i + 2 > n:\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == n) or (arr[i] <= arr[2 * i + 2] and check_min_heap(arr, 2 * i + 2))\n    return left_child and right_child",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7504": {
    "question_id": "mbpp/750",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_min_heap(arr, i):\n    n = len(arr)\n    if 2 * i + 2 > n:\n        return True\n    left = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right = (2 * i + 2 == n) or (arr[i] <= arr[2 * i + 2] and check_min_heap(arr, 2 * i + 2))\n    return left and right",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7505": {
    "question_id": "mbpp/750",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_min_heap(arr, i):\n    n = len(arr)\n    if 2 * i + 2 > n:\n        return True\n    left = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right = (2 * i + 2 == n) or (arr[i] <= arr[2 * i + 2] and check_min_heap(arr, 2 * i + 2))\n    return left and right",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7506": {
    "question_id": "mbpp/750",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_min_heap(arr, i):\n    n = len(arr)\n    if 2 * i + 2 > n:\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1) if 2 * i + 1 < n else True\n    right_child = (arr[i] <= arr[2 * i + 2]) and check_min_heap(arr, 2 * i + 2) if 2 * i + 2 < n else True\n    return left_child and right_child",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7507": {
    "question_id": "mbpp/750",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_min_heap(arr, i):\n    n = len(arr)\n    if 2 * i + 1 >= n:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2 if 2 * i + 2 < n else None\n    if right is not None:\n        if arr[i] > arr[left] or arr[i] > arr[right]:\n            return False\n    else:\n        if arr[i] > arr[left]:\n            return False\n    return check_min_heap(arr, left) and (check_min_heap(arr, right) if right is not None else True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7508": {
    "question_id": "mbpp/750",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_min_heap(arr, i):\n    n = len(arr)\n    if 2 * i + 2 > n:\n        return True\n    left = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right = (2 * i + 2 == n) or (arr[i] <= arr[2 * i + 2] and check_min_heap(arr, 2 * i + 2))\n    return left and right",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7509": {
    "question_id": "mbpp/750",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_min_heap(arr, i):\n    n = len(arr)\n    if 2 * i + 2 > n:\n        return True\n    left_child = (2 * i + 1) < n and arr[i] <= arr[2 * i + 1]\n    right_child = (2 * i + 2) < n and arr[i] <= arr[2 * i + 2]\n    return left_child and right_child and check_min_heap(arr, 2 * i + 1) and check_min_heap(arr, 2 * i + 2)",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "7510": {
    "question_id": "mbpp/751",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7511": {
    "question_id": "mbpp/751",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7512": {
    "question_id": "mbpp/751",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            c = a + 2 * b\n            a, b = b, c\n        return b",
    "test_output": "FAILED: expect 11,in fact 29",
    "test_result": "False"
  },
  "7513": {
    "question_id": "mbpp/751",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7514": {
    "question_id": "mbpp/751",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7515": {
    "question_id": "mbpp/751",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7516": {
    "question_id": "mbpp/751",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7517": {
    "question_id": "mbpp/751",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7518": {
    "question_id": "mbpp/751",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7519": {
    "question_id": "mbpp/751",
    "model": "deepseek-v3-250324",
    "generation_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7520": {
    "question_id": "mbpp/752",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_k(tuple_list, k):\n    if not tuple_list or k <= 0:\n        return []\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7521": {
    "question_id": "mbpp/752",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_k(tuple_list, k):\n    if not tuple_list or k <= 0:\n        return []\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7522": {
    "question_id": "mbpp/752",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_k(tuple_list, k):\n    if not tuple_list or k <= 0:\n        return []\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7523": {
    "question_id": "mbpp/752",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_k(tuple_list, k):\n    if not tuple_list or k <= 0:\n        return []\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7524": {
    "question_id": "mbpp/752",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_k(tuple_list, k):\n    if not tuple_list or k <= 0:\n        return []\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7525": {
    "question_id": "mbpp/752",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_k(tuple_list, k):\n    if not tuple_list or k <= 0:\n        return []\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7526": {
    "question_id": "mbpp/752",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_k(tuple_list, k):\n    if not tuple_list or k <= 0:\n        return []\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7527": {
    "question_id": "mbpp/752",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_k(tuple_list, k):\n    if not tuple_list or k <= 0:\n        return []\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7528": {
    "question_id": "mbpp/752",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_k(tuple_list, k):\n    if not tuple_list or k <= 0:\n        return []\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7529": {
    "question_id": "mbpp/752",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_k(tuple_list, k):\n    if not tuple_list or k <= 0:\n        return []\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7530": {
    "question_id": "mbpp/753",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_index_list(list1, list2, list3):\n    min_length = min(len(list1), len(list2), len(list3))\n    result = []\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7531": {
    "question_id": "mbpp/753",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_index_list(list1, list2, list3):\n    min_length = min(len(list1), len(list2), len(list3))\n    result = []\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7532": {
    "question_id": "mbpp/753",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_index_list(list1, list2, list3):\n    min_length = min(len(list1), len(list2), len(list3))\n    result = []\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7533": {
    "question_id": "mbpp/753",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_index_list(list1, list2, list3):\n    min_length = min(len(list1), len(list2), len(list3))\n    result = []\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7534": {
    "question_id": "mbpp/753",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_index_list(list1, list2, list3):\n    min_len = min(len(list1), len(list2), len(list3))\n    result = []\n    for i in range(min_len):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7535": {
    "question_id": "mbpp/753",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_index_list(list1, list2, list3):\n    min_length = min(len(list1), len(list2), len(list3))\n    result = []\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7536": {
    "question_id": "mbpp/753",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_index_list(list1, list2, list3):\n    min_length = min(len(list1), len(list2), len(list3))\n    result = []\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7537": {
    "question_id": "mbpp/753",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_index_list(list1, list2, list3):\n    min_length = min(len(list1), len(list2), len(list3))\n    result = []\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7538": {
    "question_id": "mbpp/753",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_index_list(list1, list2, list3):\n    min_length = min(len(list1), len(list2), len(list3))\n    result = []\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7539": {
    "question_id": "mbpp/753",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_index_list(list1, list2, list3):\n    min_length = min(len(list1), len(list2), len(list3))\n    result = []\n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7540": {
    "question_id": "mbpp/754",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(list(set(lst)))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7541": {
    "question_id": "mbpp/754",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(list(set(lst)))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7542": {
    "question_id": "mbpp/754",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7543": {
    "question_id": "mbpp/754",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7544": {
    "question_id": "mbpp/754",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(list(set(lst)))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7545": {
    "question_id": "mbpp/754",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7546": {
    "question_id": "mbpp/754",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7547": {
    "question_id": "mbpp/754",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7548": {
    "question_id": "mbpp/754",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(list(set(lst)))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7549": {
    "question_id": "mbpp/754",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7550": {
    "question_id": "mbpp/755",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab?', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7551": {
    "question_id": "mbpp/755",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab?', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7552": {
    "question_id": "mbpp/755",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab?', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7553": {
    "question_id": "mbpp/755",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab?', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7554": {
    "question_id": "mbpp/755",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab?', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7555": {
    "question_id": "mbpp/755",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab?', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7556": {
    "question_id": "mbpp/755",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab?', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7557": {
    "question_id": "mbpp/755",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab?', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7558": {
    "question_id": "mbpp/755",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab?', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7559": {
    "question_id": "mbpp/755",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab?', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7560": {
    "question_id": "mbpp/756",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i + 1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return str(count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7561": {
    "question_id": "mbpp/756",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return str(count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7562": {
    "question_id": "mbpp/756",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return str(count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7563": {
    "question_id": "mbpp/756",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return str(count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7564": {
    "question_id": "mbpp/756",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return str(count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7565": {
    "question_id": "mbpp/756",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return str(count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7566": {
    "question_id": "mbpp/756",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return str(count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7567": {
    "question_id": "mbpp/756",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return str(count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7568": {
    "question_id": "mbpp/756",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return str(count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7569": {
    "question_id": "mbpp/756",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return str(count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7570": {
    "question_id": "mbpp/757",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(input_list):\n    count_dict = {}\n    for sublist in input_list:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7571": {
    "question_id": "mbpp/757",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(input_list):\n    count_dict = {}\n    for sublist in input_list:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7572": {
    "question_id": "mbpp/757",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(input_list):\n    count_dict = {}\n    for sublist in input_list:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7573": {
    "question_id": "mbpp/757",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(input_list):\n    count_dict = {}\n    for sublist in input_list:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7574": {
    "question_id": "mbpp/757",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(input_list):\n    count_dict = {}\n    for sublist in input_list:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7575": {
    "question_id": "mbpp/757",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(input_list):\n    count_dict = {}\n    for sublist in input_list:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7576": {
    "question_id": "mbpp/757",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(input_list):\n    count_dict = {}\n    for sublist in input_list:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7577": {
    "question_id": "mbpp/757",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(input_list):\n    count_dict = {}\n    for sublist in input_list:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7578": {
    "question_id": "mbpp/757",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(input_list):\n    count_dict = {}\n    for sublist in input_list:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7579": {
    "question_id": "mbpp/757",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(input_list):\n    count_dict = {}\n    for sublist in input_list:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7580": {
    "question_id": "mbpp/758",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_decimal(s):\n    try:\n        parts = s.split('.')\n        if len(parts) != 2:\n            return False\n        integer_part, fractional_part = parts\n        if not integer_part.isdigit() or not fractional_part.isdigit():\n            return False\n        if len(fractional_part) != 2:\n            return False\n        return True\n    except:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7581": {
    "question_id": "mbpp/758",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_decimal(s):\n    if not s:\n        return False\n    parts = s.split('.')\n    if len(parts) != 2:\n        return False\n    integer_part, fractional_part = parts\n    if not integer_part.isdigit() or not fractional_part.isdigit():\n        return False\n    if len(fractional_part) != 2:\n        return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7582": {
    "question_id": "mbpp/758",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_decimal(s):\n    try:\n        float_num = float(s)\n        if '.' in s:\n            parts = s.split('.')\n            if len(parts) == 2 and len(parts[1]) == 2:\n                return True\n        return False\n    except ValueError:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7583": {
    "question_id": "mbpp/758",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_decimal(s):\n    try:\n        float_num = float(s)\n        parts = s.split('.')\n        if len(parts) == 2:\n            if len(parts[1]) == 2:\n                return True\n        return False\n    except ValueError:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7584": {
    "question_id": "mbpp/758",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_decimal(s):\n    try:\n        parts = s.split('.')\n        if len(parts) != 2:\n            return False\n        if not parts[0].isdigit() or not parts[1].isdigit():\n            return False\n        if len(parts[1]) != 2:\n            return False\n        return True\n    except:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7585": {
    "question_id": "mbpp/758",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_decimal(s):\n    try:\n        parts = s.split('.')\n        if len(parts) != 2:\n            return False\n        if not parts[0].isdigit() or not parts[1].isdigit():\n            return False\n        if len(parts[1]) != 2:\n            return False\n        return True\n    except:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7586": {
    "question_id": "mbpp/758",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_decimal(s):\n    try:\n        float_val = float(s)\n        parts = s.split('.')\n        if len(parts) == 2:\n            return len(parts[1]) == 2\n        elif len(parts) == 1:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7587": {
    "question_id": "mbpp/758",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_decimal(s):\n    try:\n        parts = s.split('.')\n        if len(parts) != 2:\n            return False\n        integer_part, fractional_part = parts\n        if not integer_part.isdigit() or not fractional_part.isdigit():\n            return False\n        if len(fractional_part) != 2:\n            return False\n        return True\n    except:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7588": {
    "question_id": "mbpp/758",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_decimal(s):\n    try:\n        parts = s.split('.')\n        if len(parts) != 2:\n            return False\n        integer_part, decimal_part = parts\n        if not integer_part.isdigit() or not decimal_part.isdigit():\n            return False\n        if len(decimal_part) != 2:\n            return False\n        return True\n    except:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7589": {
    "question_id": "mbpp/758",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_decimal(s):\n    try:\n        parts = s.split('.')\n        if len(parts) != 2:\n            return False\n        integer_part, decimal_part = parts\n        if not integer_part.isdigit() or not decimal_part.isdigit():\n            return False\n        if len(decimal_part) != 2:\n            return False\n        return True\n    except:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7590": {
    "question_id": "mbpp/759",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Element(arr, n):\n    if len(arr) == 0:\n        return 'NO'\n    first_element = arr[0]\n    for element in arr:\n        if element != first_element:\n            return 'NO'\n    return 'YES'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7591": {
    "question_id": "mbpp/759",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Element(arr, n):\n    if len(arr) == 0:\n        return 'NO'\n    first_element = arr[0]\n    for element in arr:\n        if element != first_element:\n            return 'NO'\n    return 'YES'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7592": {
    "question_id": "mbpp/759",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Element(arr, n):\n    if n == 0:\n        return 'NO'\n    first_element = arr[0]\n    for element in arr:\n        if element != first_element:\n            return 'NO'\n    return 'YES'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7593": {
    "question_id": "mbpp/759",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Element(arr, n):\n    if len(arr) == 0:\n        return 'NO'\n    first_element = arr[0]\n    for element in arr:\n        if element != first_element:\n            return 'NO'\n    return 'YES'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7594": {
    "question_id": "mbpp/759",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Element(arr, n):\n    if len(arr) == 0:\n        return 'NO'\n    first_element = arr[0]\n    for element in arr:\n        if element != first_element:\n            return 'NO'\n    return 'YES'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7595": {
    "question_id": "mbpp/759",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Element(arr, n):\n    if len(arr) == 0:\n        return 'NO'\n    first_element = arr[0]\n    for element in arr:\n        if element != first_element:\n            return 'NO'\n    return 'YES'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7596": {
    "question_id": "mbpp/759",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Element(arr, n):\n    if len(arr) == 0:\n        return 'NO'\n    first_element = arr[0]\n    for element in arr:\n        if element != first_element:\n            return 'NO'\n    return 'YES'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7597": {
    "question_id": "mbpp/759",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Element(arr, n):\n    if len(arr) == 0:\n        return 'NO'\n    first_element = arr[0]\n    for element in arr:\n        if element != first_element:\n            return 'NO'\n    return 'YES'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7598": {
    "question_id": "mbpp/759",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Element(arr, n):\n    if len(arr) == 0:\n        return 'NO'\n    first_element = arr[0]\n    for element in arr:\n        if element != first_element:\n            return 'NO'\n    return 'YES'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7599": {
    "question_id": "mbpp/759",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_Element(arr, n):\n    if len(arr) == 0:\n        return 'NO'\n    first_element = arr[0]\n    for element in arr:\n        if element != first_element:\n            return 'NO'\n    return 'YES'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7600": {
    "question_id": "mbpp/760",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef arc_length(radius, angle):\n    return (2 * math.pi * radius) * (angle / 360)",
    "test_output": "FAILED: expect 3.5357142857142856,in fact 7.0685834705770345",
    "test_result": "False"
  },
  "7601": {
    "question_id": "mbpp/760",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef arc_length(radius, angle):\n    return (angle / 360) * 2 * math.pi * radius",
    "test_output": "FAILED: expect 3.5357142857142856,in fact 7.0685834705770345",
    "test_result": "False"
  },
  "7602": {
    "question_id": "mbpp/760",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef arc_length(radius, angle):\n    return (angle * math.pi * radius) / 180",
    "test_output": "FAILED: expect 3.5357142857142856,in fact 7.068583470577035",
    "test_result": "False"
  },
  "7603": {
    "question_id": "mbpp/760",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef arc_length(radius, angle):\n    return (2 * math.pi * radius) * (angle / 360)",
    "test_output": "FAILED: expect 3.5357142857142856,in fact 7.0685834705770345",
    "test_result": "False"
  },
  "7604": {
    "question_id": "mbpp/760",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef arc_length(radius, angle):\n    return (2 * math.pi * radius * angle) / 360",
    "test_output": "FAILED: expect 3.5357142857142856,in fact 7.068583470577034",
    "test_result": "False"
  },
  "7605": {
    "question_id": "mbpp/760",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef arc_length(radius, angle):\n    return (2 * math.pi * radius) * (angle / 360)",
    "test_output": "FAILED: expect 3.5357142857142856,in fact 7.0685834705770345",
    "test_result": "False"
  },
  "7606": {
    "question_id": "mbpp/760",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef arc_length(radius, angle):\n    return (angle / 360) * 2 * math.pi * radius",
    "test_output": "FAILED: expect 3.5357142857142856,in fact 7.0685834705770345",
    "test_result": "False"
  },
  "7607": {
    "question_id": "mbpp/760",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef arc_length(radius, angle):\n    return (angle * math.pi * radius) / 180",
    "test_output": "FAILED: expect 3.5357142857142856,in fact 7.068583470577035",
    "test_result": "False"
  },
  "7608": {
    "question_id": "mbpp/760",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef arc_length(radius, angle):\n    return (angle / 360) * 2 * math.pi * radius",
    "test_output": "FAILED: expect 3.5357142857142856,in fact 7.0685834705770345",
    "test_result": "False"
  },
  "7609": {
    "question_id": "mbpp/760",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef arc_length(radius, angle):\n    return (angle / 360) * 2 * math.pi * radius",
    "test_output": "FAILED: expect 3.5357142857142856,in fact 7.0685834705770345",
    "test_result": "False"
  },
  "7610": {
    "question_id": "mbpp/761",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber_number(month):\n    thirty_day_months = [4, 6, 9, 11]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7611": {
    "question_id": "mbpp/761",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber_number(month):\n    thirty_day_months = [4, 6, 9, 11]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7612": {
    "question_id": "mbpp/761",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber_number(month):\n    thirty_day_months = [4, 6, 9, 11]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7613": {
    "question_id": "mbpp/761",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber_number(month):\n    thirty_day_months = [4, 6, 9, 11]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7614": {
    "question_id": "mbpp/761",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber_number(month):\n    thirty_day_months = [4, 6, 9, 11]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7615": {
    "question_id": "mbpp/761",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber_number(month):\n    thirty_day_months = [4, 6, 9, 11]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7616": {
    "question_id": "mbpp/761",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber_number(month):\n    thirty_day_months = [4, 6, 9, 11]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7617": {
    "question_id": "mbpp/761",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber_number(month):\n    thirty_day_months = [4, 6, 9, 11]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7618": {
    "question_id": "mbpp/761",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber_number(month):\n    thirty_day_months = [4, 6, 9, 11]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7619": {
    "question_id": "mbpp/761",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumber_number(month):\n    thirty_day_months = [4, 6, 9, 11]\n    return month in thirty_day_months",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7620": {
    "question_id": "mbpp/762",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Diff(arr, n):\n    if n < 2:\n        return 0\n    arr_sorted = sorted(arr)\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr_sorted[i+1] - arr_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7621": {
    "question_id": "mbpp/762",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Diff(arr, n):\n    if n <= 1:\n        return 0\n    \n    arr_sorted = sorted(arr)\n    min_diff = float('inf')\n    \n    for i in range(1, n):\n        diff = arr_sorted[i] - arr_sorted[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7622": {
    "question_id": "mbpp/762",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Diff(arr, n):\n    if n <= 1:\n        return 0\n    arr_sorted = sorted(arr)\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr_sorted[i+1] - arr_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7623": {
    "question_id": "mbpp/762",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Diff(arr, n):\n    if n <= 1:\n        return 0\n    arr_sorted = sorted(arr)\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr_sorted[i+1] - arr_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7624": {
    "question_id": "mbpp/762",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Diff(arr, n):\n    if n <= 1:\n        return 0\n    \n    arr_sorted = sorted(arr)\n    min_diff = float('inf')\n    \n    for i in range(1, n):\n        diff = arr_sorted[i] - arr_sorted[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7625": {
    "question_id": "mbpp/762",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Diff(arr, n):\n    if n <= 1:\n        return 0\n    arr_sorted = sorted(arr)\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr_sorted[i+1] - arr_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7626": {
    "question_id": "mbpp/762",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Diff(arr, n):\n    if n < 2:\n        return 0\n    arr_sorted = sorted(arr)\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr_sorted[i+1] - arr_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7627": {
    "question_id": "mbpp/762",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Diff(arr, n):\n    if n < 2:\n        return 0\n    arr_sorted = sorted(arr)\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr_sorted[i+1] - arr_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7628": {
    "question_id": "mbpp/762",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Diff(arr, n):\n    if n <= 1:\n        return 0\n    arr_sorted = sorted(arr)\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr_sorted[i+1] - arr_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7629": {
    "question_id": "mbpp/762",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Diff(arr, n):\n    if n <= 1:\n        return 0\n    arr_sorted = sorted(arr)\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr_sorted[i+1] - arr_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7630": {
    "question_id": "mbpp/763",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7631": {
    "question_id": "mbpp/763",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7632": {
    "question_id": "mbpp/763",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7633": {
    "question_id": "mbpp/763",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7634": {
    "question_id": "mbpp/763",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7635": {
    "question_id": "mbpp/763",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7636": {
    "question_id": "mbpp/763",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7637": {
    "question_id": "mbpp/763",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7638": {
    "question_id": "mbpp/763",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7639": {
    "question_id": "mbpp/763",
    "model": "deepseek-v3-250324",
    "generation_code": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7640": {
    "question_id": "mbpp/764",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_polite(n):\n    return n * (n + 1) // 2 + 1",
    "test_output": "FAILED: expect 11,in fact 29",
    "test_result": "False"
  },
  "7641": {
    "question_id": "mbpp/764",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_polite(n):\n    if n == 0:\n        return 0\n    k = 1\n    count = 0\n    while True:\n        m = k + 1\n        if (k & m) == 0:\n            count += 1\n            if count == n:\n                return m\n        k += 1",
    "test_output": "FAILED: expect 11,in fact 128",
    "test_result": "False"
  },
  "7642": {
    "question_id": "mbpp/764",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_polite(n):\n    return n * (n + 1) // 2 + 1",
    "test_output": "FAILED: expect 11,in fact 29",
    "test_result": "False"
  },
  "7643": {
    "question_id": "mbpp/764",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_polite(n):\n    if n == 0:\n        return 0\n    return n + (n + 1)",
    "test_output": "FAILED: expect 11,in fact 15",
    "test_result": "False"
  },
  "7644": {
    "question_id": "mbpp/764",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_polite(n):\n    return n * (n + 1) // 2 + 1",
    "test_output": "FAILED: expect 11,in fact 29",
    "test_result": "False"
  },
  "7645": {
    "question_id": "mbpp/764",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_polite(n):\n    if n == 0:\n        return 0\n    return n + (n + 1)",
    "test_output": "FAILED: expect 11,in fact 15",
    "test_result": "False"
  },
  "7646": {
    "question_id": "mbpp/764",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_polite(n):\n    return n * (n + 1) // 2 + 1",
    "test_output": "FAILED: expect 11,in fact 29",
    "test_result": "False"
  },
  "7647": {
    "question_id": "mbpp/764",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_polite(n):\n    if n == 0:\n        return 0\n    return n + (n + 1)",
    "test_output": "FAILED: expect 11,in fact 15",
    "test_result": "False"
  },
  "7648": {
    "question_id": "mbpp/764",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_polite(n):\n    if n == 0:\n        return 0\n    return n + (n + 1) // 2",
    "test_output": "FAILED: expect 7,in fact 6",
    "test_result": "False"
  },
  "7649": {
    "question_id": "mbpp/764",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_polite(n):\n    return n * (n + 1) // 2 + 1",
    "test_output": "FAILED: expect 11,in fact 29",
    "test_result": "False"
  },
  "7650": {
    "question_id": "mbpp/765",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7651": {
    "question_id": "mbpp/765",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7652": {
    "question_id": "mbpp/765",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7653": {
    "question_id": "mbpp/765",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7654": {
    "question_id": "mbpp/765",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7655": {
    "question_id": "mbpp/765",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7656": {
    "question_id": "mbpp/765",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7657": {
    "question_id": "mbpp/765",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7658": {
    "question_id": "mbpp/765",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7659": {
    "question_id": "mbpp/765",
    "model": "deepseek-v3-250324",
    "generation_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7660": {
    "question_id": "mbpp/766",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7661": {
    "question_id": "mbpp/766",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7662": {
    "question_id": "mbpp/766",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7663": {
    "question_id": "mbpp/766",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7664": {
    "question_id": "mbpp/766",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7665": {
    "question_id": "mbpp/766",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7666": {
    "question_id": "mbpp/766",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7667": {
    "question_id": "mbpp/766",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7668": {
    "question_id": "mbpp/766",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7669": {
    "question_id": "mbpp/766",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7670": {
    "question_id": "mbpp/767",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Odd_Parity(num):\n    if num == 0:\n        return False\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count % 2 == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7671": {
    "question_id": "mbpp/767",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Odd_Parity(num):\n    if num == 0:\n        return False\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count % 2 == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7672": {
    "question_id": "mbpp/767",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Odd_Parity(num):\n    if num == 0:\n        return False\n    parity = 0\n    while num:\n        parity ^= num & 1\n        num >>= 1\n    return parity == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7673": {
    "question_id": "mbpp/767",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Odd_Parity(num):\n    if num == 0:\n        return False\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count % 2 == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7674": {
    "question_id": "mbpp/767",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Odd_Parity(num):\n    if num == 0:\n        return False\n    parity = 0\n    while num:\n        parity ^= 1\n        num &= num - 1\n    return parity == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7675": {
    "question_id": "mbpp/767",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Odd_Parity(num):\n    if num == 0:\n        return False\n    parity = 0\n    while num:\n        parity ^= num & 1\n        num >>= 1\n    return parity == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7676": {
    "question_id": "mbpp/767",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Odd_Parity(num):\n    parity = 0\n    while num:\n        parity ^= num & 1\n        num >>= 1\n    return parity == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7677": {
    "question_id": "mbpp/767",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Odd_Parity(num):\n    if num == 0:\n        return False\n    parity = 0\n    while num:\n        parity ^= 1\n        num &= num - 1\n    return parity == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7678": {
    "question_id": "mbpp/767",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Odd_Parity(num):\n    if not isinstance(num, int):\n        return False\n    count = bin(num).count('1')\n    return count % 2 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7679": {
    "question_id": "mbpp/767",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Odd_Parity(num):\n    if num == 0:\n        return False\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count % 2 == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7680": {
    "question_id": "mbpp/768",
    "model": "deepseek-v3-250324",
    "generation_code": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]",
    "test_output": "FAILED: expect [10, 20, 30, 15],in fact [10, 15, 20, 30]",
    "test_result": "False"
  },
  "7681": {
    "question_id": "mbpp/768",
    "model": "deepseek-v3-250324",
    "generation_code": "def Diff(list1, list2):\n    diff = []\n    for item in list1:\n        if item not in list2:\n            diff.append(item)\n    return diff",
    "test_output": "FAILED: expect [10, 20, 30, 15],in fact [10, 15, 20, 30]",
    "test_result": "False"
  },
  "7682": {
    "question_id": "mbpp/768",
    "model": "deepseek-v3-250324",
    "generation_code": "def Diff(li1, li2):\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]",
    "test_output": "FAILED: expect [10, 20, 30, 15],in fact [10, 15, 20, 30]",
    "test_result": "False"
  },
  "7683": {
    "question_id": "mbpp/768",
    "model": "deepseek-v3-250324",
    "generation_code": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]",
    "test_output": "FAILED: expect [10, 20, 30, 15],in fact [10, 15, 20, 30]",
    "test_result": "False"
  },
  "7684": {
    "question_id": "mbpp/768",
    "model": "deepseek-v3-250324",
    "generation_code": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2] + [item for item in list2 if item not in list1]",
    "test_output": "FAILED: expect [10, 20, 30, 15],in fact [10, 15, 20, 30]",
    "test_result": "False"
  },
  "7685": {
    "question_id": "mbpp/768",
    "model": "deepseek-v3-250324",
    "generation_code": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2] + [item for item in list2 if item not in list1]",
    "test_output": "FAILED: expect [10, 20, 30, 15],in fact [10, 15, 20, 30]",
    "test_result": "False"
  },
  "7686": {
    "question_id": "mbpp/768",
    "model": "deepseek-v3-250324",
    "generation_code": "def Diff(li1, li2):\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]",
    "test_output": "FAILED: expect [10, 20, 30, 15],in fact [10, 15, 20, 30]",
    "test_result": "False"
  },
  "7687": {
    "question_id": "mbpp/768",
    "model": "deepseek-v3-250324",
    "generation_code": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]",
    "test_output": "FAILED: expect [10, 20, 30, 15],in fact [10, 15, 20, 30]",
    "test_result": "False"
  },
  "7688": {
    "question_id": "mbpp/768",
    "model": "deepseek-v3-250324",
    "generation_code": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]",
    "test_output": "FAILED: expect [10, 20, 30, 15],in fact [10, 15, 20, 30]",
    "test_result": "False"
  },
  "7689": {
    "question_id": "mbpp/768",
    "model": "deepseek-v3-250324",
    "generation_code": "def Diff(li1, li2):\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]",
    "test_output": "FAILED: expect [10, 20, 30, 15],in fact [10, 15, 20, 30]",
    "test_result": "False"
  },
  "7690": {
    "question_id": "mbpp/769",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i ** 4\n    return sum",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7691": {
    "question_id": "mbpp/769",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    if n <= 0:\n        return 0\n    sum_power = 0\n    for i in range(1, 2*n, 2):\n        sum_power += i ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7692": {
    "question_id": "mbpp/769",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    if n <= 0:\n        return 0\n    sum_power = 0\n    for i in range(1, n + 1):\n        odd_num = 2 * i - 1\n        sum_power += odd_num ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7693": {
    "question_id": "mbpp/769",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    if n <= 0:\n        return 0\n    sum_power = 0\n    for i in range(1, 2*n, 2):\n        sum_power += i ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7694": {
    "question_id": "mbpp/769",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    sum_power = 0\n    for i in range(1, 2*n, 2):\n        sum_power += i ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7695": {
    "question_id": "mbpp/769",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    sum_power = 0\n    for i in range(1, 2*n, 2):\n        sum_power += i ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7696": {
    "question_id": "mbpp/769",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    sum_power = 0\n    for i in range(1, 2*n, 2):\n        sum_power += i ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7697": {
    "question_id": "mbpp/769",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    if n <= 0:\n        return 0\n    sum_power = 0\n    for i in range(1, 2*n, 2):\n        sum_power += i ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7698": {
    "question_id": "mbpp/769",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    sum_power = 0\n    for i in range(1, 2*n, 2):\n        sum_power += i ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7699": {
    "question_id": "mbpp/769",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_Num_Sum(n):\n    sum_power = 0\n    for i in range(1, 2*n, 2):\n        sum_power += i ** 4\n    return sum_power",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7700": {
    "question_id": "mbpp/770",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_expression(expr):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expr:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7701": {
    "question_id": "mbpp/770",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_expression(expression):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7702": {
    "question_id": "mbpp/770",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_expression(expr):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expr:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7703": {
    "question_id": "mbpp/770",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_expression(expression):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7704": {
    "question_id": "mbpp/770",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_expression(expr):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expr:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7705": {
    "question_id": "mbpp/770",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_expression(expr):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expr:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7706": {
    "question_id": "mbpp/770",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_expression(expr):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expr:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7707": {
    "question_id": "mbpp/770",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_expression(expr):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expr:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7708": {
    "question_id": "mbpp/770",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_expression(expression):\n    stack = []\n    brackets = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in brackets.values():\n            stack.append(char)\n        elif char in brackets.keys():\n            if not stack or stack.pop() != brackets[char]:\n                return False\n    return not stack",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7709": {
    "question_id": "mbpp/770",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_expression(expr):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expr:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return len(stack) == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7710": {
    "question_id": "mbpp/771",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7711": {
    "question_id": "mbpp/771",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7712": {
    "question_id": "mbpp/771",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7713": {
    "question_id": "mbpp/771",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7714": {
    "question_id": "mbpp/771",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7715": {
    "question_id": "mbpp/771",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7716": {
    "question_id": "mbpp/771",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7717": {
    "question_id": "mbpp/771",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7718": {
    "question_id": "mbpp/771",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7719": {
    "question_id": "mbpp/771",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7720": {
    "question_id": "mbpp/772",
    "model": "deepseek-v3-250324",
    "generation_code": "def occurance_substring(text, pattern):\n    if not pattern:\n        return None\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (pattern, index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7721": {
    "question_id": "mbpp/772",
    "model": "deepseek-v3-250324",
    "generation_code": "def occurance_substring(text, pattern):\n    if not pattern:\n        return None\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7722": {
    "question_id": "mbpp/772",
    "model": "deepseek-v3-250324",
    "generation_code": "def occurance_substring(text, pattern):\n    if not pattern:\n        return None\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7723": {
    "question_id": "mbpp/772",
    "model": "deepseek-v3-250324",
    "generation_code": "def occurance_substring(text, pattern):\n    if not pattern:\n        return None\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7724": {
    "question_id": "mbpp/772",
    "model": "deepseek-v3-250324",
    "generation_code": "def occurance_substring(text, pattern):\n    if not pattern:\n        return None\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7725": {
    "question_id": "mbpp/772",
    "model": "deepseek-v3-250324",
    "generation_code": "def occurance_substring(text, pattern):\n    if not pattern:\n        return None\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (pattern, index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7726": {
    "question_id": "mbpp/772",
    "model": "deepseek-v3-250324",
    "generation_code": "def occurance_substring(text, pattern):\n    if not pattern:\n        return None\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (pattern, index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7727": {
    "question_id": "mbpp/772",
    "model": "deepseek-v3-250324",
    "generation_code": "def occurance_substring(text, pattern):\n    if not pattern:\n        return None\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7728": {
    "question_id": "mbpp/772",
    "model": "deepseek-v3-250324",
    "generation_code": "def occurance_substring(text, pattern):\n    if not pattern:\n        return None\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (pattern, index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7729": {
    "question_id": "mbpp/772",
    "model": "deepseek-v3-250324",
    "generation_code": "def occurance_substring(text, pattern):\n    if not pattern:\n        return None\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (pattern, index, index + len(pattern))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7730": {
    "question_id": "mbpp/773",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.fullmatch(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7731": {
    "question_id": "mbpp/773",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_email(email):\n    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7732": {
    "question_id": "mbpp/773",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7733": {
    "question_id": "mbpp/773",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.fullmatch(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7734": {
    "question_id": "mbpp/773",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.fullmatch(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7735": {
    "question_id": "mbpp/773",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.fullmatch(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7736": {
    "question_id": "mbpp/773",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.fullmatch(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7737": {
    "question_id": "mbpp/773",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.fullmatch(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7738": {
    "question_id": "mbpp/773",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_email(email):\n    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7739": {
    "question_id": "mbpp/773",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.fullmatch(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7740": {
    "question_id": "mbpp/774",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7741": {
    "question_id": "mbpp/774",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7742": {
    "question_id": "mbpp/774",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7743": {
    "question_id": "mbpp/774",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7744": {
    "question_id": "mbpp/774",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7745": {
    "question_id": "mbpp/774",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7746": {
    "question_id": "mbpp/774",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7747": {
    "question_id": "mbpp/774",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7748": {
    "question_id": "mbpp/774",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7749": {
    "question_id": "mbpp/774",
    "model": "deepseek-v3-250324",
    "generation_code": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7750": {
    "question_id": "mbpp/775",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_vowels(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(s)):\n        left = i > 0 and s[i-1] in vowels\n        right = i < len(s)-1 and s[i+1] in vowels\n        if left or right:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 7,in fact 9",
    "test_result": "False"
  },
  "7751": {
    "question_id": "mbpp/775",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_vowels(s):\n    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(s)):\n        left = s[i-1] if i > 0 else None\n        right = s[i+1] if i < len(s)-1 else None\n        if (left in vowels) or (right in vowels):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 7,in fact 9",
    "test_result": "False"
  },
  "7752": {
    "question_id": "mbpp/775",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_vowels(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(s)):\n        left = s[i-1] if i > 0 else None\n        right = s[i+1] if i < len(s)-1 else None\n        if (left in vowels) or (right in vowels):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 7,in fact 9",
    "test_result": "False"
  },
  "7753": {
    "question_id": "mbpp/775",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_vowels(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(s)):\n        left = i > 0 and s[i-1] in vowels\n        right = i < len(s)-1 and s[i+1] in vowels\n        if left or right:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 7,in fact 9",
    "test_result": "False"
  },
  "7754": {
    "question_id": "mbpp/775",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_vowels(s):\n    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(s)):\n        left = s[i-1] if i > 0 else None\n        right = s[i+1] if i < len(s)-1 else None\n        if (left in vowels) or (right in vowels):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 7,in fact 9",
    "test_result": "False"
  },
  "7755": {
    "question_id": "mbpp/775",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_vowels(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(s)):\n        left = i > 0 and s[i-1] in vowels\n        right = i < len(s)-1 and s[i+1] in vowels\n        if left or right:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 7,in fact 9",
    "test_result": "False"
  },
  "7756": {
    "question_id": "mbpp/775",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_vowels(s):\n    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(s)):\n        left = i > 0 and s[i-1] in vowels\n        right = i < len(s)-1 and s[i+1] in vowels\n        if left or right:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 7,in fact 9",
    "test_result": "False"
  },
  "7757": {
    "question_id": "mbpp/775",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_vowels(s):\n    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(s)):\n        left = i > 0 and s[i-1] in vowels\n        right = i < len(s)-1 and s[i+1] in vowels\n        if left or right:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 7,in fact 9",
    "test_result": "False"
  },
  "7758": {
    "question_id": "mbpp/775",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_vowels(s):\n    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(s)):\n        left = s[i-1] if i > 0 else None\n        right = s[i+1] if i < len(s)-1 else None\n        if (left in vowels) or (right in vowels):\n            count += 1\n    return count",
    "test_output": "FAILED: expect 7,in fact 9",
    "test_result": "False"
  },
  "7759": {
    "question_id": "mbpp/775",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_vowels(s):\n    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(s)):\n        left = i > 0 and s[i-1] in vowels\n        right = i < len(s)-1 and s[i+1] in vowels\n        if left or right:\n            count += 1\n    return count",
    "test_output": "FAILED: expect 7,in fact 9",
    "test_result": "False"
  },
  "7760": {
    "question_id": "mbpp/776",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    unique_elements = []\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            unique_elements.append(num)\n    return sum(unique_elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7761": {
    "question_id": "mbpp/776",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    unique_elements = []\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            unique_elements.append(num)\n        elif num in unique_elements:\n            unique_elements.remove(num)\n    return sum(unique_elements)",
    "test_output": "FAILED: expect 21,in fact 20",
    "test_result": "False"
  },
  "7762": {
    "question_id": "mbpp/776",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    unique_elements = []\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            unique_elements.append(num)\n    return sum(unique_elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7763": {
    "question_id": "mbpp/776",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    unique_elements = []\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            unique_elements.append(num)\n        elif num in unique_elements:\n            unique_elements.remove(num)\n    return sum(unique_elements)",
    "test_output": "FAILED: expect 21,in fact 20",
    "test_result": "False"
  },
  "7764": {
    "question_id": "mbpp/776",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    unique_elements = []\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            unique_elements.append(num)\n    return sum(unique_elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7765": {
    "question_id": "mbpp/776",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    unique_elements = []\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            unique_elements.append(num)\n        elif num in seen:\n            if num in unique_elements:\n                unique_elements.remove(num)\n    return sum(unique_elements)",
    "test_output": "FAILED: expect 21,in fact 20",
    "test_result": "False"
  },
  "7766": {
    "question_id": "mbpp/776",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    unique_elements = []\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            unique_elements.append(num)\n        elif num in seen:\n            if num in unique_elements:\n                unique_elements.remove(num)\n    return sum(unique_elements)",
    "test_output": "FAILED: expect 21,in fact 20",
    "test_result": "False"
  },
  "7767": {
    "question_id": "mbpp/776",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    unique_elements = []\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            unique_elements.append(num)\n    return sum(unique_elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7768": {
    "question_id": "mbpp/776",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    unique_elements = []\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            unique_elements.append(num)\n        elif num in seen:\n            if num in unique_elements:\n                unique_elements.remove(num)\n    return sum(unique_elements)",
    "test_output": "FAILED: expect 21,in fact 20",
    "test_result": "False"
  },
  "7769": {
    "question_id": "mbpp/776",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Sum(arr, n):\n    unique_elements = []\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            unique_elements.append(num)\n        elif num in seen:\n            if num in unique_elements:\n                unique_elements.remove(num)\n    return sum(unique_elements)",
    "test_output": "FAILED: expect 21,in fact 20",
    "test_result": "False"
  },
  "7770": {
    "question_id": "mbpp/777",
    "model": "deepseek-v3-250324",
    "generation_code": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = []\n    current = [lst[0]]\n    for item in lst[1:]:\n        if item == current[-1]:\n            current.append(item)\n        else:\n            result.append(current)\n            current = [item]\n    result.append(current)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7771": {
    "question_id": "mbpp/777",
    "model": "deepseek-v3-250324",
    "generation_code": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = [lst[0]]\n    \n    for elem in lst[1:]:\n        if elem == current[-1]:\n            current.append(elem)\n        else:\n            result.append(current)\n            current = [elem]\n    \n    result.append(current)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7772": {
    "question_id": "mbpp/777",
    "model": "deepseek-v3-250324",
    "generation_code": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = [lst[0]]\n    \n    for elem in lst[1:]:\n        if elem == current[-1]:\n            current.append(elem)\n        else:\n            result.append(current)\n            current = [elem]\n    \n    result.append(current)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7773": {
    "question_id": "mbpp/777",
    "model": "deepseek-v3-250324",
    "generation_code": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = [lst[0]]\n    \n    for elem in lst[1:]:\n        if elem == current[-1]:\n            current.append(elem)\n        else:\n            result.append(current)\n            current = [elem]\n    \n    result.append(current)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7774": {
    "question_id": "mbpp/777",
    "model": "deepseek-v3-250324",
    "generation_code": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = []\n    current = [lst[0]]\n    for elem in lst[1:]:\n        if elem == current[0]:\n            current.append(elem)\n        else:\n            result.append(current)\n            current = [elem]\n    result.append(current)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7775": {
    "question_id": "mbpp/777",
    "model": "deepseek-v3-250324",
    "generation_code": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = []\n    current = [lst[0]]\n    for elem in lst[1:]:\n        if elem == current[-1]:\n            current.append(elem)\n        else:\n            result.append(current)\n            current = [elem]\n    result.append(current)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7776": {
    "question_id": "mbpp/777",
    "model": "deepseek-v3-250324",
    "generation_code": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = []\n    current = [lst[0]]\n    for item in lst[1:]:\n        if item == current[-1]:\n            current.append(item)\n        else:\n            result.append(current)\n            current = [item]\n    result.append(current)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7777": {
    "question_id": "mbpp/777",
    "model": "deepseek-v3-250324",
    "generation_code": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = [lst[0]]\n    \n    for elem in lst[1:]:\n        if elem == current[-1]:\n            current.append(elem)\n        else:\n            result.append(current)\n            current = [elem]\n    \n    result.append(current)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7778": {
    "question_id": "mbpp/777",
    "model": "deepseek-v3-250324",
    "generation_code": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = []\n    current = [lst[0]]\n    for item in lst[1:]:\n        if item == current[-1]:\n            current.append(item)\n        else:\n            result.append(current)\n            current = [item]\n    result.append(current)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7779": {
    "question_id": "mbpp/777",
    "model": "deepseek-v3-250324",
    "generation_code": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current = [lst[0]]\n    \n    for elem in lst[1:]:\n        if elem == current[-1]:\n            current.append(elem)\n        else:\n            result.append(current)\n            current = [elem]\n    \n    result.append(current)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7780": {
    "question_id": "mbpp/778",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(lst):\n    count = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count:\n            count[tuple_sublist] += 1\n        else:\n            count[tuple_sublist] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7781": {
    "question_id": "mbpp/778",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(input_list):\n    count_dict = {}\n    for sublist in input_list:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7782": {
    "question_id": "mbpp/778",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(lst):\n    count = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count:\n            count[tuple_sublist] += 1\n        else:\n            count[tuple_sublist] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7783": {
    "question_id": "mbpp/778",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(lst):\n    count = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count:\n            count[tuple_sublist] += 1\n        else:\n            count[tuple_sublist] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7784": {
    "question_id": "mbpp/778",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(lst):\n    count = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count:\n            count[tuple_sublist] += 1\n        else:\n            count[tuple_sublist] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7785": {
    "question_id": "mbpp/778",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(input_list):\n    count_dict = {}\n    for sublist in input_list:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7786": {
    "question_id": "mbpp/778",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(lst):\n    count = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count:\n            count[tuple_sublist] += 1\n        else:\n            count[tuple_sublist] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7787": {
    "question_id": "mbpp/778",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(lst):\n    count = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count:\n            count[tuple_sublist] += 1\n        else:\n            count[tuple_sublist] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7788": {
    "question_id": "mbpp/778",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(input_list):\n    count = {}\n    for sublist in input_list:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count:\n            count[tuple_sublist] += 1\n        else:\n            count[tuple_sublist] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7789": {
    "question_id": "mbpp/778",
    "model": "deepseek-v3-250324",
    "generation_code": "def unique_sublists(lst):\n    count = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count:\n            count[tuple_sublist] += 1\n        else:\n            count[tuple_sublist] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7790": {
    "question_id": "mbpp/779",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_combinations(tuple_list):\n    combinations = []\n    n = len(tuple_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            first = tuple_list[i]\n            second = tuple_list[j]\n            sum_tuple = (first[0] + second[0], first[1] + second[1])\n            combinations.append(sum_tuple)\n    return combinations",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7791": {
    "question_id": "mbpp/779",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_combinations(tuples_list):\n    combinations = []\n    n = len(tuples_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            first_tuple = tuples_list[i]\n            second_tuple = tuples_list[j]\n            sum_tuple = (first_tuple[0] + second_tuple[0], first_tuple[1] + second_tuple[1])\n            combinations.append(sum_tuple)\n    return combinations",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7792": {
    "question_id": "mbpp/779",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_combinations(tuples_list):\n    combinations = []\n    n = len(tuples_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum1 = tuples_list[i][0] + tuples_list[j][0]\n            sum2 = tuples_list[i][1] + tuples_list[j][1]\n            combinations.append((sum1, sum2))\n    return combinations",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7793": {
    "question_id": "mbpp/779",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_combinations(tuple_list):\n    combinations = []\n    n = len(tuple_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            first = tuple_list[i]\n            second = tuple_list[j]\n            sum_tuple = (first[0] + second[0], first[1] + second[1])\n            combinations.append(sum_tuple)\n    return combinations",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7794": {
    "question_id": "mbpp/779",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_combinations(tuple_list):\n    combinations = []\n    n = len(tuple_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            first_tuple = tuple_list[i]\n            second_tuple = tuple_list[j]\n            combined = (first_tuple[0] + second_tuple[0], first_tuple[1] + second_tuple[1])\n            combinations.append(combined)\n    return combinations",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7795": {
    "question_id": "mbpp/779",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_combinations(tuples_list):\n    combinations = []\n    n = len(tuples_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            first_tuple = tuples_list[i]\n            second_tuple = tuples_list[j]\n            sum_tuple = (first_tuple[0] + second_tuple[0], first_tuple[1] + second_tuple[1])\n            combinations.append(sum_tuple)\n    return combinations",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7796": {
    "question_id": "mbpp/779",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_combinations(tuple_list):\n    combinations = []\n    n = len(tuple_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            first = tuple_list[i]\n            second = tuple_list[j]\n            sum_tuple = (first[0] + second[0], first[1] + second[1])\n            combinations.append(sum_tuple)\n    return combinations",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7797": {
    "question_id": "mbpp/779",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_combinations(tuples_list):\n    combinations = []\n    n = len(tuples_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            first_tuple = tuples_list[i]\n            second_tuple = tuples_list[j]\n            sum_tuple = (first_tuple[0] + second_tuple[0], first_tuple[1] + second_tuple[1])\n            combinations.append(sum_tuple)\n    return combinations",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7798": {
    "question_id": "mbpp/779",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_combinations(tuple_list):\n    combinations = []\n    n = len(tuple_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            first = tuple_list[i]\n            second = tuple_list[j]\n            combined = (first[0] + second[0], first[1] + second[1])\n            combinations.append(combined)\n    return combinations",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7799": {
    "question_id": "mbpp/779",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_combinations(tuples_list):\n    combinations = []\n    n = len(tuples_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum1 = tuples_list[i][0] + tuples_list[j][0]\n            sum2 = tuples_list[i][1] + tuples_list[j][1]\n            combinations.append((sum1, sum2))\n    return combinations",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7800": {
    "question_id": "mbpp/780",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return \"Even\" if count % 2 == 0 else \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7801": {
    "question_id": "mbpp/780",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Divisors(n):\n    if n == 0:\n        return \"Even\"\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n == n:\n        return \"Odd\"\n    else:\n        return \"Even\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7802": {
    "question_id": "mbpp/780",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n / i == i:\n                count += 1\n            else:\n                count += 2\n    return \"Even\" if count % 2 == 0 else \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7803": {
    "question_id": "mbpp/780",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == n // i:\n                count += 1\n            else:\n                count += 2\n    return \"Even\" if count % 2 == 0 else \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7804": {
    "question_id": "mbpp/780",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Divisors(n):\n    if n == 0:\n        return \"Even\"\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return \"Even\" if count % 2 == 0 else \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7805": {
    "question_id": "mbpp/780",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Divisors(n):\n    if n == 0:\n        return \"Even\"\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n == n:\n        return \"Odd\"\n    else:\n        return \"Even\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7806": {
    "question_id": "mbpp/780",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Divisors(n):\n    if n == 0:\n        return \"Even\"\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n == n:\n        return \"Odd\"\n    else:\n        return \"Even\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7807": {
    "question_id": "mbpp/780",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return \"Even\" if count % 2 == 0 else \"Odd\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7808": {
    "question_id": "mbpp/780",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Divisors(n):\n    if n == 0:\n        return \"Even\"\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n == n:\n        return \"Odd\"\n    else:\n        return \"Even\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7809": {
    "question_id": "mbpp/780",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Divisors(n):\n    if n == 0:\n        return \"Even\"\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n == n:\n        return \"Odd\"\n    else:\n        return \"Even\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7810": {
    "question_id": "mbpp/781",
    "model": "deepseek-v3-250324",
    "generation_code": "def Odd_Length_Sum(arr):\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total += sum(arr[i:j+1])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7811": {
    "question_id": "mbpp/781",
    "model": "deepseek-v3-250324",
    "generation_code": "def Odd_Length_Sum(arr):\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total += sum(arr[i:j+1])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7812": {
    "question_id": "mbpp/781",
    "model": "deepseek-v3-250324",
    "generation_code": "def Odd_Length_Sum(arr):\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 == 1:\n                total += sum(arr[i:j+1])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7813": {
    "question_id": "mbpp/781",
    "model": "deepseek-v3-250324",
    "generation_code": "def Odd_Length_Sum(arr):\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total += sum(arr[i:j+1])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7814": {
    "question_id": "mbpp/781",
    "model": "deepseek-v3-250324",
    "generation_code": "def Odd_Length_Sum(arr):\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total += sum(arr[i:j+1])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7815": {
    "question_id": "mbpp/781",
    "model": "deepseek-v3-250324",
    "generation_code": "def Odd_Length_Sum(arr):\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total += sum(arr[i:j+1])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7816": {
    "question_id": "mbpp/781",
    "model": "deepseek-v3-250324",
    "generation_code": "def Odd_Length_Sum(arr):\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 == 1:\n                total += sum(arr[i:j+1])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7817": {
    "question_id": "mbpp/781",
    "model": "deepseek-v3-250324",
    "generation_code": "def Odd_Length_Sum(arr):\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total += sum(arr[i:j+1])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7818": {
    "question_id": "mbpp/781",
    "model": "deepseek-v3-250324",
    "generation_code": "def Odd_Length_Sum(arr):\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total += sum(arr[i:j+1])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7819": {
    "question_id": "mbpp/781",
    "model": "deepseek-v3-250324",
    "generation_code": "def Odd_Length_Sum(arr):\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total += sum(arr[i:j+1])\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7820": {
    "question_id": "mbpp/782",
    "model": "deepseek-v3-250324",
    "generation_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if delta == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = (60 * ((g - b) / delta) + 360) % 360\n        elif max_val == g:\n            h = (60 * ((b - r) / delta) + 120) % 360\n        else:\n            h = (60 * ((r - g) / delta) + 240) % 360\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    v = max_val * 100\n    \n    return (h, s, v)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7821": {
    "question_id": "mbpp/782",
    "model": "deepseek-v3-250324",
    "generation_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if delta == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = (60 * ((g - b) / delta) + 360) % 360\n        elif max_val == g:\n            h = (60 * ((b - r) / delta) + 120) % 360\n        elif max_val == b:\n            h = (60 * ((r - g) / delta) + 240) % 360\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    v = max_val * 100\n    \n    return (round(h), round(s, 1), round(v, 1))",
    "test_output": "FAILED: expect (120.0, 100.0, 84.31372549019608),in fact (120, 100.0, 84.3)",
    "test_result": "False"
  },
  "7822": {
    "question_id": "mbpp/782",
    "model": "deepseek-v3-250324",
    "generation_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    diff = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    else:\n        if max_val == r:\n            h = (60 * ((g - b) / diff) + 360) % 360\n        elif max_val == g:\n            h = (60 * ((b - r) / diff) + 120) % 360\n        elif max_val == b:\n            h = (60 * ((r - g) / diff) + 240) % 360\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = (diff / max_val) * 100\n    \n    v = max_val * 100\n    \n    return (h, s, v)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7823": {
    "question_id": "mbpp/782",
    "model": "deepseek-v3-250324",
    "generation_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_val == g:\n        h = 60 * (((b - r) / delta) + 2)\n    elif max_val == b:\n        h = 60 * (((r - g) / delta) + 4)\n    \n    if max_val == 0:\n        s = 0.0\n    else:\n        s = (delta / max_val) * 100\n    \n    v = max_val * 100\n    \n    return (round(h) % 360, round(s, 1), round(v, 1))",
    "test_output": "FAILED: expect (120.0, 100.0, 84.31372549019608),in fact (120, 100.0, 84.3)",
    "test_result": "False"
  },
  "7824": {
    "question_id": "mbpp/782",
    "model": "deepseek-v3-250324",
    "generation_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_val == g:\n        h = 60 * (((b - r) / delta) + 2)\n    else:\n        h = 60 * (((r - g) / delta) + 4)\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    v = max_val * 100\n    \n    return (round(h), round(s, 1), round(v, 1))",
    "test_output": "FAILED: expect (120.0, 100.0, 84.31372549019608),in fact (120, 100.0, 84.3)",
    "test_result": "False"
  },
  "7825": {
    "question_id": "mbpp/782",
    "model": "deepseek-v3-250324",
    "generation_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_val == g:\n        h = 60 * (((b - r) / delta) + 2)\n    elif max_val == b:\n        h = 60 * (((r - g) / delta) + 4)\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    v = max_val * 100\n    \n    return (round(h) % 360, round(s, 1), round(v, 1))",
    "test_output": "FAILED: expect (120.0, 100.0, 84.31372549019608),in fact (120, 100.0, 84.3)",
    "test_result": "False"
  },
  "7826": {
    "question_id": "mbpp/782",
    "model": "deepseek-v3-250324",
    "generation_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if delta == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = 60 * (((g - b) / delta) % 6)\n        elif max_val == g:\n            h = 60 * (((b - r) / delta) + 2)\n        elif max_val == b:\n            h = 60 * (((r - g) / delta) + 4)\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    v = max_val * 100\n    \n    return (round(h) % 360, round(s, 1), round(v, 1))",
    "test_output": "FAILED: expect (120.0, 100.0, 84.31372549019608),in fact (120, 100.0, 84.3)",
    "test_result": "False"
  },
  "7827": {
    "question_id": "mbpp/782",
    "model": "deepseek-v3-250324",
    "generation_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_val == g:\n        h = 60 * (((b - r) / delta) + 2)\n    elif max_val == b:\n        h = 60 * (((r - g) / delta) + 4)\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    v = max_val * 100\n    \n    return (round(h) % 360, round(s, 1), round(v, 1))",
    "test_output": "FAILED: expect (120.0, 100.0, 84.31372549019608),in fact (120, 100.0, 84.3)",
    "test_result": "False"
  },
  "7828": {
    "question_id": "mbpp/782",
    "model": "deepseek-v3-250324",
    "generation_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    v = max_val * 100\n    \n    if max_val == 0:\n        s = 0.0\n    else:\n        s = (delta / max_val) * 100\n    \n    if delta == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = (60 * ((g - b) / delta) + 360) % 360\n        elif max_val == g:\n            h = (60 * ((b - r) / delta) + 120) % 360\n        elif max_val == b:\n            h = (60 * ((r - g) / delta) + 240) % 360\n    \n    return (round(h), round(s, 1), round(v, 1))",
    "test_output": "FAILED: expect (120.0, 100.0, 84.31372549019608),in fact (120, 100.0, 84.3)",
    "test_result": "False"
  },
  "7829": {
    "question_id": "mbpp/782",
    "model": "deepseek-v3-250324",
    "generation_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_val == g:\n        h = 60 * (((b - r) / delta) + 2)\n    elif max_val == b:\n        h = 60 * (((r - g) / delta) + 4)\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    v = max_val * 100\n    \n    return (round(h) % 360, round(s, 1), round(v, 1))",
    "test_output": "FAILED: expect (120.0, 100.0, 84.31372549019608),in fact (120, 100.0, 84.3)",
    "test_result": "False"
  },
  "7830": {
    "question_id": "mbpp/783",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    return first_even * first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7831": {
    "question_id": "mbpp/783",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    return first_even * first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7832": {
    "question_id": "mbpp/783",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    return first_even * first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7833": {
    "question_id": "mbpp/783",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    return first_even * first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7834": {
    "question_id": "mbpp/783",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    return first_even * first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7835": {
    "question_id": "mbpp/783",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    return first_even * first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7836": {
    "question_id": "mbpp/783",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    return first_even * first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7837": {
    "question_id": "mbpp/783",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    return first_even * first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7838": {
    "question_id": "mbpp/783",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    return first_even * first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7839": {
    "question_id": "mbpp/783",
    "model": "deepseek-v3-250324",
    "generation_code": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return 0\n    return first_even * first_odd",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7840": {
    "question_id": "mbpp/784",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_str_int(tuple_str):\n    if not tuple_str.strip():\n        return ()\n    stripped = tuple_str.strip()[1:-1]\n    if not stripped:\n        return ()\n    elements = stripped.split(',')\n    return tuple(int(elem.strip()) for elem in elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7841": {
    "question_id": "mbpp/784",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_str_int(s):\n    s = s.strip()\n    if not (s.startswith('(') and s.endswith(')')):\n        return ()\n    content = s[1:-1]\n    if not content:\n        return ()\n    parts = content.split(',')\n    result = []\n    for part in parts:\n        part = part.strip()\n        if part:\n            try:\n                num = int(part)\n                result.append(num)\n            except ValueError:\n                pass\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7842": {
    "question_id": "mbpp/784",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_str_int(tuple_str):\n    if not tuple_str or tuple_str.strip() == \"()\":\n        return ()\n    stripped = tuple_str.strip()[1:-1]\n    elements = [int(x.strip()) for x in stripped.split(',')]\n    return tuple(elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7843": {
    "question_id": "mbpp/784",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_str_int(s):\n    s = s.strip()\n    if not (s.startswith('(') and s.endswith(')')):\n        return ()\n    content = s[1:-1]\n    if not content:\n        return ()\n    parts = content.split(',')\n    result = []\n    for part in parts:\n        part = part.strip()\n        if part:\n            try:\n                num = int(part)\n                result.append(num)\n            except ValueError:\n                return ()\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7844": {
    "question_id": "mbpp/784",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_str_int(s):\n    s = s.strip()\n    if not (s.startswith('(') and s.endswith(')')):\n        return ()\n    content = s[1:-1]\n    elements = content.split(',')\n    result = []\n    for elem in elements:\n        elem = elem.strip()\n        if elem:\n            try:\n                num = int(elem)\n                result.append(num)\n            except ValueError:\n                continue\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7845": {
    "question_id": "mbpp/784",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_str_int(s):\n    s = s.strip()\n    if not (s.startswith('(') and s.endswith(')')):\n        return ()\n    inner = s[1:-1].strip()\n    if not inner:\n        return ()\n    parts = [x.strip() for x in inner.split(',')]\n    try:\n        return tuple(int(x) for x in parts if x)\n    except ValueError:\n        return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7846": {
    "question_id": "mbpp/784",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_str_int(s):\n    s = s.strip()\n    if not (s.startswith('(') and s.endswith(')')):\n        return ()\n    inner = s[1:-1].strip()\n    if not inner:\n        return ()\n    parts = [part.strip() for part in inner.split(',')]\n    try:\n        return tuple(int(part) for part in parts)\n    except ValueError:\n        return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7847": {
    "question_id": "mbpp/784",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_str_int(s):\n    if not s or s == \"()\":\n        return ()\n    s = s.strip()\n    if s[0] != '(' or s[-1] != ')':\n        raise ValueError(\"Invalid tuple string format\")\n    inner = s[1:-1].strip()\n    if not inner:\n        return ()\n    parts = [x.strip() for x in inner.split(',')]\n    try:\n        return tuple(int(x) for x in parts)\n    except ValueError:\n        raise ValueError(\"Invalid integer in tuple string\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7848": {
    "question_id": "mbpp/784",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_str_int(tuple_str):\n    if not tuple_str or tuple_str.strip() == \"()\":\n        return ()\n    try:\n        elements = tuple_str.strip()[1:-1].split(',')\n        return tuple(int(e.strip()) for e in elements if e.strip())\n    except:\n        return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7849": {
    "question_id": "mbpp/784",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_str_int(s):\n    s = s.strip()\n    if not (s.startswith('(') and s.endswith(')')):\n        return ()\n    inner = s[1:-1].strip()\n    if not inner:\n        return ()\n    parts = inner.split(',')\n    result = []\n    for part in parts:\n        part = part.strip()\n        if part:\n            try:\n                num = int(part)\n                result.append(num)\n            except ValueError:\n                pass\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7850": {
    "question_id": "mbpp/785",
    "model": "deepseek-v3-250324",
    "generation_code": "def right_insertion(lst, value):\n    low = 0\n    high = len(lst)\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] <= value:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7851": {
    "question_id": "mbpp/785",
    "model": "deepseek-v3-250324",
    "generation_code": "def right_insertion(lst, value):\n    low = 0\n    high = len(lst)\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] <= value:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7852": {
    "question_id": "mbpp/785",
    "model": "deepseek-v3-250324",
    "generation_code": "def right_insertion(lst, value):\n    low = 0\n    high = len(lst)\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] <= value:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7853": {
    "question_id": "mbpp/785",
    "model": "deepseek-v3-250324",
    "generation_code": "def right_insertion(lst, value):\n    low = 0\n    high = len(lst)\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] <= value:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7854": {
    "question_id": "mbpp/785",
    "model": "deepseek-v3-250324",
    "generation_code": "def right_insertion(lst, value):\n    low = 0\n    high = len(lst)\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] <= value:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7855": {
    "question_id": "mbpp/785",
    "model": "deepseek-v3-250324",
    "generation_code": "def right_insertion(lst, num):\n    low = 0\n    high = len(lst)\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] <= num:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7856": {
    "question_id": "mbpp/785",
    "model": "deepseek-v3-250324",
    "generation_code": "def right_insertion(data, value):\n    low = 0\n    high = len(data)\n    while low < high:\n        mid = (low + high) // 2\n        if data[mid] <= value:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7857": {
    "question_id": "mbpp/785",
    "model": "deepseek-v3-250324",
    "generation_code": "def right_insertion(data, value):\n    low = 0\n    high = len(data)\n    while low < high:\n        mid = (low + high) // 2\n        if data[mid] <= value:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7858": {
    "question_id": "mbpp/785",
    "model": "deepseek-v3-250324",
    "generation_code": "def right_insertion(lst, value):\n    low = 0\n    high = len(lst)\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] <= value:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7859": {
    "question_id": "mbpp/785",
    "model": "deepseek-v3-250324",
    "generation_code": "def right_insertion(lst, value):\n    low = 0\n    high = len(lst)\n    while low < high:\n        mid = (low + high) // 2\n        if lst[mid] <= value:\n            low = mid + 1\n        else:\n            high = mid\n    return low",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7860": {
    "question_id": "mbpp/786",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_three(text):\n    if re.search(r'abbb', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "7861": {
    "question_id": "mbpp/786",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_three(text):\n    import re\n    if re.search(r'abbb', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "7862": {
    "question_id": "mbpp/786",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_three(text):\n    import re\n    if re.search(r'abbb', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "7863": {
    "question_id": "mbpp/786",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_three(text):\n    if re.search(r'abbb', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "7864": {
    "question_id": "mbpp/786",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_three(text):\n    if re.search(r'abbb', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "7865": {
    "question_id": "mbpp/786",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_three(text):\n    import re\n    if re.search(r'abbb', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "7866": {
    "question_id": "mbpp/786",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_three(text):\n    import re\n    if re.search(r'abbb', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "7867": {
    "question_id": "mbpp/786",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_three(text):\n    if re.search(r'abbb', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "7868": {
    "question_id": "mbpp/786",
    "model": "deepseek-v3-250324",
    "generation_code": "def text_match_three(text):\n    import re\n    if re.search(r'abbb', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "7869": {
    "question_id": "mbpp/786",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match_three(text):\n    if re.search(r'abbb', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "7870": {
    "question_id": "mbpp/787",
    "model": "deepseek-v3-250324",
    "generation_code": "def new_tuple(lst, string):\n    return tuple(lst + [string])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7871": {
    "question_id": "mbpp/787",
    "model": "deepseek-v3-250324",
    "generation_code": "def new_tuple(lst, string):\n    return tuple(lst + [string])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7872": {
    "question_id": "mbpp/787",
    "model": "deepseek-v3-250324",
    "generation_code": "def new_tuple(lst, string):\n    return tuple(lst + [string])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7873": {
    "question_id": "mbpp/787",
    "model": "deepseek-v3-250324",
    "generation_code": "def new_tuple(lst, string):\n    return tuple(lst + [string])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7874": {
    "question_id": "mbpp/787",
    "model": "deepseek-v3-250324",
    "generation_code": "def new_tuple(lst, string):\n    return tuple(lst + [string])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7875": {
    "question_id": "mbpp/787",
    "model": "deepseek-v3-250324",
    "generation_code": "def new_tuple(lst, string):\n    return tuple(lst + [string])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7876": {
    "question_id": "mbpp/787",
    "model": "deepseek-v3-250324",
    "generation_code": "def new_tuple(lst, string):\n    return tuple(lst + [string])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7877": {
    "question_id": "mbpp/787",
    "model": "deepseek-v3-250324",
    "generation_code": "def new_tuple(lst, string):\n    return tuple(lst + [string])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7878": {
    "question_id": "mbpp/787",
    "model": "deepseek-v3-250324",
    "generation_code": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7879": {
    "question_id": "mbpp/787",
    "model": "deepseek-v3-250324",
    "generation_code": "def new_tuple(lst, string):\n    return tuple(lst + [string])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7880": {
    "question_id": "mbpp/788",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    return sides * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7881": {
    "question_id": "mbpp/788",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    return sides * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7882": {
    "question_id": "mbpp/788",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    return sides * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7883": {
    "question_id": "mbpp/788",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    return sides * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7884": {
    "question_id": "mbpp/788",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    return sides * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7885": {
    "question_id": "mbpp/788",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    return sides * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7886": {
    "question_id": "mbpp/788",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    return sides * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7887": {
    "question_id": "mbpp/788",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    return sides * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7888": {
    "question_id": "mbpp/788",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    return sides * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7889": {
    "question_id": "mbpp/788",
    "model": "deepseek-v3-250324",
    "generation_code": "def perimeter_polygon(sides, length):\n    if sides < 3 or length <= 0:\n        return 0\n    return sides * length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7890": {
    "question_id": "mbpp/789",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7891": {
    "question_id": "mbpp/789",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7892": {
    "question_id": "mbpp/789",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7893": {
    "question_id": "mbpp/789",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7894": {
    "question_id": "mbpp/789",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7895": {
    "question_id": "mbpp/789",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7896": {
    "question_id": "mbpp/789",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7897": {
    "question_id": "mbpp/789",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7898": {
    "question_id": "mbpp/789",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7899": {
    "question_id": "mbpp/789",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7900": {
    "question_id": "mbpp/790",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7901": {
    "question_id": "mbpp/790",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_nested(tup):\n    result = []\n    for item in tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7902": {
    "question_id": "mbpp/790",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7903": {
    "question_id": "mbpp/790",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7904": {
    "question_id": "mbpp/790",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7905": {
    "question_id": "mbpp/790",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7906": {
    "question_id": "mbpp/790",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7907": {
    "question_id": "mbpp/790",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7908": {
    "question_id": "mbpp/790",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7909": {
    "question_id": "mbpp/790",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7910": {
    "question_id": "mbpp/791",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lst):\n    return len(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7911": {
    "question_id": "mbpp/791",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lists):\n    return len(lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7912": {
    "question_id": "mbpp/791",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lists):\n    return len(lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7913": {
    "question_id": "mbpp/791",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lists):\n    return len(lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7914": {
    "question_id": "mbpp/791",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lists):\n    return len(lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7915": {
    "question_id": "mbpp/791",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lists):\n    return len(lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7916": {
    "question_id": "mbpp/791",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lists):\n    if not isinstance(lists, list):\n        return 0\n    count = 0\n    for item in lists:\n        if isinstance(item, list):\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7917": {
    "question_id": "mbpp/791",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lists):\n    return len(lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7918": {
    "question_id": "mbpp/791",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lists):\n    return len(lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7919": {
    "question_id": "mbpp/791",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lists):\n    return len(lists)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7920": {
    "question_id": "mbpp/792",
    "model": "deepseek-v3-250324",
    "generation_code": "def last(arr, x, n):\n    low = 0\n    high = n - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7921": {
    "question_id": "mbpp/792",
    "model": "deepseek-v3-250324",
    "generation_code": "def last(arr, x, n):\n    low = 0\n    high = n - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7922": {
    "question_id": "mbpp/792",
    "model": "deepseek-v3-250324",
    "generation_code": "def last(arr, x, n):\n    low = 0\n    high = n - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7923": {
    "question_id": "mbpp/792",
    "model": "deepseek-v3-250324",
    "generation_code": "def last(arr, x, n):\n    low = 0\n    high = n - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7924": {
    "question_id": "mbpp/792",
    "model": "deepseek-v3-250324",
    "generation_code": "def last(arr, target, n):\n    left, right = 0, n - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7925": {
    "question_id": "mbpp/792",
    "model": "deepseek-v3-250324",
    "generation_code": "def last(arr, x, n):\n    low = 0\n    high = n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7926": {
    "question_id": "mbpp/792",
    "model": "deepseek-v3-250324",
    "generation_code": "def last(arr, x, n):\n    low = 0\n    high = n - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7927": {
    "question_id": "mbpp/792",
    "model": "deepseek-v3-250324",
    "generation_code": "def last(arr, x, n):\n    left, right = 0, n - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7928": {
    "question_id": "mbpp/792",
    "model": "deepseek-v3-250324",
    "generation_code": "def last(arr, x, n):\n    left, right = 0, n - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7929": {
    "question_id": "mbpp/792",
    "model": "deepseek-v3-250324",
    "generation_code": "def last(arr, x, n):\n    left, right = 0, n - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7930": {
    "question_id": "mbpp/793",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_starta_endb(text):\n    if re.search(r'^a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7931": {
    "question_id": "mbpp/793",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_starta_endb(text):\n    if re.search(r'^a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7932": {
    "question_id": "mbpp/793",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_starta_endb(text):\n    if re.search(r'^a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7933": {
    "question_id": "mbpp/793",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_starta_endb(text):\n    if re.search(r'^a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7934": {
    "question_id": "mbpp/793",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_starta_endb(text):\n    if re.search(r'^a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7935": {
    "question_id": "mbpp/793",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_starta_endb(text):\n    if re.search(r'^a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7936": {
    "question_id": "mbpp/793",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_starta_endb(text):\n    if re.search(r'^a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7937": {
    "question_id": "mbpp/793",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_starta_endb(text):\n    if re.search(r'^a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7938": {
    "question_id": "mbpp/793",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_starta_endb(text):\n    if re.search(r'^a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7939": {
    "question_id": "mbpp/793",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_starta_endb(text):\n    if re.search(r'^a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7940": {
    "question_id": "mbpp/794",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef cheap_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        result.append(heapq.heappop(heap)[1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7941": {
    "question_id": "mbpp/794",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef cheap_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        _, item = heapq.heappop(heap)\n        result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7942": {
    "question_id": "mbpp/794",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef cheap_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7943": {
    "question_id": "mbpp/794",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef cheap_items(items, n):\n    if n <= 0 or not items:\n        return []\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7944": {
    "question_id": "mbpp/794",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef cheap_items(dataset, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in dataset:\n        heapq.heappush(heap, (item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        result.append(heapq.heappop(heap)[1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7945": {
    "question_id": "mbpp/794",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef cheap_items(dataset, n):\n    if n <= 0 or not dataset:\n        return []\n    heap = []\n    for item in dataset:\n        heapq.heappush(heap, (item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        result.append(heapq.heappop(heap)[1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7946": {
    "question_id": "mbpp/794",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef cheap_items(items, n):\n    if n <= 0 or not items:\n        return []\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        result.append(heapq.heappop(heap)[1])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7947": {
    "question_id": "mbpp/794",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef cheap_items(items, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7948": {
    "question_id": "mbpp/794",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef cheap_items(items, n):\n    if n <= 0 or not items:\n        return []\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7949": {
    "question_id": "mbpp/794",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef cheap_items(dataset, n):\n    if n <= 0:\n        return []\n    heap = []\n    for item in dataset:\n        heapq.heappush(heap, (item['price'], item))\n    result = []\n    for _ in range(min(n, len(heap))):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7950": {
    "question_id": "mbpp/795",
    "model": "deepseek-v3-250324",
    "generation_code": "def return_sum(dictionary):\n    return sum(dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7951": {
    "question_id": "mbpp/795",
    "model": "deepseek-v3-250324",
    "generation_code": "def return_sum(dictionary):\n    return sum(dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7952": {
    "question_id": "mbpp/795",
    "model": "deepseek-v3-250324",
    "generation_code": "def return_sum(dictionary):\n    return sum(dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7953": {
    "question_id": "mbpp/795",
    "model": "deepseek-v3-250324",
    "generation_code": "def return_sum(dictionary):\n    return sum(dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7954": {
    "question_id": "mbpp/795",
    "model": "deepseek-v3-250324",
    "generation_code": "def return_sum(dictionary):\n    return sum(dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7955": {
    "question_id": "mbpp/795",
    "model": "deepseek-v3-250324",
    "generation_code": "def return_sum(dictionary):\n    return sum(dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7956": {
    "question_id": "mbpp/795",
    "model": "deepseek-v3-250324",
    "generation_code": "def return_sum(dictionary):\n    return sum(dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7957": {
    "question_id": "mbpp/795",
    "model": "deepseek-v3-250324",
    "generation_code": "def return_sum(dictionary):\n    return sum(dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7958": {
    "question_id": "mbpp/795",
    "model": "deepseek-v3-250324",
    "generation_code": "def return_sum(dictionary):\n    return sum(dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7959": {
    "question_id": "mbpp/795",
    "model": "deepseek-v3-250324",
    "generation_code": "def return_sum(dictionary):\n    return sum(dictionary.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7960": {
    "question_id": "mbpp/796",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_in_Range(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7961": {
    "question_id": "mbpp/796",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_in_Range(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7962": {
    "question_id": "mbpp/796",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_in_Range(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7963": {
    "question_id": "mbpp/796",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_in_Range(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7964": {
    "question_id": "mbpp/796",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_in_Range(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7965": {
    "question_id": "mbpp/796",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_in_Range(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7966": {
    "question_id": "mbpp/796",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_in_Range(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7967": {
    "question_id": "mbpp/796",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_in_Range(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7968": {
    "question_id": "mbpp/796",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_in_Range(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7969": {
    "question_id": "mbpp/796",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_in_Range(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7970": {
    "question_id": "mbpp/797",
    "model": "deepseek-v3-250324",
    "generation_code": "def _sum(arr):\n    return sum(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7971": {
    "question_id": "mbpp/797",
    "model": "deepseek-v3-250324",
    "generation_code": "def _sum(arr):\n    return sum(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7972": {
    "question_id": "mbpp/797",
    "model": "deepseek-v3-250324",
    "generation_code": "def _sum(arr):\n    return sum(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7973": {
    "question_id": "mbpp/797",
    "model": "deepseek-v3-250324",
    "generation_code": "def _sum(arr):\n    return sum(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7974": {
    "question_id": "mbpp/797",
    "model": "deepseek-v3-250324",
    "generation_code": "def _sum(arr):\n    return sum(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7975": {
    "question_id": "mbpp/797",
    "model": "deepseek-v3-250324",
    "generation_code": "def _sum(arr):\n    return sum(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7976": {
    "question_id": "mbpp/797",
    "model": "deepseek-v3-250324",
    "generation_code": "def _sum(arr):\n    return sum(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7977": {
    "question_id": "mbpp/797",
    "model": "deepseek-v3-250324",
    "generation_code": "def _sum(arr):\n    return sum(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7978": {
    "question_id": "mbpp/797",
    "model": "deepseek-v3-250324",
    "generation_code": "def _sum(arr):\n    return sum(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7979": {
    "question_id": "mbpp/797",
    "model": "deepseek-v3-250324",
    "generation_code": "def _sum(arr):\n    return sum(arr)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7980": {
    "question_id": "mbpp/798",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_Rotate(n, d):\n    bits = n.bit_length()\n    if bits == 0:\n        return 0\n    d = d % bits\n    return ((n << d) | (n >> (bits - d))) & ((1 << bits) - 1)",
    "test_output": "FAILED: expect 64,in fact 2",
    "test_result": "False"
  },
  "7981": {
    "question_id": "mbpp/798",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_Rotate(n, d):\n    if n == 0:\n        return 0\n    bits = n.bit_length()\n    d = d % bits if bits != 0 else 0\n    mask = (1 << bits) - 1\n    return ((n << d) | (n >> (bits - d))) & mask",
    "test_output": "FAILED: expect 64,in fact 2",
    "test_result": "False"
  },
  "7982": {
    "question_id": "mbpp/798",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_Rotate(n, d):\n    if n == 0:\n        return 0\n    bits = n.bit_length()\n    d = d % bits\n    return ((n << d) | (n >> (bits - d))) & ((1 << bits) - 1)",
    "test_output": "FAILED: expect 64,in fact 2",
    "test_result": "False"
  },
  "7983": {
    "question_id": "mbpp/798",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_Rotate(n, d):\n    INT_BITS = 32\n    return (n << d) | (n >> (INT_BITS - d))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7984": {
    "question_id": "mbpp/798",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_Rotate(n, d):\n    bits = n.bit_length()\n    if bits == 0:\n        return 0\n    d = d % bits\n    return ((n << d) | (n >> (bits - d))) & ((1 << bits) - 1)",
    "test_output": "FAILED: expect 64,in fact 2",
    "test_result": "False"
  },
  "7985": {
    "question_id": "mbpp/798",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_Rotate(n, d):\n    bits = n.bit_length()\n    if bits == 0:\n        return 0\n    d = d % bits\n    return ((n << d) | (n >> (bits - d))) & ((1 << bits) - 1)",
    "test_output": "FAILED: expect 64,in fact 2",
    "test_result": "False"
  },
  "7986": {
    "question_id": "mbpp/798",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_Rotate(n, d):\n    if n == 0:\n        return 0\n    bits = n.bit_length()\n    d = d % bits\n    mask = (1 << bits) - 1\n    return ((n << d) | (n >> (bits - d))) & mask",
    "test_output": "FAILED: expect 64,in fact 2",
    "test_result": "False"
  },
  "7987": {
    "question_id": "mbpp/798",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_Rotate(n, d):\n    bits = n.bit_length()\n    if bits == 0:\n        return 0\n    d = d % bits\n    return ((n << d) | (n >> (bits - d))) & ((1 << bits) - 1)",
    "test_output": "FAILED: expect 64,in fact 2",
    "test_result": "False"
  },
  "7988": {
    "question_id": "mbpp/798",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_Rotate(n, d):\n    return (n << d) | (n >> (32 - d)) if n != 0 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7989": {
    "question_id": "mbpp/798",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_Rotate(n, d):\n    bits = n.bit_length()\n    if bits == 0:\n        return 0\n    d = d % bits\n    return ((n << d) | (n >> (bits - d))) & ((1 << bits) - 1)",
    "test_output": "FAILED: expect 64,in fact 2",
    "test_result": "False"
  },
  "7990": {
    "question_id": "mbpp/799",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7991": {
    "question_id": "mbpp/799",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7992": {
    "question_id": "mbpp/799",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7993": {
    "question_id": "mbpp/799",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7994": {
    "question_id": "mbpp/799",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7995": {
    "question_id": "mbpp/799",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7996": {
    "question_id": "mbpp/799",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7997": {
    "question_id": "mbpp/799",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_all_spaces(string):\n    return string.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7998": {
    "question_id": "mbpp/799",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "7999": {
    "question_id": "mbpp/799",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8000": {
    "question_id": "mbpp/800",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8001": {
    "question_id": "mbpp/800",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8002": {
    "question_id": "mbpp/800",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8003": {
    "question_id": "mbpp/800",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8004": {
    "question_id": "mbpp/800",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8005": {
    "question_id": "mbpp/800",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8006": {
    "question_id": "mbpp/800",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8007": {
    "question_id": "mbpp/800",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8008": {
    "question_id": "mbpp/800",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8009": {
    "question_id": "mbpp/800",
    "model": "deepseek-v3-250324",
    "generation_code": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8010": {
    "question_id": "mbpp/801",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Rotation(arr, n):\n    if n == 0:\n        return 0\n    min_index = 0\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return min_index",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "8011": {
    "question_id": "mbpp/801",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Rotation(arr, n):\n    if n == 0:\n        return 0\n    min_index = 0\n    for i in range(n):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return min_index",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "8012": {
    "question_id": "mbpp/801",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Rotation(arr, n):\n    if n == 0:\n        return 0\n    min_index = 0\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return min_index",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "8013": {
    "question_id": "mbpp/801",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Rotation(arr, n):\n    if n == 0:\n        return 0\n    min_index = 0\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return min_index",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "8014": {
    "question_id": "mbpp/801",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Rotation(arr, n):\n    if n == 0:\n        return 0\n    min_index = 0\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return min_index",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "8015": {
    "question_id": "mbpp/801",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Rotation(arr, n):\n    if n == 0:\n        return 0\n    min_element = min(arr)\n    min_index = arr.index(min_element)\n    return min_index",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "8016": {
    "question_id": "mbpp/801",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Rotation(arr, n):\n    if n == 0:\n        return 0\n    min_index = 0\n    for i in range(n):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return min_index",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "8017": {
    "question_id": "mbpp/801",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Rotation(arr, n):\n    if n == 0:\n        return 0\n    min_index = 0\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return min_index",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "8018": {
    "question_id": "mbpp/801",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Rotation(arr, n):\n    if n == 0:\n        return 0\n    min_index = 0\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return min_index",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "8019": {
    "question_id": "mbpp/801",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Rotation(arr, n):\n    if n == 0:\n        return 0\n    min_val = min(arr)\n    min_index = arr.index(min_val)\n    return min_index",
    "test_output": "FAILED: expect 1,in fact 2",
    "test_result": "False"
  },
  "8020": {
    "question_id": "mbpp/802",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_Perfect_Square(num):\n    if num < 0:\n        return False\n    sqrt_num = math.isqrt(num)\n    return sqrt_num * sqrt_num == num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8021": {
    "question_id": "mbpp/802",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_Perfect_Square(num):\n    if num < 0:\n        return False\n    sqrt_num = math.isqrt(num)\n    return sqrt_num * sqrt_num == num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8022": {
    "question_id": "mbpp/802",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_Perfect_Square(num):\n    if num < 0:\n        return False\n    sqrt_num = math.isqrt(num)\n    return sqrt_num * sqrt_num == num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8023": {
    "question_id": "mbpp/802",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_Perfect_Square(num):\n    if num < 0:\n        return False\n    sqrt_num = math.isqrt(num)\n    return sqrt_num * sqrt_num == num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8024": {
    "question_id": "mbpp/802",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_Perfect_Square(num):\n    if num < 0:\n        return False\n    sqrt_num = math.isqrt(num)\n    return sqrt_num * sqrt_num == num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8025": {
    "question_id": "mbpp/802",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_Perfect_Square(num):\n    if num < 0:\n        return False\n    sqrt_num = math.isqrt(num)\n    return sqrt_num * sqrt_num == num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8026": {
    "question_id": "mbpp/802",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_Perfect_Square(num):\n    if num < 0:\n        return False\n    root = math.isqrt(num)\n    return root * root == num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8027": {
    "question_id": "mbpp/802",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_Perfect_Square(num):\n    if num < 0:\n        return False\n    sqrt_num = math.isqrt(num)\n    return sqrt_num * sqrt_num == num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8028": {
    "question_id": "mbpp/802",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_Perfect_Square(num):\n    if num < 0:\n        return False\n    sqrt_num = math.isqrt(num)\n    return sqrt_num * sqrt_num == num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8029": {
    "question_id": "mbpp/802",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef is_Perfect_Square(num):\n    if num < 0:\n        return False\n    sqrt_num = math.isqrt(num)\n    return sqrt_num * sqrt_num == num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8030": {
    "question_id": "mbpp/803",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Product_Even(arr, n):\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8031": {
    "question_id": "mbpp/803",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Product_Even(arr, n):\n    if n == 0:\n        return False\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8032": {
    "question_id": "mbpp/803",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Product_Even(arr, n):\n    if n == 0:\n        return False\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8033": {
    "question_id": "mbpp/803",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Product_Even(arr, n):\n    if n == 0:\n        return False\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8034": {
    "question_id": "mbpp/803",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Product_Even(arr, n):\n    if n == 0:\n        return False\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8035": {
    "question_id": "mbpp/803",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Product_Even(arr, n):\n    if n == 0:\n        return False\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8036": {
    "question_id": "mbpp/803",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Product_Even(arr, n):\n    if n == 0:\n        return False\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8037": {
    "question_id": "mbpp/803",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Product_Even(arr, n):\n    if n == 0:\n        return False\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8038": {
    "question_id": "mbpp/803",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Product_Even(arr, n):\n    if n == 0:\n        return False\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8039": {
    "question_id": "mbpp/803",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Product_Even(arr, n):\n    if n == 0:\n        return False\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8040": {
    "question_id": "mbpp/804",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_list(lists):\n    if not lists:\n        return []\n    return max(lists, key=sum)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8041": {
    "question_id": "mbpp/804",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_list(lst):\n    if not lst:\n        return []\n    return max(lst, key=lambda x: sum(x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8042": {
    "question_id": "mbpp/804",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_list(lst):\n    if not lst:\n        return []\n    max_sum = float('-inf')\n    result = []\n    for sublist in lst:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = sublist\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8043": {
    "question_id": "mbpp/804",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_list(lists):\n    if not lists:\n        return []\n    return max(lists, key=lambda x: sum(x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8044": {
    "question_id": "mbpp/804",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_list(lists):\n    if not lists:\n        return []\n    return max(lists, key=sum)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8045": {
    "question_id": "mbpp/804",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_list(lists):\n    if not lists:\n        return []\n    return max(lists, key=lambda x: sum(x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8046": {
    "question_id": "mbpp/804",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_list(lists):\n    if not lists:\n        return []\n    return max(lists, key=lambda x: sum(x))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8047": {
    "question_id": "mbpp/804",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_list(lists):\n    if not lists:\n        return []\n    return max(lists, key=sum)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8048": {
    "question_id": "mbpp/804",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_list(lists):\n    if not lists:\n        return []\n    return max(lists, key=sum)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8049": {
    "question_id": "mbpp/804",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_list(lst):\n    if not lst:\n        return []\n    return max(lst, key=sum)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8050": {
    "question_id": "mbpp/805",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8051": {
    "question_id": "mbpp/805",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8052": {
    "question_id": "mbpp/805",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8053": {
    "question_id": "mbpp/805",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8054": {
    "question_id": "mbpp/805",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8055": {
    "question_id": "mbpp/805",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8056": {
    "question_id": "mbpp/805",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8057": {
    "question_id": "mbpp/805",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8058": {
    "question_id": "mbpp/805",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8059": {
    "question_id": "mbpp/805",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8060": {
    "question_id": "mbpp/806",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8061": {
    "question_id": "mbpp/806",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8062": {
    "question_id": "mbpp/806",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8063": {
    "question_id": "mbpp/806",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8064": {
    "question_id": "mbpp/806",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8065": {
    "question_id": "mbpp/806",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8066": {
    "question_id": "mbpp/806",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8067": {
    "question_id": "mbpp/806",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8068": {
    "question_id": "mbpp/806",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8069": {
    "question_id": "mbpp/806",
    "model": "deepseek-v3-250324",
    "generation_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8070": {
    "question_id": "mbpp/807",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_K(t, k):\n    return k in t",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8071": {
    "question_id": "mbpp/807",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_K(t, k):\n    return k in t",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8072": {
    "question_id": "mbpp/807",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_K(t, k):\n    return k in t",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8073": {
    "question_id": "mbpp/807",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_K(t, k):\n    return k in t",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8074": {
    "question_id": "mbpp/807",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_K(tuples, k):\n    return k in tuples",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8075": {
    "question_id": "mbpp/807",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_K(t, k):\n    return k in t",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8076": {
    "question_id": "mbpp/807",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_K(tuples, k):\n    return k in tuples",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8077": {
    "question_id": "mbpp/807",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_K(tuples, k):\n    return k in tuples",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8078": {
    "question_id": "mbpp/807",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_K(tuples, k):\n    return k in tuples",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8079": {
    "question_id": "mbpp/807",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_K(tuples, k):\n    return k in tuples",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8080": {
    "question_id": "mbpp/808",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_smaller(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8081": {
    "question_id": "mbpp/808",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_smaller(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8082": {
    "question_id": "mbpp/808",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_smaller(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8083": {
    "question_id": "mbpp/808",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_smaller(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8084": {
    "question_id": "mbpp/808",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_smaller(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8085": {
    "question_id": "mbpp/808",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_smaller(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8086": {
    "question_id": "mbpp/808",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_smaller(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8087": {
    "question_id": "mbpp/808",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_smaller(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8088": {
    "question_id": "mbpp/808",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_smaller(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8089": {
    "question_id": "mbpp/808",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_smaller(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8090": {
    "question_id": "mbpp/809",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_variable(*args):\n    result = []\n    for i, count in enumerate(args):\n        if count > 0:\n            char = chr(ord('p') + i)\n            result.extend([char] * count)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8091": {
    "question_id": "mbpp/809",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_variable(*args):\n    result = []\n    for i in range(0, len(args), 2):\n        if i + 1 >= len(args):\n            break\n        element = args[i]\n        count = args[i + 1]\n        if count <= 0:\n            continue\n        result.extend([element] * count)\n    return result",
    "test_output": "FAILED: expect ['p', 'p', 'p', 'p', 'q', 'q'],in fact [4, 4]",
    "test_result": "False"
  },
  "8092": {
    "question_id": "mbpp/809",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_variable(*args):\n    result = []\n    for i in range(0, len(args), 2):\n        if i + 1 < len(args):\n            element = args[i]\n            count = args[i + 1]\n            if count > 0:\n                result.extend([element] * count)\n    return result",
    "test_output": "FAILED: expect ['p', 'p', 'p', 'p', 'q', 'q'],in fact [4, 4]",
    "test_result": "False"
  },
  "8093": {
    "question_id": "mbpp/809",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_variable(*args):\n    result = []\n    for i in range(0, len(args), 2):\n        if i + 1 >= len(args):\n            break\n        element = args[i]\n        count = args[i+1]\n        if count > 0:\n            result.extend([element] * count)\n    return result",
    "test_output": "FAILED: expect ['p', 'p', 'p', 'p', 'q', 'q'],in fact [4, 4]",
    "test_result": "False"
  },
  "8094": {
    "question_id": "mbpp/809",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_variable(*args):\n    result = []\n    for i in range(0, len(args), 2):\n        if i + 1 >= len(args):\n            break\n        element = args[i]\n        count = args[i + 1]\n        if count > 0:\n            result.extend([element] * count)\n    return result",
    "test_output": "FAILED: expect ['p', 'p', 'p', 'p', 'q', 'q'],in fact [4, 4]",
    "test_result": "False"
  },
  "8095": {
    "question_id": "mbpp/809",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_variable(*args):\n    result = []\n    for i in range(0, len(args), 2):\n        if i + 1 >= len(args):\n            break\n        element = args[i]\n        count = args[i + 1]\n        if count <= 0:\n            continue\n        result.extend([element] * count)\n    return result",
    "test_output": "FAILED: expect ['p', 'p', 'p', 'p', 'q', 'q'],in fact [4, 4]",
    "test_result": "False"
  },
  "8096": {
    "question_id": "mbpp/809",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_variable(*args):\n    result = []\n    for i in range(0, len(args), 2):\n        if i + 1 >= len(args):\n            break\n        element = args[i]\n        count = args[i + 1]\n        if count > 0:\n            result.extend([element] * count)\n    return result",
    "test_output": "FAILED: expect ['p', 'p', 'p', 'p', 'q', 'q'],in fact [4, 4]",
    "test_result": "False"
  },
  "8097": {
    "question_id": "mbpp/809",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_variable(*args):\n    result = []\n    for i in range(0, len(args), 2):\n        if i + 1 >= len(args):\n            break\n        element = args[i]\n        count = args[i + 1]\n        if count <= 0:\n            continue\n        result.extend([element] * count)\n    return result",
    "test_output": "FAILED: expect ['p', 'p', 'p', 'p', 'q', 'q'],in fact [4, 4]",
    "test_result": "False"
  },
  "8098": {
    "question_id": "mbpp/809",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_variable(*args):\n    result = []\n    for i in range(0, len(args), 2):\n        if i + 1 < len(args):\n            element = args[i]\n            count = args[i + 1]\n            if count > 0:\n                result.extend([element] * count)\n    return result",
    "test_output": "FAILED: expect ['p', 'p', 'p', 'p', 'q', 'q'],in fact [4, 4]",
    "test_result": "False"
  },
  "8099": {
    "question_id": "mbpp/809",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_variable(*args):\n    result = []\n    for i in range(0, len(args), 2):\n        if i + 1 >= len(args):\n            break\n        element = args[i]\n        count = args[i + 1]\n        if count <= 0:\n            continue\n        result.extend([chr(ord('p') + (i // 2))] * count)\n    return result",
    "test_output": "FAILED: expect ['p', 'p', 'p', 'p', 'q', 'q'],in fact ['p', 'p']",
    "test_result": "False"
  },
  "8100": {
    "question_id": "mbpp/810",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_identical(list1, list2):\n    return list1 == list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8101": {
    "question_id": "mbpp/810",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_identical(list1, list2):\n    return list1 == list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8102": {
    "question_id": "mbpp/810",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_identical(list1, list2):\n    return list1 == list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8103": {
    "question_id": "mbpp/810",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_identical(list1, list2):\n    return list1 == list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8104": {
    "question_id": "mbpp/810",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_identical(list1, list2):\n    return list1 == list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8105": {
    "question_id": "mbpp/810",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_identical(list1, list2):\n    return list1 == list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8106": {
    "question_id": "mbpp/810",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_identical(list1, list2):\n    return list1 == list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8107": {
    "question_id": "mbpp/810",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_identical(list1, list2):\n    return list1 == list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8108": {
    "question_id": "mbpp/810",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_identical(list1, list2):\n    return list1 == list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8109": {
    "question_id": "mbpp/810",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_identical(list1, list2):\n    return list1 == list2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8110": {
    "question_id": "mbpp/811",
    "model": "deepseek-v3-250324",
    "generation_code": "def road_rd(s):\n    return s.replace(' Road', ' Rd.').replace(' road', ' rd.')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8111": {
    "question_id": "mbpp/811",
    "model": "deepseek-v3-250324",
    "generation_code": "def road_rd(s):\n    return s.replace(' Road', ' Rd.').replace(' road', ' rd.')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8112": {
    "question_id": "mbpp/811",
    "model": "deepseek-v3-250324",
    "generation_code": "def road_rd(s):\n    return s.replace(' Road', ' Rd.').replace(' road', ' rd.')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8113": {
    "question_id": "mbpp/811",
    "model": "deepseek-v3-250324",
    "generation_code": "def road_rd(s):\n    return s.replace('Road', 'Rd.').replace('road', 'rd.')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8114": {
    "question_id": "mbpp/811",
    "model": "deepseek-v3-250324",
    "generation_code": "def road_rd(s):\n    return s.replace(' Road', ' Rd.').replace(' road', ' rd.')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8115": {
    "question_id": "mbpp/811",
    "model": "deepseek-v3-250324",
    "generation_code": "def road_rd(s):\n    return s.replace(' Road', ' Rd.').replace(' road', ' rd.')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8116": {
    "question_id": "mbpp/811",
    "model": "deepseek-v3-250324",
    "generation_code": "def road_rd(s):\n    return s.replace(' Road', ' Rd.').replace(' road', ' rd.')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8117": {
    "question_id": "mbpp/811",
    "model": "deepseek-v3-250324",
    "generation_code": "def road_rd(s):\n    return s.replace(' Road', ' Rd.').replace(' road', ' rd.')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8118": {
    "question_id": "mbpp/811",
    "model": "deepseek-v3-250324",
    "generation_code": "def road_rd(s):\n    return s.replace(' Road', ' Rd.').replace(' road', ' rd.')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8119": {
    "question_id": "mbpp/811",
    "model": "deepseek-v3-250324",
    "generation_code": "def road_rd(s):\n    return s.replace(' Road', ' Rd.').replace(' road', ' rd.')",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8120": {
    "question_id": "mbpp/812",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_length(s):\n    return len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8121": {
    "question_id": "mbpp/812",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_length(s):\n    return len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8122": {
    "question_id": "mbpp/812",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_length(s):\n    return len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8123": {
    "question_id": "mbpp/812",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_length(s):\n    return len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8124": {
    "question_id": "mbpp/812",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_length(s):\n    return len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8125": {
    "question_id": "mbpp/812",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_length(s):\n    return len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8126": {
    "question_id": "mbpp/812",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_length(s):\n    return len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8127": {
    "question_id": "mbpp/812",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_length(s):\n    return len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8128": {
    "question_id": "mbpp/812",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_length(s):\n    return len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8129": {
    "question_id": "mbpp/812",
    "model": "deepseek-v3-250324",
    "generation_code": "def string_length(s):\n    return len(s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8130": {
    "question_id": "mbpp/813",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_area(d1, d2):\n    return (d1 * d2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8131": {
    "question_id": "mbpp/813",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_area(d1, d2):\n    return (d1 * d2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8132": {
    "question_id": "mbpp/813",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_area(d1, d2):\n    return (d1 * d2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8133": {
    "question_id": "mbpp/813",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_area(d1, d2):\n    return (d1 * d2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8134": {
    "question_id": "mbpp/813",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_area(d1, d2):\n    return (d1 * d2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8135": {
    "question_id": "mbpp/813",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_area(d1, d2):\n    return (d1 * d2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8136": {
    "question_id": "mbpp/813",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_area(d1, d2):\n    return (d1 * d2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8137": {
    "question_id": "mbpp/813",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_area(d1, d2):\n    return (d1 * d2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8138": {
    "question_id": "mbpp/813",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_area(d1, d2):\n    return (d1 * d2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8139": {
    "question_id": "mbpp/813",
    "model": "deepseek-v3-250324",
    "generation_code": "def rombus_area(d1, d2):\n    return (d1 * d2) / 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8140": {
    "question_id": "mbpp/814",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_by_dnf(arr, n):\n    count0 = arr.count(0)\n    count1 = arr.count(1)\n    count2 = arr.count(2)\n    \n    sorted_arr = []\n    sorted_arr.extend([0] * count0)\n    sorted_arr.extend([1] * count1)\n    sorted_arr.extend([2] * count2)\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8141": {
    "question_id": "mbpp/814",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_by_dnf(arr, n):\n    count0 = arr.count(0)\n    count1 = arr.count(1)\n    count2 = arr.count(2)\n    \n    sorted_arr = []\n    sorted_arr.extend([0] * count0)\n    sorted_arr.extend([1] * count1)\n    sorted_arr.extend([2] * count2)\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8142": {
    "question_id": "mbpp/814",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_by_dnf(arr, n):\n    count0 = arr.count(0)\n    count1 = arr.count(1)\n    count2 = arr.count(2)\n    \n    sorted_arr = []\n    sorted_arr.extend([0] * count0)\n    sorted_arr.extend([1] * count1)\n    sorted_arr.extend([2] * count2)\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8143": {
    "question_id": "mbpp/814",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_by_dnf(arr, n):\n    count0 = arr.count(0)\n    count1 = arr.count(1)\n    count2 = arr.count(2)\n    \n    sorted_arr = []\n    sorted_arr.extend([0] * count0)\n    sorted_arr.extend([1] * count1)\n    sorted_arr.extend([2] * count2)\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8144": {
    "question_id": "mbpp/814",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_by_dnf(arr, n):\n    count0 = arr.count(0)\n    count1 = arr.count(1)\n    count2 = arr.count(2)\n    \n    sorted_arr = []\n    sorted_arr.extend([0] * count0)\n    sorted_arr.extend([1] * count1)\n    sorted_arr.extend([2] * count2)\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8145": {
    "question_id": "mbpp/814",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_by_dnf(arr, n):\n    count0 = arr.count(0)\n    count1 = arr.count(1)\n    count2 = arr.count(2)\n    \n    sorted_arr = []\n    sorted_arr.extend([0] * count0)\n    sorted_arr.extend([1] * count1)\n    sorted_arr.extend([2] * count2)\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8146": {
    "question_id": "mbpp/814",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_by_dnf(arr, n):\n    count0 = arr.count(0)\n    count1 = arr.count(1)\n    count2 = arr.count(2)\n    \n    sorted_arr = []\n    sorted_arr.extend([0] * count0)\n    sorted_arr.extend([1] * count1)\n    sorted_arr.extend([2] * count2)\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8147": {
    "question_id": "mbpp/814",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_by_dnf(arr, n):\n    count0 = arr.count(0)\n    count1 = arr.count(1)\n    count2 = arr.count(2)\n    \n    sorted_arr = []\n    sorted_arr.extend([0] * count0)\n    sorted_arr.extend([1] * count1)\n    sorted_arr.extend([2] * count2)\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8148": {
    "question_id": "mbpp/814",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_by_dnf(arr, n):\n    count0 = arr.count(0)\n    count1 = arr.count(1)\n    count2 = arr.count(2)\n    \n    sorted_arr = []\n    sorted_arr.extend([0] * count0)\n    sorted_arr.extend([1] * count1)\n    sorted_arr.extend([2] * count2)\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8149": {
    "question_id": "mbpp/814",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_by_dnf(arr, n):\n    count0 = arr.count(0)\n    count1 = arr.count(1)\n    count2 = arr.count(2)\n    \n    sorted_arr = []\n    sorted_arr.extend([0] * count0)\n    sorted_arr.extend([1] * count1)\n    sorted_arr.extend([2] * count2)\n    \n    return sorted_arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8150": {
    "question_id": "mbpp/815",
    "model": "deepseek-v3-250324",
    "generation_code": "def clear_tuple(t):\n    return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8151": {
    "question_id": "mbpp/815",
    "model": "deepseek-v3-250324",
    "generation_code": "def clear_tuple(t):\n    return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8152": {
    "question_id": "mbpp/815",
    "model": "deepseek-v3-250324",
    "generation_code": "def clear_tuple(t):\n    return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8153": {
    "question_id": "mbpp/815",
    "model": "deepseek-v3-250324",
    "generation_code": "def clear_tuple(t):\n    return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8154": {
    "question_id": "mbpp/815",
    "model": "deepseek-v3-250324",
    "generation_code": "def clear_tuple(t):\n    return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8155": {
    "question_id": "mbpp/815",
    "model": "deepseek-v3-250324",
    "generation_code": "def clear_tuple(t):\n    return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8156": {
    "question_id": "mbpp/815",
    "model": "deepseek-v3-250324",
    "generation_code": "def clear_tuple(t):\n    return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8157": {
    "question_id": "mbpp/815",
    "model": "deepseek-v3-250324",
    "generation_code": "def clear_tuple(t):\n    return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8158": {
    "question_id": "mbpp/815",
    "model": "deepseek-v3-250324",
    "generation_code": "def clear_tuple(t):\n    return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8159": {
    "question_id": "mbpp/815",
    "model": "deepseek-v3-250324",
    "generation_code": "def clear_tuple(t):\n    return ()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8160": {
    "question_id": "mbpp/816",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8161": {
    "question_id": "mbpp/816",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda lst, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8162": {
    "question_id": "mbpp/816",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8163": {
    "question_id": "mbpp/816",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8164": {
    "question_id": "mbpp/816",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8165": {
    "question_id": "mbpp/816",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8166": {
    "question_id": "mbpp/816",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: [x for x in numbers if x % m == 0 or x % n == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8167": {
    "question_id": "mbpp/816",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8168": {
    "question_id": "mbpp/816",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda lst, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8169": {
    "question_id": "mbpp/816",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda lst, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8170": {
    "question_id": "mbpp/817",
    "model": "deepseek-v3-250324",
    "generation_code": "def lower_ctr(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8171": {
    "question_id": "mbpp/817",
    "model": "deepseek-v3-250324",
    "generation_code": "def lower_ctr(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8172": {
    "question_id": "mbpp/817",
    "model": "deepseek-v3-250324",
    "generation_code": "def lower_ctr(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8173": {
    "question_id": "mbpp/817",
    "model": "deepseek-v3-250324",
    "generation_code": "def lower_ctr(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8174": {
    "question_id": "mbpp/817",
    "model": "deepseek-v3-250324",
    "generation_code": "def lower_ctr(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8175": {
    "question_id": "mbpp/817",
    "model": "deepseek-v3-250324",
    "generation_code": "def lower_ctr(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8176": {
    "question_id": "mbpp/817",
    "model": "deepseek-v3-250324",
    "generation_code": "def lower_ctr(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8177": {
    "question_id": "mbpp/817",
    "model": "deepseek-v3-250324",
    "generation_code": "def lower_ctr(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8178": {
    "question_id": "mbpp/817",
    "model": "deepseek-v3-250324",
    "generation_code": "def lower_ctr(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8179": {
    "question_id": "mbpp/817",
    "model": "deepseek-v3-250324",
    "generation_code": "def lower_ctr(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8180": {
    "question_id": "mbpp/818",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_duplic(lst):\n    if not lst:\n        return [], []\n    \n    elements = []\n    counts = []\n    current_element = lst[0]\n    count = 1\n    \n    for num in lst[1:]:\n        if num == current_element:\n            count += 1\n        else:\n            elements.append(current_element)\n            counts.append(count)\n            current_element = num\n            count = 1\n    elements.append(current_element)\n    counts.append(count)\n    \n    return elements, counts",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8181": {
    "question_id": "mbpp/818",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_duplic(lst):\n    if not lst:\n        return [], []\n    \n    elements = []\n    counts = []\n    current = lst[0]\n    count = 1\n    \n    for num in lst[1:]:\n        if num == current:\n            count += 1\n        else:\n            elements.append(current)\n            counts.append(count)\n            current = num\n            count = 1\n    elements.append(current)\n    counts.append(count)\n    \n    return elements, counts",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8182": {
    "question_id": "mbpp/818",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_duplic(lst):\n    if not lst:\n        return [], []\n    \n    elements = []\n    counts = []\n    current_element = lst[0]\n    count = 1\n    \n    for num in lst[1:]:\n        if num == current_element:\n            count += 1\n        else:\n            elements.append(current_element)\n            counts.append(count)\n            current_element = num\n            count = 1\n    elements.append(current_element)\n    counts.append(count)\n    \n    return elements, counts",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8183": {
    "question_id": "mbpp/818",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_duplic(lst):\n    if not lst:\n        return [], []\n    \n    elements = []\n    counts = []\n    current_element = lst[0]\n    count = 1\n    \n    for num in lst[1:]:\n        if num == current_element:\n            count += 1\n        else:\n            elements.append(current_element)\n            counts.append(count)\n            current_element = num\n            count = 1\n    elements.append(current_element)\n    counts.append(count)\n    \n    return elements, counts",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8184": {
    "question_id": "mbpp/818",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_duplic(lst):\n    if not lst:\n        return [], []\n    \n    elements = []\n    counts = []\n    current_element = lst[0]\n    count = 1\n    \n    for num in lst[1:]:\n        if num == current_element:\n            count += 1\n        else:\n            elements.append(current_element)\n            counts.append(count)\n            current_element = num\n            count = 1\n    \n    elements.append(current_element)\n    counts.append(count)\n    \n    return elements, counts",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8185": {
    "question_id": "mbpp/818",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_duplic(lst):\n    if not lst:\n        return ([], [])\n    \n    elements = []\n    counts = []\n    current = lst[0]\n    count = 1\n    \n    for num in lst[1:]:\n        if num == current:\n            count += 1\n        else:\n            elements.append(current)\n            counts.append(count)\n            current = num\n            count = 1\n    elements.append(current)\n    counts.append(count)\n    \n    return (elements, counts)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8186": {
    "question_id": "mbpp/818",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_duplic(lst):\n    if not lst:\n        return [], []\n    \n    elements = []\n    counts = []\n    current_element = lst[0]\n    count = 1\n    \n    for num in lst[1:]:\n        if num == current_element:\n            count += 1\n        else:\n            elements.append(current_element)\n            counts.append(count)\n            current_element = num\n            count = 1\n    \n    elements.append(current_element)\n    counts.append(count)\n    \n    return elements, counts",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8187": {
    "question_id": "mbpp/818",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_duplic(lst):\n    if not lst:\n        return [], []\n    \n    elements = []\n    counts = []\n    current_element = lst[0]\n    count = 1\n    \n    for num in lst[1:]:\n        if num == current_element:\n            count += 1\n        else:\n            elements.append(current_element)\n            counts.append(count)\n            current_element = num\n            count = 1\n    \n    elements.append(current_element)\n    counts.append(count)\n    \n    return elements, counts",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8188": {
    "question_id": "mbpp/818",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_duplic(lst):\n    if not lst:\n        return [], []\n    \n    elements = []\n    counts = []\n    current_element = lst[0]\n    count = 1\n    \n    for num in lst[1:]:\n        if num == current_element:\n            count += 1\n        else:\n            elements.append(current_element)\n            counts.append(count)\n            current_element = num\n            count = 1\n    \n    elements.append(current_element)\n    counts.append(count)\n    \n    return elements, counts",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8189": {
    "question_id": "mbpp/818",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_duplic(lst):\n    if not lst:\n        return [], []\n    \n    elements = []\n    counts = []\n    current_element = lst[0]\n    count = 1\n    \n    for num in lst[1:]:\n        if num == current_element:\n            count += 1\n        else:\n            elements.append(current_element)\n            counts.append(count)\n            current_element = num\n            count = 1\n    elements.append(current_element)\n    counts.append(count)\n    \n    return elements, counts",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8190": {
    "question_id": "mbpp/819",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum_number(month):\n    return month == 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8191": {
    "question_id": "mbpp/819",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum_number(month):\n    return month == 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8192": {
    "question_id": "mbpp/819",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum_number(month):\n    if month == 2:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8193": {
    "question_id": "mbpp/819",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum_number(month):\n    return month == 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8194": {
    "question_id": "mbpp/819",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum_number(month):\n    return month == 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8195": {
    "question_id": "mbpp/819",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum_number(month):\n    return month == 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8196": {
    "question_id": "mbpp/819",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum_number(month):\n    return month == 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8197": {
    "question_id": "mbpp/819",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum_number(month):\n    return month == 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8198": {
    "question_id": "mbpp/819",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum_number(month):\n    return month == 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8199": {
    "question_id": "mbpp/819",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnum_number(month):\n    return month == 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8200": {
    "question_id": "mbpp/820",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8201": {
    "question_id": "mbpp/820",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8202": {
    "question_id": "mbpp/820",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8203": {
    "question_id": "mbpp/820",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8204": {
    "question_id": "mbpp/820",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8205": {
    "question_id": "mbpp/820",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8206": {
    "question_id": "mbpp/820",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8207": {
    "question_id": "mbpp/820",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8208": {
    "question_id": "mbpp/820",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8209": {
    "question_id": "mbpp/820",
    "model": "deepseek-v3-250324",
    "generation_code": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8210": {
    "question_id": "mbpp/821",
    "model": "deepseek-v3-250324",
    "generation_code": "def pass_validity(password):\n    if len(password) < 8:\n        return False\n    has_upper = any(c.isupper() for c in password)\n    has_lower = any(c.islower() for c in password)\n    has_digit = any(c.isdigit() for c in password)\n    has_special = any(not c.isalnum() for c in password)\n    return has_upper and has_lower and has_digit and has_special",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8211": {
    "question_id": "mbpp/821",
    "model": "deepseek-v3-250324",
    "generation_code": "def pass_validity(password):\n    if len(password) < 8:\n        return False\n    has_upper = any(c.isupper() for c in password)\n    has_lower = any(c.islower() for c in password)\n    has_digit = any(c.isdigit() for c in password)\n    has_special = any(not c.isalnum() for c in password)\n    return has_upper and has_lower and has_digit and has_special",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8212": {
    "question_id": "mbpp/821",
    "model": "deepseek-v3-250324",
    "generation_code": "def pass_validity(password):\n    if len(password) < 8:\n        return False\n    has_upper = any(c.isupper() for c in password)\n    has_lower = any(c.islower() for c in password)\n    has_digit = any(c.isdigit() for c in password)\n    has_special = any(not c.isalnum() for c in password)\n    return has_upper and has_lower and has_digit and has_special",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8213": {
    "question_id": "mbpp/821",
    "model": "deepseek-v3-250324",
    "generation_code": "def pass_validity(password):\n    if len(password) < 8:\n        return False\n    has_upper = False\n    has_lower = False\n    has_digit = False\n    has_special = False\n    special_chars = \"!@#$%^&*()-+\"\n    for char in password:\n        if char.isupper():\n            has_upper = True\n        elif char.islower():\n            has_lower = True\n        elif char.isdigit():\n            has_digit = True\n        elif char in special_chars:\n            has_special = True\n    return has_upper and has_lower and has_digit and has_special",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8214": {
    "question_id": "mbpp/821",
    "model": "deepseek-v3-250324",
    "generation_code": "def pass_validity(password):\n    if len(password) < 8:\n        return False\n    has_upper = False\n    has_lower = False\n    has_digit = False\n    has_special = False\n    special_chars = \"!@#$%^&*()-+\"\n    \n    for char in password:\n        if char.isupper():\n            has_upper = True\n        elif char.islower():\n            has_lower = True\n        elif char.isdigit():\n            has_digit = True\n        elif char in special_chars:\n            has_special = True\n    \n    return has_upper and has_lower and has_digit and has_special",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8215": {
    "question_id": "mbpp/821",
    "model": "deepseek-v3-250324",
    "generation_code": "def pass_validity(password):\n    if len(password) < 8:\n        return False\n    has_upper = False\n    has_lower = False\n    has_digit = False\n    has_special = False\n    special_chars = \"!@#$%^&*()-+\"\n    for char in password:\n        if char.isupper():\n            has_upper = True\n        elif char.islower():\n            has_lower = True\n        elif char.isdigit():\n            has_digit = True\n        elif char in special_chars:\n            has_special = True\n    return has_upper and has_lower and has_digit and has_special",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8216": {
    "question_id": "mbpp/821",
    "model": "deepseek-v3-250324",
    "generation_code": "def pass_validity(password):\n    if len(password) < 8:\n        return False\n    has_upper = False\n    has_lower = False\n    has_digit = False\n    has_special = False\n    special_chars = \"!@#$%^&*()-+\"\n    for char in password:\n        if char.isupper():\n            has_upper = True\n        elif char.islower():\n            has_lower = True\n        elif char.isdigit():\n            has_digit = True\n        elif char in special_chars:\n            has_special = True\n    return has_upper and has_lower and has_digit and has_special",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8217": {
    "question_id": "mbpp/821",
    "model": "deepseek-v3-250324",
    "generation_code": "def pass_validity(password):\n    if len(password) < 8:\n        return False\n    has_upper = False\n    has_lower = False\n    has_digit = False\n    has_special = False\n    special_chars = \"!@#$%^&*()-+\"\n    for char in password:\n        if char.isupper():\n            has_upper = True\n        elif char.islower():\n            has_lower = True\n        elif char.isdigit():\n            has_digit = True\n        elif char in special_chars:\n            has_special = True\n    return has_upper and has_lower and has_digit and has_special",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8218": {
    "question_id": "mbpp/821",
    "model": "deepseek-v3-250324",
    "generation_code": "def pass_validity(password):\n    if len(password) < 8:\n        return False\n    has_upper = False\n    has_lower = False\n    has_digit = False\n    has_special = False\n    special_chars = \"!@#$%^&*()-+\"\n    for char in password:\n        if char.isupper():\n            has_upper = True\n        elif char.islower():\n            has_lower = True\n        elif char.isdigit():\n            has_digit = True\n        elif char in special_chars:\n            has_special = True\n    return has_upper and has_lower and has_digit and has_special",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8219": {
    "question_id": "mbpp/821",
    "model": "deepseek-v3-250324",
    "generation_code": "def pass_validity(password):\n    if len(password) < 8:\n        return False\n    has_upper = False\n    has_lower = False\n    has_digit = False\n    has_special = False\n    special_chars = \"!@#$%^&*()-+\"\n    for char in password:\n        if char.isupper():\n            has_upper = True\n        elif char.islower():\n            has_lower = True\n        elif char.isdigit():\n            has_digit = True\n        elif char in special_chars:\n            has_special = True\n    return has_upper and has_lower and has_digit and has_special",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8220": {
    "question_id": "mbpp/822",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_substring(string, substring):\n    if re.match(f'^{re.escape(substring)}', string):\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8221": {
    "question_id": "mbpp/822",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_substring(string, substring):\n    if re.match(f'^{re.escape(substring)}', string):\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8222": {
    "question_id": "mbpp/822",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_substring(string, substring):\n    if re.match(f'^{re.escape(substring)}', string):\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8223": {
    "question_id": "mbpp/822",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_substring(string, substring):\n    if re.match(f'^{re.escape(substring)}', string):\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8224": {
    "question_id": "mbpp/822",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_substring(string, substring):\n    if re.match(f'^{re.escape(substring)}', string):\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8225": {
    "question_id": "mbpp/822",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_substring(string, substring):\n    if re.match(f'^{re.escape(substring)}', string):\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8226": {
    "question_id": "mbpp/822",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_substring(string, substring):\n    if re.match(f'^{re.escape(substring)}', string):\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8227": {
    "question_id": "mbpp/822",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_substring(string, substring):\n    if re.match(f'^{re.escape(substring)}', string):\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8228": {
    "question_id": "mbpp/822",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_substring(string, substring):\n    if re.match(f'^{re.escape(substring)}', string):\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8229": {
    "question_id": "mbpp/822",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_substring(string, substring):\n    if re.match(f'^{re.escape(substring)}', string):\n        return 'string starts with the given substring'\n    else:\n        return 'string doesnt start with the given substring'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8230": {
    "question_id": "mbpp/823",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8231": {
    "question_id": "mbpp/823",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8232": {
    "question_id": "mbpp/823",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8233": {
    "question_id": "mbpp/823",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8234": {
    "question_id": "mbpp/823",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8235": {
    "question_id": "mbpp/823",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8236": {
    "question_id": "mbpp/823",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8237": {
    "question_id": "mbpp/823",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8238": {
    "question_id": "mbpp/823",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8239": {
    "question_id": "mbpp/823",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_even(lst):\n    return [x for x in lst if x % 2 != 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8240": {
    "question_id": "mbpp/824",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_elements(lst, indices):\n    return [lst[i] for i in indices if i < len(lst)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8241": {
    "question_id": "mbpp/824",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_elements(lst, indices):\n    return [lst[i] for i in indices if i < len(lst)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8242": {
    "question_id": "mbpp/824",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_elements(lst, indices):\n    return [lst[i] for i in indices if i < len(lst)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8243": {
    "question_id": "mbpp/824",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_elements(lst, indices):\n    return [lst[i] for i in indices if i < len(lst)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8244": {
    "question_id": "mbpp/824",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_elements(lst, indices):\n    return [lst[i] for i in indices if i < len(lst)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8245": {
    "question_id": "mbpp/824",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_elements(lst, indices):\n    return [lst[i] for i in indices if i < len(lst)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8246": {
    "question_id": "mbpp/824",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_elements(lst, indices):\n    return [lst[i] for i in indices if i < len(lst)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8247": {
    "question_id": "mbpp/824",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_elements(lst, indices):\n    return [lst[i] for i in indices if i < len(lst)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8248": {
    "question_id": "mbpp/824",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_elements(lst, indices):\n    return [lst[i] for i in indices if i < len(lst)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8249": {
    "question_id": "mbpp/824",
    "model": "deepseek-v3-250324",
    "generation_code": "def access_elements(lst, indices):\n    return [lst[i] for i in indices if i < len(lst)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8250": {
    "question_id": "mbpp/825",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Type_Of_Triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a Triangle\"\n    \n    sides = sorted([a, b, c])\n    a_sq = sides[0] ** 2\n    b_sq = sides[1] ** 2\n    c_sq = sides[2] ** 2\n    \n    if a_sq + b_sq == c_sq:\n        return \"Right-angled Triangle\"\n    elif a_sq + b_sq > c_sq:\n        return \"Acute-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"",
    "test_output": "FAILED: expect Obtuse-angled Triangle,in fact Not a Triangle",
    "test_result": "False"
  },
  "8251": {
    "question_id": "mbpp/825",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Type_Of_Triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a Triangle\"\n    sides = sorted([a, b, c])\n    a_sq = sides[0] ** 2\n    b_sq = sides[1] ** 2\n    c_sq = sides[2] ** 2\n    \n    if a_sq + b_sq > c_sq:\n        return \"Acute-angled Triangle\"\n    elif a_sq + b_sq == c_sq:\n        return \"Right-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"",
    "test_output": "FAILED: expect Obtuse-angled Triangle,in fact Not a Triangle",
    "test_result": "False"
  },
  "8252": {
    "question_id": "mbpp/825",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Type_Of_Triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a Triangle\"\n    sides = sorted([a, b, c])\n    a_sq = sides[0] ** 2\n    b_sq = sides[1] ** 2\n    c_sq = sides[2] ** 2\n    \n    if a_sq + b_sq == c_sq:\n        return \"Right-angled Triangle\"\n    elif a_sq + b_sq > c_sq:\n        return \"Acute-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"",
    "test_output": "FAILED: expect Obtuse-angled Triangle,in fact Not a Triangle",
    "test_result": "False"
  },
  "8253": {
    "question_id": "mbpp/825",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Type_Of_Triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a Triangle\"\n    sides = sorted([a, b, c])\n    a_sq = sides[0] ** 2\n    b_sq = sides[1] ** 2\n    c_sq = sides[2] ** 2\n    if a_sq + b_sq == c_sq:\n        return \"Right-angled Triangle\"\n    elif a_sq + b_sq > c_sq:\n        return \"Acute-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"",
    "test_output": "FAILED: expect Obtuse-angled Triangle,in fact Not a Triangle",
    "test_result": "False"
  },
  "8254": {
    "question_id": "mbpp/825",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Type_Of_Triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a Triangle\"\n    sides = sorted([a, b, c])\n    a_sq = sides[0] ** 2\n    b_sq = sides[1] ** 2\n    c_sq = sides[2] ** 2\n    \n    if a_sq + b_sq > c_sq:\n        return \"Acute-angled Triangle\"\n    elif a_sq + b_sq == c_sq:\n        return \"Right-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"",
    "test_output": "FAILED: expect Obtuse-angled Triangle,in fact Not a Triangle",
    "test_result": "False"
  },
  "8255": {
    "question_id": "mbpp/825",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Type_Of_Triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a Triangle\"\n    \n    sides = sorted([a, b, c])\n    a_sq = sides[0] ** 2\n    b_sq = sides[1] ** 2\n    c_sq = sides[2] ** 2\n    \n    if a_sq + b_sq == c_sq:\n        return \"Right-angled Triangle\"\n    elif a_sq + b_sq > c_sq:\n        return \"Acute-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"",
    "test_output": "FAILED: expect Obtuse-angled Triangle,in fact Not a Triangle",
    "test_result": "False"
  },
  "8256": {
    "question_id": "mbpp/825",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Type_Of_Triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a Triangle\"\n    \n    sides = sorted([a, b, c])\n    a_sq = sides[0] ** 2\n    b_sq = sides[1] ** 2\n    c_sq = sides[2] ** 2\n    \n    if a_sq + b_sq == c_sq:\n        return \"Right-angled Triangle\"\n    elif a_sq + b_sq > c_sq:\n        return \"Acute-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"",
    "test_output": "FAILED: expect Obtuse-angled Triangle,in fact Not a Triangle",
    "test_result": "False"
  },
  "8257": {
    "question_id": "mbpp/825",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Type_Of_Triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a Triangle\"\n    sides = sorted([a, b, c])\n    a_sq = sides[0] ** 2\n    b_sq = sides[1] ** 2\n    c_sq = sides[2] ** 2\n    \n    if a_sq + b_sq == c_sq:\n        return \"Right-angled Triangle\"\n    elif a_sq + b_sq > c_sq:\n        return \"Acute-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"",
    "test_output": "FAILED: expect Obtuse-angled Triangle,in fact Not a Triangle",
    "test_result": "False"
  },
  "8258": {
    "question_id": "mbpp/825",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Type_Of_Triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a Triangle\"\n    sides = sorted([a, b, c])\n    a_sq = sides[0] ** 2\n    b_sq = sides[1] ** 2\n    c_sq = sides[2] ** 2\n    \n    if a_sq + b_sq == c_sq:\n        return \"Right-angled Triangle\"\n    elif a_sq + b_sq > c_sq:\n        return \"Acute-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"",
    "test_output": "FAILED: expect Obtuse-angled Triangle,in fact Not a Triangle",
    "test_result": "False"
  },
  "8259": {
    "question_id": "mbpp/825",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Type_Of_Triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a Triangle\"\n    sides = sorted([a, b, c])\n    a_sq = sides[0] ** 2\n    b_sq = sides[1] ** 2\n    c_sq = sides[2] ** 2\n    \n    if a_sq + b_sq == c_sq:\n        return \"Right-angled Triangle\"\n    elif a_sq + b_sq > c_sq:\n        return \"Acute-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"",
    "test_output": "FAILED: expect Obtuse-angled Triangle,in fact Not a Triangle",
    "test_result": "False"
  },
  "8260": {
    "question_id": "mbpp/826",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_column(list_of_lists, column_index):\n    total = 0\n    for row in list_of_lists:\n        if column_index < len(row):\n            total += row[column_index]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8261": {
    "question_id": "mbpp/826",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_column(list_of_lists, column_index):\n    if not list_of_lists or column_index < 0:\n        return 0\n    total = 0\n    for row in list_of_lists:\n        if column_index < len(row):\n            total += row[column_index]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8262": {
    "question_id": "mbpp/826",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_column(list_of_lists, column_index):\n    if not list_of_lists or column_index < 0:\n        return 0\n    total = 0\n    for row in list_of_lists:\n        if column_index < len(row):\n            total += row[column_index]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8263": {
    "question_id": "mbpp/826",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_column(list_of_lists, column_index):\n    if not list_of_lists or column_index < 0:\n        return 0\n    total = 0\n    for row in list_of_lists:\n        if column_index < len(row):\n            total += row[column_index]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8264": {
    "question_id": "mbpp/826",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_column(list_of_lists, column_index):\n    if not list_of_lists or column_index < 0:\n        return 0\n    total = 0\n    for row in list_of_lists:\n        if column_index < len(row):\n            total += row[column_index]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8265": {
    "question_id": "mbpp/826",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_column(list_of_lists, column_index):\n    total = 0\n    for row in list_of_lists:\n        if column_index < len(row):\n            total += row[column_index]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8266": {
    "question_id": "mbpp/826",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_column(list_of_lists, column_index):\n    total = 0\n    for row in list_of_lists:\n        if column_index < len(row):\n            total += row[column_index]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8267": {
    "question_id": "mbpp/826",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_column(list_of_lists, column_index):\n    if not list_of_lists or column_index < 0:\n        return 0\n    total = 0\n    for row in list_of_lists:\n        if column_index < len(row):\n            total += row[column_index]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8268": {
    "question_id": "mbpp/826",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_column(list_of_lists, column_index):\n    if not list_of_lists or column_index < 0:\n        return 0\n    total = 0\n    for row in list_of_lists:\n        if column_index < len(row):\n            total += row[column_index]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8269": {
    "question_id": "mbpp/826",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_column(list_of_lists, column_index):\n    total = 0\n    for row in list_of_lists:\n        if column_index < len(row):\n            total += row[column_index]\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8270": {
    "question_id": "mbpp/827",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_alpha_dig_spl(input_string):\n    alphabets = 0\n    digits = 0\n    special = 0\n    for char in input_string:\n        if char.isalpha():\n            alphabets += 1\n        elif char.isdigit():\n            digits += 1\n        else:\n            special += 1\n    return (alphabets, digits, special)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8271": {
    "question_id": "mbpp/827",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_alpha_dig_spl(s):\n    alpha = 0\n    digit = 0\n    special = 0\n    for char in s:\n        if char.isalpha():\n            alpha += 1\n        elif char.isdigit():\n            digit += 1\n        else:\n            special += 1\n    return (alpha, digit, special)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8272": {
    "question_id": "mbpp/827",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_alpha_dig_spl(input_string):\n    alphabets = 0\n    digits = 0\n    special = 0\n    \n    for char in input_string:\n        if char.isalpha():\n            alphabets += 1\n        elif char.isdigit():\n            digits += 1\n        else:\n            special += 1\n    \n    return (alphabets, digits, special)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8273": {
    "question_id": "mbpp/827",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_alpha_dig_spl(s):\n    alpha = 0\n    digit = 0\n    special = 0\n    for char in s:\n        if char.isalpha():\n            alpha += 1\n        elif char.isdigit():\n            digit += 1\n        else:\n            special += 1\n    return (alpha, digit, special)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8274": {
    "question_id": "mbpp/827",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_alpha_dig_spl(input_string):\n    alphabets = 0\n    digits = 0\n    special = 0\n    \n    for char in input_string:\n        if char.isalpha():\n            alphabets += 1\n        elif char.isdigit():\n            digits += 1\n        else:\n            special += 1\n    \n    return (alphabets, digits, special)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8275": {
    "question_id": "mbpp/827",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_alpha_dig_spl(input_string):\n    alphabets = 0\n    digits = 0\n    special = 0\n    for char in input_string:\n        if char.isalpha():\n            alphabets += 1\n        elif char.isdigit():\n            digits += 1\n        else:\n            special += 1\n    return (alphabets, digits, special)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8276": {
    "question_id": "mbpp/827",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_alpha_dig_spl(input_string):\n    alphabets = 0\n    digits = 0\n    special = 0\n    \n    for char in input_string:\n        if char.isalpha():\n            alphabets += 1\n        elif char.isdigit():\n            digits += 1\n        else:\n            special += 1\n    \n    return (alphabets, digits, special)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8277": {
    "question_id": "mbpp/827",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_alpha_dig_spl(s):\n    alpha = 0\n    digit = 0\n    special = 0\n    for char in s:\n        if char.isalpha():\n            alpha += 1\n        elif char.isdigit():\n            digit += 1\n        else:\n            special += 1\n    return (alpha, digit, special)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8278": {
    "question_id": "mbpp/827",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_alpha_dig_spl(input_string):\n    alphabets = 0\n    digits = 0\n    special = 0\n    \n    for char in input_string:\n        if char.isalpha():\n            alphabets += 1\n        elif char.isdigit():\n            digits += 1\n        else:\n            special += 1\n    \n    return (alphabets, digits, special)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8279": {
    "question_id": "mbpp/827",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_alpha_dig_spl(input_string):\n    alphabets = 0\n    digits = 0\n    special = 0\n    \n    for char in input_string:\n        if char.isalpha():\n            alphabets += 1\n        elif char.isdigit():\n            digits += 1\n        else:\n            special += 1\n    \n    return (alphabets, digits, special)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8280": {
    "question_id": "mbpp/828",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_frequent(sequence):\n    if not sequence:\n        return None\n    \n    frequency = {}\n    for item in sequence:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    if len(frequency) < 2:\n        return None\n    \n    sorted_items = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items[1][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8281": {
    "question_id": "mbpp/828",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_frequent(sequence):\n    if not sequence:\n        return None\n    \n    frequency = {}\n    for item in sequence:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    if len(frequency) < 2:\n        return None\n    \n    sorted_items = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items[1][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8282": {
    "question_id": "mbpp/828",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_frequent(sequence):\n    if not sequence:\n        return None\n    \n    frequency = {}\n    for item in sequence:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    if len(frequency) < 2:\n        return None\n    \n    sorted_items = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items[1][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8283": {
    "question_id": "mbpp/828",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_frequent(sequence):\n    if not sequence:\n        return None\n    frequency = {}\n    for item in sequence:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    if len(frequency) < 2:\n        return None\n    sorted_items = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items[1][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8284": {
    "question_id": "mbpp/828",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_frequent(sequence):\n    if not sequence:\n        return None\n    \n    frequency = {}\n    for item in sequence:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    if len(frequency) < 2:\n        return None\n    \n    sorted_items = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items[1][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8285": {
    "question_id": "mbpp/828",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_frequent(sequence):\n    if not sequence:\n        return None\n    \n    frequency = {}\n    for item in sequence:\n        frequency[item] = frequency.get(item, 0) + 1\n    \n    if len(frequency) < 2:\n        return None\n    \n    sorted_items = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items[1][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8286": {
    "question_id": "mbpp/828",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_frequent(sequence):\n    if not sequence:\n        return None\n    \n    frequency = {}\n    for item in sequence:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    if len(frequency) < 2:\n        return None\n    \n    sorted_items = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items[1][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8287": {
    "question_id": "mbpp/828",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_frequent(sequence):\n    if not sequence:\n        return None\n    \n    frequency = {}\n    for item in sequence:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    if len(frequency) < 2:\n        return None\n    \n    sorted_items = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items[1][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8288": {
    "question_id": "mbpp/828",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_frequent(sequence):\n    if not sequence:\n        return None\n    \n    frequency = {}\n    for item in sequence:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    if len(frequency) < 2:\n        return None\n    \n    sorted_items = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items[1][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8289": {
    "question_id": "mbpp/828",
    "model": "deepseek-v3-250324",
    "generation_code": "def second_frequent(sequence):\n    if not sequence:\n        return None\n    \n    frequency = {}\n    for item in sequence:\n        frequency[item] = frequency.get(item, 0) + 1\n    \n    if len(frequency) < 2:\n        return None\n    \n    sorted_items = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items[1][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8290": {
    "question_id": "mbpp/829",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef round_up(number, digits):\n    if digits == 0:\n        return math.ceil(number)\n    multiplier = 10 ** digits\n    return math.ceil(number * multiplier) / multiplier",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8291": {
    "question_id": "mbpp/829",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef round_up(number, digits):\n    multiplier = 10 ** digits\n    return math.ceil(number * multiplier) / multiplier",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8292": {
    "question_id": "mbpp/829",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef round_up(number, digits):\n    multiplier = 10 ** digits\n    return math.ceil(number * multiplier) / multiplier",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8293": {
    "question_id": "mbpp/829",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef round_up(number, digits):\n    multiplier = 10 ** digits\n    return math.ceil(number * multiplier) / multiplier",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8294": {
    "question_id": "mbpp/829",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef round_up(number, digits):\n    if digits == 0:\n        return math.ceil(number)\n    multiplier = 10 ** digits\n    return math.ceil(number * multiplier) / multiplier",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8295": {
    "question_id": "mbpp/829",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef round_up(number, digits):\n    multiplier = 10 ** digits\n    return math.ceil(number * multiplier) / multiplier",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8296": {
    "question_id": "mbpp/829",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef round_up(number, digits):\n    multiplier = 10 ** digits\n    return math.ceil(number * multiplier) / multiplier",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8297": {
    "question_id": "mbpp/829",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef round_up(number, digits):\n    multiplier = 10 ** digits\n    return math.ceil(number * multiplier) / multiplier",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8298": {
    "question_id": "mbpp/829",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef round_up(number, digits):\n    multiplier = 10 ** digits\n    return math.ceil(number * multiplier) / multiplier",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8299": {
    "question_id": "mbpp/829",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef round_up(number, digits):\n    if digits < 0:\n        return number\n    multiplier = 10 ** digits\n    return math.ceil(number * multiplier) / multiplier",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8300": {
    "question_id": "mbpp/830",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    freq = {}\n    for num in arr:\n        if num in freq:\n            count += freq[num]\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8301": {
    "question_id": "mbpp/830",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    freq = {}\n    for num in arr:\n        if num in freq:\n            count += freq[num]\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8302": {
    "question_id": "mbpp/830",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for key in freq:\n        count += freq[key] * (freq[key] - 1) // 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8303": {
    "question_id": "mbpp/830",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    freq = {}\n    for num in arr:\n        if num in freq:\n            count += freq[num]\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8304": {
    "question_id": "mbpp/830",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    freq = {}\n    for num in arr:\n        if num in freq:\n            count += freq[num]\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8305": {
    "question_id": "mbpp/830",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for key in freq:\n        val = freq[key]\n        count += val * (val - 1) // 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8306": {
    "question_id": "mbpp/830",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for key in freq:\n        count += freq[key] * (freq[key] - 1) // 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8307": {
    "question_id": "mbpp/830",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for key in freq:\n        count += freq[key] * (freq[key] - 1) // 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8308": {
    "question_id": "mbpp/830",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for key in freq:\n        c = freq[key]\n        count += c * (c - 1) // 2\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8309": {
    "question_id": "mbpp/830",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Pairs(arr, n):\n    count = 0\n    freq = {}\n    for num in arr:\n        if num in freq:\n            count += freq[num]\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8310": {
    "question_id": "mbpp/831",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_max(s):\n    numbers = re.findall(r'\\d+', s)\n    if not numbers:\n        return 0\n    return max(map(int, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8311": {
    "question_id": "mbpp/831",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_max(s):\n    numbers = re.findall(r'\\d+', s)\n    if not numbers:\n        return None\n    return max(map(int, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8312": {
    "question_id": "mbpp/831",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_max(string):\n    numbers = re.findall(r'\\d+', string)\n    if not numbers:\n        return 0\n    return max(map(int, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8313": {
    "question_id": "mbpp/831",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_max(s):\n    numbers = re.findall(r'\\d+', s)\n    if not numbers:\n        return 0\n    return max(map(int, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8314": {
    "question_id": "mbpp/831",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_max(string):\n    numbers = re.findall(r'\\d+', string)\n    if not numbers:\n        return None\n    return max(map(int, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8315": {
    "question_id": "mbpp/831",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_max(s):\n    numbers = re.findall(r'\\d+', s)\n    if not numbers:\n        return 0\n    return max(map(int, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8316": {
    "question_id": "mbpp/831",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_max(s):\n    numbers = re.findall(r'\\d+', s)\n    if not numbers:\n        return None\n    return max(map(int, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8317": {
    "question_id": "mbpp/831",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_max(input_str):\n    numbers = re.findall(r'\\d+', input_str)\n    if not numbers:\n        return 0\n    return max(map(int, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8318": {
    "question_id": "mbpp/831",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_max(string):\n    numbers = re.findall(r'\\d+', string)\n    if not numbers:\n        return 0\n    return max(map(int, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8319": {
    "question_id": "mbpp/831",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_max(s):\n    numbers = re.findall(r'\\d+', s)\n    if not numbers:\n        return 0\n    return max(map(int, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8320": {
    "question_id": "mbpp/832",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_key(dictionary):\n    return list(dictionary.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8321": {
    "question_id": "mbpp/832",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_key(d):\n    return list(d.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8322": {
    "question_id": "mbpp/832",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_key(dictionary):\n    return list(dictionary.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8323": {
    "question_id": "mbpp/832",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_key(d):\n    return list(d.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8324": {
    "question_id": "mbpp/832",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_key(d):\n    return list(d.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8325": {
    "question_id": "mbpp/832",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_key(d):\n    return list(d.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8326": {
    "question_id": "mbpp/832",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_key(d):\n    return list(d.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8327": {
    "question_id": "mbpp/832",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_key(dictionary):\n    return list(dictionary.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8328": {
    "question_id": "mbpp/832",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_key(dictionary):\n    return list(dictionary.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8329": {
    "question_id": "mbpp/832",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_key(dictionary):\n    return list(dictionary.keys())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8330": {
    "question_id": "mbpp/833",
    "model": "deepseek-v3-250324",
    "generation_code": "def generate_matrix(n):\n    if n == 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    num = 1\n    left, right, top, bottom = 0, n - 1, 0, n - 1\n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            matrix[top][i] = num\n            num += 1\n        top += 1\n        for i in range(top, bottom + 1):\n            matrix[i][right] = num\n            num += 1\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n    return matrix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8331": {
    "question_id": "mbpp/833",
    "model": "deepseek-v3-250324",
    "generation_code": "def generate_matrix(n):\n    if n == 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    left, right, top, bottom = 0, n - 1, 0, n - 1\n    num = 1\n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            matrix[top][i] = num\n            num += 1\n        for i in range(top + 1, bottom + 1):\n            matrix[i][right] = num\n            num += 1\n        if top < bottom:\n            for i in range(right - 1, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n        if left < right:\n            for i in range(bottom - 1, top, -1):\n                matrix[i][left] = num\n                num += 1\n        left += 1\n        right -= 1\n        top += 1\n        bottom -= 1\n    return matrix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8332": {
    "question_id": "mbpp/833",
    "model": "deepseek-v3-250324",
    "generation_code": "def generate_matrix(n):\n    if n <= 0:\n        return []\n    \n    matrix = [[0] * n for _ in range(n)]\n    num = 1\n    left, right, top, bottom = 0, n - 1, 0, n - 1\n    \n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            matrix[top][i] = num\n            num += 1\n        top += 1\n        \n        for i in range(top, bottom + 1):\n            matrix[i][right] = num\n            num += 1\n        right -= 1\n        \n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n        \n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n    \n    return matrix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8333": {
    "question_id": "mbpp/833",
    "model": "deepseek-v3-250324",
    "generation_code": "def generate_matrix(n):\n    if n <= 0:\n        return []\n    \n    matrix = [[0] * n for _ in range(n)]\n    left, right, top, bottom = 0, n - 1, 0, n - 1\n    num = 1\n    \n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            matrix[top][i] = num\n            num += 1\n        top += 1\n        \n        for i in range(top, bottom + 1):\n            matrix[i][right] = num\n            num += 1\n        right -= 1\n        \n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n        \n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n    \n    return matrix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8334": {
    "question_id": "mbpp/833",
    "model": "deepseek-v3-250324",
    "generation_code": "def generate_matrix(n):\n    if n <= 0:\n        return []\n    \n    matrix = [[0] * n for _ in range(n)]\n    num = 1\n    left, right, top, bottom = 0, n - 1, 0, n - 1\n    \n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            matrix[top][i] = num\n            num += 1\n        top += 1\n        \n        for i in range(top, bottom + 1):\n            matrix[i][right] = num\n            num += 1\n        right -= 1\n        \n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n        \n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n    \n    return matrix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8335": {
    "question_id": "mbpp/833",
    "model": "deepseek-v3-250324",
    "generation_code": "def generate_matrix(n):\n    if n == 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    num = 1\n    left, right, top, bottom = 0, n - 1, 0, n - 1\n    \n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            matrix[top][i] = num\n            num += 1\n        top += 1\n        \n        for i in range(top, bottom + 1):\n            matrix[i][right] = num\n            num += 1\n        right -= 1\n        \n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n        \n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n    return matrix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8336": {
    "question_id": "mbpp/833",
    "model": "deepseek-v3-250324",
    "generation_code": "def generate_matrix(n):\n    if n == 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    left, right, top, bottom = 0, n - 1, 0, n - 1\n    num = 1\n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            matrix[top][i] = num\n            num += 1\n        top += 1\n        for i in range(top, bottom + 1):\n            matrix[i][right] = num\n            num += 1\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n    return matrix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8337": {
    "question_id": "mbpp/833",
    "model": "deepseek-v3-250324",
    "generation_code": "def generate_matrix(n):\n    if n == 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    left, right, top, bottom = 0, n - 1, 0, n - 1\n    num = 1\n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            matrix[top][i] = num\n            num += 1\n        top += 1\n        for i in range(top, bottom + 1):\n            matrix[i][right] = num\n            num += 1\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n    return matrix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8338": {
    "question_id": "mbpp/833",
    "model": "deepseek-v3-250324",
    "generation_code": "def generate_matrix(n):\n    if n == 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    num = 1\n    left, right, top, bottom = 0, n - 1, 0, n - 1\n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            matrix[top][i] = num\n            num += 1\n        top += 1\n        for i in range(top, bottom + 1):\n            matrix[i][right] = num\n            num += 1\n        right -= 1\n        for i in range(right, left - 1, -1):\n            matrix[bottom][i] = num\n            num += 1\n        bottom -= 1\n        for i in range(bottom, top - 1, -1):\n            matrix[i][left] = num\n            num += 1\n        left += 1\n    return matrix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8339": {
    "question_id": "mbpp/833",
    "model": "deepseek-v3-250324",
    "generation_code": "def generate_matrix(n):\n    if n == 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    left, right, top, bottom = 0, n - 1, 0, n - 1\n    num = 1\n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            matrix[top][i] = num\n            num += 1\n        top += 1\n        for i in range(top, bottom + 1):\n            matrix[i][right] = num\n            num += 1\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n    return matrix",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8340": {
    "question_id": "mbpp/834",
    "model": "deepseek-v3-250324",
    "generation_code": "def slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return None\n    return (y2 - y1) / (x2 - x1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8341": {
    "question_id": "mbpp/834",
    "model": "deepseek-v3-250324",
    "generation_code": "def slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return None\n    return (y2 - y1) / (x2 - x1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8342": {
    "question_id": "mbpp/834",
    "model": "deepseek-v3-250324",
    "generation_code": "def slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return None\n    return (y2 - y1) / (x2 - x1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8343": {
    "question_id": "mbpp/834",
    "model": "deepseek-v3-250324",
    "generation_code": "def slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return None\n    return (y2 - y1) / (x2 - x1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8344": {
    "question_id": "mbpp/834",
    "model": "deepseek-v3-250324",
    "generation_code": "def slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return None\n    return (y2 - y1) / (x2 - x1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8345": {
    "question_id": "mbpp/834",
    "model": "deepseek-v3-250324",
    "generation_code": "def slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return None\n    return (y2 - y1) / (x2 - x1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8346": {
    "question_id": "mbpp/834",
    "model": "deepseek-v3-250324",
    "generation_code": "def slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return None\n    return (y2 - y1) / (x2 - x1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8347": {
    "question_id": "mbpp/834",
    "model": "deepseek-v3-250324",
    "generation_code": "def slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return None\n    return (y2 - y1) / (x2 - x1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8348": {
    "question_id": "mbpp/834",
    "model": "deepseek-v3-250324",
    "generation_code": "def slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return None\n    return (y2 - y1) / (x2 - x1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8349": {
    "question_id": "mbpp/834",
    "model": "deepseek-v3-250324",
    "generation_code": "def slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return None\n    return (y2 - y1) / (x2 - x1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8350": {
    "question_id": "mbpp/835",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(a, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    max_length = 0\n    current_start = 0\n    \n    for i in range(n):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = current_start\n            max_length = i - start + 1\n        elif current_sum == max_sum:\n            current_length = i - current_start + 1\n            if current_length > max_length:\n                max_length = current_length\n                start = current_start\n        \n        if current_sum < 0:\n            current_sum = 0\n            current_start = i + 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8351": {
    "question_id": "mbpp/835",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    max_length = 0\n    \n    for end in range(n):\n        current_sum += arr[end]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = end - start + 1\n        \n        if current_sum < 0:\n            current_sum = 0\n            start = end + 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8352": {
    "question_id": "mbpp/835",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    max_length = 0\n    \n    for end in range(n):\n        current_sum += arr[end]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = end - start + 1\n        \n        if current_sum < 0:\n            current_sum = 0\n            start = end + 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8353": {
    "question_id": "mbpp/835",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    max_length = 0\n    \n    for end in range(n):\n        current_sum += arr[end]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = end - start + 1\n        \n        if current_sum < 0:\n            current_sum = 0\n            start = end + 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8354": {
    "question_id": "mbpp/835",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    max_length = 0\n    \n    for end in range(n):\n        current_sum += arr[end]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = end - start + 1\n        \n        if current_sum < 0:\n            current_sum = 0\n            start = end + 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8355": {
    "question_id": "mbpp/835",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    max_length = 0\n    \n    for end in range(n):\n        current_sum += arr[end]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = end - start + 1\n        elif current_sum == max_sum:\n            if (end - start + 1) > max_length:\n                max_length = end - start + 1\n        \n        if current_sum < 0:\n            current_sum = 0\n            start = end + 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8356": {
    "question_id": "mbpp/835",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    max_length = 0\n    \n    for end in range(n):\n        current_sum += arr[end]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = end - start + 1\n        \n        if current_sum < 0:\n            current_sum = 0\n            start = end + 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8357": {
    "question_id": "mbpp/835",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    max_length = 0\n    \n    for end in range(n):\n        current_sum += arr[end]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = end - start + 1\n        \n        if current_sum < 0:\n            current_sum = 0\n            start = end + 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8358": {
    "question_id": "mbpp/835",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    max_length = 0\n    current_start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = current_start\n            max_length = i - start + 1\n        elif current_sum == max_sum:\n            if (i - current_start + 1) > max_length:\n                max_length = i - current_start + 1\n                start = current_start\n        \n        if current_sum < 0:\n            current_sum = 0\n            current_start = i + 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8359": {
    "question_id": "mbpp/835",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    max_length = 0\n    current_start = 0\n    \n    for i in range(n):\n        current_sum += arr[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = current_start\n            max_length = i - start + 1\n        elif current_sum == max_sum:\n            current_length = i - current_start + 1\n            if current_length > max_length:\n                max_length = current_length\n                start = current_start\n        \n        if current_sum < 0:\n            current_sum = 0\n            current_start = i + 1\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8360": {
    "question_id": "mbpp/836",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    return sum((2*i + 1)**3 for i in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8361": {
    "question_id": "mbpp/836",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    if n <= 0:\n        return 0\n    return sum((2*i + 1)**3 for i in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8362": {
    "question_id": "mbpp/836",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(1, 2*n, 2):\n        sum_cubes += i ** 3\n    return sum_cubes",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8363": {
    "question_id": "mbpp/836",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    return sum((2*i + 1)**3 for i in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8364": {
    "question_id": "mbpp/836",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    return sum((2*i + 1)**3 for i in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8365": {
    "question_id": "mbpp/836",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    if n <= 0:\n        return 0\n    return sum((2*i - 1)**3 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8366": {
    "question_id": "mbpp/836",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(1, 2*n, 2):\n        sum_cubes += i ** 3\n    return sum_cubes",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8367": {
    "question_id": "mbpp/836",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    return sum((2 * i + 1) ** 3 for i in range(n))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8368": {
    "question_id": "mbpp/836",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    if n <= 0:\n        return 0\n    return sum((2*i - 1)**3 for i in range(1, n+1))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8369": {
    "question_id": "mbpp/836",
    "model": "deepseek-v3-250324",
    "generation_code": "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(1, 2*n, 2):\n        sum_cubes += i ** 3\n    return sum_cubes",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8370": {
    "question_id": "mbpp/837",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    \n    count1 = 0  # positions where s1 has '1' and s2 has '0'\n    count2 = 0  # positions where s1 has '0' and s2 has '1'\n    \n    for c1, c2 in zip(s1, s2):\n        if c1 == '1' and c2 == '0':\n            count1 += 1\n        elif c1 == '0' and c2 == '1':\n            count2 += 1\n    \n    if (count1 + count2) % 2 != 0:\n        return -1\n    \n    return (count1 + count2) // 2",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "8371": {
    "question_id": "mbpp/837",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    \n    swap = 0\n    mismatch = 0\n    \n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            mismatch += 1\n    \n    if mismatch % 2 != 0:\n        return -1\n    \n    swap = mismatch // 2\n    \n    return swap",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "8372": {
    "question_id": "mbpp/837",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    \n    swap = 0\n    mismatch = 0\n    \n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            mismatch += 1\n    \n    if mismatch % 2 != 0:\n        return -1\n    \n    swap = mismatch // 2\n    \n    return swap",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "8373": {
    "question_id": "mbpp/837",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    diff = 0\n    count_ones_s1 = 0\n    count_ones_s2 = 0\n    for a, b in zip(s1, s2):\n        if a != b:\n            diff += 1\n        if a == '1':\n            count_ones_s1 += 1\n        if b == '1':\n            count_ones_s2 += 1\n    if count_ones_s1 != count_ones_s2:\n        return -1\n    return diff // 2",
    "test_output": "FAILED: expect 1,in fact -1",
    "test_result": "False"
  },
  "8374": {
    "question_id": "mbpp/837",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    diff1 = 0\n    diff0 = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            if s1[i] == '1':\n                diff1 += 1\n            else:\n                diff0 += 1\n    if (diff1 + diff0) % 2 != 0:\n        return -1\n    return (diff1 + diff0) // 2",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "8375": {
    "question_id": "mbpp/837",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    \n    diff = 0\n    count_ones_s1 = 0\n    count_ones_s2 = 0\n    \n    for a, b in zip(s1, s2):\n        if a != b:\n            diff += 1\n        if a == '1':\n            count_ones_s1 += 1\n        if b == '1':\n            count_ones_s2 += 1\n    \n    if count_ones_s1 != count_ones_s2:\n        return -1\n    \n    return diff // 2",
    "test_output": "FAILED: expect 1,in fact -1",
    "test_result": "False"
  },
  "8376": {
    "question_id": "mbpp/837",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    \n    swap = 0\n    mismatch = 0\n    \n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            mismatch += 1\n    \n    if mismatch % 2 != 0:\n        return -1\n    \n    swap = mismatch // 2\n    \n    return swap",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "8377": {
    "question_id": "mbpp/837",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swap = 0\n    mismatch = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            mismatch += 1\n    if mismatch % 2 != 0:\n        return -1\n    swap = mismatch // 2\n    return swap",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "8378": {
    "question_id": "mbpp/837",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    swap = 0\n    mismatch = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            mismatch += 1\n    if mismatch % 2 != 0:\n        return -1\n    swap = mismatch // 2\n    return swap",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "8379": {
    "question_id": "mbpp/837",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    \n    swap = 0\n    mismatch = 0\n    \n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            mismatch += 1\n    \n    if mismatch % 2 != 0:\n        return -1\n    \n    swap = mismatch // 2\n    \n    return swap",
    "test_output": "FAILED: expect 2,in fact 1",
    "test_result": "False"
  },
  "8380": {
    "question_id": "mbpp/838",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8381": {
    "question_id": "mbpp/838",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8382": {
    "question_id": "mbpp/838",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8383": {
    "question_id": "mbpp/838",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8384": {
    "question_id": "mbpp/838",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8385": {
    "question_id": "mbpp/838",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8386": {
    "question_id": "mbpp/838",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8387": {
    "question_id": "mbpp/838",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8388": {
    "question_id": "mbpp/838",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8389": {
    "question_id": "mbpp/838",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_tuple(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8390": {
    "question_id": "mbpp/839",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    if abs(root1 + root2) < 1e-10:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "8391": {
    "question_id": "mbpp/839",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    discriminant = b**2 - 4*a*c\n    if discriminant <= 0:\n        return \"No\"\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    if abs(root1 + root2) < 1e-10:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "8392": {
    "question_id": "mbpp/839",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    discriminant = b**2 - 4*a*c\n    if discriminant <= 0:\n        return \"No\"\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    if abs(root1 + root2) < 1e-10:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "8393": {
    "question_id": "mbpp/839",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    if abs(root1 + root2) < 1e-10:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "8394": {
    "question_id": "mbpp/839",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    discriminant = b**2 - 4*a*c\n    if discriminant <= 0:\n        return \"No\"\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    if abs(root1 + root2) < 1e-10:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "8395": {
    "question_id": "mbpp/839",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    root1 = (-b + (discriminant)**0.5) / (2*a)\n    root2 = (-b - (discriminant)**0.5) / (2*a)\n    if abs(root1 + root2) < 1e-10:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "8396": {
    "question_id": "mbpp/839",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    discriminant = b**2 - 4*a*c\n    if discriminant <= 0:\n        return \"No\"\n    root1 = (-b + (discriminant)**0.5) / (2*a)\n    root2 = (-b - (discriminant)**0.5) / (2*a)\n    if abs(root1 + root2) < 1e-10:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "8397": {
    "question_id": "mbpp/839",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    discriminant = b**2 - 4*a*c\n    if discriminant <= 0:\n        return \"No\"\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    if abs(root1 + root2) < 1e-10:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "8398": {
    "question_id": "mbpp/839",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    if abs(root1 + root2) < 1e-10 and abs(root1) > 1e-10:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "8399": {
    "question_id": "mbpp/839",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    if abs(root1 + root2) < 1e-10 and abs(root1) > 1e-10:\n        return \"Yes\"\n    else:\n        return \"No\"",
    "test_output": "FAILED: expect Yes,in fact No",
    "test_result": "False"
  },
  "8400": {
    "question_id": "mbpp/840",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_inv_count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8401": {
    "question_id": "mbpp/840",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_inv_count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8402": {
    "question_id": "mbpp/840",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_inv_count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8403": {
    "question_id": "mbpp/840",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_inv_count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8404": {
    "question_id": "mbpp/840",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_inv_count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8405": {
    "question_id": "mbpp/840",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_inv_count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8406": {
    "question_id": "mbpp/840",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_inv_count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8407": {
    "question_id": "mbpp/840",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_inv_count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8408": {
    "question_id": "mbpp/840",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_inv_count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8409": {
    "question_id": "mbpp/840",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_inv_count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8410": {
    "question_id": "mbpp/841",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_odd_occurence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8411": {
    "question_id": "mbpp/841",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_odd_occurence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8412": {
    "question_id": "mbpp/841",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_odd_occurence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8413": {
    "question_id": "mbpp/841",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_odd_occurence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8414": {
    "question_id": "mbpp/841",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_odd_occurence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8415": {
    "question_id": "mbpp/841",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_odd_occurence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8416": {
    "question_id": "mbpp/841",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_odd_occurence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8417": {
    "question_id": "mbpp/841",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_odd_occurence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8418": {
    "question_id": "mbpp/841",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_odd_occurence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8419": {
    "question_id": "mbpp/841",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_odd_occurence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8420": {
    "question_id": "mbpp/842",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    heap = []\n    heapq.heappush(heap, 1)\n    seen = set()\n    seen.add(1)\n    \n    for _ in range(n):\n        current = heapq.heappop(heap)\n        for prime in primes:\n            new_num = current * prime\n            if new_num not in seen:\n                seen.add(new_num)\n                heapq.heappush(heap, new_num)\n    return current",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8421": {
    "question_id": "mbpp/842",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    if n <= 0:\n        return 0\n    heap = []\n    heapq.heappush(heap, 1)\n    seen = set()\n    seen.add(1)\n    for _ in range(n):\n        current = heapq.heappop(heap)\n        for prime in primes:\n            new_ugly = current * prime\n            if new_ugly not in seen:\n                seen.add(new_ugly)\n                heapq.heappush(heap, new_ugly)\n    return current",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8422": {
    "question_id": "mbpp/842",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    if n == 1:\n        return 1\n    \n    heap = []\n    heapq.heappush(heap, 1)\n    seen = set()\n    seen.add(1)\n    \n    for _ in range(n):\n        current = heapq.heappop(heap)\n        for prime in primes:\n            new_num = current * prime\n            if new_num not in seen:\n                seen.add(new_num)\n                heapq.heappush(heap, new_num)\n    \n    return current",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8423": {
    "question_id": "mbpp/842",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    heap = []\n    heapq.heappush(heap, 1)\n    seen = set()\n    seen.add(1)\n    \n    for _ in range(n):\n        current = heapq.heappop(heap)\n        for prime in primes:\n            new_num = current * prime\n            if new_num not in seen:\n                seen.add(new_num)\n                heapq.heappush(heap, new_num)\n    return current",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8424": {
    "question_id": "mbpp/842",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    if n <= 0:\n        return 0\n    heap = []\n    heapq.heappush(heap, 1)\n    seen = {1}\n    for _ in range(n):\n        current = heapq.heappop(heap)\n        for prime in primes:\n            new_ugly = current * prime\n            if new_ugly not in seen:\n                seen.add(new_ugly)\n                heapq.heappush(heap, new_ugly)\n    return current",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8425": {
    "question_id": "mbpp/842",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    if n == 1:\n        return 1\n    \n    heap = []\n    for prime in primes:\n        heapq.heappush(heap, (prime, prime, 0))\n    \n    ugly_numbers = [1] * n\n    for i in range(1, n):\n        val, prime, index = heapq.heappop(heap)\n        ugly_numbers[i] = val\n        \n        while heap and heap[0][0] == val:\n            _, p, idx = heapq.heappop(heap)\n            heapq.heappush(heap, (p * ugly_numbers[idx + 1], p, idx + 1))\n        \n        heapq.heappush(heap, (prime * ugly_numbers[index + 1], prime, index + 1))\n    \n    return ugly_numbers[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8426": {
    "question_id": "mbpp/842",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    if n <= 0:\n        return 0\n    k = len(primes)\n    heap = []\n    heapq.heappush(heap, 1)\n    seen = set()\n    seen.add(1)\n    \n    for _ in range(n):\n        current = heapq.heappop(heap)\n        for prime in primes:\n            new_num = current * prime\n            if new_num not in seen:\n                seen.add(new_num)\n                heapq.heappush(heap, new_num)\n    return current",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8427": {
    "question_id": "mbpp/842",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    if n == 1:\n        return 1\n    \n    heap = []\n    for prime in primes:\n        heapq.heappush(heap, (prime, prime, 0))\n    \n    ugly_numbers = [1] * n\n    indices = [0] * len(primes)\n    \n    for i in range(1, n):\n        val, prime, idx = heap[0]\n        ugly_numbers[i] = val\n        \n        while heap[0][0] == val:\n            val, prime, idx = heapq.heappop(heap)\n            indices[idx] += 1\n            new_val = prime * ugly_numbers[indices[idx]]\n            heapq.heappush(heap, (new_val, prime, idx))\n    \n    return ugly_numbers[-1]",
    "test_output": "FAILED: expect 32,in fact 128",
    "test_result": "False"
  },
  "8428": {
    "question_id": "mbpp/842",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    if n == 1:\n        return 1\n    heap = []\n    heapq.heappush(heap, 1)\n    seen = set()\n    seen.add(1)\n    for _ in range(n - 1):\n        current = heapq.heappop(heap)\n        for prime in primes:\n            new_ugly = current * prime\n            if new_ugly not in seen:\n                seen.add(new_ugly)\n                heapq.heappush(heap, new_ugly)\n    return heapq.heappop(heap)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8429": {
    "question_id": "mbpp/842",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    if n == 1:\n        return 1\n    \n    heap = []\n    heapq.heapify(heap)\n    seen = set()\n    seen.add(1)\n    heapq.heappush(heap, 1)\n    \n    for _ in range(n - 1):\n        current = heapq.heappop(heap)\n        for prime in primes:\n            new_ugly = current * prime\n            if new_ugly not in seen:\n                seen.add(new_ugly)\n                heapq.heappush(heap, new_ugly)\n    \n    return heapq.heappop(heap)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8430": {
    "question_id": "mbpp/843",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Number(n, k):\n    if k <= (n + 1) // 2:\n        return 2 * k - 1\n    else:\n        return 2 * (k - (n + 1) // 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8431": {
    "question_id": "mbpp/843",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Number(n, k):\n    if k <= (n + 1) // 2:\n        return 2 * k - 1\n    else:\n        return 2 * (k - (n + 1) // 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8432": {
    "question_id": "mbpp/843",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Number(n, k):\n    if k <= (n + 1) // 2:\n        return 2 * k - 1\n    else:\n        return 2 * (k - (n + 1) // 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8433": {
    "question_id": "mbpp/843",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Number(n, k):\n    if k <= (n + 1) // 2:\n        return 2 * k - 1\n    else:\n        return 2 * (k - (n + 1) // 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8434": {
    "question_id": "mbpp/843",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Number(n, k):\n    if k <= (n + 1) // 2:\n        return 2 * k - 1\n    else:\n        return 2 * (k - (n + 1) // 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8435": {
    "question_id": "mbpp/843",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Number(n, k):\n    if k <= (n + 1) // 2:\n        return 2 * k - 1\n    else:\n        return 2 * (k - (n + 1) // 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8436": {
    "question_id": "mbpp/843",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Number(n, k):\n    if k <= (n + 1) // 2:\n        return 2 * k - 1\n    else:\n        return 2 * (k - (n + 1) // 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8437": {
    "question_id": "mbpp/843",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Number(n, k):\n    odd_count = (n + 1) // 2\n    if k <= odd_count:\n        return 2 * k - 1\n    else:\n        return 2 * (k - odd_count)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8438": {
    "question_id": "mbpp/843",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Number(n, k):\n    if k <= (n + 1) // 2:\n        return 2 * k - 1\n    else:\n        return 2 * (k - (n + 1) // 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8439": {
    "question_id": "mbpp/843",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_Number(n, k):\n    if k <= (n + 1) // 2:\n        return 2 * k - 1\n    else:\n        return 2 * (k - (n + 1) // 2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8440": {
    "question_id": "mbpp/844",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    log_sum = 0\n    for i in range(1, n+1):\n        log_sum += math.log10(i)\n    return int(math.floor(log_sum)) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8441": {
    "question_id": "mbpp/844",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    log_sum = 0\n    for i in range(1, n+1):\n        log_sum += math.log10(i)\n    return int(math.floor(log_sum)) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8442": {
    "question_id": "mbpp/844",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    log_sum = 0\n    for i in range(1, n+1):\n        log_sum += math.log10(i)\n    return int(math.floor(log_sum)) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8443": {
    "question_id": "mbpp/844",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    log_sum = 0\n    for i in range(1, n+1):\n        log_sum += math.log10(i)\n    return int(math.floor(log_sum)) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8444": {
    "question_id": "mbpp/844",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    log_sum = 0\n    for i in range(1, n+1):\n        log_sum += math.log10(i)\n    return int(math.floor(log_sum)) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8445": {
    "question_id": "mbpp/844",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    log_sum = 0\n    for i in range(1, n + 1):\n        log_sum += math.log10(i)\n    return int(math.floor(log_sum)) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8446": {
    "question_id": "mbpp/844",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    log_sum = 0\n    for i in range(1, n+1):\n        log_sum += math.log10(i)\n    return int(math.floor(log_sum)) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8447": {
    "question_id": "mbpp/844",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    log_sum = 0\n    for i in range(1, n + 1):\n        log_sum += math.log10(i)\n    return int(math.floor(log_sum)) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8448": {
    "question_id": "mbpp/844",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    log_sum = 0\n    for i in range(1, n+1):\n        log_sum += math.log10(i)\n    return int(math.floor(log_sum)) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8449": {
    "question_id": "mbpp/844",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    log_sum = 0\n    for i in range(1, n+1):\n        log_sum += math.log10(i)\n    return int(math.floor(log_sum)) + 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8450": {
    "question_id": "mbpp/845",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n    \n    platforms_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    \n    while i < n and j < n:\n        if arrival[i] <= departure[j]:\n            platforms_needed += 1\n            i += 1\n        else:\n            platforms_needed -= 1\n            j += 1\n        \n        if platforms_needed > result:\n            result = platforms_needed\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8451": {
    "question_id": "mbpp/845",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n    \n    platforms_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    \n    while i < n and j < n:\n        if arrival[i] <= departure[j]:\n            platforms_needed += 1\n            i += 1\n        else:\n            platforms_needed -= 1\n            j += 1\n        \n        if platforms_needed > result:\n            result = platforms_needed\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8452": {
    "question_id": "mbpp/845",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n    \n    platforms_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    \n    while i < n and j < n:\n        if arrival[i] <= departure[j]:\n            platforms_needed += 1\n            i += 1\n        else:\n            platforms_needed -= 1\n            j += 1\n        \n        if platforms_needed > result:\n            result = platforms_needed\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8453": {
    "question_id": "mbpp/845",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n    \n    platforms_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    \n    while i < n and j < n:\n        if arrival[i] <= departure[j]:\n            platforms_needed += 1\n            i += 1\n            if platforms_needed > result:\n                result = platforms_needed\n        else:\n            platforms_needed -= 1\n            j += 1\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8454": {
    "question_id": "mbpp/845",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n    \n    platforms_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    \n    while i < n and j < n:\n        if arrival[i] <= departure[j]:\n            platforms_needed += 1\n            i += 1\n        else:\n            platforms_needed -= 1\n            j += 1\n        \n        if platforms_needed > result:\n            result = platforms_needed\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8455": {
    "question_id": "mbpp/845",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n    \n    platforms_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    \n    while i < n and j < n:\n        if arrival[i] <= departure[j]:\n            platforms_needed += 1\n            i += 1\n        else:\n            platforms_needed -= 1\n            j += 1\n        \n        if platforms_needed > result:\n            result = platforms_needed\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8456": {
    "question_id": "mbpp/845",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n    \n    platforms_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    \n    while i < n and j < n:\n        if arrival[i] <= departure[j]:\n            platforms_needed += 1\n            i += 1\n        else:\n            platforms_needed -= 1\n            j += 1\n        \n        if platforms_needed > result:\n            result = platforms_needed\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8457": {
    "question_id": "mbpp/845",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n    \n    platforms_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    \n    while i < n and j < n:\n        if arrival[i] <= departure[j]:\n            platforms_needed += 1\n            i += 1\n        else:\n            platforms_needed -= 1\n            j += 1\n        \n        if platforms_needed > result:\n            result = platforms_needed\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8458": {
    "question_id": "mbpp/845",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n    \n    platforms_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    \n    while i < n and j < n:\n        if arrival[i] <= departure[j]:\n            platforms_needed += 1\n            i += 1\n        else:\n            platforms_needed -= 1\n            j += 1\n        \n        if platforms_needed > result:\n            result = platforms_needed\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8459": {
    "question_id": "mbpp/845",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_platform(arrival, departure, n):\n    arrival.sort()\n    departure.sort()\n    \n    platforms_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    \n    while i < n and j < n:\n        if arrival[i] <= departure[j]:\n            platforms_needed += 1\n            i += 1\n            if platforms_needed > result:\n                result = platforms_needed\n        else:\n            platforms_needed -= 1\n            j += 1\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8460": {
    "question_id": "mbpp/846",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcopy(t):\n    return t[0].copy() if isinstance(t, tuple) and len(t) == 1 and isinstance(t[0], list) else []",
    "test_output": "FAILED: expect [1, 2, 3],in fact []",
    "test_result": "False"
  },
  "8461": {
    "question_id": "mbpp/846",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcopy(singleton_tuple):\n    return list(singleton_tuple[0]) if len(singleton_tuple) == 1 and isinstance(singleton_tuple[0], list) else []",
    "test_output": "FAILED: expect [1, 2, 3],in fact []",
    "test_result": "False"
  },
  "8462": {
    "question_id": "mbpp/846",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcopy(singleton_tuple):\n    return list(singleton_tuple[0]) if len(singleton_tuple) == 1 and isinstance(singleton_tuple[0], list) else []",
    "test_output": "FAILED: expect [1, 2, 3],in fact []",
    "test_result": "False"
  },
  "8463": {
    "question_id": "mbpp/846",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcopy(t):\n    return list(t[0]) if isinstance(t, tuple) and len(t) == 1 else list(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8464": {
    "question_id": "mbpp/846",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcopy(t):\n    return list(t[0]) if isinstance(t, tuple) and len(t) == 1 else []",
    "test_output": "FAILED: expect [1, 2, 3],in fact []",
    "test_result": "False"
  },
  "8465": {
    "question_id": "mbpp/846",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcopy(singleton_tuple):\n    return list(singleton_tuple[0]) if len(singleton_tuple) == 1 and isinstance(singleton_tuple[0], list) else []",
    "test_output": "FAILED: expect [1, 2, 3],in fact []",
    "test_result": "False"
  },
  "8466": {
    "question_id": "mbpp/846",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcopy(t):\n    return list(t[0]) if t and isinstance(t[0], list) else []",
    "test_output": "FAILED: expect [1, 2, 3],in fact []",
    "test_result": "False"
  },
  "8467": {
    "question_id": "mbpp/846",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcopy(singleton_tuple):\n    return list(singleton_tuple[0]) if singleton_tuple and len(singleton_tuple) == 1 else []",
    "test_output": "FAILED: expect [1, 2, 3],in fact []",
    "test_result": "False"
  },
  "8468": {
    "question_id": "mbpp/846",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcopy(singleton_tuple):\n    return list(singleton_tuple[0]) if singleton_tuple and isinstance(singleton_tuple[0], list) else []",
    "test_output": "FAILED: expect [1, 2, 3],in fact []",
    "test_result": "False"
  },
  "8469": {
    "question_id": "mbpp/846",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcopy(t):\n    return list(t[0]) if isinstance(t, tuple) and len(t) == 1 else list(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8470": {
    "question_id": "mbpp/847",
    "model": "deepseek-v3-250324",
    "generation_code": "def area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8471": {
    "question_id": "mbpp/847",
    "model": "deepseek-v3-250324",
    "generation_code": "def area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8472": {
    "question_id": "mbpp/847",
    "model": "deepseek-v3-250324",
    "generation_code": "def area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8473": {
    "question_id": "mbpp/847",
    "model": "deepseek-v3-250324",
    "generation_code": "def area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8474": {
    "question_id": "mbpp/847",
    "model": "deepseek-v3-250324",
    "generation_code": "def area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8475": {
    "question_id": "mbpp/847",
    "model": "deepseek-v3-250324",
    "generation_code": "def area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8476": {
    "question_id": "mbpp/847",
    "model": "deepseek-v3-250324",
    "generation_code": "def area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8477": {
    "question_id": "mbpp/847",
    "model": "deepseek-v3-250324",
    "generation_code": "def area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8478": {
    "question_id": "mbpp/847",
    "model": "deepseek-v3-250324",
    "generation_code": "def area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8479": {
    "question_id": "mbpp/847",
    "model": "deepseek-v3-250324",
    "generation_code": "def area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8480": {
    "question_id": "mbpp/848",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum(number):\n    if number <= 1:\n        return 0\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_divisors = set()\n    n = number\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                prime_divisors.add(i)\n            n = n // i\n        else:\n            i += 1\n    if n > 1 and is_prime(n):\n        prime_divisors.add(n)\n    \n    return sum(prime_divisors)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8481": {
    "question_id": "mbpp/848",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum(n):\n    if n <= 1:\n        return 0\n    sum_primes = 0\n    temp = n\n    # Check for divisibility by 2\n    if temp % 2 == 0:\n        sum_primes += 2\n        while temp % 2 == 0:\n            temp //= 2\n    # Check for odd divisors up to sqrt(n)\n    i = 3\n    while i * i <= temp:\n        if temp % i == 0:\n            sum_primes += i\n            while temp % i == 0:\n                temp //= i\n        i += 2\n    # If remaining temp is a prime > 2\n    if temp > 2:\n        sum_primes += temp\n    return sum_primes",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8482": {
    "question_id": "mbpp/848",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum(number):\n    if number < 2:\n        return 0\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_divisors = set()\n    n = number\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                prime_divisors.add(i)\n            n = n // i\n        else:\n            i += 1\n    if n > 1 and is_prime(n):\n        prime_divisors.add(n)\n    \n    return sum(prime_divisors)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8483": {
    "question_id": "mbpp/848",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum(number):\n    if number <= 1:\n        return 0\n    prime_divisors = set()\n    n = number\n    # Check for divisibility by 2\n    if n % 2 == 0:\n        prime_divisors.add(2)\n        while n % 2 == 0:\n            n = n // 2\n    # Check for odd divisors up to sqrt(n)\n    i = 3\n    max_factor = int(n**0.5) + 1\n    while i <= max_factor:\n        if n % i == 0:\n            prime_divisors.add(i)\n            while n % i == 0:\n                n = n // i\n            max_factor = int(n**0.5) + 1\n        i += 2\n    if n > 1:\n        prime_divisors.add(n)\n    return sum(prime_divisors)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8484": {
    "question_id": "mbpp/848",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum(number):\n    if number < 2:\n        return 0\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_divisors = set()\n    n = number\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                prime_divisors.add(i)\n            n_div = n // i\n            if is_prime(n_div):\n                prime_divisors.add(n_div)\n        i += 1\n    if n > 1 and is_prime(n):\n        prime_divisors.add(n)\n    \n    return sum(prime_divisors)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8485": {
    "question_id": "mbpp/848",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum(number):\n    if number < 2:\n        return 0\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_divisors = set()\n    n = number\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                prime_divisors.add(i)\n            n = n // i\n        else:\n            i += 1\n    if n > 1 and is_prime(n):\n        prime_divisors.add(n)\n    \n    return sum(prime_divisors)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8486": {
    "question_id": "mbpp/848",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum(n):\n    if n <= 1:\n        return 0\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_divisors = set()\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                prime_divisors.add(i)\n            if is_prime(n // i):\n                prime_divisors.add(n // i)\n        i += 1\n    if is_prime(n):\n        prime_divisors.add(n)\n    \n    return sum(prime_divisors)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8487": {
    "question_id": "mbpp/848",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum(number):\n    if number < 2:\n        return 0\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_divisors = set()\n    n = number\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                prime_divisors.add(i)\n            while n % i == 0:\n                n = n // i\n        i += 1\n    if n > 1 and is_prime(n):\n        prime_divisors.add(n)\n    \n    return sum(prime_divisors)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8488": {
    "question_id": "mbpp/848",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum(number):\n    if number < 2:\n        return 0\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_divisors = set()\n    n = number\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                prime_divisors.add(i)\n            n_div = n // i\n            if is_prime(n_div):\n                prime_divisors.add(n_div)\n        i += 1\n    if n > 1 and is_prime(n):\n        prime_divisors.add(n)\n    \n    return sum(prime_divisors)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8489": {
    "question_id": "mbpp/848",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum(number):\n    if number < 2:\n        return 0\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_divisors = set()\n    n = number\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                prime_divisors.add(i)\n            n_div = n // i\n            if is_prime(n_div):\n                prime_divisors.add(n_div)\n        i += 1\n    if n > 1 and is_prime(n):\n        prime_divisors.add(n)\n    \n    return sum(prime_divisors)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8490": {
    "question_id": "mbpp/849",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_triangleexists(a, b, c):\n    return a + b + c == 180 and a > 0 and b > 0 and c > 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8491": {
    "question_id": "mbpp/849",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_triangleexists(a, b, c):\n    return a + b + c == 180 and a > 0 and b > 0 and c > 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8492": {
    "question_id": "mbpp/849",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_triangleexists(a, b, c):\n    return a + b + c == 180 and a > 0 and b > 0 and c > 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8493": {
    "question_id": "mbpp/849",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_triangleexists(a, b, c):\n    return a + b + c == 180 and a > 0 and b > 0 and c > 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8494": {
    "question_id": "mbpp/849",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_triangleexists(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return a + b + c == 180",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8495": {
    "question_id": "mbpp/849",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_triangleexists(a, b, c):\n    return a + b + c == 180 and a > 0 and b > 0 and c > 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8496": {
    "question_id": "mbpp/849",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_triangleexists(a, b, c):\n    return a + b + c == 180 and a > 0 and b > 0 and c > 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8497": {
    "question_id": "mbpp/849",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_triangleexists(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return a + b + c == 180",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8498": {
    "question_id": "mbpp/849",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_triangleexists(a, b, c):\n    return a + b + c == 180 and a > 0 and b > 0 and c > 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8499": {
    "question_id": "mbpp/849",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_triangleexists(a, b, c):\n    return a + b + c == 180 and a > 0 and b > 0 and c > 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8500": {
    "question_id": "mbpp/850",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum_of_Inverse_Divisors(num, n):\n    if num == 0:\n        return 0\n    divisors = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            if i <= n:\n                divisors.append(i)\n            counterpart = num // i\n            if counterpart != i and counterpart <= n:\n                divisors.append(counterpart)\n    return sum(1.0 / d for d in divisors)",
    "test_output": "FAILED: expect 1.44,in fact 1.4444444444444444",
    "test_result": "False"
  },
  "8501": {
    "question_id": "mbpp/850",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum_of_Inverse_Divisors(num, n):\n    if num == 0 or n == 0:\n        return 0\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    if n > len(divisors):\n        return 0\n    selected_divisors = divisors[-n:]\n    sum_inverse = sum(1.0 / d for d in selected_divisors)\n    return sum_inverse",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "8502": {
    "question_id": "mbpp/850",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum_of_Inverse_Divisors(n, num):\n    if num == 0:\n        return 0\n    divisors = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            if i <= n:\n                divisors.append(i)\n            counterpart = num // i\n            if counterpart != i and counterpart <= n:\n                divisors.append(counterpart)\n    return sum(1.0 / d for d in divisors)",
    "test_output": "FAILED: expect 2,in fact 2.25",
    "test_result": "False"
  },
  "8503": {
    "question_id": "mbpp/850",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum_of_Inverse_Divisors(n, num):\n    if num == 0:\n        return 0\n    divisors = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            if i <= n:\n                divisors.append(i)\n            counterpart = num // i\n            if counterpart != i and counterpart <= n:\n                divisors.append(counterpart)\n    return sum(1.0 / d for d in divisors)",
    "test_output": "FAILED: expect 2,in fact 2.25",
    "test_result": "False"
  },
  "8504": {
    "question_id": "mbpp/850",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum_of_Inverse_Divisors(num, n):\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    if not divisors:\n        return 0\n    inverse_sum = sum(n // d for d in divisors)\n    return inverse_sum",
    "test_output": "FAILED: expect 2,in fact 24",
    "test_result": "False"
  },
  "8505": {
    "question_id": "mbpp/850",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum_of_Inverse_Divisors(num, n):\n    if num == 0:\n        return 0\n    divisors = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            if i <= n:\n                divisors.append(i)\n            if num // i != i and (num // i) <= n:\n                divisors.append(num // i)\n    return sum(1.0 / d for d in divisors)",
    "test_output": "FAILED: expect 1.44,in fact 1.4444444444444444",
    "test_result": "False"
  },
  "8506": {
    "question_id": "mbpp/850",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum_of_Inverse_Divisors(num, n):\n    if num == 0:\n        return 0\n    divisors = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            if i <= n:\n                divisors.append(i)\n            if num // i != i and (num // i) <= n:\n                divisors.append(num // i)\n    return sum(1.0 / d for d in divisors)",
    "test_output": "FAILED: expect 1.44,in fact 1.4444444444444444",
    "test_result": "False"
  },
  "8507": {
    "question_id": "mbpp/850",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum_of_Inverse_Divisors(n, num):\n    if num == 0:\n        return 0\n    divisors = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            if i <= n:\n                divisors.append(i)\n            counterpart = num // i\n            if counterpart != i and counterpart <= n:\n                divisors.append(counterpart)\n    return sum(1.0 / d for d in divisors)",
    "test_output": "FAILED: expect 2,in fact 2.25",
    "test_result": "False"
  },
  "8508": {
    "question_id": "mbpp/850",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum_of_Inverse_Divisors(n, num):\n    if num == 0:\n        return 0\n    divisors = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            if i <= n:\n                divisors.append(i)\n            counterpart = num // i\n            if counterpart != i and counterpart <= n:\n                divisors.append(counterpart)\n    return sum(1.0 / d for d in divisors)",
    "test_output": "FAILED: expect 2,in fact 2.25",
    "test_result": "False"
  },
  "8509": {
    "question_id": "mbpp/850",
    "model": "deepseek-v3-250324",
    "generation_code": "def Sum_of_Inverse_Divisors(num, n):\n    if num == 0:\n        return 0\n    divisors = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            if i <= n:\n                divisors.append(i)\n            counterpart = num // i\n            if counterpart != i and counterpart <= n:\n                divisors.append(counterpart)\n    return sum(1.0 / d for d in divisors)",
    "test_output": "FAILED: expect 1.44,in fact 1.4444444444444444",
    "test_result": "False"
  },
  "8510": {
    "question_id": "mbpp/851",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_negs(lst):\n    return [x for x in lst if x >= 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8511": {
    "question_id": "mbpp/851",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_negs(lst):\n    return [x for x in lst if x >= 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8512": {
    "question_id": "mbpp/851",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_negs(lst):\n    return [x for x in lst if x >= 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8513": {
    "question_id": "mbpp/851",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_negs(lst):\n    return [x for x in lst if x >= 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8514": {
    "question_id": "mbpp/851",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_negs(lst):\n    return [x for x in lst if x >= 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8515": {
    "question_id": "mbpp/851",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_negs(lst):\n    return [x for x in lst if x >= 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8516": {
    "question_id": "mbpp/851",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_negs(lst):\n    return [x for x in lst if x >= 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8517": {
    "question_id": "mbpp/851",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_negs(lst):\n    return [x for x in lst if x >= 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8518": {
    "question_id": "mbpp/851",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_negs(lst):\n    return [x for x in lst if x >= 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8519": {
    "question_id": "mbpp/851",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_negs(lst):\n    return [x for x in lst if x >= 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8520": {
    "question_id": "mbpp/852",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_odd_Factors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 1:\n                total += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 1:\n                total += counterpart\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8521": {
    "question_id": "mbpp/852",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_odd_Factors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 1:\n                total += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 1:\n                total += counterpart\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8522": {
    "question_id": "mbpp/852",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_odd_Factors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 1:\n                total += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 1:\n                total += counterpart\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8523": {
    "question_id": "mbpp/852",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_odd_Factors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 1:\n                total += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 1:\n                total += counterpart\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8524": {
    "question_id": "mbpp/852",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_odd_Factors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 1:\n                total += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 1:\n                total += counterpart\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8525": {
    "question_id": "mbpp/852",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_odd_Factors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 1:\n                total += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 1:\n                total += counterpart\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8526": {
    "question_id": "mbpp/852",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_odd_Factors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, n + 1, 2):\n        if n % i == 0:\n            total += i\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8527": {
    "question_id": "mbpp/852",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_odd_Factors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 1:\n                total += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 1:\n                total += counterpart\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8528": {
    "question_id": "mbpp/852",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_odd_Factors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 1:\n                total += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 1:\n                total += counterpart\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8529": {
    "question_id": "mbpp/852",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_of_odd_Factors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i % 2 == 1:\n                total += i\n            counterpart = n // i\n            if counterpart != i and counterpart % 2 == 1:\n                total += counterpart\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8530": {
    "question_id": "mbpp/853",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8531": {
    "question_id": "mbpp/853",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8532": {
    "question_id": "mbpp/853",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8533": {
    "question_id": "mbpp/853",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8534": {
    "question_id": "mbpp/853",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8535": {
    "question_id": "mbpp/853",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8536": {
    "question_id": "mbpp/853",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8537": {
    "question_id": "mbpp/853",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8538": {
    "question_id": "mbpp/853",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8539": {
    "question_id": "mbpp/853",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8540": {
    "question_id": "mbpp/854",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Even_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8541": {
    "question_id": "mbpp/854",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Even_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8542": {
    "question_id": "mbpp/854",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Even_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8543": {
    "question_id": "mbpp/854",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Even_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8544": {
    "question_id": "mbpp/854",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Even_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8545": {
    "question_id": "mbpp/854",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Even_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8546": {
    "question_id": "mbpp/854",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Even_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8547": {
    "question_id": "mbpp/854",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Even_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8548": {
    "question_id": "mbpp/854",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Even_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8549": {
    "question_id": "mbpp/854",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Even_Parity(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8550": {
    "question_id": "mbpp/855",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Swaps(arr, n):\n    ones = 0\n    for num in arr:\n        if num == 1:\n            ones += 1\n    \n    window_ones = 0\n    max_ones_in_window = 0\n    \n    for i in range(ones):\n        if arr[i] == 1:\n            window_ones += 1\n    max_ones_in_window = window_ones\n    \n    for i in range(ones, n):\n        if arr[i - ones] == 1:\n            window_ones -= 1\n        if arr[i] == 1:\n            window_ones += 1\n        if window_ones > max_ones_in_window:\n            max_ones_in_window = window_ones\n    \n    return ones - max_ones_in_window",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "8551": {
    "question_id": "mbpp/855",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Swaps(arr, n):\n    ones = 0\n    for num in arr:\n        if num == 1:\n            ones += 1\n    \n    window_ones = 0\n    max_ones_in_window = 0\n    \n    for i in range(ones):\n        if arr[i] == 1:\n            window_ones += 1\n    max_ones_in_window = window_ones\n    \n    for i in range(ones, n):\n        if arr[i - ones] == 1:\n            window_ones -= 1\n        if arr[i] == 1:\n            window_ones += 1\n        if window_ones > max_ones_in_window:\n            max_ones_in_window = window_ones\n    \n    return ones - max_ones_in_window",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "8552": {
    "question_id": "mbpp/855",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Swaps(arr, n):\n    ones = 0\n    for num in arr:\n        if num == 1:\n            ones += 1\n    \n    window_ones = 0\n    max_ones = 0\n    \n    for i in range(ones):\n        if arr[i] == 1:\n            window_ones += 1\n    max_ones = window_ones\n    \n    for i in range(ones, n):\n        if arr[i - ones] == 1:\n            window_ones -= 1\n        if arr[i] == 1:\n            window_ones += 1\n        if window_ones > max_ones:\n            max_ones = window_ones\n    \n    return ones - max_ones",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "8553": {
    "question_id": "mbpp/855",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Swaps(arr, n):\n    ones = 0\n    for num in arr:\n        if num == 1:\n            ones += 1\n    \n    window_ones = 0\n    max_ones_in_window = 0\n    \n    for i in range(ones):\n        if arr[i] == 1:\n            window_ones += 1\n    max_ones_in_window = window_ones\n    \n    for i in range(ones, n):\n        if arr[i - ones] == 1:\n            window_ones -= 1\n        if arr[i] == 1:\n            window_ones += 1\n        if window_ones > max_ones_in_window:\n            max_ones_in_window = window_ones\n    \n    return ones - max_ones_in_window",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "8554": {
    "question_id": "mbpp/855",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Swaps(arr, n):\n    ones = 0\n    for num in arr:\n        if num == 1:\n            ones += 1\n    \n    window_ones = 0\n    max_ones_in_window = 0\n    \n    for i in range(ones):\n        if arr[i] == 1:\n            window_ones += 1\n    max_ones_in_window = window_ones\n    \n    for i in range(ones, n):\n        if arr[i - ones] == 1:\n            window_ones -= 1\n        if arr[i] == 1:\n            window_ones += 1\n        if window_ones > max_ones_in_window:\n            max_ones_in_window = window_ones\n    \n    return ones - max_ones_in_window",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "8555": {
    "question_id": "mbpp/855",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Swaps(arr, n):\n    ones = 0\n    for num in arr:\n        if num == 1:\n            ones += 1\n    \n    window_ones = 0\n    max_ones = 0\n    \n    for i in range(ones):\n        if arr[i] == 1:\n            window_ones += 1\n    \n    max_ones = window_ones\n    \n    for i in range(ones, n):\n        if arr[i - ones] == 1:\n            window_ones -= 1\n        if arr[i] == 1:\n            window_ones += 1\n        if window_ones > max_ones:\n            max_ones = window_ones\n    \n    return ones - max_ones",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "8556": {
    "question_id": "mbpp/855",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Swaps(arr, n):\n    ones = 0\n    for num in arr:\n        if num == 1:\n            ones += 1\n    \n    window_ones = 0\n    max_ones = 0\n    \n    for i in range(ones):\n        if arr[i] == 1:\n            window_ones += 1\n    max_ones = window_ones\n    \n    for i in range(ones, n):\n        if arr[i - ones] == 1:\n            window_ones -= 1\n        if arr[i] == 1:\n            window_ones += 1\n        if window_ones > max_ones:\n            max_ones = window_ones\n    \n    return ones - max_ones",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "8557": {
    "question_id": "mbpp/855",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Swaps(arr, n):\n    ones = 0\n    for num in arr:\n        if num == 1:\n            ones += 1\n    \n    window_ones = 0\n    max_ones = 0\n    \n    for i in range(ones):\n        if arr[i] == 1:\n            window_ones += 1\n    \n    max_ones = window_ones\n    \n    for i in range(ones, n):\n        if arr[i - ones] == 1:\n            window_ones -= 1\n        if arr[i] == 1:\n            window_ones += 1\n        if window_ones > max_ones:\n            max_ones = window_ones\n    \n    return ones - max_ones",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "8558": {
    "question_id": "mbpp/855",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Swaps(arr, n):\n    ones = 0\n    for num in arr:\n        if num == 1:\n            ones += 1\n    \n    window_ones = 0\n    max_ones_in_window = 0\n    \n    for i in range(ones):\n        if arr[i] == 1:\n            window_ones += 1\n    max_ones_in_window = window_ones\n    \n    for i in range(ones, n):\n        if arr[i - ones] == 1:\n            window_ones -= 1\n        if arr[i] == 1:\n            window_ones += 1\n        if window_ones > max_ones_in_window:\n            max_ones_in_window = window_ones\n    \n    return ones - max_ones_in_window",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "8559": {
    "question_id": "mbpp/855",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Min_Swaps(arr, n):\n    ones = 0\n    for num in arr:\n        if num == 1:\n            ones += 1\n    \n    window_ones = 0\n    max_ones_in_window = 0\n    \n    for i in range(ones):\n        if arr[i] == 1:\n            window_ones += 1\n    max_ones_in_window = window_ones\n    \n    for i in range(ones, n):\n        if arr[i - ones] == 1:\n            window_ones -= 1\n        if arr[i] == 1:\n            window_ones += 1\n        if window_ones > max_ones_in_window:\n            max_ones_in_window = window_ones\n    \n    return ones - max_ones_in_window",
    "test_output": "FAILED: expect 3,in fact 1",
    "test_result": "False"
  },
  "8560": {
    "question_id": "mbpp/856",
    "model": "deepseek-v3-250324",
    "generation_code": "def listify_list(strings):\n    return list(map(list, strings))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8561": {
    "question_id": "mbpp/856",
    "model": "deepseek-v3-250324",
    "generation_code": "def listify_list(strings):\n    return list(map(list, strings))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8562": {
    "question_id": "mbpp/856",
    "model": "deepseek-v3-250324",
    "generation_code": "def listify_list(strings):\n    return list(map(list, strings))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8563": {
    "question_id": "mbpp/856",
    "model": "deepseek-v3-250324",
    "generation_code": "def listify_list(strings):\n    return list(map(list, strings))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8564": {
    "question_id": "mbpp/856",
    "model": "deepseek-v3-250324",
    "generation_code": "def listify_list(strings):\n    return list(map(list, strings))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8565": {
    "question_id": "mbpp/856",
    "model": "deepseek-v3-250324",
    "generation_code": "def listify_list(strings):\n    return list(map(list, strings))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8566": {
    "question_id": "mbpp/856",
    "model": "deepseek-v3-250324",
    "generation_code": "def listify_list(strings):\n    return list(map(list, strings))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8567": {
    "question_id": "mbpp/856",
    "model": "deepseek-v3-250324",
    "generation_code": "def listify_list(strings):\n    return list(map(list, strings))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8568": {
    "question_id": "mbpp/856",
    "model": "deepseek-v3-250324",
    "generation_code": "def listify_list(strings):\n    return list(map(list, strings))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8569": {
    "question_id": "mbpp/856",
    "model": "deepseek-v3-250324",
    "generation_code": "def listify_list(strings):\n    return list(map(list, strings))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8570": {
    "question_id": "mbpp/857",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, list):\n            count += 1\n    return count ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8571": {
    "question_id": "mbpp/857",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, list):\n            count += 1\n    return count ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8572": {
    "question_id": "mbpp/857",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, list):\n            count += 1\n    return count ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8573": {
    "question_id": "mbpp/857",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, list):\n            count += 1\n    return count ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8574": {
    "question_id": "mbpp/857",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, list):\n            count += 1\n    return count ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8575": {
    "question_id": "mbpp/857",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, list):\n            count += 1\n    return count ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8576": {
    "question_id": "mbpp/857",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, list):\n            count += 1\n    return count ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8577": {
    "question_id": "mbpp/857",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, list):\n            count += 1\n    return count ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8578": {
    "question_id": "mbpp/857",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, list):\n            count += 1\n    return count ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8579": {
    "question_id": "mbpp/857",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_list(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, list):\n            count += 1\n    return count ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8580": {
    "question_id": "mbpp/858",
    "model": "deepseek-v3-250324",
    "generation_code": "def sub_lists(lst):\n    subs = [[]]\n    for i in range(len(lst)):\n        for j in range(len(subs)):\n            subs.append(subs[j] + [lst[i]])\n    return subs",
    "test_output": "FAILED: expect [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]],in fact [[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
    "test_result": "False"
  },
  "8581": {
    "question_id": "mbpp/858",
    "model": "deepseek-v3-250324",
    "generation_code": "def sub_lists(lst):\n    sublists = [[]]\n    for i in range(len(lst)):\n        for j in range(len(sublists)):\n            sublists.append(sublists[j] + [lst[i]])\n    return sublists",
    "test_output": "FAILED: expect [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]],in fact [[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
    "test_result": "False"
  },
  "8582": {
    "question_id": "mbpp/858",
    "model": "deepseek-v3-250324",
    "generation_code": "def sub_lists(lst):\n    subs = [[]]\n    for i in range(len(lst)):\n        for j in range(len(subs)):\n            subs.append(subs[j] + [lst[i]])\n    return subs",
    "test_output": "FAILED: expect [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]],in fact [[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
    "test_result": "False"
  },
  "8583": {
    "question_id": "mbpp/858",
    "model": "deepseek-v3-250324",
    "generation_code": "def sub_lists(lst):\n    subs = [[]]\n    for i in range(len(lst)):\n        for j in range(len(subs)):\n            subs.append(subs[j] + [lst[i]])\n    return subs",
    "test_output": "FAILED: expect [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]],in fact [[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
    "test_result": "False"
  },
  "8584": {
    "question_id": "mbpp/858",
    "model": "deepseek-v3-250324",
    "generation_code": "def sub_lists(lst):\n    subs = [[]]\n    for i in range(len(lst)):\n        for j in range(len(subs)):\n            subs.append(subs[j] + [lst[i]])\n    return subs",
    "test_output": "FAILED: expect [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]],in fact [[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
    "test_result": "False"
  },
  "8585": {
    "question_id": "mbpp/858",
    "model": "deepseek-v3-250324",
    "generation_code": "def sub_lists(lst):\n    subs = [[]]\n    for i in range(len(lst)):\n        for j in range(len(subs)):\n            subs.append(subs[j] + [lst[i]])\n    return subs",
    "test_output": "FAILED: expect [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]],in fact [[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
    "test_result": "False"
  },
  "8586": {
    "question_id": "mbpp/858",
    "model": "deepseek-v3-250324",
    "generation_code": "def sub_lists(lst):\n    subs = [[]]\n    for i in range(len(lst)):\n        for j in range(len(subs)):\n            subs.append(subs[j] + [lst[i]])\n    return subs",
    "test_output": "FAILED: expect [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]],in fact [[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
    "test_result": "False"
  },
  "8587": {
    "question_id": "mbpp/858",
    "model": "deepseek-v3-250324",
    "generation_code": "def sub_lists(lst):\n    subs = [[]]\n    for i in range(len(lst)):\n        for j in range(len(subs)):\n            subs.append(subs[j] + [lst[i]])\n    return subs",
    "test_output": "FAILED: expect [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]],in fact [[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
    "test_result": "False"
  },
  "8588": {
    "question_id": "mbpp/858",
    "model": "deepseek-v3-250324",
    "generation_code": "def sub_lists(lst):\n    subs = [[]]\n    for i in range(len(lst)):\n        for j in range(len(subs)):\n            current = subs[j] + [lst[i]]\n            subs.append(current)\n    return subs",
    "test_output": "FAILED: expect [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]],in fact [[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
    "test_result": "False"
  },
  "8589": {
    "question_id": "mbpp/858",
    "model": "deepseek-v3-250324",
    "generation_code": "def sub_lists(lst):\n    subs = [[]]\n    for i in range(len(lst)):\n        for j in range(len(subs)):\n            subs.append(subs[j] + [lst[i]])\n    return subs",
    "test_output": "FAILED: expect [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]],in fact [[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
    "test_result": "False"
  },
  "8590": {
    "question_id": "mbpp/859",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_alphanumeric(s):\n    if re.search(r'[^a-zA-Z0-9]$', s):\n        return 'Discard'\n    else:\n        return 'Accept'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8591": {
    "question_id": "mbpp/859",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_alphanumeric(s):\n    if re.search(r'[^a-zA-Z0-9]$', s):\n        return 'Discard'\n    else:\n        return 'Accept'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8592": {
    "question_id": "mbpp/859",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_alphanumeric(s):\n    if re.search(r'[^a-zA-Z0-9]$', s):\n        return 'Discard'\n    else:\n        return 'Accept'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8593": {
    "question_id": "mbpp/859",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_alphanumeric(string):\n    if re.search(r'[^a-zA-Z0-9]$', string):\n        return 'Discard'\n    else:\n        return 'Accept'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8594": {
    "question_id": "mbpp/859",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_alphanumeric(s):\n    if re.search(r'[^a-zA-Z0-9]$', s):\n        return 'Discard'\n    else:\n        return 'Accept'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8595": {
    "question_id": "mbpp/859",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_alphanumeric(s):\n    if re.search(r'[^a-zA-Z0-9]$', s):\n        return 'Discard'\n    else:\n        return 'Accept'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8596": {
    "question_id": "mbpp/859",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_alphanumeric(s):\n    if re.search(r'[^a-zA-Z0-9]$', s):\n        return 'Discard'\n    else:\n        return 'Accept'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8597": {
    "question_id": "mbpp/859",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_alphanumeric(s):\n    if re.search(r'[^a-zA-Z0-9]$', s):\n        return 'Discard'\n    else:\n        return 'Accept'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8598": {
    "question_id": "mbpp/859",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_alphanumeric(s):\n    if re.search(r'[^a-zA-Z0-9]$', s):\n        return 'Discard'\n    else:\n        return 'Accept'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8599": {
    "question_id": "mbpp/859",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef check_alphanumeric(s):\n    if re.search(r'[^a-zA-Z0-9]$', s):\n        return 'Discard'\n    else:\n        return 'Accept'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8600": {
    "question_id": "mbpp/860",
    "model": "deepseek-v3-250324",
    "generation_code": "anagram_lambda = lambda lst, s: [x for x in lst if sorted(x) == sorted(s)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8601": {
    "question_id": "mbpp/860",
    "model": "deepseek-v3-250324",
    "generation_code": "anagram_lambda = lambda lst, s: [x for x in lst if sorted(x) == sorted(s)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8602": {
    "question_id": "mbpp/860",
    "model": "deepseek-v3-250324",
    "generation_code": "anagram_lambda = lambda lst, s: list(filter(lambda x: sorted(x) == sorted(s), lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8603": {
    "question_id": "mbpp/860",
    "model": "deepseek-v3-250324",
    "generation_code": "anagram_lambda = lambda lst, s: [x for x in lst if sorted(x) == sorted(s)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8604": {
    "question_id": "mbpp/860",
    "model": "deepseek-v3-250324",
    "generation_code": "anagram_lambda = lambda lst, s: [x for x in lst if sorted(x) == sorted(s)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8605": {
    "question_id": "mbpp/860",
    "model": "deepseek-v3-250324",
    "generation_code": "anagram_lambda = lambda lst, s: list(filter(lambda x: sorted(x) == sorted(s), lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8606": {
    "question_id": "mbpp/860",
    "model": "deepseek-v3-250324",
    "generation_code": "anagram_lambda = lambda lst, s: [x for x in lst if sorted(x) == sorted(s)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8607": {
    "question_id": "mbpp/860",
    "model": "deepseek-v3-250324",
    "generation_code": "anagram_lambda = lambda lst, s: list(filter(lambda x: sorted(x) == sorted(s), lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8608": {
    "question_id": "mbpp/860",
    "model": "deepseek-v3-250324",
    "generation_code": "anagram_lambda = lambda lst, s: [x for x in lst if sorted(x) == sorted(s)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8609": {
    "question_id": "mbpp/860",
    "model": "deepseek-v3-250324",
    "generation_code": "anagram_lambda = lambda lst, s: [x for x in lst if sorted(x) == sorted(s)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8610": {
    "question_id": "mbpp/861",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    if not text or n <= 0:\n        return []\n    words = re.findall(r'\\w+', text.lower())\n    word_counts = Counter(words)\n    return word_counts.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8611": {
    "question_id": "mbpp/861",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    words = re.findall(r'\\w+', text.lower())\n    word_counts = Counter(words)\n    return word_counts.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8612": {
    "question_id": "mbpp/861",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    if not text or n <= 0:\n        return []\n    words = re.findall(r'\\w+', text.lower())\n    word_counts = Counter(words)\n    return word_counts.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8613": {
    "question_id": "mbpp/861",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    words = re.findall(r'\\w+', text.lower())\n    word_counts = Counter(words)\n    return word_counts.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8614": {
    "question_id": "mbpp/861",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    if not text or n <= 0:\n        return []\n    words = re.findall(r'\\w+', text.lower())\n    word_counts = Counter(words)\n    return word_counts.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8615": {
    "question_id": "mbpp/861",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    if not text or n <= 0:\n        return []\n    words = re.findall(r'\\w+', text.lower())\n    word_counts = Counter(words)\n    return word_counts.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8616": {
    "question_id": "mbpp/861",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    if not text or n <= 0:\n        return []\n    words = re.findall(r'\\w+', text.lower())\n    word_counts = Counter(words)\n    return word_counts.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8617": {
    "question_id": "mbpp/861",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    if not text or n <= 0:\n        return []\n    words = re.findall(r'\\w+', text.lower())\n    word_counts = Counter(words)\n    return word_counts.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8618": {
    "question_id": "mbpp/861",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    if not text or n <= 0:\n        return []\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    word_counts = Counter(words)\n    return word_counts.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8619": {
    "question_id": "mbpp/861",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    word_counts = Counter(words)\n    most_common = word_counts.most_common(n)\n    return most_common",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8620": {
    "question_id": "mbpp/862",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_conseq_subseq(arr, n):\n    if not arr:\n        return 0\n    \n    num_set = set(arr)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8621": {
    "question_id": "mbpp/862",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_conseq_subseq(arr, n):\n    if not arr:\n        return 0\n    \n    num_set = set(arr)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8622": {
    "question_id": "mbpp/862",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_conseq_subseq(arr, n):\n    if not arr:\n        return 0\n    \n    num_set = set(arr)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8623": {
    "question_id": "mbpp/862",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_conseq_subseq(arr, n):\n    if not arr:\n        return 0\n    \n    num_set = set(arr)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8624": {
    "question_id": "mbpp/862",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_conseq_subseq(arr, n):\n    if not arr:\n        return 0\n    \n    num_set = set(arr)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8625": {
    "question_id": "mbpp/862",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_conseq_subseq(arr, n):\n    if not arr:\n        return 0\n    \n    num_set = set(arr)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8626": {
    "question_id": "mbpp/862",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_conseq_subseq(arr, n):\n    if not arr:\n        return 0\n    \n    num_set = set(arr)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8627": {
    "question_id": "mbpp/862",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_conseq_subseq(arr, n):\n    if not arr:\n        return 0\n    \n    num_set = set(arr)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8628": {
    "question_id": "mbpp/862",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_conseq_subseq(arr, n):\n    if not arr:\n        return 0\n    \n    num_set = set(arr)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8629": {
    "question_id": "mbpp/862",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_longest_conseq_subseq(arr, n):\n    if not arr:\n        return 0\n    \n    num_set = set(arr)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8630": {
    "question_id": "mbpp/863",
    "model": "deepseek-v3-250324",
    "generation_code": "palindrome_lambda = lambda lst: list(filter(lambda s: s == s[::-1], lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8631": {
    "question_id": "mbpp/863",
    "model": "deepseek-v3-250324",
    "generation_code": "palindrome_lambda = lambda lst: list(filter(lambda s: s == s[::-1], lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8632": {
    "question_id": "mbpp/863",
    "model": "deepseek-v3-250324",
    "generation_code": "palindrome_lambda = lambda lst: list(filter(lambda s: s == s[::-1], lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8633": {
    "question_id": "mbpp/863",
    "model": "deepseek-v3-250324",
    "generation_code": "palindrome_lambda = lambda lst: list(filter(lambda s: s == s[::-1], lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8634": {
    "question_id": "mbpp/863",
    "model": "deepseek-v3-250324",
    "generation_code": "palindrome_lambda = lambda lst: list(filter(lambda s: s == s[::-1], lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8635": {
    "question_id": "mbpp/863",
    "model": "deepseek-v3-250324",
    "generation_code": "palindrome_lambda = lambda lst: list(filter(lambda s: s == s[::-1], lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8636": {
    "question_id": "mbpp/863",
    "model": "deepseek-v3-250324",
    "generation_code": "palindrome_lambda = lambda lst: list(filter(lambda s: s == s[::-1], lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8637": {
    "question_id": "mbpp/863",
    "model": "deepseek-v3-250324",
    "generation_code": "palindrome_lambda = lambda lst: list(filter(lambda s: s == s[::-1], lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8638": {
    "question_id": "mbpp/863",
    "model": "deepseek-v3-250324",
    "generation_code": "palindrome_lambda = lambda lst: list(filter(lambda s: s == s[::-1], lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8639": {
    "question_id": "mbpp/863",
    "model": "deepseek-v3-250324",
    "generation_code": "palindrome_lambda = lambda lst: list(filter(lambda s: s == s[::-1], lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8640": {
    "question_id": "mbpp/864",
    "model": "deepseek-v3-250324",
    "generation_code": "def ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8641": {
    "question_id": "mbpp/864",
    "model": "deepseek-v3-250324",
    "generation_code": "def ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8642": {
    "question_id": "mbpp/864",
    "model": "deepseek-v3-250324",
    "generation_code": "def ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8643": {
    "question_id": "mbpp/864",
    "model": "deepseek-v3-250324",
    "generation_code": "def ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8644": {
    "question_id": "mbpp/864",
    "model": "deepseek-v3-250324",
    "generation_code": "def ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8645": {
    "question_id": "mbpp/864",
    "model": "deepseek-v3-250324",
    "generation_code": "def ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8646": {
    "question_id": "mbpp/864",
    "model": "deepseek-v3-250324",
    "generation_code": "def ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8647": {
    "question_id": "mbpp/864",
    "model": "deepseek-v3-250324",
    "generation_code": "def ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8648": {
    "question_id": "mbpp/864",
    "model": "deepseek-v3-250324",
    "generation_code": "def ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8649": {
    "question_id": "mbpp/864",
    "model": "deepseek-v3-250324",
    "generation_code": "def ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8650": {
    "question_id": "mbpp/865",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb(month_name):\n    months_with_31_days = [\n        \"January\", \"March\", \"May\", \"July\",\n        \"August\", \"October\", \"December\"\n    ]\n    return month_name in months_with_31_days",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8651": {
    "question_id": "mbpp/865",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb(month_name):\n    months_with_31 = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month_name in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8652": {
    "question_id": "mbpp/865",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb(month_name):\n    months_with_31_days = [\n        \"January\", \"March\", \"May\", \"July\",\n        \"August\", \"October\", \"December\"\n    ]\n    return month_name in months_with_31_days",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8653": {
    "question_id": "mbpp/865",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb(month_name):\n    months_with_31 = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month_name in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8654": {
    "question_id": "mbpp/865",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb(month_name):\n    months_with_31 = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month_name in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8655": {
    "question_id": "mbpp/865",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb(month_name):\n    months_with_31 = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month_name in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8656": {
    "question_id": "mbpp/865",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb(month_name):\n    months_with_31 = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month_name in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8657": {
    "question_id": "mbpp/865",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb(month_name):\n    months_with_31_days = {\n        \"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"\n    }\n    return month_name in months_with_31_days",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8658": {
    "question_id": "mbpp/865",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb(month_name):\n    months_with_31_days = [\n        \"January\", \"March\", \"May\", \"July\",\n        \"August\", \"October\", \"December\"\n    ]\n    return month_name in months_with_31_days",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8659": {
    "question_id": "mbpp/865",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_monthnumb(month_name):\n    months_with_31 = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month_name in months_with_31",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8660": {
    "question_id": "mbpp/866",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Num(arr, n):\n    total = sum(arr)\n    if total % 2 == 0:\n        return 0\n    else:\n        return 1",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "8661": {
    "question_id": "mbpp/866",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Num(arr, n):\n    total = sum(arr)\n    if total % 2 == 0:\n        return 0\n    else:\n        return 1",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "8662": {
    "question_id": "mbpp/866",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Num(arr, n):\n    total_sum = sum(arr)\n    if total_sum % 2 == 0:\n        return 0\n    else:\n        return 1",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "8663": {
    "question_id": "mbpp/866",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Num(arr, n):\n    total = sum(arr)\n    if total % 2 == 0:\n        return 0\n    else:\n        return 1",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "8664": {
    "question_id": "mbpp/866",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Num(arr, n):\n    total = sum(arr)\n    if total % 2 == 0:\n        return 0\n    else:\n        return 1",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "8665": {
    "question_id": "mbpp/866",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Num(arr, n):\n    total = sum(arr)\n    if total % 2 == 0:\n        return 0\n    else:\n        return 1",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "8666": {
    "question_id": "mbpp/866",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Num(arr, n):\n    total = sum(arr)\n    if total % 2 == 0:\n        return 0\n    else:\n        return 1",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "8667": {
    "question_id": "mbpp/866",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Num(arr, n):\n    total = sum(arr)\n    if total % 2 == 0:\n        return 0\n    else:\n        return 1",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "8668": {
    "question_id": "mbpp/866",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Num(arr, n):\n    total = sum(arr)\n    if total % 2 == 0:\n        return 0\n    else:\n        return 1",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "8669": {
    "question_id": "mbpp/866",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_Num(arr, n):\n    total = sum(arr)\n    if total % 2 == 0:\n        return 0\n    else:\n        return 1",
    "test_output": "FAILED: expect 2,in fact 0",
    "test_result": "False"
  },
  "8670": {
    "question_id": "mbpp/867",
    "model": "deepseek-v3-250324",
    "generation_code": "def length_Of_Last_Word(s):\n    words = s.split()\n    if not words:\n        return 0\n    return len(words[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8671": {
    "question_id": "mbpp/867",
    "model": "deepseek-v3-250324",
    "generation_code": "def length_Of_Last_Word(s):\n    words = s.split()\n    if not words:\n        return 0\n    return len(words[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8672": {
    "question_id": "mbpp/867",
    "model": "deepseek-v3-250324",
    "generation_code": "def length_Of_Last_Word(s):\n    words = s.strip().split()\n    if not words:\n        return 0\n    return len(words[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8673": {
    "question_id": "mbpp/867",
    "model": "deepseek-v3-250324",
    "generation_code": "def length_Of_Last_Word(s):\n    words = s.strip().split()\n    if not words:\n        return 0\n    return len(words[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8674": {
    "question_id": "mbpp/867",
    "model": "deepseek-v3-250324",
    "generation_code": "def length_Of_Last_Word(s):\n    words = s.split()\n    if not words:\n        return 0\n    return len(words[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8675": {
    "question_id": "mbpp/867",
    "model": "deepseek-v3-250324",
    "generation_code": "def length_Of_Last_Word(s):\n    words = s.strip().split()\n    if not words:\n        return 0\n    return len(words[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8676": {
    "question_id": "mbpp/867",
    "model": "deepseek-v3-250324",
    "generation_code": "def length_Of_Last_Word(s):\n    words = s.split()\n    if not words:\n        return 0\n    return len(words[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8677": {
    "question_id": "mbpp/867",
    "model": "deepseek-v3-250324",
    "generation_code": "def length_Of_Last_Word(s):\n    words = s.strip().split()\n    if not words:\n        return 0\n    return len(words[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8678": {
    "question_id": "mbpp/867",
    "model": "deepseek-v3-250324",
    "generation_code": "def length_Of_Last_Word(s):\n    words = s.split()\n    if not words:\n        return 0\n    return len(words[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8679": {
    "question_id": "mbpp/867",
    "model": "deepseek-v3-250324",
    "generation_code": "def length_Of_Last_Word(s):\n    words = s.strip().split()\n    if not words:\n        return 0\n    return len(words[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8680": {
    "question_id": "mbpp/868",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_list_range(lst, min_val, max_val):\n    return [sublist for sublist in lst if any(min_val <= num <= max_val for num in sublist)]",
    "test_output": "FAILED: expect [[2], [1, 2, 3]],in fact [[2], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
    "test_result": "False"
  },
  "8681": {
    "question_id": "mbpp/868",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_list_range(lst, min_val, max_val):\n    return [sublist for sublist in lst if any(min_val <= val <= max_val for val in sublist)]",
    "test_output": "FAILED: expect [[2], [1, 2, 3]],in fact [[2], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
    "test_result": "False"
  },
  "8682": {
    "question_id": "mbpp/868",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_list_range(lst, min_val, max_val):\n    return [sublist for sublist in lst if any(min_val <= num <= max_val for num in sublist)]",
    "test_output": "FAILED: expect [[2], [1, 2, 3]],in fact [[2], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
    "test_result": "False"
  },
  "8683": {
    "question_id": "mbpp/868",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_list_range(lst, min_val, max_val):\n    return [sublist for sublist in lst if any(min_val <= num <= max_val for num in sublist)]",
    "test_output": "FAILED: expect [[2], [1, 2, 3]],in fact [[2], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
    "test_result": "False"
  },
  "8684": {
    "question_id": "mbpp/868",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_list_range(lst, min_val, max_val):\n    return [sublist for sublist in lst if any(min_val <= num <= max_val for num in sublist)]",
    "test_output": "FAILED: expect [[2], [1, 2, 3]],in fact [[2], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
    "test_result": "False"
  },
  "8685": {
    "question_id": "mbpp/868",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_list_range(lst, min_val, max_val):\n    return [sublist for sublist in lst if any(min_val <= num <= max_val for num in sublist)]",
    "test_output": "FAILED: expect [[2], [1, 2, 3]],in fact [[2], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
    "test_result": "False"
  },
  "8686": {
    "question_id": "mbpp/868",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_list_range(lst, min_val, max_val):\n    return [sublist for sublist in lst if any(min_val <= num <= max_val for num in sublist)]",
    "test_output": "FAILED: expect [[2], [1, 2, 3]],in fact [[2], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
    "test_result": "False"
  },
  "8687": {
    "question_id": "mbpp/868",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_list_range(list_of_lists, min_val, max_val):\n    result = []\n    for sublist in list_of_lists:\n        if all(min_val <= num <= max_val for num in sublist):\n            result.append(sublist)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8688": {
    "question_id": "mbpp/868",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_list_range(lst, low, high):\n    return [sublist for sublist in lst if any(low <= num <= high for num in sublist)]",
    "test_output": "FAILED: expect [[2], [1, 2, 3]],in fact [[2], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
    "test_result": "False"
  },
  "8689": {
    "question_id": "mbpp/868",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_list_range(list_of_lists, min_val, max_val):\n    result = []\n    for sublist in list_of_lists:\n        valid = True\n        for num in sublist:\n            if num < min_val or num > max_val:\n                valid = False\n                break\n        if valid:\n            result.append(sublist)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8690": {
    "question_id": "mbpp/869",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_positivenum = lambda numbers: sum(filter(lambda x: x > 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8691": {
    "question_id": "mbpp/869",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_positivenum = lambda numbers: sum(filter(lambda x: x > 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8692": {
    "question_id": "mbpp/869",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_positivenum = lambda numbers: sum(filter(lambda x: x > 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8693": {
    "question_id": "mbpp/869",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_positivenum = lambda lst: sum(filter(lambda x: x > 0, lst))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8694": {
    "question_id": "mbpp/869",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_positivenum = lambda numbers: sum(filter(lambda x: x > 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8695": {
    "question_id": "mbpp/869",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_positivenum = lambda numbers: sum(filter(lambda x: x > 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8696": {
    "question_id": "mbpp/869",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_positivenum = lambda numbers: sum(filter(lambda x: x > 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8697": {
    "question_id": "mbpp/869",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_positivenum = lambda numbers: sum(filter(lambda x: x > 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8698": {
    "question_id": "mbpp/869",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_positivenum = lambda numbers: sum(filter(lambda x: x > 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8699": {
    "question_id": "mbpp/869",
    "model": "deepseek-v3-250324",
    "generation_code": "sum_positivenum = lambda numbers: sum(filter(lambda x: x > 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8700": {
    "question_id": "mbpp/870",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    temp = s1 + s1\n    return s2 in temp",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8701": {
    "question_id": "mbpp/870",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Rotations(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    temp = str1 + str1\n    return str2 in temp",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8702": {
    "question_id": "mbpp/870",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    temp = s1 + s1\n    return s2 in temp",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8703": {
    "question_id": "mbpp/870",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    temp = s1 + s1\n    return s2 in temp",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8704": {
    "question_id": "mbpp/870",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Rotations(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    temp = str1 + str1\n    return str2 in temp",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8705": {
    "question_id": "mbpp/870",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    temp = s1 + s1\n    return s2 in temp",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8706": {
    "question_id": "mbpp/870",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    temp = s1 + s1\n    return s2 in temp",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8707": {
    "question_id": "mbpp/870",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    temp = s1 + s1\n    return s2 in temp",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8708": {
    "question_id": "mbpp/870",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    temp = s1 + s1\n    return s2 in temp",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8709": {
    "question_id": "mbpp/870",
    "model": "deepseek-v3-250324",
    "generation_code": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    temp = s1 + s1\n    return s2 in temp",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8710": {
    "question_id": "mbpp/871",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(list1, list2):\n    for item in list2:\n        if item not in list1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8711": {
    "question_id": "mbpp/871",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(list1, list2):\n    for item in list2:\n        if item not in list1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8712": {
    "question_id": "mbpp/871",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(list1, list2):\n    for item in list2:\n        if item not in list1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8713": {
    "question_id": "mbpp/871",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(list1, list2):\n    for item in list2:\n        if item not in list1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8714": {
    "question_id": "mbpp/871",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(list1, list2):\n    for item in list2:\n        if item not in list1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8715": {
    "question_id": "mbpp/871",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(list1, list2):\n    for item in list2:\n        if item not in list1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8716": {
    "question_id": "mbpp/871",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(list1, list2):\n    for item in list2:\n        if item not in list1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8717": {
    "question_id": "mbpp/871",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(list1, list2):\n    for item in list2:\n        if item not in list1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8718": {
    "question_id": "mbpp/871",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(list1, list2):\n    for item in list2:\n        if item not in list1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8719": {
    "question_id": "mbpp/871",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_subset(list1, list2):\n    for item in list2:\n        if item not in list1:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8720": {
    "question_id": "mbpp/872",
    "model": "deepseek-v3-250324",
    "generation_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8721": {
    "question_id": "mbpp/872",
    "model": "deepseek-v3-250324",
    "generation_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8722": {
    "question_id": "mbpp/872",
    "model": "deepseek-v3-250324",
    "generation_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8723": {
    "question_id": "mbpp/872",
    "model": "deepseek-v3-250324",
    "generation_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8724": {
    "question_id": "mbpp/872",
    "model": "deepseek-v3-250324",
    "generation_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8725": {
    "question_id": "mbpp/872",
    "model": "deepseek-v3-250324",
    "generation_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8726": {
    "question_id": "mbpp/872",
    "model": "deepseek-v3-250324",
    "generation_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8727": {
    "question_id": "mbpp/872",
    "model": "deepseek-v3-250324",
    "generation_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8728": {
    "question_id": "mbpp/872",
    "model": "deepseek-v3-250324",
    "generation_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8729": {
    "question_id": "mbpp/872",
    "model": "deepseek-v3-250324",
    "generation_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8730": {
    "question_id": "mbpp/873",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Concat(s, sub):\n    if not sub or not s:\n        return False\n    len_sub = len(sub)\n    if len(s) % len_sub != 0:\n        return False\n    times = len(s) // len_sub\n    return sub * times == s",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8731": {
    "question_id": "mbpp/873",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Concat(s, sub):\n    if not s or not sub:\n        return False\n    if len(s) % len(sub) != 0:\n        return False\n    times = len(s) // len(sub)\n    return sub * times == s",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8732": {
    "question_id": "mbpp/873",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Concat(s, sub):\n    if len(s) == 0 or len(sub) == 0:\n        return False\n    if len(s) % len(sub) != 0:\n        return False\n    repeat = len(s) // len(sub)\n    return sub * repeat == s",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8733": {
    "question_id": "mbpp/873",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Concat(s, pattern):\n    if len(s) == 0 or len(pattern) == 0:\n        return False\n    if len(s) % len(pattern) != 0:\n        return False\n    times = len(s) // len(pattern)\n    return pattern * times == s",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8734": {
    "question_id": "mbpp/873",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Concat(s, sub):\n    if not sub or not s:\n        return False\n    len_sub = len(sub)\n    if len(s) % len_sub != 0:\n        return False\n    repeat = len(s) // len_sub\n    return s == sub * repeat",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8735": {
    "question_id": "mbpp/873",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Concat(s, sub):\n    if not sub or not s:\n        return False\n    len_sub = len(sub)\n    if len(s) % len_sub != 0:\n        return False\n    times = len(s) // len_sub\n    return sub * times == s",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8736": {
    "question_id": "mbpp/873",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Concat(s, sub):\n    if len(s) == 0 or len(sub) == 0:\n        return False\n    if len(s) % len(sub) != 0:\n        return False\n    times = len(s) // len(sub)\n    return sub * times == s",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8737": {
    "question_id": "mbpp/873",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Concat(s, sub):\n    if len(s) == 0 or len(sub) == 0:\n        return False\n    if len(s) % len(sub) != 0:\n        return False\n    times = len(s) // len(sub)\n    return sub * times == s",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8738": {
    "question_id": "mbpp/873",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Concat(s, sub):\n    if len(s) == 0 or len(sub) == 0:\n        return False\n    if len(s) % len(sub) != 0:\n        return False\n    times = len(s) // len(sub)\n    return sub * times == s",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8739": {
    "question_id": "mbpp/873",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_Concat(s, sub):\n    if not s or not sub:\n        return False\n    if len(s) % len(sub) != 0:\n        return False\n    repeat = len(s) // len(sub)\n    return s == sub * repeat",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8740": {
    "question_id": "mbpp/874",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_difference(tuples):\n    if not tuples:\n        return 0\n    min_diff = float('inf')\n    for pair in tuples:\n        diff = abs(pair[0] - pair[1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8741": {
    "question_id": "mbpp/874",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_difference(tuples):\n    if not tuples:\n        return 0\n    min_diff = float('inf')\n    for t in tuples:\n        diff = abs(t[0] - t[1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8742": {
    "question_id": "mbpp/874",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_difference(tuples):\n    if not tuples:\n        return 0\n    min_diff = float('inf')\n    for t in tuples:\n        diff = abs(t[0] - t[1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8743": {
    "question_id": "mbpp/874",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_difference(tuples):\n    if not tuples:\n        return 0\n    min_diff = float('inf')\n    for pair in tuples:\n        diff = abs(pair[0] - pair[1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8744": {
    "question_id": "mbpp/874",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_difference(tuples):\n    if not tuples:\n        return 0\n    min_diff = float('inf')\n    for t in tuples:\n        diff = abs(t[0] - t[1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8745": {
    "question_id": "mbpp/874",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_difference(tuples):\n    if not tuples:\n        return 0\n    min_diff = float('inf')\n    for t in tuples:\n        diff = abs(t[0] - t[1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8746": {
    "question_id": "mbpp/874",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_difference(tuples):\n    if not tuples:\n        return 0\n    min_diff = float('inf')\n    for pair in tuples:\n        diff = abs(pair[0] - pair[1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8747": {
    "question_id": "mbpp/874",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_difference(tuples):\n    if not tuples:\n        return 0\n    min_diff = float('inf')\n    for pair in tuples:\n        diff = abs(pair[0] - pair[1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8748": {
    "question_id": "mbpp/874",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_difference(tuples):\n    if not tuples:\n        return None\n    min_diff = float('inf')\n    for t in tuples:\n        diff = abs(t[0] - t[1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8749": {
    "question_id": "mbpp/874",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_difference(tuples):\n    if not tuples:\n        return 0\n    min_diff = float('inf')\n    for pair in tuples:\n        diff = abs(pair[0] - pair[1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8750": {
    "question_id": "mbpp/875",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return a * b // gcd(a, b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8751": {
    "question_id": "mbpp/875",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return a * b // gcd(a, b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8752": {
    "question_id": "mbpp/875",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return a * b // gcd(a, b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8753": {
    "question_id": "mbpp/875",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return a * b // gcd(a, b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8754": {
    "question_id": "mbpp/875",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8755": {
    "question_id": "mbpp/875",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return a * b // gcd(a, b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8756": {
    "question_id": "mbpp/875",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return a * b // gcd(a, b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8757": {
    "question_id": "mbpp/875",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return a * b // gcd(a, b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8758": {
    "question_id": "mbpp/875",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8759": {
    "question_id": "mbpp/875",
    "model": "deepseek-v3-250324",
    "generation_code": "def lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return a * b // gcd(a, b)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8760": {
    "question_id": "mbpp/876",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_String(s):\n    return ''.join(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8761": {
    "question_id": "mbpp/876",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_String(s):\n    return ''.join(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8762": {
    "question_id": "mbpp/876",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_String(s):\n    return ''.join(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8763": {
    "question_id": "mbpp/876",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_String(s):\n    return ''.join(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8764": {
    "question_id": "mbpp/876",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_String(s):\n    return ''.join(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8765": {
    "question_id": "mbpp/876",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_String(s):\n    return ''.join(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8766": {
    "question_id": "mbpp/876",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_String(s):\n    return ''.join(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8767": {
    "question_id": "mbpp/876",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_String(s):\n    return ''.join(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8768": {
    "question_id": "mbpp/876",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_String(s):\n    return ''.join(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8769": {
    "question_id": "mbpp/876",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_String(s):\n    return ''.join(sorted(s))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8770": {
    "question_id": "mbpp/877",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuples(t, k):\n    return all(elem in k for elem in t) and all(elem in t for elem in k)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8771": {
    "question_id": "mbpp/877",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuples(t, k):\n    if not t or not k:\n        return False\n    unique_elements = set(t)\n    k_set = set(k)\n    return unique_elements.issubset(k_set) and len(unique_elements) <= len(k_set)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8772": {
    "question_id": "mbpp/877",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuples(t, k):\n    if not t or not k:\n        return False\n    unique_elements = set(t)\n    k_set = set(k)\n    return unique_elements.issubset(k_set) and len(unique_elements) == len(k_set)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8773": {
    "question_id": "mbpp/877",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuples(t, k):\n    if not t:\n        return False\n    unique_elements = set(t)\n    k_set = set(k)\n    return unique_elements.issubset(k_set) and len(unique_elements) <= len(k_set)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8774": {
    "question_id": "mbpp/877",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuples(t, k):\n    if not t or not k:\n        return False\n    unique_elements = set(t)\n    k_set = set(k)\n    return unique_elements.issubset(k_set) and len(unique_elements) == len(k_set)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8775": {
    "question_id": "mbpp/877",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuples(t, k):\n    if not t or not k:\n        return False\n    unique_elements = set(t)\n    k_set = set(k)\n    return unique_elements.issubset(k_set) and len(unique_elements) == len(k_set)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8776": {
    "question_id": "mbpp/877",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuples(t, k):\n    if not t or not k:\n        return False\n    unique_elements = set(t)\n    k_set = set(k)\n    return unique_elements.issubset(k_set) and k_set.issubset(unique_elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8777": {
    "question_id": "mbpp/877",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuples(t, k):\n    if not isinstance(t, tuple) or not isinstance(k, list):\n        return False\n    unique_elements = set(t)\n    k_set = set(k)\n    return unique_elements.issubset(k_set) and k_set.issubset(unique_elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8778": {
    "question_id": "mbpp/877",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuples(tuple_data, k_elements):\n    return all(elem in k_elements for elem in tuple_data) and len(set(tuple_data)) <= len(k_elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8779": {
    "question_id": "mbpp/877",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_tuples(t, k):\n    return all(elem in k for elem in t) and all(elem in t for elem in k)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8780": {
    "question_id": "mbpp/878",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^a.*b$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "8781": {
    "question_id": "mbpp/878",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^a.*b$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "8782": {
    "question_id": "mbpp/878",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^a.*b$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "8783": {
    "question_id": "mbpp/878",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^a.*b$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "8784": {
    "question_id": "mbpp/878",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^a.*b$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "8785": {
    "question_id": "mbpp/878",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^a.*b$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "8786": {
    "question_id": "mbpp/878",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    pattern = r'^a.*b$'\n    if re.search(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "8787": {
    "question_id": "mbpp/878",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^a.*b$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "8788": {
    "question_id": "mbpp/878",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^a.*b$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "8789": {
    "question_id": "mbpp/878",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^a.*b$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Matched!",
    "test_result": "False"
  },
  "8790": {
    "question_id": "mbpp/879",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8791": {
    "question_id": "mbpp/879",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8792": {
    "question_id": "mbpp/879",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8793": {
    "question_id": "mbpp/879",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8794": {
    "question_id": "mbpp/879",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"no solution\"",
    "test_output": "FAILED: expect No solutions,in fact no solution",
    "test_result": "False"
  },
  "8795": {
    "question_id": "mbpp/879",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8796": {
    "question_id": "mbpp/879",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8797": {
    "question_id": "mbpp/879",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8798": {
    "question_id": "mbpp/879",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8799": {
    "question_id": "mbpp/879",
    "model": "deepseek-v3-250324",
    "generation_code": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solution\"",
    "test_output": "FAILED: expect No solutions,in fact No solution",
    "test_result": "False"
  },
  "8800": {
    "question_id": "mbpp/880",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return (first_even if first_even is not None else 0) + (first_odd if first_odd is not None else 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8801": {
    "question_id": "mbpp/880",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return (first_even if first_even is not None else 0) + (first_odd if first_odd is not None else 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8802": {
    "question_id": "mbpp/880",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return (first_even if first_even is not None else 0) + (first_odd if first_odd is not None else 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8803": {
    "question_id": "mbpp/880",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return (first_even if first_even is not None else 0) + (first_odd if first_odd is not None else 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8804": {
    "question_id": "mbpp/880",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return (first_even if first_even is not None else 0) + (first_odd if first_odd is not None else 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8805": {
    "question_id": "mbpp/880",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return (first_even if first_even is not None else 0) + (first_odd if first_odd is not None else 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8806": {
    "question_id": "mbpp/880",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return (first_even if first_even is not None else 0) + (first_odd if first_odd is not None else 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8807": {
    "question_id": "mbpp/880",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return (first_even if first_even is not None else 0) + (first_odd if first_odd is not None else 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8808": {
    "question_id": "mbpp/880",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return (first_even if first_even is not None else 0) + (first_odd if first_odd is not None else 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8809": {
    "question_id": "mbpp/880",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return (first_even if first_even is not None else 0) + (first_odd if first_odd is not None else 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8810": {
    "question_id": "mbpp/881",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_perimeter(side1, side2):\n    return 2 * (side1 + side2)",
    "test_output": "FAILED: expect 400,in fact 60",
    "test_result": "False"
  },
  "8811": {
    "question_id": "mbpp/881",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_perimeter(base, side):\n    return 2 * (base + side)",
    "test_output": "FAILED: expect 400,in fact 60",
    "test_result": "False"
  },
  "8812": {
    "question_id": "mbpp/881",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_perimeter(side1, side2):\n    return 2 * (side1 + side2)",
    "test_output": "FAILED: expect 400,in fact 60",
    "test_result": "False"
  },
  "8813": {
    "question_id": "mbpp/881",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_perimeter(side1, side2):\n    return 2 * (side1 + side2)",
    "test_output": "FAILED: expect 400,in fact 60",
    "test_result": "False"
  },
  "8814": {
    "question_id": "mbpp/881",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_perimeter(side1, side2):\n    return 2 * (side1 + side2)",
    "test_output": "FAILED: expect 400,in fact 60",
    "test_result": "False"
  },
  "8815": {
    "question_id": "mbpp/881",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_perimeter(a, b):\n    return 2 * (a + b)",
    "test_output": "FAILED: expect 400,in fact 60",
    "test_result": "False"
  },
  "8816": {
    "question_id": "mbpp/881",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_perimeter(side1, side2):\n    return 2 * (side1 + side2)",
    "test_output": "FAILED: expect 400,in fact 60",
    "test_result": "False"
  },
  "8817": {
    "question_id": "mbpp/881",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_perimeter(length, width):\n    if length <= 0 or width <= 0:\n        return 0\n    return 2 * (length + width)",
    "test_output": "FAILED: expect 400,in fact 60",
    "test_result": "False"
  },
  "8818": {
    "question_id": "mbpp/881",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_perimeter(side1, side2):\n    return 2 * (side1 + side2)",
    "test_output": "FAILED: expect 400,in fact 60",
    "test_result": "False"
  },
  "8819": {
    "question_id": "mbpp/881",
    "model": "deepseek-v3-250324",
    "generation_code": "def parallelogram_perimeter(a, b):\n    return 2 * (a + b)",
    "test_output": "FAILED: expect 400,in fact 60",
    "test_result": "False"
  },
  "8820": {
    "question_id": "mbpp/882",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: list(filter(lambda x: x % m == 0 and x % n == 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8821": {
    "question_id": "mbpp/882",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: [x for x in numbers if x % m == 0 and x % n == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8822": {
    "question_id": "mbpp/882",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: [num for num in numbers if num % m == 0 and num % n == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8823": {
    "question_id": "mbpp/882",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: [x for x in numbers if x % m == 0 and x % n == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8824": {
    "question_id": "mbpp/882",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: [x for x in numbers if x % m == 0 and x % n == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8825": {
    "question_id": "mbpp/882",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: list(filter(lambda x: x % m == 0 and x % n == 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8826": {
    "question_id": "mbpp/882",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: list(filter(lambda x: x % m == 0 and x % n == 0, numbers))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8827": {
    "question_id": "mbpp/882",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: [x for x in numbers if x % m == 0 and x % n == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8828": {
    "question_id": "mbpp/882",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: [x for x in numbers if x % m == 0 and x % n == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8829": {
    "question_id": "mbpp/882",
    "model": "deepseek-v3-250324",
    "generation_code": "div_of_nums = lambda numbers, m, n: [x for x in numbers if x % m == 0 and x % n == 0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8830": {
    "question_id": "mbpp/883",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l < 1 or r > 32 or l > r:\n        return False\n    mask = (1 << (r - l + 1)) - 1\n    mask <<= (l - 1)\n    return (n & mask) == mask",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8831": {
    "question_id": "mbpp/883",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = (1 << (r - l + 1)) - 1\n    mask <<= (l - 1)\n    return (n & mask) == mask",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8832": {
    "question_id": "mbpp/883",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l > r or l < 1 or r > 32:\n        return False\n    mask = (1 << (r - l + 1)) - 1\n    mask <<= (l - 1)\n    return (n & mask) == mask",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8833": {
    "question_id": "mbpp/883",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l > r or l < 1 or r > 32:\n        return False\n    mask = (1 << (r - l + 1)) - 1\n    mask <<= (l - 1)\n    return (n & mask) == mask",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8834": {
    "question_id": "mbpp/883",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l > r or l < 1 or r > 32:\n        return False\n    mask = (1 << (r - l + 1)) - 1\n    mask <<= (l - 1)\n    return (n & mask) == mask",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8835": {
    "question_id": "mbpp/883",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l > r or l < 1 or r > 32:\n        return False\n    mask = (1 << (r - l + 1)) - 1\n    mask <<= (l - 1)\n    return (n & mask) == mask",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8836": {
    "question_id": "mbpp/883",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l > r or l < 1 or r > 32:\n        return False\n    mask = (1 << (r - l + 1)) - 1\n    mask <<= (l - 1)\n    return (n & mask) == mask",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8837": {
    "question_id": "mbpp/883",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l > r or l < 1 or r > 32:\n        return False\n    mask = (1 << (r - l + 1)) - 1\n    mask <<= (l - 1)\n    return (n & mask) == mask",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8838": {
    "question_id": "mbpp/883",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == mask",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8839": {
    "question_id": "mbpp/883",
    "model": "deepseek-v3-250324",
    "generation_code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l > r or l < 1 or r > 32:\n        return False\n    mask = (1 << (r - l + 1)) - 1\n    mask <<= (l - 1)\n    return (n & mask) == mask",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8840": {
    "question_id": "mbpp/884",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Isomorphic(s, t):\n    if len(s) != len(t):\n        return False\n    \n    s_to_t = {}\n    t_to_s = {}\n    \n    for char_s, char_t in zip(s, t):\n        if char_s in s_to_t:\n            if s_to_t[char_s] != char_t:\n                return False\n        else:\n            s_to_t[char_s] = char_t\n        \n        if char_t in t_to_s:\n            if t_to_s[char_t] != char_s:\n                return False\n        else:\n            t_to_s[char_t] = char_s\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8841": {
    "question_id": "mbpp/884",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Isomorphic(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    \n    mapping = {}\n    mapped_chars = set()\n    \n    for c1, c2 in zip(str1, str2):\n        if c1 in mapping:\n            if mapping[c1] != c2:\n                return False\n        else:\n            if c2 in mapped_chars:\n                return False\n            mapping[c1] = c2\n            mapped_chars.add(c2)\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8842": {
    "question_id": "mbpp/884",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Isomorphic(s, t):\n    if len(s) != len(t):\n        return False\n    \n    s_to_t = {}\n    t_to_s = {}\n    \n    for char_s, char_t in zip(s, t):\n        if char_s in s_to_t:\n            if s_to_t[char_s] != char_t:\n                return False\n        else:\n            s_to_t[char_s] = char_t\n        \n        if char_t in t_to_s:\n            if t_to_s[char_t] != char_s:\n                return False\n        else:\n            t_to_s[char_t] = char_s\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8843": {
    "question_id": "mbpp/884",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Isomorphic(s, t):\n    if len(s) != len(t):\n        return False\n    \n    s_to_t = {}\n    t_to_s = {}\n    \n    for char_s, char_t in zip(s, t):\n        if char_s in s_to_t:\n            if s_to_t[char_s] != char_t:\n                return False\n        else:\n            s_to_t[char_s] = char_t\n        \n        if char_t in t_to_s:\n            if t_to_s[char_t] != char_s:\n                return False\n        else:\n            t_to_s[char_t] = char_s\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8844": {
    "question_id": "mbpp/884",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Isomorphic(s, t):\n    if len(s) != len(t):\n        return False\n    \n    s_to_t = {}\n    t_to_s = {}\n    \n    for char_s, char_t in zip(s, t):\n        if char_s in s_to_t:\n            if s_to_t[char_s] != char_t:\n                return False\n        else:\n            s_to_t[char_s] = char_t\n        \n        if char_t in t_to_s:\n            if t_to_s[char_t] != char_s:\n                return False\n        else:\n            t_to_s[char_t] = char_s\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8845": {
    "question_id": "mbpp/884",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Isomorphic(s, t):\n    if len(s) != len(t):\n        return False\n    \n    s_to_t = {}\n    t_to_s = {}\n    \n    for char_s, char_t in zip(s, t):\n        if char_s in s_to_t:\n            if s_to_t[char_s] != char_t:\n                return False\n        else:\n            s_to_t[char_s] = char_t\n        \n        if char_t in t_to_s:\n            if t_to_s[char_t] != char_s:\n                return False\n        else:\n            t_to_s[char_t] = char_s\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8846": {
    "question_id": "mbpp/884",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Isomorphic(s, t):\n    if len(s) != len(t):\n        return False\n    \n    s_to_t = {}\n    t_to_s = {}\n    \n    for char_s, char_t in zip(s, t):\n        if char_s in s_to_t:\n            if s_to_t[char_s] != char_t:\n                return False\n        else:\n            s_to_t[char_s] = char_t\n        \n        if char_t in t_to_s:\n            if t_to_s[char_t] != char_s:\n                return False\n        else:\n            t_to_s[char_t] = char_s\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8847": {
    "question_id": "mbpp/884",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Isomorphic(s, t):\n    if len(s) != len(t):\n        return False\n    \n    s_to_t = {}\n    t_to_s = {}\n    \n    for char_s, char_t in zip(s, t):\n        if char_s in s_to_t:\n            if s_to_t[char_s] != char_t:\n                return False\n        else:\n            s_to_t[char_s] = char_t\n        \n        if char_t in t_to_s:\n            if t_to_s[char_t] != char_s:\n                return False\n        else:\n            t_to_s[char_t] = char_s\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8848": {
    "question_id": "mbpp/884",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Isomorphic(s, t):\n    if len(s) != len(t):\n        return False\n    \n    s_to_t = {}\n    t_to_s = {}\n    \n    for char_s, char_t in zip(s, t):\n        if char_s in s_to_t:\n            if s_to_t[char_s] != char_t:\n                return False\n        else:\n            s_to_t[char_s] = char_t\n        \n        if char_t in t_to_s:\n            if t_to_s[char_t] != char_s:\n                return False\n        else:\n            t_to_s[char_t] = char_s\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8849": {
    "question_id": "mbpp/884",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Isomorphic(s, t):\n    if len(s) != len(t):\n        return False\n    \n    s_to_t = {}\n    t_to_s = {}\n    \n    for char_s, char_t in zip(s, t):\n        if char_s in s_to_t:\n            if s_to_t[char_s] != char_t:\n                return False\n        else:\n            s_to_t[char_s] = char_t\n        \n        if char_t in t_to_s:\n            if t_to_s[char_t] != char_s:\n                return False\n        else:\n            t_to_s[char_t] = char_s\n    \n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8850": {
    "question_id": "mbpp/885",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_num(numbers):\n    if not numbers:\n        return 0.0\n    return sum(numbers) / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8851": {
    "question_id": "mbpp/885",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_num(numbers):\n    if not numbers:\n        return 0.0\n    return sum(numbers) / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8852": {
    "question_id": "mbpp/885",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_num(numbers):\n    if not numbers:\n        return 0.0\n    return sum(numbers) / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8853": {
    "question_id": "mbpp/885",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_num(numbers):\n    if not numbers:\n        return 0.0\n    return sum(numbers) / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8854": {
    "question_id": "mbpp/885",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_num(numbers):\n    if not numbers:\n        return 0.0\n    return sum(numbers) / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8855": {
    "question_id": "mbpp/885",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_num(numbers):\n    if not numbers:\n        return 0.0\n    return sum(numbers) / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8856": {
    "question_id": "mbpp/885",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_num(numbers):\n    if not numbers:\n        return 0.0\n    return sum(numbers) / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8857": {
    "question_id": "mbpp/885",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_num(numbers):\n    if not numbers:\n        return 0.0\n    return sum(numbers) / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8858": {
    "question_id": "mbpp/885",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_num(numbers):\n    if not numbers:\n        return 0.0\n    return sum(numbers) / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8859": {
    "question_id": "mbpp/885",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_num(numbers):\n    if not numbers:\n        return 0.0\n    return sum(numbers) / len(numbers)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8860": {
    "question_id": "mbpp/886",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_odd(num):\n    return num & 1 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8861": {
    "question_id": "mbpp/886",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_odd(num):\n    return num & 1 == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8862": {
    "question_id": "mbpp/886",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_odd(num):\n    return num & 1 == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8863": {
    "question_id": "mbpp/886",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_odd(num):\n    return num & 1 == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8864": {
    "question_id": "mbpp/886",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_odd(num):\n    return num & 1 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8865": {
    "question_id": "mbpp/886",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_odd(num):\n    return num & 1 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8866": {
    "question_id": "mbpp/886",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_odd(num):\n    return num & 1 == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8867": {
    "question_id": "mbpp/886",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_odd(num):\n    return num & 1 == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8868": {
    "question_id": "mbpp/886",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_odd(num):\n    return num & 1 != 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8869": {
    "question_id": "mbpp/886",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_odd(num):\n    return num & 1 == 1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8870": {
    "question_id": "mbpp/887",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(tuple(a - b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8871": {
    "question_id": "mbpp/887",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(tuple(a - b for a, b in zip(sub1, sub2)) for sub1, sub2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8872": {
    "question_id": "mbpp/887",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(tuple(a - b for a, b in zip(sub1, sub2)) for sub1, sub2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8873": {
    "question_id": "mbpp/887",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(tuple(a - b for a, b in zip(sub1, sub2)) for sub1, sub2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8874": {
    "question_id": "mbpp/887",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(tuple(a - b for a, b in zip(sub1, sub2)) for sub1, sub2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8875": {
    "question_id": "mbpp/887",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(tuple(a - b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8876": {
    "question_id": "mbpp/887",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(tuple(a - b for a, b in zip(sub1, sub2)) for sub1, sub2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8877": {
    "question_id": "mbpp/887",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(tuple(a - b for a, b in zip(sub1, sub2)) for sub1, sub2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8878": {
    "question_id": "mbpp/887",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(tuple(a - b for a, b in zip(sub1, sub2)) for sub1, sub2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8879": {
    "question_id": "mbpp/887",
    "model": "deepseek-v3-250324",
    "generation_code": "def substract_elements(tuple1, tuple2):\n    return tuple(tuple(a - b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8880": {
    "question_id": "mbpp/888",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8881": {
    "question_id": "mbpp/888",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8882": {
    "question_id": "mbpp/888",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8883": {
    "question_id": "mbpp/888",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8884": {
    "question_id": "mbpp/888",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8885": {
    "question_id": "mbpp/888",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8886": {
    "question_id": "mbpp/888",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8887": {
    "question_id": "mbpp/888",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8888": {
    "question_id": "mbpp/888",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8889": {
    "question_id": "mbpp/888",
    "model": "deepseek-v3-250324",
    "generation_code": "def reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8890": {
    "question_id": "mbpp/889",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Extra(arr1, arr2, n):\n    left, right = 0, n - 1\n    index = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid < len(arr2) and arr1[mid] == arr2[mid]:\n            left = mid + 1\n        else:\n            index = mid\n            right = mid - 1\n    \n    return index",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8891": {
    "question_id": "mbpp/889",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Extra(arr1, arr2, n):\n    left, right = 0, n - 1\n    index = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid < len(arr2) and arr1[mid] == arr2[mid]:\n            left = mid + 1\n        else:\n            index = mid\n            right = mid - 1\n    \n    return index",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8892": {
    "question_id": "mbpp/889",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Extra(arr1, arr2, n):\n    left, right = 0, n - 1\n    index = n  # Default case when extra element is at the end\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid < len(arr2) and arr1[mid] == arr2[mid]:\n            left = mid + 1\n        else:\n            index = mid\n            right = mid - 1\n    return index",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8893": {
    "question_id": "mbpp/889",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Extra(arr1, arr2, n):\n    left, right = 0, n - 1\n    index = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid < len(arr2) and arr1[mid] == arr2[mid]:\n            left = mid + 1\n        else:\n            index = mid\n            right = mid - 1\n    return index",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8894": {
    "question_id": "mbpp/889",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Extra(arr1, arr2, n):\n    left, right = 0, n - 1\n    index = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid < len(arr2) and arr1[mid] == arr2[mid]:\n            left = mid + 1\n        else:\n            index = mid\n            right = mid - 1\n    \n    return index",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8895": {
    "question_id": "mbpp/889",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Extra(arr1, arr2, n):\n    left, right = 0, n - 1\n    index = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid < len(arr2) and arr1[mid] == arr2[mid]:\n            left = mid + 1\n        else:\n            index = mid\n            right = mid - 1\n    \n    return index",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8896": {
    "question_id": "mbpp/889",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Extra(arr1, arr2, n):\n    left, right = 0, n - 1\n    index = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid < len(arr2) and arr1[mid] == arr2[mid]:\n            left = mid + 1\n        else:\n            index = mid\n            right = mid - 1\n    \n    return index",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8897": {
    "question_id": "mbpp/889",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Extra(arr1, arr2, n):\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if mid < len(arr2) and arr1[mid] == arr2[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8898": {
    "question_id": "mbpp/889",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Extra(arr1, arr2, n):\n    left, right = 0, n - 1\n    index = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid < len(arr2) and arr1[mid] == arr2[mid]:\n            left = mid + 1\n        else:\n            index = mid\n            right = mid - 1\n    \n    return index",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8899": {
    "question_id": "mbpp/889",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_Extra(arr1, arr2, n):\n    left, right = 0, n - 1\n    index = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid < len(arr2) and arr1[mid] == arr2[mid]:\n            left = mid + 1\n        else:\n            index = mid\n            right = mid - 1\n    \n    return index",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8900": {
    "question_id": "mbpp/890",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_Length(a, b):\n    return len(str(abs(a))) == len(str(abs(b)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8901": {
    "question_id": "mbpp/890",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_Length(a, b):\n    return len(str(abs(a))) == len(str(abs(b)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8902": {
    "question_id": "mbpp/890",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_Length(a, b):\n    return len(str(abs(a))) == len(str(abs(b)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8903": {
    "question_id": "mbpp/890",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_Length(a, b):\n    return len(str(abs(a))) == len(str(abs(b)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8904": {
    "question_id": "mbpp/890",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_Length(a, b):\n    return len(str(abs(a))) == len(str(abs(b)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8905": {
    "question_id": "mbpp/890",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_Length(a, b):\n    return len(str(abs(a))) == len(str(abs(b)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8906": {
    "question_id": "mbpp/890",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_Length(a, b):\n    return len(str(abs(a))) == len(str(abs(b)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8907": {
    "question_id": "mbpp/890",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_Length(a, b):\n    return len(str(abs(a))) == len(str(abs(b)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8908": {
    "question_id": "mbpp/890",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_Length(a, b):\n    return len(str(abs(a))) == len(str(abs(b)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8909": {
    "question_id": "mbpp/890",
    "model": "deepseek-v3-250324",
    "generation_code": "def same_Length(a, b):\n    return len(str(abs(a))) == len(str(abs(b)))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8910": {
    "question_id": "mbpp/891",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    if not s:\n        return s\n    return ' '.join(s.split())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8911": {
    "question_id": "mbpp/891",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return ' '.join(s.split())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8912": {
    "question_id": "mbpp/891",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return ' '.join(s.split())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8913": {
    "question_id": "mbpp/891",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return ' '.join(s.split())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8914": {
    "question_id": "mbpp/891",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return ' '.join(s.split())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8915": {
    "question_id": "mbpp/891",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    if not s:\n        return s\n    return ' '.join(s.split())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8916": {
    "question_id": "mbpp/891",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return ' '.join(s.split())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8917": {
    "question_id": "mbpp/891",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return ' '.join(s.split())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8918": {
    "question_id": "mbpp/891",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    if not s:\n        return s\n    return ' '.join(s.split())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8919": {
    "question_id": "mbpp/891",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_spaces(s):\n    return ' '.join(s.split())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8920": {
    "question_id": "mbpp/892",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[-1] for sublist in lst if sublist]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8921": {
    "question_id": "mbpp/892",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[-1] for sublist in lst if sublist]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8922": {
    "question_id": "mbpp/892",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[-1] for sublist in lst if sublist]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8923": {
    "question_id": "mbpp/892",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[-1] for sublist in lst if sublist]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8924": {
    "question_id": "mbpp/892",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[-1] for sublist in lst if sublist]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8925": {
    "question_id": "mbpp/892",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[-1] for sublist in lst if sublist]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8926": {
    "question_id": "mbpp/892",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[-1] for sublist in lst if sublist]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8927": {
    "question_id": "mbpp/892",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[-1] for sublist in lst if sublist]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8928": {
    "question_id": "mbpp/892",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[-1] for sublist in lst if sublist]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8929": {
    "question_id": "mbpp/892",
    "model": "deepseek-v3-250324",
    "generation_code": "def Extract(lst):\n    return [sublist[-1] for sublist in lst if sublist]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8930": {
    "question_id": "mbpp/893",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_to_tuple(s):\n    if not s.strip():\n        return tuple()\n    return tuple(map(float, [x.strip() for x in s.split(',')]))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8931": {
    "question_id": "mbpp/893",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_to_tuple(s):\n    return tuple(map(float, [x.strip() for x in s.split(',')]))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8932": {
    "question_id": "mbpp/893",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8933": {
    "question_id": "mbpp/893",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_to_tuple(s):\n    return tuple(map(float, [x.strip() for x in s.split(',')]))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8934": {
    "question_id": "mbpp/893",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8935": {
    "question_id": "mbpp/893",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_to_tuple(s):\n    if not s.strip():\n        return ()\n    parts = [float(x.strip()) for x in s.split(',')]\n    return tuple(parts)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8936": {
    "question_id": "mbpp/893",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8937": {
    "question_id": "mbpp/893",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_to_tuple(s):\n    if not s.strip():\n        return ()\n    parts = [part.strip() for part in s.split(',')]\n    return tuple(float(part) for part in parts if part)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8938": {
    "question_id": "mbpp/893",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_to_tuple(s):\n    if not s.strip():\n        return ()\n    parts = [x.strip() for x in s.split(',')]\n    return tuple(float(x) for x in parts if x)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8939": {
    "question_id": "mbpp/893",
    "model": "deepseek-v3-250324",
    "generation_code": "def float_to_tuple(s):\n    return tuple(map(float, s.split(', ')))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8940": {
    "question_id": "mbpp/894",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_subseq(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8941": {
    "question_id": "mbpp/894",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_subseq(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    \n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    \n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8942": {
    "question_id": "mbpp/894",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_subseq(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    prev_max = arr[0]\n    curr_max = max(arr[0], arr[1])\n    \n    for num in arr[2:]:\n        new_max = max(curr_max, prev_max + num)\n        prev_max, curr_max = curr_max, new_max\n    \n    return curr_max",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8943": {
    "question_id": "mbpp/894",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_subseq(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    prev_max = arr[0]\n    curr_max = max(arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        new_max = max(curr_max, prev_max + arr[i])\n        prev_max = curr_max\n        curr_max = new_max\n    \n    return curr_max",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8944": {
    "question_id": "mbpp/894",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_subseq(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8945": {
    "question_id": "mbpp/894",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_subseq(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    prev_included = arr[0]\n    prev_excluded = 0\n    \n    for i in range(1, len(arr)):\n        new_included = prev_excluded + arr[i]\n        new_excluded = max(prev_included, prev_excluded)\n        \n        prev_included, prev_excluded = new_included, new_excluded\n    \n    return max(prev_included, prev_excluded)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8946": {
    "question_id": "mbpp/894",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_subseq(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    prev_max = arr[0]\n    curr_max = max(arr[0], arr[1])\n    \n    for num in arr[2:]:\n        new_max = max(curr_max, prev_max + num)\n        prev_max, curr_max = curr_max, new_max\n    \n    return curr_max",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8947": {
    "question_id": "mbpp/894",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_subseq(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    prev_max = arr[0]\n    curr_max = max(arr[0], arr[1])\n    \n    for num in arr[2:]:\n        new_max = max(curr_max, prev_max + num)\n        prev_max, curr_max = curr_max, new_max\n    \n    return curr_max",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8948": {
    "question_id": "mbpp/894",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_subseq(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    prev_max = arr[0]\n    curr_max = max(arr[0], arr[1])\n    \n    for num in arr[2:]:\n        new_max = max(curr_max, prev_max + num)\n        prev_max, curr_max = curr_max, new_max\n    \n    return curr_max",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8949": {
    "question_id": "mbpp/894",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_sum_subseq(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    prev_max = arr[0]\n    curr_max = max(arr[0], arr[1])\n    \n    for num in arr[2:]:\n        new_max = max(curr_max, prev_max + num)\n        prev_max, curr_max = curr_max, new_max\n    \n    return curr_max",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8950": {
    "question_id": "mbpp/895",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list_last(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8951": {
    "question_id": "mbpp/895",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list_last(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8952": {
    "question_id": "mbpp/895",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list_last(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8953": {
    "question_id": "mbpp/895",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list_last(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8954": {
    "question_id": "mbpp/895",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list_last(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8955": {
    "question_id": "mbpp/895",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list_last(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8956": {
    "question_id": "mbpp/895",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list_last(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8957": {
    "question_id": "mbpp/895",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list_last(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8958": {
    "question_id": "mbpp/895",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list_last(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8959": {
    "question_id": "mbpp/895",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list_last(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[-1])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8960": {
    "question_id": "mbpp/896",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Word_Present(sentence, word):\n    return word in sentence.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8961": {
    "question_id": "mbpp/896",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Word_Present(sentence, word):\n    return word in sentence.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8962": {
    "question_id": "mbpp/896",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Word_Present(sentence, word):\n    return word in sentence.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8963": {
    "question_id": "mbpp/896",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Word_Present(sentence, word):\n    return word in sentence.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8964": {
    "question_id": "mbpp/896",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Word_Present(sentence, word):\n    return word in sentence.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8965": {
    "question_id": "mbpp/896",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Word_Present(sentence, word):\n    return word in sentence.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8966": {
    "question_id": "mbpp/896",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Word_Present(sentence, word):\n    return word in sentence.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8967": {
    "question_id": "mbpp/896",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Word_Present(sentence, word):\n    return word in sentence.split()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8968": {
    "question_id": "mbpp/896",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Word_Present(sentence, word):\n    words = sentence.split()\n    return word in words",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8969": {
    "question_id": "mbpp/896",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Word_Present(sentence, word):\n    words = sentence.split()\n    return word in words",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8970": {
    "question_id": "mbpp/897",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_elements(lst, n):\n    result = []\n    i = 0\n    while i <= len(lst) - n:\n        current = lst[i]\n        match = True\n        for j in range(1, n):\n            if i + j >= len(lst) or lst[i + j] != current:\n                match = False\n                break\n        if match:\n            result.append(current)\n            i += n\n        else:\n            i += 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8971": {
    "question_id": "mbpp/897",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_elements(lst, n):\n    result = []\n    if n <= 0 or not lst:\n        return result\n    for i in range(len(lst) - n + 1):\n        all_same = True\n        first_element = lst[i]\n        for j in range(i, i + n):\n            if lst[j] != first_element:\n                all_same = False\n                break\n        if all_same and first_element not in result:\n            result.append(first_element)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8972": {
    "question_id": "mbpp/897",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_elements(lst, n):\n    result = []\n    if n <= 0 or not lst:\n        return result\n    for i in range(len(lst) - n + 1):\n        if all(lst[i] == lst[i + j] for j in range(1, n)):\n            if lst[i] not in result:\n                result.append(lst[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8973": {
    "question_id": "mbpp/897",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_elements(lst, n):\n    result = []\n    for i in range(len(lst) - n + 1):\n        if all(lst[i] == lst[i + j] for j in range(1, n)):\n            if lst[i] not in result:\n                result.append(lst[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8974": {
    "question_id": "mbpp/897",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_elements(lst, n):\n    result = []\n    i = 0\n    while i <= len(lst) - n:\n        if all(lst[i] == lst[i + j] for j in range(n)):\n            result.append(lst[i])\n            i += n\n        else:\n            i += 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8975": {
    "question_id": "mbpp/897",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_elements(lst, n):\n    result = []\n    if n <= 0 or not lst:\n        return result\n    for i in range(len(lst) - n + 1):\n        all_same = True\n        first_element = lst[i]\n        for j in range(i, i + n):\n            if lst[j] != first_element:\n                all_same = False\n                break\n        if all_same and first_element not in result:\n            result.append(first_element)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8976": {
    "question_id": "mbpp/897",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_elements(lst, n):\n    result = []\n    i = 0\n    while i <= len(lst) - n:\n        all_same = True\n        first = lst[i]\n        for j in range(i, i + n):\n            if lst[j] != first:\n                all_same = False\n                break\n        if all_same:\n            result.append(first)\n            i += n\n        else:\n            i += 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8977": {
    "question_id": "mbpp/897",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_elements(lst, n):\n    result = []\n    i = 0\n    while i <= len(lst) - n:\n        if all(x == lst[i] for x in lst[i:i+n]):\n            result.append(lst[i])\n            i += n\n        else:\n            i += 1\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8978": {
    "question_id": "mbpp/897",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_elements(lst, n):\n    result = []\n    if n <= 0 or not lst:\n        return result\n    for i in range(len(lst) - n + 1):\n        if all(lst[i] == lst[i + j] for j in range(n)):\n            if lst[i] not in result:\n                result.append(lst[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8979": {
    "question_id": "mbpp/897",
    "model": "deepseek-v3-250324",
    "generation_code": "def extract_elements(lst, n):\n    result = []\n    for i in range(len(lst) - n + 1):\n        if all(lst[i] == lst[i + j] for j in range(n)):\n            if lst[i] not in result:\n                result.append(lst[i])\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8980": {
    "question_id": "mbpp/898",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(arr, n):\n    left = 0\n    right = n - 1\n    last = float('-inf')\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            if arr[left] >= last:\n                last = arr[left]\n                left += 1\n            else:\n                return False\n        else:\n            if arr[right] >= last:\n                last = arr[right]\n                right -= 1\n            else:\n                return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8981": {
    "question_id": "mbpp/898",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(arr, n):\n    left = 0\n    right = n - 1\n    while left < right and arr[left] <= arr[left + 1]:\n        left += 1\n    while left < right and arr[right] >= arr[right - 1]:\n        right -= 1\n    if left == right:\n        return True\n    if arr[left] > arr[right]:\n        return False\n    i = left + 1\n    while i < right and arr[i] >= arr[left] and arr[i] <= arr[right]:\n        i += 1\n    return i == right",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8982": {
    "question_id": "mbpp/898",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(arr, n):\n    left = 0\n    right = n - 1\n    last_picked = float('-inf')\n    \n    while left <= right:\n        if arr[left] >= arr[right] and arr[left] >= last_picked:\n            last_picked = arr[left]\n            left += 1\n        elif arr[right] > arr[left] and arr[right] >= last_picked:\n            last_picked = arr[right]\n            right -= 1\n        else:\n            return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8983": {
    "question_id": "mbpp/898",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(arr, n):\n    left = 0\n    right = n - 1\n    last = -float('inf')\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            if arr[left] >= last:\n                last = arr[left]\n                left += 1\n            else:\n                return False\n        else:\n            if arr[right] >= last:\n                last = arr[right]\n                right -= 1\n            else:\n                return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8984": {
    "question_id": "mbpp/898",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(arr, n):\n    left = 0\n    right = n - 1\n    last = float('-inf')\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            if arr[left] >= last:\n                last = arr[left]\n                left += 1\n            else:\n                return False\n        else:\n            if arr[right] >= last:\n                last = arr[right]\n                right -= 1\n            else:\n                return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8985": {
    "question_id": "mbpp/898",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(arr, n):\n    left = 0\n    right = n - 1\n    last = float('-inf')\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            if arr[left] >= last:\n                last = arr[left]\n                left += 1\n            else:\n                return False\n        else:\n            if arr[right] >= last:\n                last = arr[right]\n                right -= 1\n            else:\n                return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8986": {
    "question_id": "mbpp/898",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(arr, n):\n    left = 0\n    right = n - 1\n    last = float('-inf')\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            if arr[left] >= last:\n                last = arr[left]\n                left += 1\n            else:\n                return False\n        else:\n            if arr[right] >= last:\n                last = arr[right]\n                right -= 1\n            else:\n                return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8987": {
    "question_id": "mbpp/898",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(arr, n):\n    left = 0\n    right = n - 1\n    last = float('-inf')\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            if arr[left] >= last:\n                last = arr[left]\n                left += 1\n            else:\n                return False\n        else:\n            if arr[right] >= last:\n                last = arr[right]\n                right -= 1\n            else:\n                return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8988": {
    "question_id": "mbpp/898",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(arr, n):\n    left = 0\n    right = n - 1\n    last = float('-inf')\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            if arr[left] >= last:\n                last = arr[left]\n                left += 1\n            else:\n                return False\n        else:\n            if arr[right] >= last:\n                last = arr[right]\n                right -= 1\n            else:\n                return False\n    return True",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8989": {
    "question_id": "mbpp/898",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(arr, n):\n    left = 0\n    right = n - 1\n    while left < right and arr[left] <= arr[left + 1]:\n        left += 1\n    while left < right and arr[right] >= arr[right - 1]:\n        right -= 1\n    if left >= right:\n        return True\n    if arr[left] <= arr[right]:\n        return True\n    return False",
    "test_output": "FAILED: expect True,in fact False",
    "test_result": "False"
  },
  "8990": {
    "question_id": "mbpp/899",
    "model": "deepseek-v3-250324",
    "generation_code": "def match_num(s):\n    if not s:\n        return False\n    parts = s.split('-')\n    if len(parts) < 1:\n        return False\n    first_part = parts[0]\n    return first_part.isdigit()",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "8991": {
    "question_id": "mbpp/899",
    "model": "deepseek-v3-250324",
    "generation_code": "def match_num(s):\n    if not s:\n        return False\n    return s[0].isdigit()",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "8992": {
    "question_id": "mbpp/899",
    "model": "deepseek-v3-250324",
    "generation_code": "def match_num(s):\n    if not s:\n        return False\n    return s[0].isdigit()",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "8993": {
    "question_id": "mbpp/899",
    "model": "deepseek-v3-250324",
    "generation_code": "def match_num(s):\n    if not s:\n        return False\n    return s[0].isdigit()",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "8994": {
    "question_id": "mbpp/899",
    "model": "deepseek-v3-250324",
    "generation_code": "def match_num(s):\n    if not s:\n        return False\n    return s[0].isdigit()",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "8995": {
    "question_id": "mbpp/899",
    "model": "deepseek-v3-250324",
    "generation_code": "def match_num(s):\n    if not s:\n        return False\n    return s[0].isdigit()",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "8996": {
    "question_id": "mbpp/899",
    "model": "deepseek-v3-250324",
    "generation_code": "def match_num(s):\n    if not s:\n        return False\n    return s[0].isdigit() and int(s[0]) == 5",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "8997": {
    "question_id": "mbpp/899",
    "model": "deepseek-v3-250324",
    "generation_code": "def match_num(s):\n    if not s:\n        return False\n    return s[0].isdigit()",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "8998": {
    "question_id": "mbpp/899",
    "model": "deepseek-v3-250324",
    "generation_code": "def match_num(s):\n    if not s:\n        return False\n    parts = s.split('-')\n    if len(parts) < 1:\n        return False\n    first_part = parts[0]\n    return first_part.isdigit()",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "8999": {
    "question_id": "mbpp/899",
    "model": "deepseek-v3-250324",
    "generation_code": "def match_num(s):\n    if not s:\n        return False\n    return s[0].isdigit()",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "9000": {
    "question_id": "mbpp/900",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smallest_multiple(n):\n    if n < 1:\n        return 0\n    lcm = 1\n    for i in range(1, n + 1):\n        lcm = lcm * i // math.gcd(lcm, i)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9001": {
    "question_id": "mbpp/900",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smallest_multiple(n):\n    if n < 1:\n        return 0\n    lcm = 1\n    for i in range(1, n + 1):\n        lcm = lcm * i // math.gcd(lcm, i)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9002": {
    "question_id": "mbpp/900",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smallest_multiple(n):\n    if n < 1:\n        return 0\n    lcm = 1\n    for i in range(1, n + 1):\n        lcm = lcm * i // math.gcd(lcm, i)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9003": {
    "question_id": "mbpp/900",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smallest_multiple(n):\n    lcm = 1\n    for i in range(1, n + 1):\n        lcm = lcm * i // math.gcd(lcm, i)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9004": {
    "question_id": "mbpp/900",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smallest_multiple(n):\n    if n < 1:\n        return 0\n    lcm = 1\n    for i in range(1, n + 1):\n        lcm = lcm * i // math.gcd(lcm, i)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9005": {
    "question_id": "mbpp/900",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smallest_multiple(n):\n    if n < 1:\n        return 0\n    lcm = 1\n    for i in range(1, n + 1):\n        lcm = lcm * i // math.gcd(lcm, i)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9006": {
    "question_id": "mbpp/900",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smallest_multiple(n):\n    if n < 1:\n        return 0\n    lcm = 1\n    for i in range(1, n + 1):\n        lcm = lcm * i // math.gcd(lcm, i)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9007": {
    "question_id": "mbpp/900",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smallest_multiple(n):\n    if n < 1:\n        return 0\n    lcm = 1\n    for i in range(1, n + 1):\n        lcm = lcm * i // math.gcd(lcm, i)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9008": {
    "question_id": "mbpp/900",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smallest_multiple(n):\n    if n < 1:\n        return 0\n    lcm = 1\n    for i in range(1, n + 1):\n        lcm = lcm * i // math.gcd(lcm, i)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9009": {
    "question_id": "mbpp/900",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef smallest_multiple(n):\n    if n < 1:\n        return 0\n    lcm = 1\n    for i in range(1, n + 1):\n        lcm = lcm * i // math.gcd(lcm, i)\n    return lcm",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9010": {
    "question_id": "mbpp/901",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict(dict1, dict2):\n    combined = {}\n    for key in dict1:\n        combined[key] = dict1[key]\n    for key in dict2:\n        if key in combined:\n            combined[key] += dict2[key]\n        else:\n            combined[key] = dict2[key]\n    return combined",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9011": {
    "question_id": "mbpp/901",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict(dict1, dict2):\n    combined = {}\n    for key in dict1:\n        if key in dict2:\n            combined[key] = dict1[key] + dict2[key]\n        else:\n            combined[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            combined[key] = dict2[key]\n    return combined",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9012": {
    "question_id": "mbpp/901",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict(dict1, dict2):\n    combined = {}\n    for key in dict1:\n        if key in dict2:\n            combined[key] = dict1[key] + dict2[key]\n        else:\n            combined[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            combined[key] = dict2[key]\n    return combined",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9013": {
    "question_id": "mbpp/901",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict(dict1, dict2):\n    combined = {}\n    for key in dict1:\n        if key in dict2:\n            combined[key] = dict1[key] + dict2[key]\n        else:\n            combined[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            combined[key] = dict2[key]\n    return combined",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9014": {
    "question_id": "mbpp/901",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict(dict1, dict2):\n    combined = {}\n    for key in dict1:\n        combined[key] = dict1[key]\n    for key in dict2:\n        if key in combined:\n            combined[key] += dict2[key]\n        else:\n            combined[key] = dict2[key]\n    return combined",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9015": {
    "question_id": "mbpp/901",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict(dict1, dict2):\n    combined = {}\n    for key in dict1:\n        if key in dict2:\n            combined[key] = dict1[key] + dict2[key]\n        else:\n            combined[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            combined[key] = dict2[key]\n    return combined",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9016": {
    "question_id": "mbpp/901",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict(dict1, dict2):\n    combined = {}\n    for key in dict1:\n        if key in dict2:\n            combined[key] = dict1[key] + dict2[key]\n        else:\n            combined[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            combined[key] = dict2[key]\n    return combined",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9017": {
    "question_id": "mbpp/901",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict(dict1, dict2):\n    combined = {}\n    for key in dict1:\n        if key in dict2:\n            combined[key] = dict1[key] + dict2[key]\n        else:\n            combined[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            combined[key] = dict2[key]\n    return combined",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9018": {
    "question_id": "mbpp/901",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict(dict1, dict2):\n    combined = {}\n    for key in dict1:\n        if key in dict2:\n            combined[key] = dict1[key] + dict2[key]\n        else:\n            combined[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            combined[key] = dict2[key]\n    return combined",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9019": {
    "question_id": "mbpp/901",
    "model": "deepseek-v3-250324",
    "generation_code": "def add_dict(dict1, dict2):\n    combined = {}\n    for key in dict1:\n        combined[key] = dict1[key]\n    for key in dict2:\n        if key in combined:\n            combined[key] += dict2[key]\n        else:\n            combined[key] = dict2[key]\n    return combined",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9020": {
    "question_id": "mbpp/902",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Unset_Bits(n):\n    total = 0\n    for i in range(1, n + 1):\n        binary = bin(i)[2:]\n        total += binary.count('0')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9021": {
    "question_id": "mbpp/902",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Unset_Bits(n):\n    total = 0\n    for num in range(1, n + 1):\n        binary = bin(num)[2:]  # Convert to binary and remove '0b' prefix\n        total += binary.count('0')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9022": {
    "question_id": "mbpp/902",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Unset_Bits(n):\n    if n == 0:\n        return 0\n    total = 0\n    for num in range(1, n + 1):\n        binary = bin(num)[2:]\n        total += binary.count('0')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9023": {
    "question_id": "mbpp/902",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Unset_Bits(n):\n    total = 0\n    for num in range(1, n + 1):\n        binary = bin(num)[2:]\n        total += binary.count('0')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9024": {
    "question_id": "mbpp/902",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Unset_Bits(n):\n    if n == 0:\n        return 0\n    total = 0\n    for num in range(1, n + 1):\n        binary = bin(num)[2:]\n        total += binary.count('0')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9025": {
    "question_id": "mbpp/902",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Unset_Bits(n):\n    if n == 0:\n        return 0\n    total = 0\n    for num in range(1, n + 1):\n        binary = bin(num)[2:]\n        total += binary.count('0')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9026": {
    "question_id": "mbpp/902",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Unset_Bits(n):\n    if n == 0:\n        return 0\n    total = 0\n    for num in range(1, n + 1):\n        binary = bin(num)[2:]\n        total += binary.count('0')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9027": {
    "question_id": "mbpp/902",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Unset_Bits(n):\n    total = 0\n    for num in range(1, n + 1):\n        binary = bin(num)[2:]\n        total += binary.count('0')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9028": {
    "question_id": "mbpp/902",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Unset_Bits(n):\n    if n == 0:\n        return 0\n    total = 0\n    for num in range(1, n + 1):\n        binary = bin(num)[2:]\n        total += binary.count('0')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9029": {
    "question_id": "mbpp/902",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_Unset_Bits(n):\n    total = 0\n    for num in range(1, n + 1):\n        binary = bin(num)[2:]\n        total += binary.count('0')\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9030": {
    "question_id": "mbpp/903",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_num(num):\n    if isinstance(num, float):\n        return False\n    return num % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9031": {
    "question_id": "mbpp/903",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_num(num):\n    if isinstance(num, float):\n        if not num.is_integer():\n            return False\n        num = int(num)\n    return num % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9032": {
    "question_id": "mbpp/903",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_num(num):\n    if isinstance(num, float) and not num.is_integer():\n        return False\n    return int(num) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9033": {
    "question_id": "mbpp/903",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_num(num):\n    if isinstance(num, float) and not num.is_integer():\n        return False\n    return int(num) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9034": {
    "question_id": "mbpp/903",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_num(num):\n    if isinstance(num, float) and not num.is_integer():\n        return False\n    return int(num) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9035": {
    "question_id": "mbpp/903",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_num(num):\n    if isinstance(num, float) and not num.is_integer():\n        return False\n    return int(num) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9036": {
    "question_id": "mbpp/903",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_num(num):\n    if isinstance(num, float):\n        return False\n    return num % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9037": {
    "question_id": "mbpp/903",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_num(num):\n    if isinstance(num, float) and not num.is_integer():\n        return False\n    return int(num) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9038": {
    "question_id": "mbpp/903",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_num(num):\n    if isinstance(num, float):\n        return False\n    return num % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9039": {
    "question_id": "mbpp/903",
    "model": "deepseek-v3-250324",
    "generation_code": "def even_num(num):\n    if isinstance(num, float):\n        return False\n    return num % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9040": {
    "question_id": "mbpp/904",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sum_of_square(n):\n    return math.comb(2*n, n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9041": {
    "question_id": "mbpp/904",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sum_of_square(n):\n    return math.comb(2 * n, n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9042": {
    "question_id": "mbpp/904",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sum_of_square(n):\n    return math.comb(2*n, n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9043": {
    "question_id": "mbpp/904",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sum_of_square(n):\n    return math.comb(2 * n, n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9044": {
    "question_id": "mbpp/904",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sum_of_square(n):\n    return math.comb(2 * n, n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9045": {
    "question_id": "mbpp/904",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sum_of_square(n):\n    return math.comb(2 * n, n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9046": {
    "question_id": "mbpp/904",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sum_of_square(n):\n    return math.comb(2 * n, n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9047": {
    "question_id": "mbpp/904",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sum_of_square(n):\n    return math.comb(2 * n, n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9048": {
    "question_id": "mbpp/904",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sum_of_square(n):\n    return math.comb(2 * n, n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9049": {
    "question_id": "mbpp/904",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef sum_of_square(n):\n    return math.comb(2 * n, n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9050": {
    "question_id": "mbpp/905",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_date(url):\n    pattern = r'/(\\d{4})/(\\d{2})/(\\d{2})/'\n    matches = re.findall(pattern, url)\n    return matches",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9051": {
    "question_id": "mbpp/905",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_date(url):\n    pattern = r'/(\\d{4})/(\\d{2})/(\\d{2})/'\n    matches = re.findall(pattern, url)\n    return matches",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9052": {
    "question_id": "mbpp/905",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_date(url):\n    pattern = r'/(\\d{4})/(\\d{2})/(\\d{2})/'\n    matches = re.findall(pattern, url)\n    return matches",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9053": {
    "question_id": "mbpp/905",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_date(url):\n    pattern = r'/(\\d{4})/(\\d{2})/(\\d{2})/'\n    matches = re.findall(pattern, url)\n    return matches",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9054": {
    "question_id": "mbpp/905",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_date(url):\n    pattern = r'/(\\d{4})/(\\d{2})/(\\d{2})/'\n    matches = re.findall(pattern, url)\n    return matches",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9055": {
    "question_id": "mbpp/905",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_date(url):\n    pattern = r'/(\\d{4})/(\\d{2})/(\\d{2})/'\n    matches = re.findall(pattern, url)\n    return matches",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9056": {
    "question_id": "mbpp/905",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_date(url):\n    pattern = r'/(\\d{4})/(\\d{2})/(\\d{2})/'\n    matches = re.findall(pattern, url)\n    return matches",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9057": {
    "question_id": "mbpp/905",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_date(url):\n    pattern = r'/(\\d{4})/(\\d{2})/(\\d{2})/'\n    matches = re.findall(pattern, url)\n    return matches",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9058": {
    "question_id": "mbpp/905",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_date(url):\n    pattern = r'/(\\d{4})/(\\d{2})/(\\d{2})/'\n    matches = re.findall(pattern, url)\n    return matches",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9059": {
    "question_id": "mbpp/905",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef extract_date(url):\n    pattern = r'/(\\d{4})/(\\d{2})/(\\d{2})/'\n    matches = re.findall(pattern, url)\n    return matches",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9060": {
    "question_id": "mbpp/906",
    "model": "deepseek-v3-250324",
    "generation_code": "def lucky_num(n):\n    if n <= 0:\n        return []\n    numbers = list(range(1, 2 * n + 1))\n    index = 1\n    step = 2\n    while step <= len(numbers):\n        del numbers[step-1::step]\n        step += 1\n        if step > len(numbers):\n            break\n    return numbers[:n]",
    "test_output": "FAILED: expect [1, 3, 7, 9, 13, 15, 21, 25, 31, 33],in fact [1, 3, 7, 13, 19]",
    "test_result": "False"
  },
  "9061": {
    "question_id": "mbpp/906",
    "model": "deepseek-v3-250324",
    "generation_code": "def lucky_num(n):\n    if n <= 0:\n        return []\n    \n    numbers = list(range(1, 2 * n + 1, 2))\n    index = 1\n    \n    while index < len(numbers):\n        step = numbers[index]\n        del numbers[step-1::step]\n        index += 1\n        if step > len(numbers):\n            break\n    \n    return numbers[:n]",
    "test_output": "FAILED: expect [1, 3, 7, 9, 13, 15, 21, 25, 31, 33],in fact [1, 3, 7, 9, 13, 15]",
    "test_result": "False"
  },
  "9062": {
    "question_id": "mbpp/906",
    "model": "deepseek-v3-250324",
    "generation_code": "def lucky_num(n):\n    if n <= 0:\n        return []\n    \n    numbers = list(range(1, 2 * n + 1))\n    index = 1\n    \n    while index < len(numbers):\n        step = numbers[index]\n        del numbers[step-1::step]\n        if step > len(numbers):\n            break\n    \n    return numbers[:n]",
    "test_output": "FAILED: expect [1, 3, 7, 9, 13, 15, 21, 25, 31, 33],in fact [1, 3]",
    "test_result": "False"
  },
  "9063": {
    "question_id": "mbpp/906",
    "model": "deepseek-v3-250324",
    "generation_code": "def lucky_num(n):\n    if n <= 0:\n        return []\n    numbers = list(range(1, 2 * n + 1))\n    index = 1\n    while index < len(numbers):\n        step = numbers[index]\n        del numbers[step-1::step]\n        if step > len(numbers):\n            break\n    return numbers[:n]",
    "test_output": "FAILED: expect [1, 3, 7, 9, 13, 15, 21, 25, 31, 33],in fact [1, 3]",
    "test_result": "False"
  },
  "9064": {
    "question_id": "mbpp/906",
    "model": "deepseek-v3-250324",
    "generation_code": "def lucky_num(n):\n    if n <= 0:\n        return []\n    \n    numbers = list(range(1, 2 * n + 1))\n    index = 1\n    \n    while index < len(numbers):\n        step = numbers[index]\n        del numbers[step-1::step]\n        if step > len(numbers):\n            break\n    \n    return numbers[:n]",
    "test_output": "FAILED: expect [1, 3, 7, 9, 13, 15, 21, 25, 31, 33],in fact [1, 3]",
    "test_result": "False"
  },
  "9065": {
    "question_id": "mbpp/906",
    "model": "deepseek-v3-250324",
    "generation_code": "def lucky_num(n):\n    if n <= 0:\n        return []\n    \n    numbers = list(range(1, 2 * n + 1, 2))\n    index = 1\n    next_num = numbers[index]\n    \n    while next_num <= len(numbers) and len(numbers) >= next_num:\n        del numbers[next_num - 1::next_num]\n        if next_num in numbers:\n            index = numbers.index(next_num)\n            next_num = numbers[index]\n        else:\n            break\n    \n    return numbers[:n]",
    "test_output": "FAILED: expect [1, 3, 7, 9, 13, 15, 21, 25, 31, 33],in fact [1, 3]",
    "test_result": "False"
  },
  "9066": {
    "question_id": "mbpp/906",
    "model": "deepseek-v3-250324",
    "generation_code": "def lucky_num(n):\n    if n <= 0:\n        return []\n    numbers = list(range(1, 2 * n + 1))\n    index = 1\n    while index < len(numbers):\n        step = numbers[index]\n        del numbers[step-1::step]\n        if step > len(numbers):\n            break\n    return numbers[:n]",
    "test_output": "FAILED: expect [1, 3, 7, 9, 13, 15, 21, 25, 31, 33],in fact [1, 3]",
    "test_result": "False"
  },
  "9067": {
    "question_id": "mbpp/906",
    "model": "deepseek-v3-250324",
    "generation_code": "def lucky_num(n):\n    if n <= 0:\n        return []\n    \n    numbers = list(range(1, 2 * n + 1))\n    index = 1\n    \n    while index < len(numbers):\n        step = numbers[index]\n        del numbers[step - 1::step]\n        if step > len(numbers):\n            break\n    \n    return numbers[:n]",
    "test_output": "FAILED: expect [1, 3, 7, 9, 13, 15, 21, 25, 31, 33],in fact [1, 3]",
    "test_result": "False"
  },
  "9068": {
    "question_id": "mbpp/906",
    "model": "deepseek-v3-250324",
    "generation_code": "def lucky_num(n):\n    if n <= 0:\n        return []\n    lucky = list(range(1, 2 * n + 1, 2))\n    index = 1\n    while index < len(lucky):\n        step = lucky[index]\n        del lucky[step - 1::step]\n        if step > len(lucky):\n            break\n        index += 1\n    return lucky[:n]",
    "test_output": "FAILED: expect [1, 3, 7, 9, 13, 15, 21, 25, 31, 33],in fact [1, 3, 7, 9, 13, 15]",
    "test_result": "False"
  },
  "9069": {
    "question_id": "mbpp/906",
    "model": "deepseek-v3-250324",
    "generation_code": "def lucky_num(n):\n    if n <= 0:\n        return []\n    \n    numbers = list(range(1, 2 * n + 1))\n    index = 1\n    \n    while index < len(numbers):\n        step = numbers[index]\n        del numbers[step - 1::step]\n        if step > len(numbers):\n            break\n    \n    return numbers[:n]",
    "test_output": "FAILED: expect [1, 3, 7, 9, 13, 15, 21, 25, 31, 33],in fact [1, 3]",
    "test_result": "False"
  },
  "9070": {
    "question_id": "mbpp/907",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9071": {
    "question_id": "mbpp/907",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9072": {
    "question_id": "mbpp/907",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9073": {
    "question_id": "mbpp/907",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9074": {
    "question_id": "mbpp/907",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9075": {
    "question_id": "mbpp/907",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9076": {
    "question_id": "mbpp/907",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9077": {
    "question_id": "mbpp/907",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9078": {
    "question_id": "mbpp/907",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9079": {
    "question_id": "mbpp/907",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9080": {
    "question_id": "mbpp/908",
    "model": "deepseek-v3-250324",
    "generation_code": "def previous_palindrome(num):\n    if num < 0:\n        return -1\n    if num <= 10:\n        return num - 1 if num > 0 else 0\n    \n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    current = num - 1\n    while current >= 0:\n        if is_palindrome(current):\n            return current\n        current -= 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9081": {
    "question_id": "mbpp/908",
    "model": "deepseek-v3-250324",
    "generation_code": "def previous_palindrome(num):\n    if num < 1:\n        return None\n    current = num - 1\n    while current >= 1:\n        if str(current) == str(current)[::-1]:\n            return current\n        current -= 1\n    return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9082": {
    "question_id": "mbpp/908",
    "model": "deepseek-v3-250324",
    "generation_code": "def previous_palindrome(num):\n    if num < 0:\n        return -1\n    if num <= 1:\n        return 0\n    current = num - 1\n    while current >= 0:\n        if str(current) == str(current)[::-1]:\n            return current\n        current -= 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9083": {
    "question_id": "mbpp/908",
    "model": "deepseek-v3-250324",
    "generation_code": "def previous_palindrome(num):\n    if num < 0:\n        return -1\n    if num <= 10:\n        return num - 1 if num > 0 else -1\n    \n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    current = num - 1\n    while current >= 0:\n        if is_palindrome(current):\n            return current\n        current -= 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9084": {
    "question_id": "mbpp/908",
    "model": "deepseek-v3-250324",
    "generation_code": "def previous_palindrome(num):\n    if num < 0:\n        return -1\n    if num <= 10:\n        return num - 1 if num > 0 else 0\n    current = num - 1\n    while current >= 0:\n        if str(current) == str(current)[::-1]:\n            return current\n        current -= 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9085": {
    "question_id": "mbpp/908",
    "model": "deepseek-v3-250324",
    "generation_code": "def previous_palindrome(num):\n    if num < 0:\n        return -1\n    if num <= 10:\n        return num - 1 if num > 0 else 0\n    \n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    current = num - 1\n    while current >= 0:\n        if is_palindrome(current):\n            return current\n        current -= 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9086": {
    "question_id": "mbpp/908",
    "model": "deepseek-v3-250324",
    "generation_code": "def previous_palindrome(num):\n    if num < 0:\n        return -1\n    if num <= 1:\n        return 0\n    current = num - 1\n    while current >= 0:\n        if str(current) == str(current)[::-1]:\n            return current\n        current -= 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9087": {
    "question_id": "mbpp/908",
    "model": "deepseek-v3-250324",
    "generation_code": "def previous_palindrome(num):\n    if num < 0:\n        return -1\n    if num <= 10:\n        return num - 1 if num > 0 else -1\n    \n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    current = num - 1\n    while current >= 0:\n        if is_palindrome(current):\n            return current\n        current -= 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9088": {
    "question_id": "mbpp/908",
    "model": "deepseek-v3-250324",
    "generation_code": "def previous_palindrome(num):\n    if num < 0:\n        return -1\n    if num <= 10:\n        return num - 1 if num > 0 else 0\n    \n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    current = num - 1\n    while current >= 0:\n        if is_palindrome(current):\n            return current\n        current -= 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9089": {
    "question_id": "mbpp/908",
    "model": "deepseek-v3-250324",
    "generation_code": "def previous_palindrome(num):\n    if num < 0:\n        return -1\n    if num <= 10:\n        return num - 1 if num > 0 else 0\n    \n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n    \n    current = num - 1\n    while current >= 0:\n        if is_palindrome(current):\n            return current\n        current -= 1\n    return -1",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9090": {
    "question_id": "mbpp/909",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_date(day, month, year):\n    if not (1 <= month <= 12):\n        return False\n    \n    if month in [4, 6, 9, 11]:\n        max_day = 30\n    elif month == 2:\n        if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):\n            max_day = 29\n        else:\n            max_day = 28\n    else:\n        max_day = 31\n    \n    if not (1 <= day <= max_day):\n        return False\n    \n    return True",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "9091": {
    "question_id": "mbpp/909",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_date(day, month, year):\n    if year < 1:\n        return False\n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_day = 31\n    elif month in [4, 6, 9, 11]:\n        max_day = 30\n    else:\n        if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):\n            max_day = 29\n        else:\n            max_day = 28\n    \n    if day < 1 or day > max_day:\n        return False\n    \n    return True",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "9092": {
    "question_id": "mbpp/909",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_date(day, month, year):\n    if not (1 <= month <= 12):\n        return False\n    \n    if month in [4, 6, 9, 11]:\n        max_day = 30\n    elif month == 2:\n        if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):\n            max_day = 29\n        else:\n            max_day = 28\n    else:\n        max_day = 31\n    \n    if not (1 <= day <= max_day):\n        return False\n    \n    return True",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "9093": {
    "question_id": "mbpp/909",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_date(day, month, year):\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    \n    if month in [4, 6, 9, 11]:\n        max_day = 30\n    elif month == 2:\n        if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):\n            max_day = 29\n        else:\n            max_day = 28\n    else:\n        max_day = 31\n    \n    if day > max_day:\n        return False\n    \n    return True",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "9094": {
    "question_id": "mbpp/909",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_date(day, month, year):\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    \n    if month in [4, 6, 9, 11]:\n        max_day = 30\n    elif month == 2:\n        if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):\n            max_day = 29\n        else:\n            max_day = 28\n    else:\n        max_day = 31\n    \n    if day > max_day:\n        return False\n    \n    return True",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "9095": {
    "question_id": "mbpp/909",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_date(day, month, year):\n    if not (1 <= month <= 12):\n        return False\n    \n    if month in [4, 6, 9, 11]:\n        max_day = 30\n    elif month == 2:\n        if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):\n            max_day = 29\n        else:\n            max_day = 28\n    else:\n        max_day = 31\n    \n    if not (1 <= day <= max_day):\n        return False\n    \n    return True",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "9096": {
    "question_id": "mbpp/909",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_date(day, month, year):\n    if not (1 <= month <= 12):\n        return False\n    \n    if month in [4, 6, 9, 11]:\n        max_day = 30\n    elif month == 2:\n        if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):\n            max_day = 29\n        else:\n            max_day = 28\n    else:\n        max_day = 31\n    \n    if not (1 <= day <= max_day):\n        return False\n    \n    return True",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "9097": {
    "question_id": "mbpp/909",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_date(day, month, year):\n    if not (1 <= month <= 12):\n        return False\n    \n    if month in [4, 6, 9, 11]:\n        max_day = 30\n    elif month == 2:\n        if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):\n            max_day = 29\n        else:\n            max_day = 28\n    else:\n        max_day = 31\n    \n    if not (1 <= day <= max_day):\n        return False\n    \n    return True",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "9098": {
    "question_id": "mbpp/909",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_date(day, month, year):\n    if not (1 <= month <= 12):\n        return False\n    \n    if month in [4, 6, 9, 11]:\n        max_day = 30\n    elif month == 2:\n        if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):\n            max_day = 29\n        else:\n            max_day = 28\n    else:\n        max_day = 31\n    \n    return 1 <= day <= max_day",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "9099": {
    "question_id": "mbpp/909",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_date(day, month, year):\n    if not (1 <= month <= 12):\n        return False\n    \n    if month in [4, 6, 9, 11]:\n        max_day = 30\n    elif month == 2:\n        if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):\n            max_day = 29\n        else:\n            max_day = 28\n    else:\n        max_day = 31\n    \n    if not (1 <= day <= max_day):\n        return False\n    \n    return True",
    "test_output": "FAILED: expect False,in fact True",
    "test_result": "False"
  },
  "9100": {
    "question_id": "mbpp/910",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef maximum_product(nums):\n    if len(nums) < 3:\n        return 0\n    max_heap = []\n    min_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        heapq.heappush(min_heap, num)\n    max1 = -heapq.heappop(max_heap)\n    max2 = -heapq.heappop(max_heap)\n    max3 = -heapq.heappop(max_heap)\n    min1 = heapq.heappop(min_heap)\n    min2 = heapq.heappop(min_heap)\n    return max(max1 * max2 * max3, max1 * min1 * min2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9101": {
    "question_id": "mbpp/910",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef maximum_product(nums):\n    if len(nums) < 3:\n        return 0\n    \n    # Get the three largest numbers\n    largest = heapq.nlargest(3, nums)\n    \n    # Get the two smallest numbers (could be negative)\n    smallest = heapq.nsmallest(2, nums)\n    \n    # The maximum product is either the product of the three largest numbers\n    # or the product of the two smallest (negative) numbers and the largest number\n    return max(largest[0] * largest[1] * largest[2], \n               smallest[0] * smallest[1] * largest[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9102": {
    "question_id": "mbpp/910",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef maximum_product(nums):\n    if len(nums) < 3:\n        return 0\n    max_heap = []\n    min_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        heapq.heappush(min_heap, num)\n    max1 = -heapq.heappop(max_heap)\n    max2 = -heapq.heappop(max_heap)\n    max3 = -heapq.heappop(max_heap)\n    min1 = heapq.heappop(min_heap)\n    min2 = heapq.heappop(min_heap)\n    return max(max1 * max2 * max3, max1 * min1 * min2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9103": {
    "question_id": "mbpp/910",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef maximum_product(nums):\n    if len(nums) < 3:\n        return 0\n    \n    # Get the three largest numbers\n    largest = heapq.nlargest(3, nums)\n    # Get the two smallest numbers (could be negative)\n    smallest = heapq.nsmallest(2, nums)\n    \n    # The maximum product is either the product of the three largest numbers\n    # or the product of the two smallest (negative) numbers and the largest number\n    return max(largest[0] * largest[1] * largest[2], \n               smallest[0] * smallest[1] * largest[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9104": {
    "question_id": "mbpp/910",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef maximum_product(nums):\n    if len(nums) < 3:\n        return 0\n    \n    # Get the three largest numbers\n    largest = heapq.nlargest(3, nums)\n    # Get the two smallest numbers (could be negative)\n    smallest = heapq.nsmallest(2, nums)\n    \n    # The maximum product is either the product of the three largest numbers\n    # or the product of the two smallest (negative) numbers and the largest number\n    return max(largest[0] * largest[1] * largest[2], smallest[0] * smallest[1] * largest[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9105": {
    "question_id": "mbpp/910",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef maximum_product(nums):\n    if len(nums) < 3:\n        return 0\n    max_heap = []\n    min_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        heapq.heappush(min_heap, num)\n    max1 = -heapq.heappop(max_heap)\n    max2 = -heapq.heappop(max_heap)\n    max3 = -heapq.heappop(max_heap)\n    min1 = heapq.heappop(min_heap)\n    min2 = heapq.heappop(min_heap)\n    return max(max1 * max2 * max3, max1 * min1 * min2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9106": {
    "question_id": "mbpp/910",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef maximum_product(nums):\n    if len(nums) < 3:\n        return 0\n    max_heap = []\n    min_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        heapq.heappush(min_heap, num)\n    max1 = -heapq.heappop(max_heap)\n    max2 = -heapq.heappop(max_heap)\n    max3 = -heapq.heappop(max_heap)\n    min1 = heapq.heappop(min_heap)\n    min2 = heapq.heappop(min_heap)\n    return max(max1 * max2 * max3, max1 * min1 * min2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9107": {
    "question_id": "mbpp/910",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef maximum_product(nums):\n    if len(nums) < 3:\n        return 0\n    max_heap = []\n    min_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        heapq.heappush(min_heap, num)\n    max1 = -heapq.heappop(max_heap)\n    max2 = -heapq.heappop(max_heap)\n    max3 = -heapq.heappop(max_heap)\n    min1 = heapq.heappop(min_heap)\n    min2 = heapq.heappop(min_heap)\n    return max(max1 * max2 * max3, max1 * min1 * min2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9108": {
    "question_id": "mbpp/910",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef maximum_product(nums):\n    if len(nums) < 3:\n        return 0\n    \n    # Get the three largest numbers\n    largest = heapq.nlargest(3, nums)\n    # Get the two smallest numbers (could be negative)\n    smallest = heapq.nsmallest(2, nums)\n    \n    # Compare product of three largest vs product of two smallest and one largest\n    return max(largest[0] * largest[1] * largest[2], \n               smallest[0] * smallest[1] * largest[0])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9109": {
    "question_id": "mbpp/910",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef maximum_product(nums):\n    if len(nums) < 3:\n        return 0\n    max_heap = []\n    min_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        heapq.heappush(min_heap, num)\n    max1 = -heapq.heappop(max_heap)\n    max2 = -heapq.heappop(max_heap)\n    max3 = -heapq.heappop(max_heap)\n    min1 = heapq.heappop(min_heap)\n    min2 = heapq.heappop(min_heap)\n    return max(max1 * max2 * max3, max1 * min1 * min2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9110": {
    "question_id": "mbpp/911",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lobb_num(n, m):\n    if m < 0 or m > 2 * n + 1:\n        return 0\n    numerator = math.comb(2 * n, n + m)\n    denominator = 2 * n + 1\n    return (2 * m + 1) * numerator // denominator",
    "test_output": "FAILED: expect 35,in fact 28",
    "test_result": "False"
  },
  "9111": {
    "question_id": "mbpp/911",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lobb_num(n, m):\n    if m < 0 or m > 2 * n - 1:\n        return 0\n    numerator = math.comb(2 * n, m + n)\n    denominator = 2 * n - 1\n    return (numerator * (m + n)) // denominator",
    "test_output": "FAILED: expect 35,in fact 40",
    "test_result": "False"
  },
  "9112": {
    "question_id": "mbpp/911",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lobb_num(n, m):\n    if m < 0 or m > 2 * n - 1:\n        return 0\n    return (2 * m + 1) * math.comb(2 * n, m + n) // (m + n + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9113": {
    "question_id": "mbpp/911",
    "model": "deepseek-v3-250324",
    "generation_code": "def lobb_num(n, m):\n    if m < 0 or m > 2 * n - 1:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    return (2 * (2 * n - 1) * lobb_num(n - 1, m - 1) + (2 * (2 * n - 1) - (m - 2)) * lobb_num(n - 1, m - 2)) // (n + m)",
    "test_output": "FAILED: expect 35,in fact 0",
    "test_result": "False"
  },
  "9114": {
    "question_id": "mbpp/911",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lobb_num(n, m):\n    if m < 0 or m > 2 * n + 1:\n        return 0\n    return (2 * m + 1) * math.comb(2 * n + 1, n - m) // (2 * n + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9115": {
    "question_id": "mbpp/911",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lobb_num(n, m):\n    if m < 0 or m > 2 * n - 1:\n        return 0\n    return (2 * m + 1) * math.comb(2 * n, n + m + 1) // (n + m + 1)",
    "test_output": "FAILED: expect 35,in fact 7",
    "test_result": "False"
  },
  "9116": {
    "question_id": "mbpp/911",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lobb_num(n, m):\n    if m < 0 or m > 2 * n:\n        return 0\n    return (2 * m + 1) * math.comb(2 * n, n + m) // (2 * n + 1)",
    "test_output": "FAILED: expect 35,in fact 28",
    "test_result": "False"
  },
  "9117": {
    "question_id": "mbpp/911",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lobb_num(n, m):\n    if m > 2 * n - 1 or m < 1:\n        return 0\n    return (2 * m + 1) * math.comb(2 * n, m + n) // (m + n + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9118": {
    "question_id": "mbpp/911",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lobb_num(n, m):\n    if m < 0 or m > 2 * n:\n        return 0\n    return (2 * m + 1) * math.comb(2 * n, n + m) // (n + m + 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9119": {
    "question_id": "mbpp/911",
    "model": "deepseek-v3-250324",
    "generation_code": "import math\n\ndef lobb_num(n, m):\n    if m < 0 or m > 2 * n - 1:\n        return 0\n    numerator = math.factorial(2 * n)\n    denominator = math.factorial(m + n) * math.factorial(n - m)\n    return (2 * m + 1) * numerator // denominator",
    "test_output": "FAILED: expect 35,in fact 315",
    "test_result": "False"
  },
  "9120": {
    "question_id": "mbpp/912",
    "model": "deepseek-v3-250324",
    "generation_code": "def end_num(s):\n    if len(s) == 0:\n        return False\n    return s[-1].isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9121": {
    "question_id": "mbpp/912",
    "model": "deepseek-v3-250324",
    "generation_code": "def end_num(string):\n    if len(string) == 0:\n        return False\n    return string[-1].isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9122": {
    "question_id": "mbpp/912",
    "model": "deepseek-v3-250324",
    "generation_code": "def end_num(string):\n    if len(string) == 0:\n        return False\n    return string[-1].isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9123": {
    "question_id": "mbpp/912",
    "model": "deepseek-v3-250324",
    "generation_code": "def end_num(string):\n    if len(string) == 0:\n        return False\n    return string[-1].isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9124": {
    "question_id": "mbpp/912",
    "model": "deepseek-v3-250324",
    "generation_code": "def end_num(s):\n    if len(s) == 0:\n        return False\n    return s[-1].isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9125": {
    "question_id": "mbpp/912",
    "model": "deepseek-v3-250324",
    "generation_code": "def end_num(s):\n    if len(s) == 0:\n        return False\n    return s[-1].isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9126": {
    "question_id": "mbpp/912",
    "model": "deepseek-v3-250324",
    "generation_code": "def end_num(s):\n    if len(s) == 0:\n        return False\n    return s[-1].isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9127": {
    "question_id": "mbpp/912",
    "model": "deepseek-v3-250324",
    "generation_code": "def end_num(s):\n    if len(s) == 0:\n        return False\n    return s[-1].isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9128": {
    "question_id": "mbpp/912",
    "model": "deepseek-v3-250324",
    "generation_code": "def end_num(s):\n    if len(s) == 0:\n        return False\n    return s[-1].isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9129": {
    "question_id": "mbpp/912",
    "model": "deepseek-v3-250324",
    "generation_code": "def end_num(s):\n    if len(s) == 0:\n        return False\n    return s[-1].isdigit()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9130": {
    "question_id": "mbpp/913",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    first = s[0]\n    second = s[1]\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] != first:\n                return False\n        else:\n            if s[i] != second:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9131": {
    "question_id": "mbpp/913",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    first = s[0]\n    second = s[1]\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] != first:\n                return False\n        else:\n            if s[i] != second:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9132": {
    "question_id": "mbpp/913",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    first = s[0]\n    second = s[1]\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] != first:\n                return False\n        else:\n            if s[i] != second:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9133": {
    "question_id": "mbpp/913",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    first = s[0]\n    second = s[1]\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] != first:\n                return False\n        else:\n            if s[i] != second:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9134": {
    "question_id": "mbpp/913",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    first_char = s[0]\n    second_char = s[1]\n    if first_char == second_char:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] != first_char:\n                return False\n        else:\n            if s[i] != second_char:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9135": {
    "question_id": "mbpp/913",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    first = s[0]\n    second = s[1]\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] != first:\n                return False\n        else:\n            if s[i] != second:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9136": {
    "question_id": "mbpp/913",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    first = s[0]\n    second = s[1]\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] != first:\n                return False\n        else:\n            if s[i] != second:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9137": {
    "question_id": "mbpp/913",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    first = s[0]\n    second = s[1]\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != first:\n            return False\n        if i % 2 == 1 and s[i] != second:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9138": {
    "question_id": "mbpp/913",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    first = s[0]\n    second = s[1]\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] != first:\n                return False\n        else:\n            if s[i] != second:\n                return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9139": {
    "question_id": "mbpp/913",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    first = s[0]\n    second = s[1]\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != first:\n            return False\n        if i % 2 == 1 and s[i] != second:\n            return False\n    return True",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9140": {
    "question_id": "mbpp/914",
    "model": "deepseek-v3-250324",
    "generation_code": "rearrange_numbs = lambda arr: sorted(arr, key=lambda x: (x < 0, x if x < 0 else -x))",
    "test_output": "FAILED: expect [2, 5, 7, 8, 9, -10, -3, -1],in fact [9, 8, 7, 5, 2, -10, -3, -1]",
    "test_result": "False"
  },
  "9141": {
    "question_id": "mbpp/914",
    "model": "deepseek-v3-250324",
    "generation_code": "rearrange_numbs = lambda arr: sorted(arr, key=lambda x: (x < 0, x if x >= 0 else -x))",
    "test_output": "FAILED: expect [2, 5, 7, 8, 9, -10, -3, -1],in fact [2, 5, 7, 8, 9, -1, -3, -10]",
    "test_result": "False"
  },
  "9142": {
    "question_id": "mbpp/914",
    "model": "deepseek-v3-250324",
    "generation_code": "rearrange_numbs = lambda arr: sorted(arr, key=lambda x: (x < 0, x if x < 0 else -x))",
    "test_output": "FAILED: expect [2, 5, 7, 8, 9, -10, -3, -1],in fact [9, 8, 7, 5, 2, -10, -3, -1]",
    "test_result": "False"
  },
  "9143": {
    "question_id": "mbpp/914",
    "model": "deepseek-v3-250324",
    "generation_code": "rearrange_numbs = lambda arr: sorted(arr, key=lambda x: (x < 0, x if x >=0 else -x))",
    "test_output": "FAILED: expect [2, 5, 7, 8, 9, -10, -3, -1],in fact [2, 5, 7, 8, 9, -1, -3, -10]",
    "test_result": "False"
  },
  "9144": {
    "question_id": "mbpp/914",
    "model": "deepseek-v3-250324",
    "generation_code": "rearrange_numbs = lambda arr: sorted(arr, key=lambda x: (x < 0, x if x < 0 else -x))",
    "test_output": "FAILED: expect [2, 5, 7, 8, 9, -10, -3, -1],in fact [9, 8, 7, 5, 2, -10, -3, -1]",
    "test_result": "False"
  },
  "9145": {
    "question_id": "mbpp/914",
    "model": "deepseek-v3-250324",
    "generation_code": "rearrange_numbs = lambda arr: sorted(arr, key=lambda x: (x < 0, x if x < 0 else -x))",
    "test_output": "FAILED: expect [2, 5, 7, 8, 9, -10, -3, -1],in fact [9, 8, 7, 5, 2, -10, -3, -1]",
    "test_result": "False"
  },
  "9146": {
    "question_id": "mbpp/914",
    "model": "deepseek-v3-250324",
    "generation_code": "rearrange_numbs = lambda arr: sorted(arr, key=lambda x: (x < 0, x if x < 0 else -x))",
    "test_output": "FAILED: expect [2, 5, 7, 8, 9, -10, -3, -1],in fact [9, 8, 7, 5, 2, -10, -3, -1]",
    "test_result": "False"
  },
  "9147": {
    "question_id": "mbpp/914",
    "model": "deepseek-v3-250324",
    "generation_code": "rearrange_numbs = lambda arr: sorted(arr, key=lambda x: (x < 0, x if x < 0 else -x))",
    "test_output": "FAILED: expect [2, 5, 7, 8, 9, -10, -3, -1],in fact [9, 8, 7, 5, 2, -10, -3, -1]",
    "test_result": "False"
  },
  "9148": {
    "question_id": "mbpp/914",
    "model": "deepseek-v3-250324",
    "generation_code": "rearrange_numbs = lambda arr: sorted(arr, key=lambda x: (x < 0, x if x < 0 else -x))",
    "test_output": "FAILED: expect [2, 5, 7, 8, 9, -10, -3, -1],in fact [9, 8, 7, 5, 2, -10, -3, -1]",
    "test_result": "False"
  },
  "9149": {
    "question_id": "mbpp/914",
    "model": "deepseek-v3-250324",
    "generation_code": "rearrange_numbs = lambda arr: sorted(arr, key=lambda x: (x < 0, x if x >= 0 else -x))",
    "test_output": "FAILED: expect [2, 5, 7, 8, 9, -10, -3, -1],in fact [2, 5, 7, 8, 9, -1, -3, -10]",
    "test_result": "False"
  },
  "9150": {
    "question_id": "mbpp/915",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_triplet_array(arr, n, x):\n    arr.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == x:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < x:\n                left += 1\n            else:\n                right -= 1\n    return None",
    "test_output": "FAILED: expect (4, 10, 8),in fact (4, 8, 10)",
    "test_result": "False"
  },
  "9151": {
    "question_id": "mbpp/915",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_triplet_array(arr, n, sum_val):\n    arr.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == sum_val:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < sum_val:\n                left += 1\n            else:\n                right -= 1\n    return None",
    "test_output": "FAILED: expect (4, 10, 8),in fact (4, 8, 10)",
    "test_result": "False"
  },
  "9152": {
    "question_id": "mbpp/915",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_triplet_array(arr, n, sum_val):\n    arr.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == sum_val:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < sum_val:\n                left += 1\n            else:\n                right -= 1\n    return None",
    "test_output": "FAILED: expect (4, 10, 8),in fact (4, 8, 10)",
    "test_result": "False"
  },
  "9153": {
    "question_id": "mbpp/915",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_triplet_array(arr, n, sum_val):\n    arr.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == sum_val:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < sum_val:\n                left += 1\n            else:\n                right -= 1\n    return None",
    "test_output": "FAILED: expect (4, 10, 8),in fact (4, 8, 10)",
    "test_result": "False"
  },
  "9154": {
    "question_id": "mbpp/915",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_triplet_array(arr, n, target):\n    arr.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return None",
    "test_output": "FAILED: expect (4, 10, 8),in fact (4, 8, 10)",
    "test_result": "False"
  },
  "9155": {
    "question_id": "mbpp/915",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_triplet_array(arr, n, sum_val):\n    arr.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == sum_val:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < sum_val:\n                left += 1\n            else:\n                right -= 1\n    return None",
    "test_output": "FAILED: expect (4, 10, 8),in fact (4, 8, 10)",
    "test_result": "False"
  },
  "9156": {
    "question_id": "mbpp/915",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_triplet_array(arr, n, target):\n    arr.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return None",
    "test_output": "FAILED: expect (4, 10, 8),in fact (4, 8, 10)",
    "test_result": "False"
  },
  "9157": {
    "question_id": "mbpp/915",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_triplet_array(arr, n, target):\n    arr.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return None",
    "test_output": "FAILED: expect (4, 10, 8),in fact (4, 8, 10)",
    "test_result": "False"
  },
  "9158": {
    "question_id": "mbpp/915",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_triplet_array(arr, n, target):\n    arr_sorted = sorted(arr)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr_sorted[i] + arr_sorted[left] + arr_sorted[right]\n            if current_sum == target:\n                return (arr_sorted[i], arr_sorted[left], arr_sorted[right])\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return None",
    "test_output": "FAILED: expect (4, 10, 8),in fact (4, 8, 10)",
    "test_result": "False"
  },
  "9159": {
    "question_id": "mbpp/915",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_triplet_array(arr, n, target):\n    arr.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return None",
    "test_output": "FAILED: expect (4, 10, 8),in fact (4, 8, 10)",
    "test_result": "False"
  },
  "9160": {
    "question_id": "mbpp/916",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_uppercase_lowercase(text):\n    if re.fullmatch(r'([A-Z][a-z])+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9161": {
    "question_id": "mbpp/916",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_uppercase_lowercase(text):\n    if re.fullmatch(r'([A-Z][a-z])+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9162": {
    "question_id": "mbpp/916",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_uppercase_lowercase(text):\n    if re.fullmatch(r'([A-Z][a-z])+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9163": {
    "question_id": "mbpp/916",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_uppercase_lowercase(text):\n    if re.fullmatch(r'([A-Z][a-z])+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9164": {
    "question_id": "mbpp/916",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_uppercase_lowercase(text):\n    if re.fullmatch(r'([A-Z][a-z])+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9165": {
    "question_id": "mbpp/916",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_uppercase_lowercase(text):\n    if re.fullmatch(r'([A-Z][a-z])+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9166": {
    "question_id": "mbpp/916",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_uppercase_lowercase(text):\n    if re.fullmatch(r'([A-Z][a-z])+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9167": {
    "question_id": "mbpp/916",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_uppercase_lowercase(text):\n    if re.fullmatch(r'([A-Z][a-z])+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9168": {
    "question_id": "mbpp/916",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_uppercase_lowercase(text):\n    if re.fullmatch(r'([A-Z][a-z])+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9169": {
    "question_id": "mbpp/916",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_uppercase_lowercase(text):\n    if re.fullmatch(r'([A-Z][a-z])+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9170": {
    "question_id": "mbpp/917",
    "model": "deepseek-v3-250324",
    "generation_code": "def coin_change(coins, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(m):\n        for j in range(coins[i], n + 1):\n            dp[j] += dp[j - coins[i]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9171": {
    "question_id": "mbpp/917",
    "model": "deepseek-v3-250324",
    "generation_code": "def coin_change(coins, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(m):\n        for j in range(coins[i], n + 1):\n            dp[j] += dp[j - coins[i]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9172": {
    "question_id": "mbpp/917",
    "model": "deepseek-v3-250324",
    "generation_code": "def coin_change(coins, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for coin in coins:\n        for i in range(coin, n + 1):\n            dp[i] += dp[i - coin]\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9173": {
    "question_id": "mbpp/917",
    "model": "deepseek-v3-250324",
    "generation_code": "def coin_change(coins, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for i in range(m):\n        for j in range(coins[i], n + 1):\n            dp[j] += dp[j - coins[i]]\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9174": {
    "question_id": "mbpp/917",
    "model": "deepseek-v3-250324",
    "generation_code": "def coin_change(coins, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(m):\n        for j in range(coins[i], n + 1):\n            dp[j] += dp[j - coins[i]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9175": {
    "question_id": "mbpp/917",
    "model": "deepseek-v3-250324",
    "generation_code": "def coin_change(coins, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(m):\n        for j in range(coins[i], n + 1):\n            dp[j] += dp[j - coins[i]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9176": {
    "question_id": "mbpp/917",
    "model": "deepseek-v3-250324",
    "generation_code": "def coin_change(coins, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for coin in coins:\n        for i in range(coin, n + 1):\n            dp[i] += dp[i - coin]\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9177": {
    "question_id": "mbpp/917",
    "model": "deepseek-v3-250324",
    "generation_code": "def coin_change(coins, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(m):\n        for j in range(coins[i], n + 1):\n            dp[j] += dp[j - coins[i]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9178": {
    "question_id": "mbpp/917",
    "model": "deepseek-v3-250324",
    "generation_code": "def coin_change(coins, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(m):\n        for j in range(coins[i], n + 1):\n            dp[j] += dp[j - coins[i]]\n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9179": {
    "question_id": "mbpp/917",
    "model": "deepseek-v3-250324",
    "generation_code": "def coin_change(coins, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for i in range(m):\n        for j in range(coins[i], n + 1):\n            dp[j] += dp[j - coins[i]]\n    \n    return dp[n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9180": {
    "question_id": "mbpp/918",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_list(items):\n    if not items:\n        return 0\n    result = 1\n    for item in items:\n        result *= item\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9181": {
    "question_id": "mbpp/918",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_list(items):\n    result = 1\n    for item in items:\n        result *= item\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9182": {
    "question_id": "mbpp/918",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_list(items):\n    if not items:\n        return 0\n    result = 1\n    for item in items:\n        result *= item\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9183": {
    "question_id": "mbpp/918",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_list(items):\n    if not items:\n        return 0\n    result = 1\n    for num in items:\n        result *= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9184": {
    "question_id": "mbpp/918",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_list(items):\n    if not items:\n        return 0\n    result = 1\n    for num in items:\n        result *= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9185": {
    "question_id": "mbpp/918",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_list(items):\n    if not items:\n        return 0\n    result = 1\n    for num in items:\n        result *= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9186": {
    "question_id": "mbpp/918",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_list(items):\n    if not items:\n        return 0\n    result = 1\n    for item in items:\n        result *= item\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9187": {
    "question_id": "mbpp/918",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_list(lst):\n    if not lst:\n        return 0\n    result = 1\n    for num in lst:\n        result *= num\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9188": {
    "question_id": "mbpp/918",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_list(items):\n    result = 1\n    for item in items:\n        result *= item\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9189": {
    "question_id": "mbpp/918",
    "model": "deepseek-v3-250324",
    "generation_code": "def multiply_list(items):\n    if not items:\n        return 0\n    result = 1\n    for item in items:\n        result *= item\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9190": {
    "question_id": "mbpp/919",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(tuples_list):\n    return [t for t in tuples_list if not all(v is None for v in t)]",
    "test_output": "FAILED: expect [(None, 2), (3, 4), (12, 3)],in fact [(None, 2), (3, 4), (12, 3)]",
    "test_result": "False"
  },
  "9191": {
    "question_id": "mbpp/919",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(tuples_list):\n    return [t for t in tuples_list if not all(v is None for v in t)]",
    "test_output": "FAILED: expect [(None, 2), (3, 4), (12, 3)],in fact [(None, 2), (3, 4), (12, 3)]",
    "test_result": "False"
  },
  "9192": {
    "question_id": "mbpp/919",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(tuples_list):\n    return [t for t in tuples_list if not all(v is None for v in t)]",
    "test_output": "FAILED: expect [(None, 2), (3, 4), (12, 3)],in fact [(None, 2), (3, 4), (12, 3)]",
    "test_result": "False"
  },
  "9193": {
    "question_id": "mbpp/919",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(tuples_list):\n    return [t for t in tuples_list if not all(v is None for v in t)]",
    "test_output": "FAILED: expect [(None, 2), (3, 4), (12, 3)],in fact [(None, 2), (3, 4), (12, 3)]",
    "test_result": "False"
  },
  "9194": {
    "question_id": "mbpp/919",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(tuples_list):\n    return [t for t in tuples_list if not all(v is None for v in t)]",
    "test_output": "FAILED: expect [(None, 2), (3, 4), (12, 3)],in fact [(None, 2), (3, 4), (12, 3)]",
    "test_result": "False"
  },
  "9195": {
    "question_id": "mbpp/919",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(tuples_list):\n    return [t for t in tuples_list if not all(v is None for v in t)]",
    "test_output": "FAILED: expect [(None, 2), (3, 4), (12, 3)],in fact [(None, 2), (3, 4), (12, 3)]",
    "test_result": "False"
  },
  "9196": {
    "question_id": "mbpp/919",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(tuples_list):\n    return [t for t in tuples_list if not all(v is None for v in t)]",
    "test_output": "FAILED: expect [(None, 2), (3, 4), (12, 3)],in fact [(None, 2), (3, 4), (12, 3)]",
    "test_result": "False"
  },
  "9197": {
    "question_id": "mbpp/919",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(tuples_list):\n    return [t for t in tuples_list if not all(v is None for v in t)]",
    "test_output": "FAILED: expect [(None, 2), (3, 4), (12, 3)],in fact [(None, 2), (3, 4), (12, 3)]",
    "test_result": "False"
  },
  "9198": {
    "question_id": "mbpp/919",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(tuples_list):\n    return [t for t in tuples_list if not all(v is None for v in t)]",
    "test_output": "FAILED: expect [(None, 2), (3, 4), (12, 3)],in fact [(None, 2), (3, 4), (12, 3)]",
    "test_result": "False"
  },
  "9199": {
    "question_id": "mbpp/919",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_tuple(tuples_list):\n    return [t for t in tuples_list if not all(v is None for v in t)]",
    "test_output": "FAILED: expect [(None, 2), (3, 4), (12, 3)],in fact [(None, 2), (3, 4), (12, 3)]",
    "test_result": "False"
  },
  "9200": {
    "question_id": "mbpp/920",
    "model": "deepseek-v3-250324",
    "generation_code": "def chunk_tuples(tup, n):\n    if n <= 0:\n        return []\n    return [tup[i:i+n] for i in range(0, len(tup), n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9201": {
    "question_id": "mbpp/920",
    "model": "deepseek-v3-250324",
    "generation_code": "def chunk_tuples(tup, n):\n    if n <= 0:\n        return []\n    return [tup[i:i+n] for i in range(0, len(tup), n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9202": {
    "question_id": "mbpp/920",
    "model": "deepseek-v3-250324",
    "generation_code": "def chunk_tuples(tup, n):\n    if n <= 0:\n        return []\n    return [tup[i:i+n] for i in range(0, len(tup), n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9203": {
    "question_id": "mbpp/920",
    "model": "deepseek-v3-250324",
    "generation_code": "def chunk_tuples(tup, n):\n    if n <= 0:\n        return []\n    return [tup[i:i+n] for i in range(0, len(tup), n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9204": {
    "question_id": "mbpp/920",
    "model": "deepseek-v3-250324",
    "generation_code": "def chunk_tuples(tup, n):\n    if n <= 0:\n        return []\n    return [tup[i:i+n] for i in range(0, len(tup), n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9205": {
    "question_id": "mbpp/920",
    "model": "deepseek-v3-250324",
    "generation_code": "def chunk_tuples(tup, n):\n    if n <= 0:\n        return []\n    return [tup[i:i+n] for i in range(0, len(tup), n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9206": {
    "question_id": "mbpp/920",
    "model": "deepseek-v3-250324",
    "generation_code": "def chunk_tuples(t, n):\n    if n <= 0:\n        return []\n    return [t[i:i+n] for i in range(0, len(t), n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9207": {
    "question_id": "mbpp/920",
    "model": "deepseek-v3-250324",
    "generation_code": "def chunk_tuples(t, n):\n    if n <= 0:\n        return []\n    return [t[i:i+n] for i in range(0, len(t), n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9208": {
    "question_id": "mbpp/920",
    "model": "deepseek-v3-250324",
    "generation_code": "def chunk_tuples(tup, n):\n    if n <= 0:\n        return []\n    return [tup[i:i+n] for i in range(0, len(tup), n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9209": {
    "question_id": "mbpp/920",
    "model": "deepseek-v3-250324",
    "generation_code": "def chunk_tuples(tup, n):\n    if n <= 0:\n        return []\n    return [tup[i:i+n] for i in range(0, len(tup), n)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9210": {
    "question_id": "mbpp/921",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 < max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "9211": {
    "question_id": "mbpp/921",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 > max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (7, 8),in fact (8, 7)",
    "test_result": "False"
  },
  "9212": {
    "question_id": "mbpp/921",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 < max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "9213": {
    "question_id": "mbpp/921",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    sorted_arr = sorted(arr)\n    product1 = sorted_arr[-1] * sorted_arr[-2]\n    product2 = sorted_arr[0] * sorted_arr[1]\n    if product1 > product2:\n        return (sorted_arr[-2], sorted_arr[-1])\n    else:\n        return (sorted_arr[0], sorted_arr[1])",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "9214": {
    "question_id": "mbpp/921",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 > max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (7, 8),in fact (8, 7)",
    "test_result": "False"
  },
  "9215": {
    "question_id": "mbpp/921",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 > max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (7, 8),in fact (8, 7)",
    "test_result": "False"
  },
  "9216": {
    "question_id": "mbpp/921",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    sorted_arr = sorted(arr)\n    product1 = sorted_arr[-1] * sorted_arr[-2]\n    product2 = sorted_arr[0] * sorted_arr[1]\n    if product1 > product2:\n        return (sorted_arr[-2], sorted_arr[-1])\n    else:\n        return (sorted_arr[0], sorted_arr[1])",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "9217": {
    "question_id": "mbpp/921",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 < max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "9218": {
    "question_id": "mbpp/921",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 < max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (-4, -6),in fact (-6, -4)",
    "test_result": "False"
  },
  "9219": {
    "question_id": "mbpp/921",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 > max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)",
    "test_output": "FAILED: expect (7, 8),in fact (8, 7)",
    "test_result": "False"
  },
  "9220": {
    "question_id": "mbpp/922",
    "model": "deepseek-v3-250324",
    "generation_code": "def super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9221": {
    "question_id": "mbpp/922",
    "model": "deepseek-v3-250324",
    "generation_code": "def super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9222": {
    "question_id": "mbpp/922",
    "model": "deepseek-v3-250324",
    "generation_code": "def super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9223": {
    "question_id": "mbpp/922",
    "model": "deepseek-v3-250324",
    "generation_code": "def super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9224": {
    "question_id": "mbpp/922",
    "model": "deepseek-v3-250324",
    "generation_code": "def super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9225": {
    "question_id": "mbpp/922",
    "model": "deepseek-v3-250324",
    "generation_code": "def super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9226": {
    "question_id": "mbpp/922",
    "model": "deepseek-v3-250324",
    "generation_code": "def super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9227": {
    "question_id": "mbpp/922",
    "model": "deepseek-v3-250324",
    "generation_code": "def super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9228": {
    "question_id": "mbpp/922",
    "model": "deepseek-v3-250324",
    "generation_code": "def super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9229": {
    "question_id": "mbpp/922",
    "model": "deepseek-v3-250324",
    "generation_code": "def super_seq(str1, str2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9230": {
    "question_id": "mbpp/923",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_two(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9231": {
    "question_id": "mbpp/923",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_two(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9232": {
    "question_id": "mbpp/923",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_two(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9233": {
    "question_id": "mbpp/923",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_two(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9234": {
    "question_id": "mbpp/923",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_two(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9235": {
    "question_id": "mbpp/923",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_two(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9236": {
    "question_id": "mbpp/923",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_two(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9237": {
    "question_id": "mbpp/923",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_two(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9238": {
    "question_id": "mbpp/923",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_two(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9239": {
    "question_id": "mbpp/923",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_of_two(a, b):\n    return a if a > b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9240": {
    "question_id": "mbpp/924",
    "model": "deepseek-v3-250324",
    "generation_code": "def mutiple_tuple(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9241": {
    "question_id": "mbpp/924",
    "model": "deepseek-v3-250324",
    "generation_code": "def mutiple_tuple(t):\n    product = 1\n    for num in t:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9242": {
    "question_id": "mbpp/924",
    "model": "deepseek-v3-250324",
    "generation_code": "def mutiple_tuple(t):\n    product = 1\n    for num in t:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9243": {
    "question_id": "mbpp/924",
    "model": "deepseek-v3-250324",
    "generation_code": "def mutiple_tuple(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9244": {
    "question_id": "mbpp/924",
    "model": "deepseek-v3-250324",
    "generation_code": "def mutiple_tuple(t):\n    product = 1\n    for num in t:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9245": {
    "question_id": "mbpp/924",
    "model": "deepseek-v3-250324",
    "generation_code": "def mutiple_tuple(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9246": {
    "question_id": "mbpp/924",
    "model": "deepseek-v3-250324",
    "generation_code": "def mutiple_tuple(t):\n    product = 1\n    for num in t:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9247": {
    "question_id": "mbpp/924",
    "model": "deepseek-v3-250324",
    "generation_code": "def mutiple_tuple(t):\n    product = 1\n    for num in t:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9248": {
    "question_id": "mbpp/924",
    "model": "deepseek-v3-250324",
    "generation_code": "def mutiple_tuple(t):\n    product = 1\n    for num in t:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9249": {
    "question_id": "mbpp/924",
    "model": "deepseek-v3-250324",
    "generation_code": "def mutiple_tuple(t):\n    product = 1\n    for num in t:\n        product *= num\n    return product",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9250": {
    "question_id": "mbpp/925",
    "model": "deepseek-v3-250324",
    "generation_code": "def rencontres_number(n, m):\n    if n == 0 and m == 0:\n        return 1\n    if n < 0 or m < 0 or m > n:\n        return 0\n    if m == 0:\n        return (n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0))\n    from math import comb\n    return comb(n, m) * rencontres_number(n - m, 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9251": {
    "question_id": "mbpp/925",
    "model": "deepseek-v3-250324",
    "generation_code": "def rencontres_number(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if n == 1 and k == 0:\n        return 0\n    if n == 1 and k == 1:\n        return 1\n    if k < 0 or k > n:\n        return 0\n    return (n - 1) * (rencontres_number(n - 1, k) + rencontres_number(n - 2, k - 1))",
    "test_output": "FAILED: expect 924,in fact 2568",
    "test_result": "False"
  },
  "9252": {
    "question_id": "mbpp/925",
    "model": "deepseek-v3-250324",
    "generation_code": "def rencontres_number(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if n == 1 and k == 0:\n        return 0\n    if n == 1 and k == 1:\n        return 1\n    if k == 0:\n        return (n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0))\n    if n == k:\n        return 1\n    if k > n:\n        return 0\n    return comb(n, k) * rencontres_number(n - k, 0)\n    \nfrom math import comb",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9253": {
    "question_id": "mbpp/925",
    "model": "deepseek-v3-250324",
    "generation_code": "def rencontres_number(n, m):\n    if n == 0 and m == 0:\n        return 1\n    if n == 1 and m == 0:\n        return 0\n    if n == 1 and m == 1:\n        return 1\n    if m < 0 or m > n:\n        return 0\n    return (n - 1) * (rencontres_number(n - 1, m) + rencontres_number(n - 2, m - 1))",
    "test_output": "FAILED: expect 924,in fact 2568",
    "test_result": "False"
  },
  "9254": {
    "question_id": "mbpp/925",
    "model": "deepseek-v3-250324",
    "generation_code": "def rencontres_number(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if n == 1 and k == 0:\n        return 0\n    if n == 1 and k == 1:\n        return 1\n    if k < 0 or k > n:\n        return 0\n    return (n - 1) * (rencontres_number(n - 1, k) + rencontres_number(n - 2, k - 1))",
    "test_output": "FAILED: expect 924,in fact 2568",
    "test_result": "False"
  },
  "9255": {
    "question_id": "mbpp/925",
    "model": "deepseek-v3-250324",
    "generation_code": "def rencontres_number(n, m):\n    if n == 0 and m == 0:\n        return 1\n    if n == 1 and m == 0:\n        return 0\n    if n == 1 and m == 1:\n        return 1\n    if m < 0 or m > n:\n        return 0\n    return (n - 1) * (rencontres_number(n - 1, m) + rencontres_number(n - 2, m - 1))",
    "test_output": "FAILED: expect 924,in fact 2568",
    "test_result": "False"
  },
  "9256": {
    "question_id": "mbpp/925",
    "model": "deepseek-v3-250324",
    "generation_code": "def rencontres_number(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if n == 1 and k == 0:\n        return 0\n    if n == 1 and k == 1:\n        return 1\n    if k == 0:\n        return (n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0))\n    if n == k:\n        return 1\n    if k > n:\n        return 0\n    return comb(n, k) * rencontres_number(n - k, 0)\n\nfrom math import comb",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9257": {
    "question_id": "mbpp/925",
    "model": "deepseek-v3-250324",
    "generation_code": "def rencontres_number(n, m):\n    if m == 0:\n        from math import factorial\n        return round(factorial(n) / (2.718281828459045))\n    elif n == m:\n        return 0\n    else:\n        from math import comb\n        from math import factorial\n        return comb(n, m) * rencontres_number(n - m, 0)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9258": {
    "question_id": "mbpp/925",
    "model": "deepseek-v3-250324",
    "generation_code": "def rencontres_number(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if n == 1 and k == 0:\n        return 0\n    if n == 1 and k == 1:\n        return 1\n    if k == 0:\n        return (n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0))\n    if n == k:\n        return 1\n    if k > n:\n        return 0\n    return (n - 1) * rencontres_number(n - 1, k - 1) + rencontres_number(n - 1, k)",
    "test_output": "FAILED: expect 924,in fact 1863",
    "test_result": "False"
  },
  "9259": {
    "question_id": "mbpp/925",
    "model": "deepseek-v3-250324",
    "generation_code": "def rencontres_number(n, m):\n    if n == 0 and m == 0:\n        return 1\n    if n == 1 and m == 0:\n        return 0\n    if n == 1 and m == 1:\n        return 1\n    if m == 0:\n        return (n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0))\n    if n == m:\n        return 1\n    if m > n:\n        return 0\n    return (n - 1) * rencontres_number(n - 1, m - 1) + rencontres_number(n - 1, m)",
    "test_output": "FAILED: expect 924,in fact 1863",
    "test_result": "False"
  },
  "9260": {
    "question_id": "mbpp/926",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root):\n    if root is None:\n        return 0\n    left_height = max_height(root.left)\n    right_height = max_height(root.right)\n    return max(left_height, right_height) + 1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "9261": {
    "question_id": "mbpp/926",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root):\n    if root is None:\n        return 0\n    left_height = max_height(root.left)\n    right_height = max_height(root.right)\n    return max(left_height, right_height) + 1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "9262": {
    "question_id": "mbpp/926",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root):\n    if root is None:\n        return 0\n    left_height = max_height(root.left)\n    right_height = max_height(root.right)\n    return max(left_height, right_height) + 1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "9263": {
    "question_id": "mbpp/926",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root):\n    if root is None:\n        return 0\n    left_height = max_height(root.left)\n    right_height = max_height(root.right)\n    return max(left_height, right_height) + 1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "9264": {
    "question_id": "mbpp/926",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root):\n    if root is None:\n        return 0\n    left_height = max_height(root.left)\n    right_height = max_height(root.right)\n    return max(left_height, right_height) + 1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "9265": {
    "question_id": "mbpp/926",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root):\n    if root is None:\n        return 0\n    left_height = max_height(root.left)\n    right_height = max_height(root.right)\n    return max(left_height, right_height) + 1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "9266": {
    "question_id": "mbpp/926",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root):\n    if root is None:\n        return 0\n    left_height = max_height(root.left)\n    right_height = max_height(root.right)\n    return max(left_height, right_height) + 1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "9267": {
    "question_id": "mbpp/926",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root):\n    if root is None:\n        return 0\n    left_height = max_height(root.left)\n    right_height = max_height(root.right)\n    return max(left_height, right_height) + 1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "9268": {
    "question_id": "mbpp/926",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root):\n    if root is None:\n        return 0\n    left_height = max_height(root.left)\n    right_height = max_height(root.right)\n    return max(left_height, right_height) + 1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "9269": {
    "question_id": "mbpp/926",
    "model": "deepseek-v3-250324",
    "generation_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root):\n    if root is None:\n        return 0\n    left_height = max_height(root.left)\n    right_height = max_height(root.right)\n    return max(left_height, right_height) + 1",
    "test_output": "FAILED: NameError: name 'root' is not defined\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\nNameError: name 'root' is not defined\n",
    "test_result": "False"
  },
  "9270": {
    "question_id": "mbpp/927",
    "model": "deepseek-v3-250324",
    "generation_code": "def change_date_format(date):\n    if not date or len(date.split('-')) != 3:\n        return date\n    year, month, day = date.split('-')\n    return f\"{day}-{month}-{year}\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9271": {
    "question_id": "mbpp/927",
    "model": "deepseek-v3-250324",
    "generation_code": "def change_date_format(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return date\n    return f\"{parts[2]}-{parts[1]}-{parts[0]}\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9272": {
    "question_id": "mbpp/927",
    "model": "deepseek-v3-250324",
    "generation_code": "def change_date_format(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return date\n    return f\"{parts[2]}-{parts[1]}-{parts[0]}\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9273": {
    "question_id": "mbpp/927",
    "model": "deepseek-v3-250324",
    "generation_code": "def change_date_format(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return date\n    return f\"{parts[2]}-{parts[1]}-{parts[0]}\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9274": {
    "question_id": "mbpp/927",
    "model": "deepseek-v3-250324",
    "generation_code": "def change_date_format(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return date\n    return f\"{parts[2]}-{parts[1]}-{parts[0]}\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9275": {
    "question_id": "mbpp/927",
    "model": "deepseek-v3-250324",
    "generation_code": "def change_date_format(date):\n    if not date or len(date.split('-')) != 3:\n        return date\n    year, month, day = date.split('-')\n    return f\"{day}-{month}-{year}\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9276": {
    "question_id": "mbpp/927",
    "model": "deepseek-v3-250324",
    "generation_code": "def change_date_format(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return date\n    return f\"{parts[2]}-{parts[1]}-{parts[0]}\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9277": {
    "question_id": "mbpp/927",
    "model": "deepseek-v3-250324",
    "generation_code": "def change_date_format(date):\n    if not date or len(date.split('-')) != 3:\n        return date\n    year, month, day = date.split('-')\n    return f\"{day}-{month}-{year}\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9278": {
    "question_id": "mbpp/927",
    "model": "deepseek-v3-250324",
    "generation_code": "def change_date_format(date):\n    if not date or len(date.split('-')) != 3:\n        return date\n    year, month, day = date.split('-')\n    return f\"{day}-{month}-{year}\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9279": {
    "question_id": "mbpp/927",
    "model": "deepseek-v3-250324",
    "generation_code": "def change_date_format(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return date\n    year, month, day = parts\n    return f\"{day}-{month}-{year}\"",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9280": {
    "question_id": "mbpp/928",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_tuplex(tuplex, item):\n    return tuplex.count(item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9281": {
    "question_id": "mbpp/928",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_tuplex(tuplex, value):\n    return tuplex.count(value)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9282": {
    "question_id": "mbpp/928",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_tuplex(tuplex, item):\n    return tuplex.count(item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9283": {
    "question_id": "mbpp/928",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_tuplex(tuplex, item):\n    return tuplex.count(item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9284": {
    "question_id": "mbpp/928",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_tuplex(tuplex, item):\n    return tuplex.count(item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9285": {
    "question_id": "mbpp/928",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_tuplex(tuplex, item):\n    return tuplex.count(item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9286": {
    "question_id": "mbpp/928",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_tuplex(tuplex, item):\n    return tuplex.count(item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9287": {
    "question_id": "mbpp/928",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_tuplex(tup, item):\n    return tup.count(item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9288": {
    "question_id": "mbpp/928",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_tuplex(tuplex, item):\n    return tuplex.count(item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9289": {
    "question_id": "mbpp/928",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_tuplex(tuplex, item):\n    return tuplex.count(item)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9290": {
    "question_id": "mbpp/929",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "9291": {
    "question_id": "mbpp/929",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "9292": {
    "question_id": "mbpp/929",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "9293": {
    "question_id": "mbpp/929",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "9294": {
    "question_id": "mbpp/929",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "9295": {
    "question_id": "mbpp/929",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "9296": {
    "question_id": "mbpp/929",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "9297": {
    "question_id": "mbpp/929",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "9298": {
    "question_id": "mbpp/929",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "9299": {
    "question_id": "mbpp/929",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef text_match(text):\n    if re.search(r'^ab*$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'",
    "test_output": "FAILED: expect Found a match!,in fact Not matched!",
    "test_result": "False"
  },
  "9300": {
    "question_id": "mbpp/930",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9301": {
    "question_id": "mbpp/930",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9302": {
    "question_id": "mbpp/930",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9303": {
    "question_id": "mbpp/930",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9304": {
    "question_id": "mbpp/930",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9305": {
    "question_id": "mbpp/930",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9306": {
    "question_id": "mbpp/930",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9307": {
    "question_id": "mbpp/930",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9308": {
    "question_id": "mbpp/930",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9309": {
    "question_id": "mbpp/930",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) // 2) ** 2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9310": {
    "question_id": "mbpp/931",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplic_list(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9311": {
    "question_id": "mbpp/931",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplic_list(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9312": {
    "question_id": "mbpp/931",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplic_list(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9313": {
    "question_id": "mbpp/931",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplic_list(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9314": {
    "question_id": "mbpp/931",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplic_list(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9315": {
    "question_id": "mbpp/931",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplic_list(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9316": {
    "question_id": "mbpp/931",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplic_list(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9317": {
    "question_id": "mbpp/931",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplic_list(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9318": {
    "question_id": "mbpp/931",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplic_list(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9319": {
    "question_id": "mbpp/931",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_duplic_list(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9320": {
    "question_id": "mbpp/932",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef camel_to_snake(s):\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s).lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9321": {
    "question_id": "mbpp/932",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef camel_to_snake(camel_str):\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', camel_str).lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9322": {
    "question_id": "mbpp/932",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef camel_to_snake(s):\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s).lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9323": {
    "question_id": "mbpp/932",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef camel_to_snake(camel_str):\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', camel_str).lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9324": {
    "question_id": "mbpp/932",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef camel_to_snake(camel_str):\n    if not camel_str:\n        return \"\"\n    snake_str = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', camel_str)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', snake_str).lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9325": {
    "question_id": "mbpp/932",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef camel_to_snake(s):\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', s).lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9326": {
    "question_id": "mbpp/932",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef camel_to_snake(camel_str):\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', camel_str).lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9327": {
    "question_id": "mbpp/932",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef camel_to_snake(name):\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', name)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9328": {
    "question_id": "mbpp/932",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef camel_to_snake(name):\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', name)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9329": {
    "question_id": "mbpp/932",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef camel_to_snake(camel_str):\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', camel_str).lower()",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9330": {
    "question_id": "mbpp/933",
    "model": "deepseek-v3-250324",
    "generation_code": "def dealnnoy_num(n, m):\n    if n == 0 or m == 0:\n        return 1\n    return dealnnoy_num(n - 1, m) + dealnnoy_num(n - 1, m - 1) + dealnnoy_num(n, m - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9331": {
    "question_id": "mbpp/933",
    "model": "deepseek-v3-250324",
    "generation_code": "def dealnnoy_num(n, m):\n    if n == 0 or m == 0:\n        return 1\n    return dealnnoy_num(n - 1, m) + dealnnoy_num(n - 1, m - 1) + dealnnoy_num(n, m - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9332": {
    "question_id": "mbpp/933",
    "model": "deepseek-v3-250324",
    "generation_code": "def dealnnoy_num(m, n):\n    if m == 0 or n == 0:\n        return 1\n    return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9333": {
    "question_id": "mbpp/933",
    "model": "deepseek-v3-250324",
    "generation_code": "def dealnnoy_num(m, n):\n    if m == 0 or n == 0:\n        return 1\n    return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9334": {
    "question_id": "mbpp/933",
    "model": "deepseek-v3-250324",
    "generation_code": "def dealnnoy_num(n, m):\n    if n == 0 or m == 0:\n        return 1\n    return dealnnoy_num(n - 1, m) + dealnnoy_num(n - 1, m - 1) + dealnnoy_num(n, m - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9335": {
    "question_id": "mbpp/933",
    "model": "deepseek-v3-250324",
    "generation_code": "def dealnnoy_num(m, n):\n    if m == 0 or n == 0:\n        return 1\n    return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9336": {
    "question_id": "mbpp/933",
    "model": "deepseek-v3-250324",
    "generation_code": "def dealnnoy_num(m, n):\n    if m == 0 or n == 0:\n        return 1\n    return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9337": {
    "question_id": "mbpp/933",
    "model": "deepseek-v3-250324",
    "generation_code": "def dealnnoy_num(n, m):\n    if n == 0 or m == 0:\n        return 1\n    return dealnnoy_num(n - 1, m) + dealnnoy_num(n - 1, m - 1) + dealnnoy_num(n, m - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9338": {
    "question_id": "mbpp/933",
    "model": "deepseek-v3-250324",
    "generation_code": "def dealnnoy_num(n, m):\n    if n == 0 or m == 0:\n        return 1\n    return dealnnoy_num(n - 1, m) + dealnnoy_num(n - 1, m - 1) + dealnnoy_num(n, m - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9339": {
    "question_id": "mbpp/933",
    "model": "deepseek-v3-250324",
    "generation_code": "def dealnnoy_num(n, m):\n    if n == 0 or m == 0:\n        return 1\n    return dealnnoy_num(n - 1, m) + dealnnoy_num(n - 1, m - 1) + dealnnoy_num(n, m - 1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9340": {
    "question_id": "mbpp/934",
    "model": "deepseek-v3-250324",
    "generation_code": "def series_sum(n):\n    if n < 1:\n        return 0\n    return n * (n + 1) * (2 * n + 1) // 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9341": {
    "question_id": "mbpp/934",
    "model": "deepseek-v3-250324",
    "generation_code": "def series_sum(n):\n    if n < 1:\n        return 0\n    return n * (n + 1) * (2 * n + 1) // 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9342": {
    "question_id": "mbpp/934",
    "model": "deepseek-v3-250324",
    "generation_code": "def series_sum(n):\n    if n < 1:\n        return 0\n    return n * (n + 1) * (2 * n + 1) // 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9343": {
    "question_id": "mbpp/934",
    "model": "deepseek-v3-250324",
    "generation_code": "def series_sum(n):\n    if n < 1:\n        return 0\n    return n * (n + 1) * (2 * n + 1) // 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9344": {
    "question_id": "mbpp/934",
    "model": "deepseek-v3-250324",
    "generation_code": "def series_sum(n):\n    if n <= 0:\n        return 0\n    return n * (n + 1) * (2 * n + 1) // 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9345": {
    "question_id": "mbpp/934",
    "model": "deepseek-v3-250324",
    "generation_code": "def series_sum(n):\n    if n < 1:\n        return 0\n    return n * (n + 1) * (2 * n + 1) // 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9346": {
    "question_id": "mbpp/934",
    "model": "deepseek-v3-250324",
    "generation_code": "def series_sum(n):\n    if n <= 0:\n        return 0\n    return n * (n + 1) * (2 * n + 1) // 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9347": {
    "question_id": "mbpp/934",
    "model": "deepseek-v3-250324",
    "generation_code": "def series_sum(n):\n    if n <= 0:\n        return 0\n    return n * (n + 1) * (2 * n + 1) // 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9348": {
    "question_id": "mbpp/934",
    "model": "deepseek-v3-250324",
    "generation_code": "def series_sum(n):\n    if n <= 0:\n        return 0\n    return n * (n + 1) * (2 * n + 1) // 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9349": {
    "question_id": "mbpp/934",
    "model": "deepseek-v3-250324",
    "generation_code": "def series_sum(n):\n    if n < 1:\n        return 0\n    return n * (n + 1) * (2 * n + 1) // 6",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9350": {
    "question_id": "mbpp/935",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_tuples(tuples_list, order):\n    order_dict = {val: idx for idx, val in enumerate(order)}\n    return sorted(tuples_list, key=lambda x: order_dict.get(x[0], len(order_dict)))",
    "test_output": "FAILED: expect [(3, 11), (4, 3), (2, 10), (3, 11)],in fact [(4, 3), (2, 10), (5, 4), (3, 11)]",
    "test_result": "False"
  },
  "9351": {
    "question_id": "mbpp/935",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_tuples(tuples_list, order_list):\n    order_dict = {val: idx for idx, val in enumerate(order_list)}\n    sorted_tuples = sorted(tuples_list, key=lambda x: order_dict[x[0]])\n    return sorted_tuples",
    "test_output": "FAILED: KeyError: 5\nTraceback (most recent call last):\n  File \"e:\\work\\mbpp_test_project\\test.py\", line 289, in execute_test_case\n    actual = eval(func_call, namespace)\n  File \"<string>\", line 1, in <module>\n  File \"<generated>\", line 3, in re_arrange_tuples\n  File \"<generated>\", line 3, in <lambda>\nKeyError: 5\n",
    "test_result": "False"
  },
  "9352": {
    "question_id": "mbpp/935",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_tuples(tuples_list, order_list):\n    order_dict = {t[0]: t for t in tuples_list}\n    rearranged = []\n    for num in order_list:\n        if num in order_dict:\n            rearranged.append(order_dict[num])\n    return rearranged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9353": {
    "question_id": "mbpp/935",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_tuples(tuples_list, order_list):\n    order_dict = {t[0]: t for t in tuples_list}\n    rearranged = []\n    for num in order_list:\n        if num in order_dict:\n            rearranged.append(order_dict[num])\n    return rearranged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9354": {
    "question_id": "mbpp/935",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_tuples(tuples_list, order_list):\n    order_dict = {t[0]: t for t in tuples_list}\n    rearranged = []\n    for num in order_list:\n        if num in order_dict:\n            rearranged.append(order_dict[num])\n    return rearranged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9355": {
    "question_id": "mbpp/935",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_tuples(tuples_list, order):\n    order_dict = {val: idx for idx, val in enumerate(order)}\n    return sorted(tuples_list, key=lambda x: order_dict.get(x[0], len(order_dict)))",
    "test_output": "FAILED: expect [(3, 11), (4, 3), (2, 10), (3, 11)],in fact [(4, 3), (2, 10), (5, 4), (3, 11)]",
    "test_result": "False"
  },
  "9356": {
    "question_id": "mbpp/935",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_tuples(tuples_list, order_list):\n    order_dict = {t[0]: t for t in tuples_list}\n    reordered = []\n    for num in order_list:\n        if num in order_dict:\n            reordered.append(order_dict[num])\n    return reordered",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9357": {
    "question_id": "mbpp/935",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_tuples(tuples_list, order_list):\n    order_dict = {t[0]: t for t in tuples_list}\n    rearranged = []\n    for num in order_list:\n        if num in order_dict:\n            rearranged.append(order_dict[num])\n    return rearranged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9358": {
    "question_id": "mbpp/935",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_tuples(tuples_list, order_list):\n    order_dict = {t[0]: t for t in tuples_list}\n    rearranged = []\n    for num in order_list:\n        if num in order_dict:\n            rearranged.append(order_dict[num])\n    return rearranged",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9359": {
    "question_id": "mbpp/935",
    "model": "deepseek-v3-250324",
    "generation_code": "def re_arrange_tuples(tuples_list, order):\n    order_dict = {val: idx for idx, val in enumerate(order)}\n    return sorted(tuples_list, key=lambda x: order_dict.get(x[0], len(order_dict)))",
    "test_output": "FAILED: expect [(3, 11), (4, 3), (2, 10), (3, 11)],in fact [(4, 3), (2, 10), (5, 4), (3, 11)]",
    "test_result": "False"
  },
  "9360": {
    "question_id": "mbpp/936",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_char(s):\n    if not s:\n        return None\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = -1\n    result = None\n    for char, count in char_count.items():\n        if count > max_count or (count == max_count and char < result):\n            max_count = count\n            result = char\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9361": {
    "question_id": "mbpp/936",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_char(s):\n    if not s:\n        return None\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = max(char_count.values())\n    max_chars = [char for char, count in char_count.items() if count == max_count]\n    return max_chars[0] if len(max_chars) == 1 else tuple(sorted(max_chars))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9362": {
    "question_id": "mbpp/936",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_char(s):\n    if not s:\n        return None\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = max(char_count.values())\n    max_chars = [char for char, count in char_count.items() if count == max_count]\n    return max_chars[0] if len(max_chars) == 1 else max_chars",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9363": {
    "question_id": "mbpp/936",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_char(s):\n    if not s:\n        return None\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = -1\n    max_char = None\n    for char, count in char_count.items():\n        if count > max_count or (count == max_count and char < max_char):\n            max_count = count\n            max_char = char\n    return max_char",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9364": {
    "question_id": "mbpp/936",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_char(s):\n    if not s:\n        return None\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = -1\n    max_char = None\n    for char, count in char_count.items():\n        if count > max_count or (count == max_count and char < max_char):\n            max_count = count\n            max_char = char\n    return max_char",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9365": {
    "question_id": "mbpp/936",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_char(s):\n    if not s:\n        return None\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = -1\n    max_char = None\n    for char, count in char_count.items():\n        if count > max_count or (count == max_count and char < max_char):\n            max_count = count\n            max_char = char\n    return max_char",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9366": {
    "question_id": "mbpp/936",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_char(s):\n    if not s:\n        return None\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_char = max(char_count, key=lambda k: char_count[k])\n    return max_char",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9367": {
    "question_id": "mbpp/936",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_char(s):\n    if not s:\n        return None\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_char = max(char_count, key=lambda k: char_count[k])\n    return max_char",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9368": {
    "question_id": "mbpp/936",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_char(s):\n    if not s:\n        return None\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = max(char_count.values())\n    max_chars = [char for char, count in char_count.items() if count == max_count]\n    return max_chars[0] if len(max_chars) == 1 else max_chars",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9369": {
    "question_id": "mbpp/936",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_char(s):\n    if not s:\n        return None\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = -1\n    result = None\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            result = char\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9370": {
    "question_id": "mbpp/937",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef find_closet(arr1, arr2, arr3, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while i < p and j < q and k < r:\n        minimum = min(arr1[i], arr2[j], arr3[k])\n        maximum = max(arr1[i], arr2[j], arr3[k])\n        current_diff = maximum - minimum\n        if current_diff < diff:\n            diff = current_diff\n            res_i = i\n            res_j = j\n            res_k = k\n        if diff == 0:\n            break\n        if arr1[i] == minimum:\n            i += 1\n        elif arr2[j] == minimum:\n            j += 1\n        else:\n            k += 1\n    return (arr1[res_i], arr2[res_j], arr3[res_k])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9371": {
    "question_id": "mbpp/937",
    "model": "deepseek-v3-250324",
    "generation_code": "def find_closet(arr1, arr2, arr3, p, q, r):\n    diff = float('inf')\n    res = (0, 0, 0)\n    i = j = k = 0\n    while i < p and j < q and k < r:\n        minimum = min(arr1[i], arr2[j], arr3[k])\n        maximum = max(arr1[i], arr2[j], arr3[k])\n        current_diff = maximum - minimum\n        if current_diff < diff:\n            diff = current_diff\n            res = (arr1[i], arr2[j], arr3[k])\n        if diff == 0:\n            break\n        if arr1[i] == minimum:\n            i += 1\n        elif arr2[j] == minimum:\n            j += 1\n        else:\n            k += 1\n    return res",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9372": {
    "question_id": "mbpp/937",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef find_closet(arr1, arr2, arr3, p, q, r):\n    i = j = k = 0\n    min_diff = sys.maxsize\n    result = (0, 0, 0)\n    \n    while i < p and j < q and k < r:\n        current_diff = abs(arr1[i] - arr2[j]) + abs(arr2[j] - arr3[k]) + abs(arr3[k] - arr1[i])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            result = (arr1[i], arr2[j], arr3[k])\n        \n        min_val = min(arr1[i], arr2[j], arr3[k])\n        if arr1[i] == min_val:\n            i += 1\n        elif arr2[j] == min_val:\n            j += 1\n        else:\n            k += 1\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9373": {
    "question_id": "mbpp/937",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef find_closet(arr1, arr2, arr3, p, q, r):\n    i = j = k = 0\n    min_diff = sys.maxsize\n    result = (0, 0, 0)\n    \n    while i < p and j < q and k < r:\n        current_diff = abs(arr1[i] - arr2[j]) + abs(arr2[j] - arr3[k]) + abs(arr3[k] - arr1[i])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            result = (arr1[i], arr2[j], arr3[k])\n        \n        min_val = min(arr1[i], arr2[j], arr3[k])\n        if arr1[i] == min_val:\n            i += 1\n        elif arr2[j] == min_val:\n            j += 1\n        else:\n            k += 1\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9374": {
    "question_id": "mbpp/937",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef find_closet(arr1, arr2, arr3, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while i < p and j < q and k < r:\n        minimum = min(arr1[i], arr2[j], arr3[k])\n        maximum = max(arr1[i], arr2[j], arr3[k])\n        current_diff = maximum - minimum\n        if current_diff < diff:\n            diff = current_diff\n            res_i = i\n            res_j = j\n            res_k = k\n        if diff == 0:\n            break\n        if arr1[i] == minimum:\n            i += 1\n        elif arr2[j] == minimum:\n            j += 1\n        else:\n            k += 1\n    return (arr1[res_i], arr2[res_j], arr3[res_k])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9375": {
    "question_id": "mbpp/937",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef find_closet(arr1, arr2, arr3, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while i < p and j < q and k < r:\n        minimum = min(arr1[i], arr2[j], arr3[k])\n        maximum = max(arr1[i], arr2[j], arr3[k])\n        current_diff = maximum - minimum\n        if current_diff < diff:\n            diff = current_diff\n            res_i = i\n            res_j = j\n            res_k = k\n        if diff == 0:\n            break\n        if arr1[i] == minimum:\n            i += 1\n        elif arr2[j] == minimum:\n            j += 1\n        else:\n            k += 1\n    return (arr1[res_i], arr2[res_j], arr3[res_k])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9376": {
    "question_id": "mbpp/937",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef find_closet(arr1, arr2, arr3, p, q, r):\n    i = j = k = 0\n    min_diff = sys.maxsize\n    result = (0, 0, 0)\n    \n    while i < p and j < q and k < r:\n        current_diff = abs(arr1[i] - arr2[j]) + abs(arr2[j] - arr3[k]) + abs(arr3[k] - arr1[i])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            result = (arr1[i], arr2[j], arr3[k])\n        \n        min_val = min(arr1[i], arr2[j], arr3[k])\n        if arr1[i] == min_val:\n            i += 1\n        elif arr2[j] == min_val:\n            j += 1\n        else:\n            k += 1\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9377": {
    "question_id": "mbpp/937",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef find_closet(arr1, arr2, arr3, p, q, r):\n    i = j = k = 0\n    min_diff = sys.maxsize\n    result = (0, 0, 0)\n    \n    while i < p and j < q and k < r:\n        current_diff = abs(arr1[i] - arr2[j]) + abs(arr2[j] - arr3[k]) + abs(arr3[k] - arr1[i])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            result = (arr1[i], arr2[j], arr3[k])\n        \n        min_val = min(arr1[i], arr2[j], arr3[k])\n        if arr1[i] == min_val:\n            i += 1\n        elif arr2[j] == min_val:\n            j += 1\n        else:\n            k += 1\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9378": {
    "question_id": "mbpp/937",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef find_closet(arr1, arr2, arr3, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while i < p and j < q and k < r:\n        minimum = min(arr1[i], arr2[j], arr3[k])\n        maximum = max(arr1[i], arr2[j], arr3[k])\n        current_diff = maximum - minimum\n        if current_diff < diff:\n            diff = current_diff\n            res_i = i\n            res_j = j\n            res_k = k\n        if diff == 0:\n            break\n        if arr1[i] == minimum:\n            i += 1\n        elif arr2[j] == minimum:\n            j += 1\n        else:\n            k += 1\n    return (arr1[res_i], arr2[res_j], arr3[res_k])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9379": {
    "question_id": "mbpp/937",
    "model": "deepseek-v3-250324",
    "generation_code": "import sys\n\ndef find_closet(arr1, arr2, arr3, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while i < p and j < q and k < r:\n        minimum = min(arr1[i], arr2[j], arr3[k])\n        maximum = max(arr1[i], arr2[j], arr3[k])\n        current_diff = maximum - minimum\n        if current_diff < diff:\n            diff = current_diff\n            res_i = i\n            res_j = j\n            res_k = k\n        if diff == 0:\n            break\n        if arr1[i] == minimum:\n            i += 1\n        elif arr2[j] == minimum:\n            j += 1\n        else:\n            k += 1\n    return (arr1[res_i], arr2[res_j], arr3[res_k])",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9380": {
    "question_id": "mbpp/938",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['model'])",
    "test_output": "FAILED: expect [{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}],in fact [{'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Nokia', 'model': 216, 'color': 'Black'}]",
    "test_result": "False"
  },
  "9381": {
    "question_id": "mbpp/938",
    "model": "deepseek-v3-250324",
    "generation_code": "sorted_models = lambda lst: sorted(lst, key=lambda x: x['model'])",
    "test_output": "FAILED: expect [{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}],in fact [{'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Nokia', 'model': 216, 'color': 'Black'}]",
    "test_result": "False"
  },
  "9382": {
    "question_id": "mbpp/938",
    "model": "deepseek-v3-250324",
    "generation_code": "sorted_models = lambda lst: sorted(lst, key=lambda x: x['model'])",
    "test_output": "FAILED: expect [{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}],in fact [{'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Nokia', 'model': 216, 'color': 'Black'}]",
    "test_result": "False"
  },
  "9383": {
    "question_id": "mbpp/938",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['model'], reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9384": {
    "question_id": "mbpp/938",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_models(lst):\n    return sorted(lst, key=lambda x: x['model'])",
    "test_output": "FAILED: expect [{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}],in fact [{'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Nokia', 'model': 216, 'color': 'Black'}]",
    "test_result": "False"
  },
  "9385": {
    "question_id": "mbpp/938",
    "model": "deepseek-v3-250324",
    "generation_code": "sorted_models = lambda models: sorted(models, key=lambda x: x['model'])",
    "test_output": "FAILED: expect [{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}],in fact [{'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Nokia', 'model': 216, 'color': 'Black'}]",
    "test_result": "False"
  },
  "9386": {
    "question_id": "mbpp/938",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_models(lst):\n    return sorted(lst, key=lambda x: x['model'], reverse=True)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9387": {
    "question_id": "mbpp/938",
    "model": "deepseek-v3-250324",
    "generation_code": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['model'])",
    "test_output": "FAILED: expect [{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}],in fact [{'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Nokia', 'model': 216, 'color': 'Black'}]",
    "test_result": "False"
  },
  "9388": {
    "question_id": "mbpp/938",
    "model": "deepseek-v3-250324",
    "generation_code": "sorted_models = lambda models: sorted(models, key=lambda x: x['model'])",
    "test_output": "FAILED: expect [{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}],in fact [{'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Nokia', 'model': 216, 'color': 'Black'}]",
    "test_result": "False"
  },
  "9389": {
    "question_id": "mbpp/938",
    "model": "deepseek-v3-250324",
    "generation_code": "sorted_models = lambda models: sorted(models, key=lambda x: x['model'])",
    "test_output": "FAILED: expect [{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}],in fact [{'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Nokia', 'model': 216, 'color': 'Black'}]",
    "test_result": "False"
  },
  "9390": {
    "question_id": "mbpp/939",
    "model": "deepseek-v3-250324",
    "generation_code": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9391": {
    "question_id": "mbpp/939",
    "model": "deepseek-v3-250324",
    "generation_code": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9392": {
    "question_id": "mbpp/939",
    "model": "deepseek-v3-250324",
    "generation_code": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9393": {
    "question_id": "mbpp/939",
    "model": "deepseek-v3-250324",
    "generation_code": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9394": {
    "question_id": "mbpp/939",
    "model": "deepseek-v3-250324",
    "generation_code": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9395": {
    "question_id": "mbpp/939",
    "model": "deepseek-v3-250324",
    "generation_code": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9396": {
    "question_id": "mbpp/939",
    "model": "deepseek-v3-250324",
    "generation_code": "def heap_sort(arr):\n    n = len(arr)\n    \n    # Build a maxheap.\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    \n    # One by one extract elements\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # swap\n        heapify(arr, i, 0)\n    \n    return arr\n\ndef heapify(arr, n, i):\n    largest = i  # Initialize largest as root\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # See if left child of root exists and is greater than root\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    \n    # See if right child of root exists and is greater than root\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n    \n    # Change root, if needed\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # swap\n        heapify(arr, n, largest)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9397": {
    "question_id": "mbpp/939",
    "model": "deepseek-v3-250324",
    "generation_code": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9398": {
    "question_id": "mbpp/939",
    "model": "deepseek-v3-250324",
    "generation_code": "def heap_sort(arr):\n    n = len(arr)\n    \n    # Build a maxheap.\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    \n    # Extract elements one by one.\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap\n        heapify(arr, i, 0)\n    \n    return arr\n\ndef heapify(arr, n, i):\n    largest = i  # Initialize largest as root\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # If left child exists and is greater than root\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    \n    # If right child exists and is greater than largest so far\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n    \n    # Change root if needed\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # Swap\n        heapify(arr, n, largest)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9399": {
    "question_id": "mbpp/939",
    "model": "deepseek-v3-250324",
    "generation_code": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9400": {
    "question_id": "mbpp/940",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_elim(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9401": {
    "question_id": "mbpp/940",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_elim(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9402": {
    "question_id": "mbpp/940",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_elim(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9403": {
    "question_id": "mbpp/940",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_elim(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9404": {
    "question_id": "mbpp/940",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_elim(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9405": {
    "question_id": "mbpp/940",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_elim(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9406": {
    "question_id": "mbpp/940",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_elim(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9407": {
    "question_id": "mbpp/940",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_elim(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9408": {
    "question_id": "mbpp/940",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_elim(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9409": {
    "question_id": "mbpp/940",
    "model": "deepseek-v3-250324",
    "generation_code": "def count_elim(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, tuple):\n            break\n        count += 1\n    return count",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9410": {
    "question_id": "mbpp/941",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, elements):\n    return any(item in elements for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9411": {
    "question_id": "mbpp/941",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, elements):\n    return any(item in elements for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9412": {
    "question_id": "mbpp/941",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(tuple_elements, list_elements):\n    return any(element in list_elements for element in tuple_elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9413": {
    "question_id": "mbpp/941",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(list1, list2):\n    return any(item in list1 for item in list2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9414": {
    "question_id": "mbpp/941",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, elements):\n    return any(item in elements for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9415": {
    "question_id": "mbpp/941",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(list1, list2):\n    return any(element in list1 for element in list2)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9416": {
    "question_id": "mbpp/941",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(tuple_elements, list_elements):\n    return any(element in list_elements for element in tuple_elements)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9417": {
    "question_id": "mbpp/941",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, elements):\n    return any(item in elements for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9418": {
    "question_id": "mbpp/941",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, elements):\n    return any(item in elements for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9419": {
    "question_id": "mbpp/941",
    "model": "deepseek-v3-250324",
    "generation_code": "def check_element(lst, elements):\n    return any(item in elements for item in lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9420": {
    "question_id": "mbpp/942",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9421": {
    "question_id": "mbpp/942",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9422": {
    "question_id": "mbpp/942",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9423": {
    "question_id": "mbpp/942",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9424": {
    "question_id": "mbpp/942",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9425": {
    "question_id": "mbpp/942",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9426": {
    "question_id": "mbpp/942",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9427": {
    "question_id": "mbpp/942",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9428": {
    "question_id": "mbpp/942",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9429": {
    "question_id": "mbpp/942",
    "model": "deepseek-v3-250324",
    "generation_code": "import heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9430": {
    "question_id": "mbpp/943",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_position(s):\n    result = []\n    for i, char in enumerate(s):\n        if char.isdigit():\n            result.append(str(i))\n    return ','.join(result) if result else ''",
    "test_output": "FAILED: expect 10,in fact 10,11",
    "test_result": "False"
  },
  "9431": {
    "question_id": "mbpp/943",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_position(s):\n    result = []\n    for i, char in enumerate(s):\n        if char.isdigit():\n            result.append((char, i))\n    return result",
    "test_output": "FAILED: expect 10,in fact [('7', 10), ('0', 11)]",
    "test_result": "False"
  },
  "9432": {
    "question_id": "mbpp/943",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_position(string):\n    result = []\n    for index, char in enumerate(string):\n        if char.isdigit():\n            result.append((char, index))\n    return result",
    "test_output": "FAILED: expect 10,in fact [('7', 10), ('0', 11)]",
    "test_result": "False"
  },
  "9433": {
    "question_id": "mbpp/943",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_position(text):\n    result = []\n    for index, char in enumerate(text):\n        if char.isdigit():\n            result.append(str(index))\n    return ','.join(result) if result else ''",
    "test_output": "FAILED: expect 10,in fact 10,11",
    "test_result": "False"
  },
  "9434": {
    "question_id": "mbpp/943",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_position(text):\n    result = []\n    current_num = ''\n    for i, char in enumerate(text):\n        if char.isdigit():\n            current_num += char\n        else:\n            if current_num:\n                result.append((int(current_num), i - len(current_num)))\n                current_num = ''\n    if current_num:\n        result.append((int(current_num), len(text) - len(current_num)))\n    return result",
    "test_output": "FAILED: expect 10,in fact [(70, 10)]",
    "test_result": "False"
  },
  "9435": {
    "question_id": "mbpp/943",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_position(s):\n    result = []\n    for i, char in enumerate(s):\n        if char.isdigit():\n            result.append((char, i))\n    return result",
    "test_output": "FAILED: expect 10,in fact [('7', 10), ('0', 11)]",
    "test_result": "False"
  },
  "9436": {
    "question_id": "mbpp/943",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_position(text):\n    result = []\n    for index, char in enumerate(text):\n        if char.isdigit():\n            result.append(str(index))\n    return ','.join(result)",
    "test_output": "FAILED: expect 10,in fact 10,11",
    "test_result": "False"
  },
  "9437": {
    "question_id": "mbpp/943",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_position(text):\n    result = []\n    current_num = ''\n    for i, char in enumerate(text):\n        if char.isdigit():\n            current_num += char\n        else:\n            if current_num:\n                result.append((int(current_num), i - len(current_num)))\n                current_num = ''\n    if current_num:\n        result.append((int(current_num), len(text) - len(current_num)))\n    return result",
    "test_output": "FAILED: expect 10,in fact [(70, 10)]",
    "test_result": "False"
  },
  "9438": {
    "question_id": "mbpp/943",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_position(string):\n    result = []\n    for index, char in enumerate(string):\n        if char.isdigit():\n            result.append(str(index))\n    return ','.join(result) if result else ''",
    "test_output": "FAILED: expect 10,in fact 10,11",
    "test_result": "False"
  },
  "9439": {
    "question_id": "mbpp/943",
    "model": "deepseek-v3-250324",
    "generation_code": "def num_position(string):\n    result = []\n    current_num = ''\n    for i, char in enumerate(string):\n        if char.isdigit():\n            current_num += char\n        else:\n            if current_num:\n                result.append((int(current_num), i - len(current_num)))\n                current_num = ''\n    if current_num:\n        result.append((int(current_num), len(string) - len(current_num)))\n    return result",
    "test_output": "FAILED: expect 10,in fact [(70, 10)]",
    "test_result": "False"
  },
  "9440": {
    "question_id": "mbpp/944",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_set(t):\n    return set(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9441": {
    "question_id": "mbpp/944",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_set(t):\n    return set(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9442": {
    "question_id": "mbpp/944",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_set(t):\n    return set(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9443": {
    "question_id": "mbpp/944",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_set(t):\n    return set(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9444": {
    "question_id": "mbpp/944",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_set(t):\n    return set(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9445": {
    "question_id": "mbpp/944",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_set(t):\n    return set(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9446": {
    "question_id": "mbpp/944",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_set(t):\n    return set(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9447": {
    "question_id": "mbpp/944",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_set(t):\n    return set(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9448": {
    "question_id": "mbpp/944",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_set(t):\n    return set(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9449": {
    "question_id": "mbpp/944",
    "model": "deepseek-v3-250324",
    "generation_code": "def tuple_to_set(t):\n    return set(t)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9450": {
    "question_id": "mbpp/945",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\n\ndef most_common_elem(text, n):\n    if not text or n <= 0:\n        return []\n    counter = Counter(text)\n    return counter.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9451": {
    "question_id": "mbpp/945",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\n\ndef most_common_elem(text, n):\n    if not text or n <= 0:\n        return []\n    counter = Counter(text)\n    return counter.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9452": {
    "question_id": "mbpp/945",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\n\ndef most_common_elem(text, n):\n    if not text or n <= 0:\n        return []\n    counter = Counter(text)\n    return counter.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9453": {
    "question_id": "mbpp/945",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\n\ndef most_common_elem(text, n):\n    if not text or n <= 0:\n        return []\n    counter = Counter(text)\n    return counter.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9454": {
    "question_id": "mbpp/945",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\n\ndef most_common_elem(text, n):\n    if not text or n <= 0:\n        return []\n    counter = Counter(text)\n    return counter.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9455": {
    "question_id": "mbpp/945",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\n\ndef most_common_elem(text, n):\n    if not text or n <= 0:\n        return []\n    counter = Counter(text)\n    return counter.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9456": {
    "question_id": "mbpp/945",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\n\ndef most_common_elem(text, n):\n    if not text or n <= 0:\n        return []\n    counter = Counter(text)\n    return counter.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9457": {
    "question_id": "mbpp/945",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\n\ndef most_common_elem(text, n):\n    if not text or n <= 0:\n        return []\n    counter = Counter(text)\n    return counter.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9458": {
    "question_id": "mbpp/945",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\n\ndef most_common_elem(text, n):\n    if not text or n <= 0:\n        return []\n    counter = Counter(text)\n    return counter.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9459": {
    "question_id": "mbpp/945",
    "model": "deepseek-v3-250324",
    "generation_code": "from collections import Counter\n\ndef most_common_elem(text, n):\n    if not text or n <= 0:\n        return []\n    counter = Counter(text)\n    return counter.most_common(n)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9460": {
    "question_id": "mbpp/946",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(list1):\n    if not list1:\n        return 0\n    return min(len(word) for word in list1)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9461": {
    "question_id": "mbpp/946",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return min(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9462": {
    "question_id": "mbpp/946",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return min(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9463": {
    "question_id": "mbpp/946",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return min(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9464": {
    "question_id": "mbpp/946",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return min(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9465": {
    "question_id": "mbpp/946",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return min(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9466": {
    "question_id": "mbpp/946",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return min(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9467": {
    "question_id": "mbpp/946",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return min(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9468": {
    "question_id": "mbpp/946",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return min(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9469": {
    "question_id": "mbpp/946",
    "model": "deepseek-v3-250324",
    "generation_code": "def len_log(words):\n    if not words:\n        return 0\n    return min(len(word) for word in words)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9470": {
    "question_id": "mbpp/947",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_item(tuple_data, index):\n    return tuple_data[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9471": {
    "question_id": "mbpp/947",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_item(tuple_data, index):\n    if index < 0 or index >= len(tuple_data):\n        return None\n    return tuple_data[index]",
    "test_output": "FAILED: expect u,in fact None",
    "test_result": "False"
  },
  "9472": {
    "question_id": "mbpp/947",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_item(tuple_data, index):\n    return tuple_data[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9473": {
    "question_id": "mbpp/947",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_item(tuple_data, index):\n    return tuple_data[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9474": {
    "question_id": "mbpp/947",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_item(tuple_data, index):\n    return tuple_data[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9475": {
    "question_id": "mbpp/947",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_item(tuple_data, index):\n    return tuple_data[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9476": {
    "question_id": "mbpp/947",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_item(tuple_data, index):\n    return tuple_data[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9477": {
    "question_id": "mbpp/947",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_item(tuple_data, index):\n    if index < 0 or index >= len(tuple_data):\n        return None\n    return tuple_data[index]",
    "test_output": "FAILED: expect u,in fact None",
    "test_result": "False"
  },
  "9478": {
    "question_id": "mbpp/947",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_item(tuple_data, index):\n    if index < 0 or index >= len(tuple_data):\n        return None\n    return tuple_data[index]",
    "test_output": "FAILED: expect u,in fact None",
    "test_result": "False"
  },
  "9479": {
    "question_id": "mbpp/947",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_item(tuple_data, index):\n    return tuple_data[index]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9480": {
    "question_id": "mbpp/948",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list(lst):\n    return sorted(lst, key=lambda t: sum(len(str(num)) for num in t))",
    "test_output": "FAILED: expect [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)],in fact [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]",
    "test_result": "False"
  },
  "9481": {
    "question_id": "mbpp/948",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list(lst):\n    return sorted(lst, key=lambda t: sum(len(str(num)) for num in t))",
    "test_output": "FAILED: expect [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)],in fact [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]",
    "test_result": "False"
  },
  "9482": {
    "question_id": "mbpp/948",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list(tuples_list):\n    return sorted(tuples_list, key=lambda t: sum(len(str(num)) for num in t))",
    "test_output": "FAILED: expect [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)],in fact [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]",
    "test_result": "False"
  },
  "9483": {
    "question_id": "mbpp/948",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list(lst):\n    return sorted(lst, key=lambda x: sum(len(str(num)) for num in x))",
    "test_output": "FAILED: expect [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)],in fact [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]",
    "test_result": "False"
  },
  "9484": {
    "question_id": "mbpp/948",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list(lst):\n    return sorted(lst, key=lambda x: sum(len(str(num)) for num in x))",
    "test_output": "FAILED: expect [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)],in fact [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]",
    "test_result": "False"
  },
  "9485": {
    "question_id": "mbpp/948",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list(lst):\n    return sorted(lst, key=lambda t: sum(len(str(num)) for num in t))",
    "test_output": "FAILED: expect [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)],in fact [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]",
    "test_result": "False"
  },
  "9486": {
    "question_id": "mbpp/948",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list(tuple_list):\n    def count_digits(t):\n        return sum(len(str(num)) for num in t)\n    \n    return sorted(tuple_list, key=count_digits)",
    "test_output": "FAILED: expect [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)],in fact [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]",
    "test_result": "False"
  },
  "9487": {
    "question_id": "mbpp/948",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list(lst):\n    return sorted(lst, key=lambda t: sum(len(str(num)) for num in t))",
    "test_output": "FAILED: expect [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)],in fact [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]",
    "test_result": "False"
  },
  "9488": {
    "question_id": "mbpp/948",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list(lst):\n    return sorted(lst, key=lambda t: sum(len(str(num)) for num in t))",
    "test_output": "FAILED: expect [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)],in fact [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]",
    "test_result": "False"
  },
  "9489": {
    "question_id": "mbpp/948",
    "model": "deepseek-v3-250324",
    "generation_code": "def sort_list(lst):\n    return sorted(lst, key=lambda t: sum(len(str(num)) for num in t))",
    "test_output": "FAILED: expect [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)],in fact [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]",
    "test_result": "False"
  },
  "9490": {
    "question_id": "mbpp/949",
    "model": "deepseek-v3-250324",
    "generation_code": "def chinese_zodiac(year):\n    zodiacs = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', \n               'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']\n    if year < 0:\n        return None\n    return zodiacs[(year - 1984) % 12]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9491": {
    "question_id": "mbpp/949",
    "model": "deepseek-v3-250324",
    "generation_code": "def chinese_zodiac(year):\n    zodiacs = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', \n               'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']\n    if year < 0:\n        year = abs(year)\n    offset = (year - 4) % 12\n    return zodiacs[offset]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9492": {
    "question_id": "mbpp/949",
    "model": "deepseek-v3-250324",
    "generation_code": "def chinese_zodiac(year):\n    zodiacs = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', \n               'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']\n    if year < 0:\n        return None\n    offset = (year - 1984) % 12\n    return zodiacs[offset]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9493": {
    "question_id": "mbpp/949",
    "model": "deepseek-v3-250324",
    "generation_code": "def chinese_zodiac(year):\n    zodiacs = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', \n               'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']\n    if year < 0:\n        return None\n    offset = (year - 4) % 12\n    return zodiacs[offset]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9494": {
    "question_id": "mbpp/949",
    "model": "deepseek-v3-250324",
    "generation_code": "def chinese_zodiac(year):\n    zodiacs = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', \n               'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']\n    if year < 0:\n        year = abs(year)\n    offset = (year - 1984) % 12\n    return zodiacs[offset]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9495": {
    "question_id": "mbpp/949",
    "model": "deepseek-v3-250324",
    "generation_code": "def chinese_zodiac(year):\n    zodiacs = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', \n               'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']\n    if year < 0:\n        year = abs(year)\n    offset = (year - 4) % 12\n    return zodiacs[offset]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9496": {
    "question_id": "mbpp/949",
    "model": "deepseek-v3-250324",
    "generation_code": "def chinese_zodiac(year):\n    zodiacs = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', \n               'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']\n    if year < 0:\n        return zodiacs[(year + 1) % 12 - 1]\n    return zodiacs[(year - 1) % 12]",
    "test_output": "FAILED: expect Ox,in fact Dragon",
    "test_result": "False"
  },
  "9497": {
    "question_id": "mbpp/949",
    "model": "deepseek-v3-250324",
    "generation_code": "def chinese_zodiac(year):\n    zodiacs = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', \n               'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']\n    if year < 0:\n        return None\n    offset = (year - 1984) % 12\n    return zodiacs[offset]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9498": {
    "question_id": "mbpp/949",
    "model": "deepseek-v3-250324",
    "generation_code": "def chinese_zodiac(year):\n    zodiacs = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', \n               'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']\n    if year < 0:\n        year = abs(year)\n    offset = (year - 4) % 12\n    return zodiacs[offset]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9499": {
    "question_id": "mbpp/949",
    "model": "deepseek-v3-250324",
    "generation_code": "def chinese_zodiac(year):\n    zodiacs = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', \n               'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']\n    if year < 0:\n        year = abs(year)\n    offset = (year - 4) % 12\n    return zodiacs[offset]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9500": {
    "question_id": "mbpp/950",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_similar_indices(list1, list2):\n    result = []\n    for t1, t2 in zip(list1, list2):\n        max_tuple = tuple(max(a, b) for a, b in zip(t1, t2))\n        result.append(max_tuple)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9501": {
    "question_id": "mbpp/950",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_similar_indices(list1, list2):\n    result = []\n    for t1, t2 in zip(list1, list2):\n        max_tuple = tuple(max(a, b) for a, b in zip(t1, t2))\n        result.append(max_tuple)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9502": {
    "question_id": "mbpp/950",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_similar_indices(list1, list2):\n    max_list = []\n    for t1, t2 in zip(list1, list2):\n        max_tuple = tuple(max(a, b) for a, b in zip(t1, t2))\n        max_list.append(max_tuple)\n    return max_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9503": {
    "question_id": "mbpp/950",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_similar_indices(list1, list2):\n    result = []\n    min_length = min(len(list1), len(list2))\n    for i in range(min_length):\n        tuple1 = list1[i]\n        tuple2 = list2[i]\n        max_tuple = tuple(max(x, y) for x, y in zip(tuple1, tuple2))\n        result.append(max_tuple)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9504": {
    "question_id": "mbpp/950",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_similar_indices(list1, list2):\n    return [tuple(max(x, y) for x, y in zip(t1, t2)) for t1, t2 in zip(list1, list2)]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9505": {
    "question_id": "mbpp/950",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_similar_indices(list1, list2):\n    max_list = []\n    for t1, t2 in zip(list1, list2):\n        max_tuple = tuple(max(a, b) for a, b in zip(t1, t2))\n        max_list.append(max_tuple)\n    return max_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9506": {
    "question_id": "mbpp/950",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_similar_indices(list1, list2):\n    max_list = []\n    for t1, t2 in zip(list1, list2):\n        max_tuple = tuple(max(x, y) for x, y in zip(t1, t2))\n        max_list.append(max_tuple)\n    return max_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9507": {
    "question_id": "mbpp/950",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_similar_indices(list1, list2):\n    result = []\n    min_length = min(len(list1), len(list2))\n    for i in range(min_length):\n        tuple1 = list1[i]\n        tuple2 = list2[i]\n        max_tuple = tuple(max(x, y) for x, y in zip(tuple1, tuple2))\n        result.append(max_tuple)\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9508": {
    "question_id": "mbpp/950",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_similar_indices(list1, list2):\n    max_list = []\n    for t1, t2 in zip(list1, list2):\n        max_tuple = tuple(max(x, y) for x, y in zip(t1, t2))\n        max_list.append(max_tuple)\n    return max_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9509": {
    "question_id": "mbpp/950",
    "model": "deepseek-v3-250324",
    "generation_code": "def max_similar_indices(list1, list2):\n    max_list = []\n    for t1, t2 in zip(list1, list2):\n        max_tuple = tuple(max(x, y) for x, y in zip(t1, t2))\n        max_list.append(max_tuple)\n    return max_list",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9510": {
    "question_id": "mbpp/951",
    "model": "deepseek-v3-250324",
    "generation_code": "def nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 11,in fact 10",
    "test_result": "False"
  },
  "9511": {
    "question_id": "mbpp/951",
    "model": "deepseek-v3-250324",
    "generation_code": "def nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    numerator = 1\n    for i in range(r):\n        numerator = (numerator * (n - i)) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = (denominator * i) % p\n    return (numerator * pow(denominator, p - 2, p)) % p",
    "test_output": "FAILED: expect 11,in fact 10",
    "test_result": "False"
  },
  "9512": {
    "question_id": "mbpp/951",
    "model": "deepseek-v3-250324",
    "generation_code": "def nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 11,in fact 10",
    "test_result": "False"
  },
  "9513": {
    "question_id": "mbpp/951",
    "model": "deepseek-v3-250324",
    "generation_code": "def nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 11,in fact 10",
    "test_result": "False"
  },
  "9514": {
    "question_id": "mbpp/951",
    "model": "deepseek-v3-250324",
    "generation_code": "def nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p-2, p) % p",
    "test_output": "FAILED: expect 11,in fact 10",
    "test_result": "False"
  },
  "9515": {
    "question_id": "mbpp/951",
    "model": "deepseek-v3-250324",
    "generation_code": "def nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 11,in fact 10",
    "test_result": "False"
  },
  "9516": {
    "question_id": "mbpp/951",
    "model": "deepseek-v3-250324",
    "generation_code": "def nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 11,in fact 10",
    "test_result": "False"
  },
  "9517": {
    "question_id": "mbpp/951",
    "model": "deepseek-v3-250324",
    "generation_code": "def nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    \n    # Compute numerator mod p: n * (n-1) * ... * (n-r+1) mod p\n    numerator = 1\n    for i in range(r):\n        numerator = (numerator * (n - i)) % p\n    \n    # Compute denominator mod p: r! mod p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = (denominator * i) % p\n    \n    # Compute denominator^(-1) mod p using Fermat's little theorem\n    inv_denominator = pow(denominator, p - 2, p)\n    \n    return (numerator * inv_denominator) % p",
    "test_output": "FAILED: expect 11,in fact 10",
    "test_result": "False"
  },
  "9518": {
    "question_id": "mbpp/951",
    "model": "deepseek-v3-250324",
    "generation_code": "def nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    r = min(r, n - r)\n    numerator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = denominator * i % p\n    return numerator * pow(denominator, p - 2, p) % p",
    "test_output": "FAILED: expect 11,in fact 10",
    "test_result": "False"
  },
  "9519": {
    "question_id": "mbpp/951",
    "model": "deepseek-v3-250324",
    "generation_code": "def nCr_mod_p(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    r = min(r, n - r)\n    numerator = 1\n    for i in range(r):\n        numerator = (numerator * (n - i)) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = (denominator * i) % p\n    return (numerator * pow(denominator, p - 2, p)) % p",
    "test_output": "FAILED: expect 11,in fact 10",
    "test_result": "False"
  },
  "9520": {
    "question_id": "mbpp/952",
    "model": "deepseek-v3-250324",
    "generation_code": "def subset(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return max(frequency.values()) if frequency else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9521": {
    "question_id": "mbpp/952",
    "model": "deepseek-v3-250324",
    "generation_code": "def subset(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return max(frequency.values()) if frequency else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9522": {
    "question_id": "mbpp/952",
    "model": "deepseek-v3-250324",
    "generation_code": "def subset(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return max(frequency.values()) if frequency else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9523": {
    "question_id": "mbpp/952",
    "model": "deepseek-v3-250324",
    "generation_code": "def subset(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return max(frequency.values()) if frequency else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9524": {
    "question_id": "mbpp/952",
    "model": "deepseek-v3-250324",
    "generation_code": "def subset(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return max(frequency.values()) if frequency else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9525": {
    "question_id": "mbpp/952",
    "model": "deepseek-v3-250324",
    "generation_code": "def subset(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return max(frequency.values()) if frequency else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9526": {
    "question_id": "mbpp/952",
    "model": "deepseek-v3-250324",
    "generation_code": "def subset(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return max(frequency.values()) if frequency else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9527": {
    "question_id": "mbpp/952",
    "model": "deepseek-v3-250324",
    "generation_code": "def subset(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return max(frequency.values()) if frequency else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9528": {
    "question_id": "mbpp/952",
    "model": "deepseek-v3-250324",
    "generation_code": "def subset(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    if not frequency:\n        return 0\n    return max(frequency.values())",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9529": {
    "question_id": "mbpp/952",
    "model": "deepseek-v3-250324",
    "generation_code": "def subset(arr, n):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return max(frequency.values()) if frequency else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9530": {
    "question_id": "mbpp/953",
    "model": "deepseek-v3-250324",
    "generation_code": "def profit_amount(selling_price, cost_price):\n    if selling_price > cost_price:\n        return selling_price - cost_price\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9531": {
    "question_id": "mbpp/953",
    "model": "deepseek-v3-250324",
    "generation_code": "def profit_amount(selling_price, cost_price):\n    if selling_price > cost_price:\n        return selling_price - cost_price\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9532": {
    "question_id": "mbpp/953",
    "model": "deepseek-v3-250324",
    "generation_code": "def profit_amount(selling_price, cost_price):\n    if selling_price > cost_price:\n        return selling_price - cost_price\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9533": {
    "question_id": "mbpp/953",
    "model": "deepseek-v3-250324",
    "generation_code": "def profit_amount(selling_price, cost_price):\n    if selling_price > cost_price:\n        return selling_price - cost_price\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9534": {
    "question_id": "mbpp/953",
    "model": "deepseek-v3-250324",
    "generation_code": "def profit_amount(selling_price, cost_price):\n    if selling_price > cost_price:\n        return selling_price - cost_price\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9535": {
    "question_id": "mbpp/953",
    "model": "deepseek-v3-250324",
    "generation_code": "def profit_amount(selling_price, cost_price):\n    if selling_price > cost_price:\n        return selling_price - cost_price\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9536": {
    "question_id": "mbpp/953",
    "model": "deepseek-v3-250324",
    "generation_code": "def profit_amount(selling_price, cost_price):\n    if selling_price > cost_price:\n        return selling_price - cost_price\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9537": {
    "question_id": "mbpp/953",
    "model": "deepseek-v3-250324",
    "generation_code": "def profit_amount(selling_price, cost_price):\n    if selling_price > cost_price:\n        return selling_price - cost_price\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9538": {
    "question_id": "mbpp/953",
    "model": "deepseek-v3-250324",
    "generation_code": "def profit_amount(selling_price, cost_price):\n    if selling_price > cost_price:\n        return selling_price - cost_price\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9539": {
    "question_id": "mbpp/953",
    "model": "deepseek-v3-250324",
    "generation_code": "def profit_amount(selling_price, cost_price):\n    if selling_price > cost_price:\n        return selling_price - cost_price\n    else:\n        return None",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9540": {
    "question_id": "mbpp/954",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9541": {
    "question_id": "mbpp/954",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9542": {
    "question_id": "mbpp/954",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9543": {
    "question_id": "mbpp/954",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9544": {
    "question_id": "mbpp/954",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9545": {
    "question_id": "mbpp/954",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9546": {
    "question_id": "mbpp/954",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9547": {
    "question_id": "mbpp/954",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9548": {
    "question_id": "mbpp/954",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9549": {
    "question_id": "mbpp/954",
    "model": "deepseek-v3-250324",
    "generation_code": "def is_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors > n",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9550": {
    "question_id": "mbpp/955",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef split_list(s):\n    return re.findall('[A-Z][^A-Z]*', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9551": {
    "question_id": "mbpp/955",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef split_list(s):\n    return re.findall('[A-Z][^A-Z]*', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9552": {
    "question_id": "mbpp/955",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef split_list(s):\n    return re.findall('[A-Z][^A-Z]*', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9553": {
    "question_id": "mbpp/955",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef split_list(s):\n    return re.findall('[A-Z][^A-Z]*', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9554": {
    "question_id": "mbpp/955",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef split_list(s):\n    return re.findall('[A-Z][^A-Z]*', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9555": {
    "question_id": "mbpp/955",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef split_list(s):\n    return re.findall('[A-Z][^A-Z]*', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9556": {
    "question_id": "mbpp/955",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef split_list(s):\n    return re.findall('[A-Z][^A-Z]*', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9557": {
    "question_id": "mbpp/955",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef split_list(s):\n    return re.findall('[A-Z][^A-Z]*', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9558": {
    "question_id": "mbpp/955",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef split_list(s):\n    return re.findall('[A-Z][^A-Z]*', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9559": {
    "question_id": "mbpp/955",
    "model": "deepseek-v3-250324",
    "generation_code": "import re\n\ndef split_list(s):\n    return re.findall('[A-Z][^A-Z]*', s)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9560": {
    "question_id": "mbpp/956",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_First_Set_Bit_Pos(n):\n    if n == 0:\n        return 0\n    position = 1\n    while n > 0:\n        if n & 1:\n            return position\n        n = n >> 1\n        position += 1\n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9561": {
    "question_id": "mbpp/956",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_First_Set_Bit_Pos(n):\n    if n == 0:\n        return 0\n    position = 1\n    while n > 0:\n        if n & 1:\n            return position\n        n = n >> 1\n        position += 1\n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9562": {
    "question_id": "mbpp/956",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_First_Set_Bit_Pos(n):\n    if n == 0:\n        return 0\n    position = 1\n    while n > 0:\n        if n & 1:\n            return position\n        n = n >> 1\n        position += 1\n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9563": {
    "question_id": "mbpp/956",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_First_Set_Bit_Pos(n):\n    if n == 0:\n        return 0\n    position = 1\n    while n > 0:\n        if n & 1:\n            return position\n        n = n >> 1\n        position += 1\n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9564": {
    "question_id": "mbpp/956",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_First_Set_Bit_Pos(n):\n    if n == 0:\n        return 0\n    position = 1\n    while n > 0:\n        if n & 1:\n            return position\n        n = n >> 1\n        position += 1\n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9565": {
    "question_id": "mbpp/956",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_First_Set_Bit_Pos(n):\n    if n == 0:\n        return 0\n    position = 1\n    while n > 0:\n        if n & 1:\n            return position\n        n = n >> 1\n        position += 1\n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9566": {
    "question_id": "mbpp/956",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_First_Set_Bit_Pos(n):\n    if n == 0:\n        return 0\n    position = 1\n    while n > 0:\n        if n & 1:\n            return position\n        n = n >> 1\n        position += 1\n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9567": {
    "question_id": "mbpp/956",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_First_Set_Bit_Pos(n):\n    if n == 0:\n        return 0\n    position = 1\n    while n > 0:\n        if n & 1:\n            return position\n        n = n >> 1\n        position += 1\n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9568": {
    "question_id": "mbpp/956",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_First_Set_Bit_Pos(n):\n    if n == 0:\n        return 0\n    position = 1\n    while n > 0:\n        if n & 1:\n            return position\n        n = n >> 1\n        position += 1\n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9569": {
    "question_id": "mbpp/956",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_First_Set_Bit_Pos(n):\n    if n == 0:\n        return 0\n    position = 1\n    while n > 0:\n        if n & 1:\n            return position\n        n = n >> 1\n        position += 1\n    return 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9570": {
    "question_id": "mbpp/957",
    "model": "deepseek-v3-250324",
    "generation_code": "def int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9571": {
    "question_id": "mbpp/957",
    "model": "deepseek-v3-250324",
    "generation_code": "def int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9572": {
    "question_id": "mbpp/957",
    "model": "deepseek-v3-250324",
    "generation_code": "def int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9573": {
    "question_id": "mbpp/957",
    "model": "deepseek-v3-250324",
    "generation_code": "def int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9574": {
    "question_id": "mbpp/957",
    "model": "deepseek-v3-250324",
    "generation_code": "def int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9575": {
    "question_id": "mbpp/957",
    "model": "deepseek-v3-250324",
    "generation_code": "def int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9576": {
    "question_id": "mbpp/957",
    "model": "deepseek-v3-250324",
    "generation_code": "def int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9577": {
    "question_id": "mbpp/957",
    "model": "deepseek-v3-250324",
    "generation_code": "def int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9578": {
    "question_id": "mbpp/957",
    "model": "deepseek-v3-250324",
    "generation_code": "def int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9579": {
    "question_id": "mbpp/957",
    "model": "deepseek-v3-250324",
    "generation_code": "def int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9580": {
    "question_id": "mbpp/958",
    "model": "deepseek-v3-250324",
    "generation_code": "def Average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9581": {
    "question_id": "mbpp/958",
    "model": "deepseek-v3-250324",
    "generation_code": "def Average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9582": {
    "question_id": "mbpp/958",
    "model": "deepseek-v3-250324",
    "generation_code": "def Average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9583": {
    "question_id": "mbpp/958",
    "model": "deepseek-v3-250324",
    "generation_code": "def Average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9584": {
    "question_id": "mbpp/958",
    "model": "deepseek-v3-250324",
    "generation_code": "def Average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9585": {
    "question_id": "mbpp/958",
    "model": "deepseek-v3-250324",
    "generation_code": "def Average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9586": {
    "question_id": "mbpp/958",
    "model": "deepseek-v3-250324",
    "generation_code": "def Average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9587": {
    "question_id": "mbpp/958",
    "model": "deepseek-v3-250324",
    "generation_code": "def Average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9588": {
    "question_id": "mbpp/958",
    "model": "deepseek-v3-250324",
    "generation_code": "def Average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9589": {
    "question_id": "mbpp/958",
    "model": "deepseek-v3-250324",
    "generation_code": "def Average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9590": {
    "question_id": "mbpp/959",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_noOfways(n):\n    if n == 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "9591": {
    "question_id": "mbpp/959",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_noOfways(n):\n    if n == 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "9592": {
    "question_id": "mbpp/959",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_noOfways(n):\n    if n == 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "9593": {
    "question_id": "mbpp/959",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_noOfways(n):\n    if n == 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "9594": {
    "question_id": "mbpp/959",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_noOfways(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "9595": {
    "question_id": "mbpp/959",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_noOfways(n):\n    if n == 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "9596": {
    "question_id": "mbpp/959",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_noOfways(n):\n    if n == 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "9597": {
    "question_id": "mbpp/959",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_noOfways(n):\n    if n == 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "9598": {
    "question_id": "mbpp/959",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_noOfways(n):\n    if n == 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "9599": {
    "question_id": "mbpp/959",
    "model": "deepseek-v3-250324",
    "generation_code": "def get_noOfways(n):\n    if n == 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]",
    "test_output": "FAILED: expect 3,in fact 5",
    "test_result": "False"
  },
  "9600": {
    "question_id": "mbpp/960",
    "model": "deepseek-v3-250324",
    "generation_code": "def roman_to_int(s):\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        value = roman_dict[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9601": {
    "question_id": "mbpp/960",
    "model": "deepseek-v3-250324",
    "generation_code": "def roman_to_int(s):\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        value = roman_dict[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9602": {
    "question_id": "mbpp/960",
    "model": "deepseek-v3-250324",
    "generation_code": "def roman_to_int(s):\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        value = roman_dict[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9603": {
    "question_id": "mbpp/960",
    "model": "deepseek-v3-250324",
    "generation_code": "def roman_to_int(s):\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        value = roman_dict[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9604": {
    "question_id": "mbpp/960",
    "model": "deepseek-v3-250324",
    "generation_code": "def roman_to_int(s):\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        value = roman_dict[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9605": {
    "question_id": "mbpp/960",
    "model": "deepseek-v3-250324",
    "generation_code": "def roman_to_int(s):\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        value = roman_dict[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9606": {
    "question_id": "mbpp/960",
    "model": "deepseek-v3-250324",
    "generation_code": "def roman_to_int(s):\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        value = roman_dict[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9607": {
    "question_id": "mbpp/960",
    "model": "deepseek-v3-250324",
    "generation_code": "def roman_to_int(s):\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        value = roman_dict[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9608": {
    "question_id": "mbpp/960",
    "model": "deepseek-v3-250324",
    "generation_code": "def roman_to_int(s):\n    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        value = roman_map[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9609": {
    "question_id": "mbpp/960",
    "model": "deepseek-v3-250324",
    "generation_code": "def roman_to_int(s):\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        value = roman_dict[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9610": {
    "question_id": "mbpp/961",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Even(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9611": {
    "question_id": "mbpp/961",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Even(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9612": {
    "question_id": "mbpp/961",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Even(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9613": {
    "question_id": "mbpp/961",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Even(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9614": {
    "question_id": "mbpp/961",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Even(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9615": {
    "question_id": "mbpp/961",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Even(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9616": {
    "question_id": "mbpp/961",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Even(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9617": {
    "question_id": "mbpp/961",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Even(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9618": {
    "question_id": "mbpp/961",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Even(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9619": {
    "question_id": "mbpp/961",
    "model": "deepseek-v3-250324",
    "generation_code": "def sum_Even(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            total += num\n    return total",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9620": {
    "question_id": "mbpp/962",
    "model": "deepseek-v3-250324",
    "generation_code": "def discriminant_value(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"One solution\", discriminant)\n    else:\n        return (\"No solutions\", discriminant)",
    "test_output": "FAILED: expect ('no real solution', -131),in fact ('No solutions', -131)",
    "test_result": "False"
  },
  "9621": {
    "question_id": "mbpp/962",
    "model": "deepseek-v3-250324",
    "generation_code": "def discriminant_value(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"One solution\", discriminant)\n    else:\n        return (\"No real solutions\", discriminant)",
    "test_output": "FAILED: expect ('no real solution', -131),in fact ('No real solutions', -131)",
    "test_result": "False"
  },
  "9622": {
    "question_id": "mbpp/962",
    "model": "deepseek-v3-250324",
    "generation_code": "def discriminant_value(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"One solution\", discriminant)\n    else:\n        return (\"No real solutions\", discriminant)",
    "test_output": "FAILED: expect ('no real solution', -131),in fact ('No real solutions', -131)",
    "test_result": "False"
  },
  "9623": {
    "question_id": "mbpp/962",
    "model": "deepseek-v3-250324",
    "generation_code": "def discriminant_value(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"One solution\", discriminant)\n    else:\n        return (\"No real solutions\", discriminant)",
    "test_output": "FAILED: expect ('no real solution', -131),in fact ('No real solutions', -131)",
    "test_result": "False"
  },
  "9624": {
    "question_id": "mbpp/962",
    "model": "deepseek-v3-250324",
    "generation_code": "def discriminant_value(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"One solution\", discriminant)\n    else:\n        return (\"No solutions\", discriminant)",
    "test_output": "FAILED: expect ('no real solution', -131),in fact ('No solutions', -131)",
    "test_result": "False"
  },
  "9625": {
    "question_id": "mbpp/962",
    "model": "deepseek-v3-250324",
    "generation_code": "def discriminant_value(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"One solution\", discriminant)\n    else:\n        return (\"No real solutions\", discriminant)",
    "test_output": "FAILED: expect ('no real solution', -131),in fact ('No real solutions', -131)",
    "test_result": "False"
  },
  "9626": {
    "question_id": "mbpp/962",
    "model": "deepseek-v3-250324",
    "generation_code": "def discriminant_value(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"One solution\", discriminant)\n    else:\n        return (\"No real solutions\", discriminant)",
    "test_output": "FAILED: expect ('no real solution', -131),in fact ('No real solutions', -131)",
    "test_result": "False"
  },
  "9627": {
    "question_id": "mbpp/962",
    "model": "deepseek-v3-250324",
    "generation_code": "def discriminant_value(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"One solution\", discriminant)\n    else:\n        return (\"No solutions\", discriminant)",
    "test_output": "FAILED: expect ('no real solution', -131),in fact ('No solutions', -131)",
    "test_result": "False"
  },
  "9628": {
    "question_id": "mbpp/962",
    "model": "deepseek-v3-250324",
    "generation_code": "def discriminant_value(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"One solution\", discriminant)\n    else:\n        return (\"No real solutions\", discriminant)",
    "test_output": "FAILED: expect ('no real solution', -131),in fact ('No real solutions', -131)",
    "test_result": "False"
  },
  "9629": {
    "question_id": "mbpp/962",
    "model": "deepseek-v3-250324",
    "generation_code": "def discriminant_value(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"One solution\", discriminant)\n    else:\n        return (\"No real solutions\", discriminant)",
    "test_output": "FAILED: expect ('no real solution', -131),in fact ('No real solutions', -131)",
    "test_result": "False"
  },
  "9630": {
    "question_id": "mbpp/963",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9631": {
    "question_id": "mbpp/963",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9632": {
    "question_id": "mbpp/963",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9633": {
    "question_id": "mbpp/963",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9634": {
    "question_id": "mbpp/963",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9635": {
    "question_id": "mbpp/963",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9636": {
    "question_id": "mbpp/963",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9637": {
    "question_id": "mbpp/963",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9638": {
    "question_id": "mbpp/963",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9639": {
    "question_id": "mbpp/963",
    "model": "deepseek-v3-250324",
    "generation_code": "def word_len(word):\n    return len(word) % 2 == 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9640": {
    "question_id": "mbpp/964",
    "model": "deepseek-v3-250324",
    "generation_code": "def camel_to_snake(camel_str):\n    snake_str = []\n    for i, char in enumerate(camel_str):\n        if char.isupper() and i != 0:\n            snake_str.append('_' + char.lower())\n        else:\n            snake_str.append(char.lower())\n    return ''.join(snake_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9641": {
    "question_id": "mbpp/964",
    "model": "deepseek-v3-250324",
    "generation_code": "def camel_to_snake(camel_str):\n    if not camel_str:\n        return \"\"\n    snake_str = [camel_str[0].lower()]\n    for char in camel_str[1:]:\n        if char.isupper():\n            snake_str.append('_')\n            snake_str.append(char.lower())\n        else:\n            snake_str.append(char)\n    return ''.join(snake_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9642": {
    "question_id": "mbpp/964",
    "model": "deepseek-v3-250324",
    "generation_code": "def camel_to_snake(camel_str):\n    snake_str = []\n    for i, char in enumerate(camel_str):\n        if char.isupper() and i != 0:\n            snake_str.append('_' + char.lower())\n        else:\n            snake_str.append(char.lower())\n    return ''.join(snake_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9643": {
    "question_id": "mbpp/964",
    "model": "deepseek-v3-250324",
    "generation_code": "def camel_to_snake(camel_str):\n    snake_str = []\n    for i, char in enumerate(camel_str):\n        if char.isupper() and i != 0:\n            snake_str.append('_')\n        snake_str.append(char.lower())\n    return ''.join(snake_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9644": {
    "question_id": "mbpp/964",
    "model": "deepseek-v3-250324",
    "generation_code": "def camel_to_snake(camel_str):\n    snake_str = []\n    for i, char in enumerate(camel_str):\n        if char.isupper() and i != 0:\n            snake_str.append('_' + char.lower())\n        else:\n            snake_str.append(char.lower())\n    return ''.join(snake_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9645": {
    "question_id": "mbpp/964",
    "model": "deepseek-v3-250324",
    "generation_code": "def camel_to_snake(camel_str):\n    if not camel_str:\n        return \"\"\n    snake_str = [camel_str[0].lower()]\n    for char in camel_str[1:]:\n        if char.isupper():\n            snake_str.append('_')\n            snake_str.append(char.lower())\n        else:\n            snake_str.append(char)\n    return ''.join(snake_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9646": {
    "question_id": "mbpp/964",
    "model": "deepseek-v3-250324",
    "generation_code": "def camel_to_snake(camel_str):\n    snake_str = []\n    for i, char in enumerate(camel_str):\n        if char.isupper() and i != 0:\n            snake_str.append('_' + char.lower())\n        else:\n            snake_str.append(char.lower())\n    return ''.join(snake_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9647": {
    "question_id": "mbpp/964",
    "model": "deepseek-v3-250324",
    "generation_code": "def camel_to_snake(camel_str):\n    snake_str = []\n    for i, char in enumerate(camel_str):\n        if char.isupper() and i != 0:\n            snake_str.append('_' + char.lower())\n        else:\n            snake_str.append(char.lower())\n    return ''.join(snake_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9648": {
    "question_id": "mbpp/964",
    "model": "deepseek-v3-250324",
    "generation_code": "def camel_to_snake(camel_str):\n    snake_str = []\n    for i, char in enumerate(camel_str):\n        if char.isupper() and i != 0:\n            snake_str.append('_' + char.lower())\n        else:\n            snake_str.append(char.lower())\n    return ''.join(snake_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9649": {
    "question_id": "mbpp/964",
    "model": "deepseek-v3-250324",
    "generation_code": "def camel_to_snake(camel_str):\n    snake_str = []\n    for i, char in enumerate(camel_str):\n        if char.isupper() and i != 0:\n            snake_str.append('_' + char.lower())\n        else:\n            snake_str.append(char.lower())\n    return ''.join(snake_str)",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9650": {
    "question_id": "mbpp/965",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(tuples_list):\n    return [t for t in tuples_list if t != ()]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9651": {
    "question_id": "mbpp/965",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(tuples_list):\n    return [t for t in tuples_list if t != ()]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9652": {
    "question_id": "mbpp/965",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(tuples_list):\n    return [t for t in tuples_list if t != ()]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9653": {
    "question_id": "mbpp/965",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(tuples_list):\n    return [t for t in tuples_list if t != ()]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9654": {
    "question_id": "mbpp/965",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(tuples_list):\n    return [t for t in tuples_list if t != ()]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9655": {
    "question_id": "mbpp/965",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(tuples_list):\n    return [t for t in tuples_list if t != ()]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9656": {
    "question_id": "mbpp/965",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(tuples_list):\n    return [t for t in tuples_list if t != ()]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9657": {
    "question_id": "mbpp/965",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(tuples_list):\n    return [t for t in tuples_list if t != ()]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9658": {
    "question_id": "mbpp/965",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(tuples_list):\n    return [t for t in tuples_list if t != ()]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9659": {
    "question_id": "mbpp/965",
    "model": "deepseek-v3-250324",
    "generation_code": "def remove_empty(tuples_list):\n    return [t for t in tuples_list if t != ()]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9660": {
    "question_id": "mbpp/966",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    found_vowels = set()\n    \n    for char in s_lower:\n        if char in vowels:\n            found_vowels.add(char)\n    \n    if len(found_vowels) == len(vowels):\n        return 'accepted'\n    else:\n        return 'not accepted'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9661": {
    "question_id": "mbpp/966",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    found_vowels = set()\n    for char in s_lower:\n        if char in vowels:\n            found_vowels.add(char)\n    return 'accepted' if len(found_vowels) == len(vowels) else 'not accepted'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9662": {
    "question_id": "mbpp/966",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    found_vowels = set()\n    \n    for char in s_lower:\n        if char in vowels:\n            found_vowels.add(char)\n    \n    if len(found_vowels) == len(vowels):\n        return 'accepted'\n    else:\n        return 'not accepted'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9663": {
    "question_id": "mbpp/966",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    found_vowels = set()\n    \n    for char in s_lower:\n        if char in vowels:\n            found_vowels.add(char)\n    \n    if len(found_vowels) == len(vowels):\n        return 'accepted'\n    else:\n        return 'not accepted'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9664": {
    "question_id": "mbpp/966",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    found_vowels = set()\n    \n    for char in s_lower:\n        if char in vowels:\n            found_vowels.add(char)\n    \n    return 'accepted' if found_vowels == vowels else 'not accepted'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9665": {
    "question_id": "mbpp/966",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(string):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    string_lower = string.lower()\n    found_vowels = set()\n    \n    for char in string_lower:\n        if char in vowels:\n            found_vowels.add(char)\n    \n    if len(found_vowels) == len(vowels):\n        return 'accepted'\n    else:\n        return 'not accepted'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9666": {
    "question_id": "mbpp/966",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    found_vowels = set()\n    \n    for char in s_lower:\n        if char in vowels:\n            found_vowels.add(char)\n    \n    return 'accepted' if len(found_vowels) == len(vowels) else 'not accepted'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9667": {
    "question_id": "mbpp/966",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(string):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    input_vowels = set()\n    for char in string.lower():\n        if char in vowels:\n            input_vowels.add(char)\n    return 'accepted' if input_vowels == vowels else 'not accepted'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9668": {
    "question_id": "mbpp/966",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(string):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    input_vowels = set()\n    for char in string.lower():\n        if char in vowels:\n            input_vowels.add(char)\n    return 'accepted' if input_vowels == vowels else 'not accepted'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9669": {
    "question_id": "mbpp/966",
    "model": "deepseek-v3-250324",
    "generation_code": "def check(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    found_vowels = set()\n    \n    for char in s_lower:\n        if char in vowels:\n            found_vowels.add(char)\n    \n    if len(found_vowels) == len(vowels):\n        return 'accepted'\n    else:\n        return 'not accepted'",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9670": {
    "question_id": "mbpp/967",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Max(A, B, N):\n    max_val = -float('inf')\n    for x in range(0, N + 1):\n        current = (A * x) // B - A * (x // B)\n        if current > max_val:\n            max_val = current\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9671": {
    "question_id": "mbpp/967",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Max(A, B, N):\n    x = min(B - 1, N)\n    return (A * x) // B",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9672": {
    "question_id": "mbpp/967",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Max(A, B, N):\n    x = min(B, N)\n    return (A * x) // B",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9673": {
    "question_id": "mbpp/967",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Max(A, B, N):\n    max_val = -float('inf')\n    x = min(B - 1, N)\n    current = (A * x) // B - A * (x // B)\n    return current",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9674": {
    "question_id": "mbpp/967",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Max(A, B, N):\n    max_val = -float('inf')\n    for x in range(0, N + 1):\n        current = (A * x) // B - A * (x // B)\n        if current > max_val:\n            max_val = current\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9675": {
    "question_id": "mbpp/967",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Max(A, B, N):\n    x = min(B - 1, N)\n    return (A * x) // B",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9676": {
    "question_id": "mbpp/967",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Max(A, B, N):\n    max_val = -float('inf')\n    for x in range(0, N + 1):\n        current = (A * x) // B - A * (x // B)\n        if current > max_val:\n            max_val = current\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9677": {
    "question_id": "mbpp/967",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Max(A, B, N):\n    x = min(B - 1, N)\n    return (A * x) // B",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9678": {
    "question_id": "mbpp/967",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Max(A, B, N):\n    x = min(B - 1, N)\n    return (A * x) // B",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9679": {
    "question_id": "mbpp/967",
    "model": "deepseek-v3-250324",
    "generation_code": "def floor_Max(A, B, N):\n    max_val = -float('inf')\n    for x in range(0, N + 1):\n        current = (A * x) // B - A * (x // B)\n        if current > max_val:\n            max_val = current\n    return max_val",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9680": {
    "question_id": "mbpp/968",
    "model": "deepseek-v3-250324",
    "generation_code": "def join_tuples(tuples):\n    if not tuples:\n        return []\n    \n    tuples.sort()\n    result = []\n    current_key = tuples[0][0]\n    current_values = [current_key]\n    \n    for t in tuples:\n        if t[0] == current_key:\n            current_values.extend(t[1:])\n        else:\n            result.append(tuple(current_values))\n            current_key = t[0]\n            current_values = [current_key] + list(t[1:])\n    \n    if current_values:\n        result.append(tuple(current_values))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9681": {
    "question_id": "mbpp/968",
    "model": "deepseek-v3-250324",
    "generation_code": "def join_tuples(tuples):\n    if not tuples:\n        return []\n    \n    tuples.sort()\n    result = []\n    current = list(tuples[0])\n    \n    for t in tuples[1:]:\n        if t[0] == current[0]:\n            current.extend(t[1:])\n        else:\n            result.append(tuple(current))\n            current = list(t)\n    \n    result.append(tuple(current))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9682": {
    "question_id": "mbpp/968",
    "model": "deepseek-v3-250324",
    "generation_code": "def join_tuples(tuples_list):\n    if not tuples_list:\n        return []\n    \n    tuples_list.sort()\n    result = []\n    current_key = tuples_list[0][0]\n    current_values = [current_key]\n    \n    for t in tuples_list:\n        if t[0] == current_key:\n            current_values.extend(t[1:])\n        else:\n            result.append(tuple(current_values))\n            current_key = t[0]\n            current_values = [current_key] + list(t[1:])\n    \n    if current_values:\n        result.append(tuple(current_values))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9683": {
    "question_id": "mbpp/968",
    "model": "deepseek-v3-250324",
    "generation_code": "def join_tuples(tuples):\n    if not tuples:\n        return []\n    \n    grouped = {}\n    for t in tuples:\n        key = t[0]\n        if key in grouped:\n            grouped[key].extend(t[1:])\n        else:\n            grouped[key] = list(t)\n    \n    result = []\n    for key in sorted(grouped.keys()):\n        result.append(tuple(grouped[key]))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9684": {
    "question_id": "mbpp/968",
    "model": "deepseek-v3-250324",
    "generation_code": "def join_tuples(tuples_list):\n    if not tuples_list:\n        return []\n    \n    tuples_list.sort()\n    result = []\n    current_key = tuples_list[0][0]\n    current_values = [tuples_list[0][1]]\n    \n    for t in tuples_list[1:]:\n        if t[0] == current_key:\n            current_values.append(t[1])\n        else:\n            result.append((current_key,) + tuple(current_values))\n            current_key = t[0]\n            current_values = [t[1]]\n    \n    result.append((current_key,) + tuple(current_values))\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9685": {
    "question_id": "mbpp/968",
    "model": "deepseek-v3-250324",
    "generation_code": "def join_tuples(tuples):\n    if not tuples:\n        return []\n    \n    grouped = {}\n    for t in tuples:\n        key = t[0]\n        if key in grouped:\n            grouped[key].extend(t[1:])\n        else:\n            grouped[key] = list(t)\n    \n    result = []\n    for key in sorted(grouped.keys()):\n        result.append(tuple(grouped[key]))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9686": {
    "question_id": "mbpp/968",
    "model": "deepseek-v3-250324",
    "generation_code": "def join_tuples(tuples):\n    if not tuples:\n        return []\n    \n    grouped = {}\n    for t in tuples:\n        key = t[0]\n        if key in grouped:\n            grouped[key].extend(t[1:])\n        else:\n            grouped[key] = list(t)\n    \n    result = []\n    for key in sorted(grouped.keys()):\n        result.append(tuple(grouped[key]))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9687": {
    "question_id": "mbpp/968",
    "model": "deepseek-v3-250324",
    "generation_code": "def join_tuples(tuples_list):\n    if not tuples_list:\n        return []\n    \n    # Create a dictionary to group tuples by their first element\n    groups = {}\n    for t in tuples_list:\n        key = t[0]\n        if key in groups:\n            groups[key].extend(t[1:])\n        else:\n            groups[key] = list(t)\n    \n    # Convert the dictionary back to a list of tuples\n    result = [tuple(v) for v in groups.values()]\n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9688": {
    "question_id": "mbpp/968",
    "model": "deepseek-v3-250324",
    "generation_code": "def join_tuples(tuples):\n    if not tuples:\n        return []\n    \n    grouped = {}\n    for t in tuples:\n        key = t[0]\n        if key in grouped:\n            grouped[key].extend(t[1:])\n        else:\n            grouped[key] = list(t)\n    \n    result = []\n    for key in sorted(grouped.keys()):\n        result.append(tuple([key] + grouped[key]))\n    \n    return result",
    "test_output": "FAILED: expect [(5, 6, 7), (6, 8, 10), (7, 13)],in fact [(5, 5, 6, 7), (6, 6, 8, 10), (7, 7, 13)]",
    "test_result": "False"
  },
  "9689": {
    "question_id": "mbpp/968",
    "model": "deepseek-v3-250324",
    "generation_code": "def join_tuples(tuples_list):\n    if not tuples_list:\n        return []\n    \n    tuples_list.sort()\n    result = []\n    current_key = tuples_list[0][0]\n    current_tuple = [current_key]\n    \n    for t in tuples_list:\n        if t[0] == current_key:\n            current_tuple.extend(t[1:])\n        else:\n            result.append(tuple(current_tuple))\n            current_key = t[0]\n            current_tuple = [current_key]\n            current_tuple.extend(t[1:])\n    \n    if current_tuple:\n        result.append(tuple(current_tuple))\n    \n    return result",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9690": {
    "question_id": "mbpp/969",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_two(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9691": {
    "question_id": "mbpp/969",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_two(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9692": {
    "question_id": "mbpp/969",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_two(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9693": {
    "question_id": "mbpp/969",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_two(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9694": {
    "question_id": "mbpp/969",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_two(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9695": {
    "question_id": "mbpp/969",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_two(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9696": {
    "question_id": "mbpp/969",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_two(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9697": {
    "question_id": "mbpp/969",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_two(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9698": {
    "question_id": "mbpp/969",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_two(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9699": {
    "question_id": "mbpp/969",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_of_two(a, b):\n    return a if a < b else b",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9700": {
    "question_id": "mbpp/970",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_segments(n, a, b, c):\n    max_segments = -1\n    for i in range(0, n // a + 1):\n        for j in range(0, (n - i * a) // b + 1):\n            remaining = n - (i * a + j * b)\n            if remaining >= 0 and remaining % c == 0:\n                k = remaining // c\n                total = i + j + k\n                if total > max_segments:\n                    max_segments = total\n    return max_segments if max_segments != -1 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9701": {
    "question_id": "mbpp/970",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_segments(n, a, b, c):\n    max_segments = -1\n    for i in range(n // a + 1):\n        for j in range((n - i * a) // b + 1):\n            remaining = n - i * a - j * b\n            if remaining >= 0 and remaining % c == 0:\n                k = remaining // c\n                total = i + j + k\n                if total > max_segments:\n                    max_segments = total\n    return max_segments if max_segments != -1 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9702": {
    "question_id": "mbpp/970",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_segments(n, a, b, c):\n    max_segments = -1\n    for i in range(0, n // a + 1):\n        for j in range(0, (n - i * a) // b + 1):\n            remaining = n - (i * a + j * b)\n            if remaining >= 0 and remaining % c == 0:\n                k = remaining // c\n                total = i + j + k\n                if total > max_segments:\n                    max_segments = total\n    return max_segments if max_segments != -1 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9703": {
    "question_id": "mbpp/970",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_segments(n, a, b, c):\n    max_segments = -1\n    for i in range(0, n // a + 1):\n        for j in range(0, (n - i * a) // b + 1):\n            remaining = n - i * a - j * b\n            if remaining >= 0 and remaining % c == 0:\n                k = remaining // c\n                total = i + j + k\n                if total > max_segments:\n                    max_segments = total\n    return max_segments if max_segments != -1 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9704": {
    "question_id": "mbpp/970",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_segments(n, a, b, c):\n    max_segments = -1\n    for i in range(0, n // a + 1):\n        for j in range(0, (n - i * a) // b + 1):\n            remaining = n - (i * a + j * b)\n            if remaining >= 0 and remaining % c == 0:\n                k = remaining // c\n                total = i + j + k\n                if total > max_segments:\n                    max_segments = total\n    return max_segments",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9705": {
    "question_id": "mbpp/970",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_segments(n, a, b, c):\n    max_segments = -1\n    for i in range(0, n // a + 1):\n        for j in range(0, (n - i * a) // b + 1):\n            remaining = n - i * a - j * b\n            if remaining >= 0 and remaining % c == 0:\n                k = remaining // c\n                total = i + j + k\n                if total > max_segments:\n                    max_segments = total\n    return max_segments if max_segments != -1 else 0",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9706": {
    "question_id": "mbpp/970",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_segments(n, a, b, c):\n    max_segments = -1\n    for i in range(0, n // a + 1):\n        for j in range(0, (n - i * a) // b + 1):\n            remaining = n - (i * a + j * b)\n            if remaining >= 0 and remaining % c == 0:\n                k = remaining // c\n                total = i + j + k\n                if total > max_segments:\n                    max_segments = total\n    return max_segments",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9707": {
    "question_id": "mbpp/970",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_segments(n, a, b, c):\n    max_segments = -1\n    for i in range(0, n // a + 1):\n        for j in range(0, (n - i * a) // b + 1):\n            remaining = n - (i * a + j * b)\n            if remaining >= 0 and remaining % c == 0:\n                k = remaining // c\n                total = i + j + k\n                if total > max_segments:\n                    max_segments = total\n    return max_segments",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9708": {
    "question_id": "mbpp/970",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_segments(n, a, b, c):\n    max_segments = -1\n    for i in range(0, n // a + 1):\n        for j in range(0, (n - i * a) // b + 1):\n            remaining = n - (i * a + j * b)\n            if remaining >= 0 and remaining % c == 0:\n                k = remaining // c\n                total = i + j + k\n                if total > max_segments:\n                    max_segments = total\n    return max_segments",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9709": {
    "question_id": "mbpp/970",
    "model": "deepseek-v3-250324",
    "generation_code": "def maximum_segments(n, a, b, c):\n    max_segments = -1\n    for i in range(0, n // a + 1):\n        for j in range(0, (n - i * a) // b + 1):\n            remaining = n - (i * a + j * b)\n            if remaining >= 0 and remaining % c == 0:\n                k = remaining // c\n                total = i + j + k\n                if total > max_segments:\n                    max_segments = total\n    return max_segments",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9710": {
    "question_id": "mbpp/971",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_nested(tuple1, tuple2):\n    return tuple1 + tuple2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9711": {
    "question_id": "mbpp/971",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_nested(tuple1, tuple2):\n    return tuple1 + tuple2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9712": {
    "question_id": "mbpp/971",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_nested(tuple1, tuple2):\n    return tuple1 + tuple2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9713": {
    "question_id": "mbpp/971",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_nested(tuple1, tuple2):\n    return tuple1 + tuple2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9714": {
    "question_id": "mbpp/971",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_nested(tuple1, tuple2):\n    return tuple1 + tuple2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9715": {
    "question_id": "mbpp/971",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_nested(tuple1, tuple2):\n    return tuple1 + tuple2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9716": {
    "question_id": "mbpp/971",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_nested(tuple1, tuple2):\n    return tuple1 + tuple2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9717": {
    "question_id": "mbpp/971",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_nested(tuple1, tuple2):\n    return tuple1 + tuple2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9718": {
    "question_id": "mbpp/971",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_nested(tuple1, tuple2):\n    return tuple1 + tuple2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9719": {
    "question_id": "mbpp/971",
    "model": "deepseek-v3-250324",
    "generation_code": "def concatenate_nested(tuple1, tuple2):\n    return tuple1 + tuple2",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9720": {
    "question_id": "mbpp/972",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_rotate(s, n):\n    if not s:\n        return s\n    n = n % len(s)\n    return s[n:] + s[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9721": {
    "question_id": "mbpp/972",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_rotate(s, n):\n    if not s:\n        return s\n    n = n % len(s)\n    return s[n:] + s[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9722": {
    "question_id": "mbpp/972",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_rotate(s, n):\n    if not s:\n        return s\n    n = n % len(s)\n    return s[n:] + s[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9723": {
    "question_id": "mbpp/972",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_rotate(s, n):\n    if not s:\n        return s\n    n = n % len(s)\n    return s[n:] + s[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9724": {
    "question_id": "mbpp/972",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_rotate(s, n):\n    if not s:\n        return s\n    n = n % len(s)\n    return s[n:] + s[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9725": {
    "question_id": "mbpp/972",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_rotate(s, n):\n    if not s:\n        return s\n    n = n % len(s) if len(s) != 0 else 0\n    return s[n:] + s[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9726": {
    "question_id": "mbpp/972",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_rotate(s, n):\n    if not s:\n        return s\n    n = n % len(s) if len(s) != 0 else 0\n    return s[n:] + s[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9727": {
    "question_id": "mbpp/972",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_rotate(s, n):\n    if not s:\n        return s\n    n = n % len(s)\n    return s[n:] + s[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9728": {
    "question_id": "mbpp/972",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_rotate(s, n):\n    if not s:\n        return s\n    n = n % len(s) if len(s) != 0 else 0\n    return s[n:] + s[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9729": {
    "question_id": "mbpp/972",
    "model": "deepseek-v3-250324",
    "generation_code": "def left_rotate(s, n):\n    if not s:\n        return s\n    n = n % len(s) if len(s) != 0 else 0\n    return s[n:] + s[:n]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9730": {
    "question_id": "mbpp/973",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_sum_path(triangle):\n    if not triangle:\n        return 0\n    dp = triangle[-1].copy()\n    for i in range(len(triangle)-2, -1, -1):\n        for j in range(len(triangle[i])):\n            dp[j] = triangle[i][j] + min(dp[j], dp[j+1])\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9731": {
    "question_id": "mbpp/973",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_sum_path(triangle):\n    if not triangle:\n        return 0\n    \n    for i in range(len(triangle)-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])\n    \n    return triangle[0][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9732": {
    "question_id": "mbpp/973",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_sum_path(triangle):\n    if not triangle:\n        return 0\n    for i in range(len(triangle)-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9733": {
    "question_id": "mbpp/973",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_sum_path(triangle):\n    if not triangle:\n        return 0\n    dp = triangle[-1].copy()\n    for i in range(len(triangle)-2, -1, -1):\n        for j in range(len(triangle[i])):\n            dp[j] = triangle[i][j] + min(dp[j], dp[j+1])\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9734": {
    "question_id": "mbpp/973",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_sum_path(triangle):\n    if not triangle:\n        return 0\n    dp = triangle[-1].copy()\n    for i in range(len(triangle)-2, -1, -1):\n        for j in range(len(triangle[i])):\n            dp[j] = triangle[i][j] + min(dp[j], dp[j+1])\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9735": {
    "question_id": "mbpp/973",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_sum_path(triangle):\n    if not triangle:\n        return 0\n    for i in range(len(triangle)-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9736": {
    "question_id": "mbpp/973",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_sum_path(triangle):\n    if not triangle:\n        return 0\n    n = len(triangle)\n    dp = triangle[-1].copy()\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            dp[j] = triangle[i][j] + min(dp[j], dp[j+1])\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9737": {
    "question_id": "mbpp/973",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_sum_path(triangle):\n    if not triangle:\n        return 0\n    for i in range(len(triangle)-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9738": {
    "question_id": "mbpp/973",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_sum_path(triangle):\n    if not triangle:\n        return 0\n    n = len(triangle)\n    dp = triangle[-1].copy()\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            dp[j] = triangle[i][j] + min(dp[j], dp[j+1])\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  },
  "9739": {
    "question_id": "mbpp/973",
    "model": "deepseek-v3-250324",
    "generation_code": "def min_sum_path(triangle):\n    if not triangle:\n        return 0\n    n = len(triangle)\n    dp = triangle[-1].copy()\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            dp[j] = triangle[i][j] + min(dp[j], dp[j+1])\n    return dp[0]",
    "test_output": "PASSED",
    "test_result": "True"
  }
}